--------------------------------------------------------------------------------
--  ПРОШИВКА ПЛИС ДЛЯ УСТРОЙСТВА: "Z Controller"                              --                        
--  ВЕРСИЯ:                                                 ДАТА:             --
--  АВТОР:   fomonster                                                        --
--                                                                            --
--  ПЛИС: EPM7128SLC84-15                                                     --
--------------------------------------------------------------------------------

library IEEE;
library altera; 
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use altera.altera_primitives_components.all;

entity zcontroller is
port
(

--------------------------------------------------------------------------------
--                    ВХОДНЫЕ СИГНАЛЫ ПЛИС СО СПЕКТРУМА                       --
--------------------------------------------------------------------------------

-- шина адреса

A        : in std_logic_vector(15 downto 0) := "0000000000000000";

-- управляющие сигналы процессора Z80

IORQ	 : in std_logic := '1';  -- Трехстабильный выход. Активный уровень - низкий. Сигнал /IORQ указывает, что
								 -- пика адреса содержит адрес внешнего устройства для операции ввода или вывода. Кроме
								 -- того, сигнал IORQ генерируется также совместно с сигналом /M1 в цикле подтверждения
								 -- прерывания. Тем самым устройству, запросившему прерывание, указывается, что вектор
								 -- прерывания может быть помещен на шину данных.

RD	 	 : in std_logic := '1';  -- Трехстабильный выход. Активный уровень - низкий. Сигнал /RD указывает, что ЦП
								 -- выполняет цикл чтения данных из памяти или устройства ввода-вывода. Адресованное
								 -- устройство ввода-вывода или память должны использовать этот сигнал для стробирования
								 -- подачи данных на шину данных.

WR	 	 : in std_logic := '1';  -- Трехстабильный выход. Активный уровень - низкий. Сигнал /WR указывает, что
								 -- процессор выдает на ШД данные, предназначенные для записи в адресованную ячейку
								 -- памяти или устройство вывода.

M1	 	 : in std_logic := '1';  -- Трёхстабильный выход. Активный уровень - низкий. /M1 указывает, что в текущей
								 -- машинном цикле происходит чтение кода операции из памяти. При считывании кода
								 
-- управляющие сигналы ZX BUS
								 
DOS		 : in std_logic := '1';  -- сигнал, показывающий, какая из половин  внутреннего  ПЗУ  выбрана  в данный  момент. 
								 -- Если DOS/  = лог. 0, то выбрано ПЗУ Monitor или TR - DOS, 
								 -- если DOS/ - лог. 1, то выбрано ПЗУ Basic  128 или Basic 48.

IORQGE	 : inout std_logic := 'Z';  -- IRQGE on all ZX Spectrum models can disable only ula port #FE but all other port is always enable.
								 -- сигнал, вырабатываемый периферийным устройством для блокировки обращения к портам ввода/вывода, 
								 -- расположенным на плате. На этом входе должен быть выставлен уровень лог. 1 тогда, когда выбрано 
								 -- одно из внешних устройств. Во всех других случаях этот вход должен быть отключен от внешних схем. 
								 -- Примерный вариант схемотехнического решения данной задачи приведен на рис. 17. 
								 -- На плате этот сигнал формируется из IORQ/ (как показано на рис. 18).

--------------------------------------------------------------------------------
--                     ВХОДНЫЕ СИГНАЛЫ ПЛИС КЛАВИАТУРА                        --
--------------------------------------------------------------------------------

PB        : in std_logic_vector(7 downto 0) := "00000000";
STROBE	  : in std_logic := '0';  
RESTRIG	  : in std_logic := '0';  

--------------------------------------------------------------------------------
--                     ВХОДНЫЕ СИГНАЛЫ ПЛИС NEMO IDE                          --
--------------------------------------------------------------------------------

WRH	  : out std_logic := '0';  
IOW	  : out std_logic := '1';
RDH	  : out std_logic := '1';
IOR	  : out std_logic := '0';  
EBL	  : out std_logic := '1';

--------------------------------------------------------------------------------
--                     ВХОДНЫЕ СИГНАЛЫ ПЛИС SD КАРТА                          --
--------------------------------------------------------------------------------

SDTAKT		 : in std_logic := '0';  -- тактовый генератор для SD карты
SDDET		 : in std_logic := '0';  -- детектор SD
SDRO		 : in std_logic := '0';  -- сигнал только чтение
SDIN		 : in std_logic := '0';  -- 
SDCS		 : in std_logic := '0';  -- 
SDEN		 : out std_logic := '1';  -- питание SD карты (включено, когда 0)
SDDO		 : out std_logic := '0';  -- 
SC			 : out std_logic := '0';  -- 

--------------------------------------------------------------------------------
--                     ВЫХОДНЫЕ СИГНАЛЫ ПЛИС К СПЕКТРУМУ
--------------------------------------------------------------------------------

-- шина данных

D          : inout std_logic_vector(7 downto 0) := "ZZZZZZZZ";

-- другие

RES 	: in std_logic := '1'; -- Сброс. Вход. Активный уровень - низкий. Сигнал /RESET имеет самый высокий приоритет
								-- и приводит ЦП в начальное состояние:
								--  - сброс счетчика команд PC=0000H;
								--  - сброс триггера разрешения прерываний
								--  - очистка регистров I и R;
								--  - установка режима прерываний IM0.
								-- Для корректного сброса сигнал /RESET должен быть активен не менее 3-х периодов
								-- тактовой частоты. В это время адресная шина и шина данных находятся в высокоомном
								-- состоянии, а все выходы сигналов управления неактивны.

NMI 	: in std_logic := '1';  -- Немаскируемый запрос прерывания
								-- Вход, запускаемый отрицательным фронтом. Фронт запуска активизирует
								-- внутренний триггер NMI. Линия /NMI имеет более высокий приоритет, чем /INT и всегда
								-- распознается в конце выполнения текущей команды, независимо от состояния триггера
								-- разрешения прерываний. /NMI автоматически производит перезапуск (рестарт) ЦП с адрес
								-- 66H. Содержимое счётчика команд (адрес возврата) автоматически сохраняется во внешнем
								-- стеке. Т. о. пользователь может возвратиться к прерванной программе.				

-- другое

IO0 : out std_logic := '0';
IO1 : out std_logic := '0';
IO2 : out std_logic := '0';
IO3 : out std_logic := '0';
IO4 : out std_logic := '0';
IO5 : out std_logic := '0';
IO6 : out std_logic := '0';
IO7 : out std_logic := '0';
IO3D : in std_logic := '0' -- дубликат

);
end zcontroller;

architecture RTL of zcontroller is

--------------------------------------------------------------------------------
--                       ВНУТРЕННИЕ СИГНАЛЫ ПЛИС                              --
--------------------------------------------------------------------------------

signal port_read: std_logic := '0';

signal port_write: std_logic := '0';

signal count   : STD_LOGIC_VECTOR (7 downto 0) := X"00";

signal countA   : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

-- матрица клавиатуры

signal sdbuffer : STD_LOGIC_VECTOR (7 downto 0) := X"00";
--------------------------------------------------------------------------------
--                            ПРОЦЕССЫ                                        --
--------------------------------------------------------------------------------

begin

-- ПОРТ КЛАВИАТУРЫ #FE (254) "11111110"
--  чтение
--   D0-D4 - отображают состояние определённого полуряда клавиатуры ZX Spectrum. 
--      младший байт всегда равен #FE (254), а в старшем сбрасывается соответствующий бит.
--		#7FFE - полуряд Space...B "01111111" 
--		#BFFE - полуряд Enter...H "10111111"
--		#DFFE - полуряд P...Y     "11011111"
--		#EFFE - полуряд 0...6     "11101111"
--		#F7FE - полуряд 1...5     "11110111"
--		#FBFE - полуряд Q...T     "11111011"
--		#FDFE - полуряд A...G     "11111101" 
--		#FEFE - полуряд CS...V    "11111110" 
--      Возможно одновременное чтение нескольких полурядов при сбросе нескольких бит в старшем байте адреса порта.
--   D6 - отображает состояние магнитофонного входа (EAR).
--   D5, D7 - обычно не используются. 
--  запись
--   D0-D2 - определяют цвет бордюра.
--   D3 - управляет состоянием выхода записи на магнитофон MIC.
--   D4 - управляет внутренним динамиком (бипером).
--   D5-D7 - обычно не используются.

--Выборка порта происходит при a1,a2,a5,DOS/=1;IORQGE=0
--process ( IORQ )
--begin
	
	--if A(7 DOWNTO 0) = "11111110" THEN
		
		
	  
	  
	--end if;
	
--end process;

-- ПОРТ МЫШКИ
--		#FADF — порт кнопок и (по отечественному стандарту) колёсика. "1111101011011111"
--			D0: левая кнопка (0=нажата)
--			D1: правая кнопка (0=нажата)
--			D2: средняя кнопка (0=нажата)
--			D3: зарезервировано под ещё одну кнопку (0=нажата)
--			D4-D7: координата колёсика
--		#FBDF — X-координата (растёт слева направо) "1111101111011111"
--		#FFDF — Y-координата (растёт снизу вверх)   "1111111111011111"

	--process ( SDTAKT )
	--begin
	--	if ( rising_edge(SDTAKT ) ) then
	--		countA <= countA + '1';
	--		if countA(24) = '1' then
	--			count <= count + '1';
	--		end if;
	--	end if;
			
		--if ( IORQ = '0' and RD = '0' ) then
			
			--count <= count + '1';
			
			--case A is
			--	when X"FBDF" => D <= count;
			--	when others => D <= "ZZZZZZZZ";			
			--end case;
		--else 
		--	D <= "ZZZZZZZZ";
		--end if;

	--end process;

	-- debug
	SDEN <= PB(1);
	
	-- 
	
	--port_read <= '1' when IORQ = '0' and RD = '0' and M1 = '1' and DOS = '1' and IORQGE = '0' else '0'; 
	
	--port_write <= '1' when IORQ = '0' and RD = '0' and M1 = '1' and DOS = '1' and IORQGE = '0' else '0'; 
	
	-- keyboard
	
	--IORQGE <= '1' when port_access = '1' and A(7 downto 0) = X"FE" else 'Z';
	
	
	--D(7 downto 0) <= "ZZZ11111" when port_access = '1' and A(15 downto 0) = X"7FFE" else -- #7FFE
	--				 "ZZZ11111" when port_access = '1' and A(15 downto 0) = X"BFFE" else -- #BFFE
	--				 "ZZZ11111" when port_access = '1' and A(15 downto 0) = X"DFFE" else -- #DFFE
	--				 "ZZZ1111" & count(0) when port_access = '1' and A(15 downto 0) = X"EFFE" else -- #EFFE
	--				 "ZZZ11111" when port_access = '1' and A(15 downto 0) = X"F7FE" else -- #F7FE
	--				 "ZZZ11111" when port_access = '1' and A(15 downto 0) = X"FBFE" else -- #FBFE
	--				 "ZZZ11111" when port_access = '1' and A(15 downto 0) = X"FDFE" else -- #FDFE
	--				 "ZZZ11111" when port_access = '1' and A(15 downto 0) = X"FEFE" else -- #FEFE	
	--				 "ZZZ1111" & count(0) when port_access = '1' and A(7 downto 0) = X"FE" else -- #FE
	--				 "ZZZZZZZZ";
	
	
	-- mouse
	
	

	-- nemo ide
	
	
	
	-- sd card
	
	
	
end RTL;

