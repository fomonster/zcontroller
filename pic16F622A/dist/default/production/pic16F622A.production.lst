

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Sep 28 18:57:25 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16C622A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.00
    25                           ; Generated 27/05/2018 GMT
    26                           ; 
    27                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16C622A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  001F                     	;# 
    69  0081                     	;# 
    70  0085                     	;# 
    71  0086                     	;# 
    72  008C                     	;# 
    73  008E                     	;# 
    74  009F                     	;# 
    75                           
    76                           	psect	idataBANK0
    77  046D                     __pidataBANK0:	
    78                           
    79                           ;initializer for _outPorts
    80  046D  3400               	retlw	0
    81  046E  3400               	retlw	0
    82  046F  3400               	retlw	0
    83  0470  3400               	retlw	0
    84  0471  3400               	retlw	0
    85  0472  3400               	retlw	0
    86  0473  3400               	retlw	0
    87  0474  3400               	retlw	0
    88  0475  3407               	retlw	7
    89  0476  34F5               	retlw	245
    90  0477  34DA               	retlw	218
    91                           
    92                           	psect	strings
    93  0200                     __pstrings:	
    94  0200                     stringtab:	
    95  0200                     __stringtab:	
    96  0200                     stringcode:	
    97                           ;	String table - string pointers are 1 byte each
    98                           
    99  0200                     stringdir:	
   100  0200  3002               	movlw	high stringdir
   101  0201  008A               	movwf	10
   102  0202  0804               	movf	4,w
   103  0203  0A84               	incf	4,f
   104  0204  0782               	addwf	2,f
   105  0205                     __stringbase:	
   106  0205  3400               	retlw	0
   107  0206                     __end_of__stringtab:	
   108  0206                     _codeToMatrix:	
   109  0206  34FF               	retlw	255
   110  0207  34FF               	retlw	255
   111  0208  34FF               	retlw	255
   112  0209  34FF               	retlw	255
   113  020A  34FF               	retlw	255
   114  020B  34FF               	retlw	255
   115  020C  34FF               	retlw	255
   116  020D  34FF               	retlw	255
   117  020E  34FF               	retlw	255
   118  020F  34FF               	retlw	255
   119  0210  34FF               	retlw	255
   120  0211  34FF               	retlw	255
   121  0212  34FF               	retlw	255
   122  0213  34FF               	retlw	255
   123  0214  349C               	retlw	156
   124  0215  34FF               	retlw	255
   125  0216  34FF               	retlw	255
   126  0217  34FF               	retlw	255
   127  0218  34FF               	retlw	255
   128  0219  34FF               	retlw	255
   129  021A  34FF               	retlw	255
   130  021B  3402               	retlw	2
   131  021C  3403               	retlw	3
   132  021D  34FF               	retlw	255
   133  021E  34FF               	retlw	255
   134  021F  34FF               	retlw	255
   135  0220  3408               	retlw	8
   136  0221  3409               	retlw	9
   137  0222  3401               	retlw	1
   138  0223  340A               	retlw	10
   139  0224  340B               	retlw	11
   140  0225  34D6               	retlw	214
   141  0226  34FF               	retlw	255
   142  0227  3418               	retlw	24
   143  0228  3410               	retlw	16
   144  0229  3411               	retlw	17
   145  022A  3412               	retlw	18
   146  022B  341B               	retlw	27
   147  022C  3413               	retlw	19
   148  022D  34FF               	retlw	255
   149  022E  345C               	retlw	92
   150  022F  3407               	retlw	7
   151  0230  3420               	retlw	32
   152  0231  3419               	retlw	25
   153  0232  3422               	retlw	34
   154  0233  341A               	retlw	26
   155  0234  3423               	retlw	35
   156  0235  3463               	retlw	99
   157  0236  3464               	retlw	100
   158  0237  341F               	retlw	31
   159  0238  3427               	retlw	39
   160  0239  3426               	retlw	38
   161  023A  3421               	retlw	33
   162  023B  3425               	retlw	37
   163  023C  3424               	retlw	36
   164  023D  3454               	retlw	84
   165  023E  34A0               	retlw	160
   166  023F  3406               	retlw	6
   167  0240  3417               	retlw	23
   168  0241  341E               	retlw	30
   169  0242  341D               	retlw	29
   170  0243  341C               	retlw	28
   171  0244  3414               	retlw	20
   172  0245  34FF               	retlw	255
   173  0246  34FF               	retlw	255
   174  0247  349F               	retlw	159
   175  0248  3416               	retlw	22
   176  0249  3415               	retlw	21
   177  024A  340D               	retlw	13
   178  024B  3404               	retlw	4
   179  024C  340C               	retlw	12
   180  024D  34FF               	retlw	255
   181  024E  34C1               	retlw	193
   182  024F  3497               	retlw	151
   183  0250  34A0               	retlw	160
   184  0251  340E               	retlw	14
   185  0252  348D               	retlw	141
   186  0253  3405               	retlw	5
   187  0254  349E               	retlw	158
   188  0255  3483               	retlw	131
   189  0256  348B               	retlw	139
   190  0257  3493               	retlw	147
   191  0258  349C               	retlw	156
   192  0259  349B               	retlw	155
   193  025A  34E5               	retlw	229
   194  025B  348E               	retlw	142
   195  025C  34A3               	retlw	163
   196  025D  34A6               	retlw	166
   197  025E  344B               	retlw	75
   198  025F  34FF               	retlw	255
   199  0260  3406               	retlw	6
   200  0261  34DD               	retlw	221
   201  0262  34A4               	retlw	164
   202  0263  34D1               	retlw	209
   203  0264  34A7               	retlw	167
   204  0265  3494               	retlw	148
   205  0266  348C               	retlw	140
   206  0267  3484               	retlw	132
   207  0268  3496               	retlw	150
   208  0269  34C9               	retlw	201
   209  026A  34D9               	retlw	217
   210  026B  34E1               	retlw	225
   211  026C  3444               	retlw	68
   212  026D  3488               	retlw	136
   213  026E  3485               	retlw	133
   214  026F  3403               	retlw	3
   215  0270  349A               	retlw	154
   216  0271  341B               	retlw	27
   217  0272  341C               	retlw	28
   218  0273  34A2               	retlw	162
   219  0274  3498               	retlw	152
   220  0275  34C0               	retlw	192
   221  0276  3404               	retlw	4
   222  0277  3497               	retlw	151
   223  0278  340B               	retlw	11
   224  0279  3423               	retlw	35
   225  027A  3424               	retlw	36
   226  027B  3414               	retlw	20
   227  027C  3443               	retlw	67
   228  027D  34FF               	retlw	255
   229  027E  34FF               	retlw	255
   230  027F  3496               	retlw	150
   231  0280  3413               	retlw	19
   232  0281  349E               	retlw	158
   233  0282  34A7               	retlw	167
   234  0283  340C               	retlw	12
   235  0284  34FF               	retlw	255
   236  0285  34FF               	retlw	255
   237  0286                     __end_of_codeToMatrix:	
   238  0286                     _replaceOnShiftKeyDown:	
   239  0286  3416               	retlw	22
   240  0287  344F               	retlw	79
   241  0288  341E               	retlw	30
   242  0289  3450               	retlw	80
   243  028A  3426               	retlw	38
   244  028B  3451               	retlw	81
   245  028C  3425               	retlw	37
   246  028D  3453               	retlw	83
   247  028E  342E               	retlw	46
   248  028F  3456               	retlw	86
   249  0290  3436               	retlw	54
   250  0291  3457               	retlw	87
   251  0292  343D               	retlw	61
   252  0293  345C               	retlw	92
   253  0294  343E               	retlw	62
   254  0295  345E               	retlw	94
   255  0296  3446               	retlw	70
   256  0297  345F               	retlw	95
   257  0298  3445               	retlw	69
   258  0299  3460               	retlw	96
   259  029A  344E               	retlw	78
   260  029B  3461               	retlw	97
   261  029C  3455               	retlw	85
   262  029D  3462               	retlw	98
   263  029E  345D               	retlw	93
   264  029F  3463               	retlw	99
   265  02A0  344C               	retlw	76
   266  02A1  3467               	retlw	103
   267  02A2  3452               	retlw	82
   268  02A3  3468               	retlw	104
   269  02A4  3441               	retlw	65
   270  02A5  346A               	retlw	106
   271  02A6  3449               	retlw	73
   272  02A7  346D               	retlw	109
   273  02A8  344A               	retlw	74
   274  02A9  346E               	retlw	110
   275  02AA  340E               	retlw	14
   276  02AB  3448               	retlw	72
   277  02AC  3454               	retlw	84
   278  02AD  3464               	retlw	100
   279  02AE  345B               	retlw	91
   280  02AF  3465               	retlw	101
   281  02B0                     __end_of_replaceOnShiftKeyDown:	
   282  02B0                     _replaceTwoBytesCodes:	
   283  02B0  3411               	retlw	17
   284  02B1  3408               	retlw	8
   285  02B2  3414               	retlw	20
   286  02B3  3413               	retlw	19
   287  02B4  3470               	retlw	112
   288  02B5  3417               	retlw	23
   289  02B6  346C               	retlw	108
   290  02B7  3418               	retlw	24
   291  02B8  347D               	retlw	125
   292  02B9  3419               	retlw	25
   293  02BA  3471               	retlw	113
   294  02BB  341F               	retlw	31
   295  02BC  3469               	retlw	105
   296  02BD  3420               	retlw	32
   297  02BE  347A               	retlw	122
   298  02BF  3427               	retlw	39
   299  02C0  3475               	retlw	117
   300  02C1  3428               	retlw	40
   301  02C2  346B               	retlw	107
   302  02C3  342F               	retlw	47
   303  02C4  3472               	retlw	114
   304  02C5  3430               	retlw	48
   305  02C6  3474               	retlw	116
   306  02C7  3437               	retlw	55
   307  02C8  344A               	retlw	74
   308  02C9  3438               	retlw	56
   309  02CA  345A               	retlw	90
   310  02CB  3439               	retlw	57
   311  02CC                     __end_of_replaceTwoBytesCodes:	
   312  02CC                     _replaceOnDelayKeyDown:	
   313  02CC  341F               	retlw	31
   314  02CD  3454               	retlw	84
   315  02CE  345B               	retlw	91
   316  02CF  3463               	retlw	99
   317  02D0  3464               	retlw	100
   318  02D1  3465               	retlw	101
   319  02D2  3448               	retlw	72
   320  02D3  345D               	retlw	93
   321  02D4                     __end_of_replaceOnDelayKeyDown:	
   322  02D4                     _importantKeys:	
   323  02D4  3412               	retlw	18
   324  02D5  3459               	retlw	89
   325  02D6  3414               	retlw	20
   326  02D7  3413               	retlw	19
   327  02D8  3411               	retlw	17
   328  02D9  3408               	retlw	8
   329  02DA                     __end_of_importantKeys:	
   330  02DA                     _kempstonMouseKeys:	
   331  02DA  346B               	retlw	107
   332  02DB  3474               	retlw	116
   333  02DC  3475               	retlw	117
   334  02DD  3472               	retlw	114
   335  02DE  3473               	retlw	115
   336  02DF  3404               	retlw	4
   337  02E0                     __end_of_kempstonMouseKeys:	
   338                           
   339                           	psect	nvBANK0
   340  0049                     __pnvBANK0:	
   341  0049                     _ps2Down:	
   342  0049                     	ds	1
   343  0005                     _PORTA	set	5
   344  0006                     _PORTB	set	6
   345  0005                     _PORTAbits	set	5
   346  0001                     _TMR0	set	1
   347  0029                     _RA1	set	41
   348  002A                     _RA2	set	42
   349  005F                     _GIE	set	95
   350  005A                     _T0IF	set	90
   351  005D                     _T0IE	set	93
   352  0086                     _TRISB	set	134
   353  040B                     _PSA	set	1035
   354  040C                     _T0SE	set	1036
   355  040D                     _T0CS	set	1037
   356  042B                     _TRISA3	set	1067
   357  042C                     _TRISA4	set	1068
   358  0428                     _TRISA0	set	1064
   359  042A                     _TRISA2	set	1066
   360  0429                     _TRISA1	set	1065
   361                           
   362                           	psect	cinit
   363  0010                     start_initialization:	
   364                           ; #config settings
   365                           
   366  0010                     __initialization:	
   367                           
   368                           ; Initialize objects allocated to BANK0
   369  0010  246D               	fcall	__pidataBANK0	;fetch initializer
   370  0011  00BE               	movwf	__pdataBANK0& (0+127)
   371  0012  246E               	fcall	__pidataBANK0+1	;fetch initializer
   372  0013  00BF               	movwf	(__pdataBANK0+1)& (0+127)
   373  0014  246F               	fcall	__pidataBANK0+2	;fetch initializer
   374  0015  00C0               	movwf	(__pdataBANK0+2)& (0+127)
   375  0016  2470               	fcall	__pidataBANK0+3	;fetch initializer
   376  0017  00C1               	movwf	(__pdataBANK0+3)& (0+127)
   377  0018  2471               	fcall	__pidataBANK0+4	;fetch initializer
   378  0019  00C2               	movwf	(__pdataBANK0+4)& (0+127)
   379  001A  2472               	fcall	__pidataBANK0+5	;fetch initializer
   380  001B  00C3               	movwf	(__pdataBANK0+5)& (0+127)
   381  001C  2473               	fcall	__pidataBANK0+6	;fetch initializer
   382  001D  00C4               	movwf	(__pdataBANK0+6)& (0+127)
   383  001E  2474               	fcall	__pidataBANK0+7	;fetch initializer
   384  001F  00C5               	movwf	(__pdataBANK0+7)& (0+127)
   385  0020  2475               	fcall	__pidataBANK0+8	;fetch initializer
   386  0021  00C6               	movwf	(__pdataBANK0+8)& (0+127)
   387  0022  2476               	fcall	__pidataBANK0+9	;fetch initializer
   388  0023  00C7               	movwf	(__pdataBANK0+9)& (0+127)
   389  0024  2477               	fcall	__pidataBANK0+10	;fetch initializer
   390  0025  00C8               	movwf	(__pdataBANK0+10)& (0+127)
   391                           
   392                           ; Clear objects allocated to BANK0
   393  0026  1383               	bcf	3,7	;select IRP bank0
   394  0027  3032               	movlw	low __pbssBANK0
   395  0028  0084               	movwf	4
   396  0029  303E               	movlw	low (__pbssBANK0+12)
   397  002A  2478               	fcall	clear_ram0
   398                           
   399                           ; Clear objects allocated to COMMON
   400  002B  3079               	movlw	low __pbssCOMMON
   401  002C  0084               	movwf	4
   402  002D  307D               	movlw	low (__pbssCOMMON+4)
   403  002E  2478               	fcall	clear_ram0
   404  002F                     end_of_initialization:	
   405                           ;End of C runtime variable initialization code
   406                           
   407  002F                     __end_of__initialization:	
   408  002F  0183               	clrf	3
   409  0030  2831               	ljmp	_main	;jump to C main() function
   410                           
   411                           	psect	bssCOMMON
   412  0079                     __pbssCOMMON:	
   413  0079                     _ps2NeedEncode:	
   414  0079                     	ds	1
   415  007A                     _ps2BitsCount:	
   416  007A                     	ds	1
   417  007B                     _ps2Bits:	
   418  007B                     	ds	1
   419  007C                     _ps2DataState:	
   420  007C                     	ds	1
   421                           
   422                           	psect	bssBANK0
   423  0032                     __pbssBANK0:	
   424  0032                     _kempstonMouseEmulatorDelay:	
   425  0032                     	ds	2
   426  0034                     _delay:	
   427  0034                     	ds	2
   428  0036                     _delayedKey:	
   429  0036                     	ds	1
   430  0037                     _replaced:	
   431  0037                     	ds	1
   432  0038                     _numLock:	
   433  0038                     	ds	1
   434  0039                     _ps2WaitCode:	
   435  0039                     	ds	1
   436  003A                     _ps2Device:	
   437  003A                     	ds	1
   438  003B                     _ps2Data:	
   439  003B                     	ds	1
   440  003C                     _kempstonMouseEmulatorKeys:	
   441  003C                     	ds	1
   442  003D                     _shift_ctrl_alt:	
   443  003D                     	ds	1
   444                           
   445                           	psect	dataBANK0
   446  003E                     __pdataBANK0:	
   447  003E                     _outPorts:	
   448  003E                     	ds	11
   449                           
   450                           	psect	clrtext
   451  0478                     clear_ram0:	
   452                           ;	Called with FSR containing the base address, and
   453                           ;	W with the last address+1
   454                           
   455  0478  0064               	clrwdt	;clear the watchdog before getting into this loop
   456  0479                     clrloop0:	
   457  0479  0180               	clrf	0	;clear RAM location pointed to by FSR
   458  047A  0A84               	incf	4,f	;increment pointer
   459  047B  0604               	xorwf	4,w	;XOR with final address
   460  047C  1903               	btfsc	3,2	;have we reached the end yet?
   461  047D  3400               	retlw	0	;all done for this memory range, return
   462  047E  0604               	xorwf	4,w	;XOR again to restore value
   463  047F  2C79               	goto	clrloop0	;do the next byte
   464                           
   465                           	psect	cstackCOMMON
   466  0070                     __pcstackCOMMON:	
   467  0070                     ?_myIsr:	
   468  0070                     ??_myIsr:	
   469                           ; 1 bytes @ 0x0
   470                           
   471  0070                     ?_myDelay:	
   472                           ; 1 bytes @ 0x0
   473                           
   474  0070                     ?_sendDataToAltera:	
   475                           ; 1 bytes @ 0x0
   476                           
   477  0070                     ?_main:	
   478                           ; 1 bytes @ 0x0
   479                           
   480                           
   481                           ; 1 bytes @ 0x0
   482  0070                     	ds	6
   483  0076                     _myIsr$87:	
   484                           
   485                           ; 2 bytes @ 0x6
   486  0076                     	ds	2
   487  0078                     myIsr@i:	
   488                           
   489                           ; 1 bytes @ 0x8
   490  0078                     	ds	1
   491                           
   492                           	psect	cstackBANK0
   493  0020                     __pcstackBANK0:	
   494  0020                     ?_updatePort:	
   495  0020                     ??_myDelay:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0020                     ??_sendDataToAltera:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0020                     ?_calculateBitsFromTable:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0020                     updatePort@set:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0020                     calculateBitsFromTable@table:	
   508                           ; 1 bytes @ 0x0
   509                           
   510                           
   511                           ; 1 bytes @ 0x0
   512  0020                     	ds	1
   513  0021                     ??_updatePort:	
   514  0021                     calculateBitsFromTable@count:	
   515                           ; 1 bytes @ 0x1
   516                           
   517                           
   518                           ; 1 bytes @ 0x1
   519  0021                     	ds	1
   520  0022                     calculateBitsFromTable@clearIfFound:	
   521  0022                     _sendDataToAltera$104:	
   522                           ; 1 bytes @ 0x2
   523                           
   524                           
   525                           ; 2 bytes @ 0x2
   526  0022                     	ds	1
   527  0023                     ??_calculateBitsFromTable:	
   528                           
   529                           ; 1 bytes @ 0x3
   530  0023                     	ds	1
   531  0024                     updatePort@a:	
   532  0024                     sendDataToAltera@i:	
   533                           ; 1 bytes @ 0x4
   534                           
   535                           
   536                           ; 1 bytes @ 0x4
   537  0024                     	ds	1
   538  0025                     updatePort@bit_id:	
   539  0025                     calculateBitsFromTable@bits:	
   540                           ; 1 bytes @ 0x5
   541                           
   542                           
   543                           ; 1 bytes @ 0x5
   544  0025                     	ds	1
   545  0026                     ?_updateKey:	
   546  0026                     updateKey@set:	
   547                           ; 1 bytes @ 0x6
   548                           
   549  0026                     calculateBitsFromTable@i:	
   550                           ; 1 bytes @ 0x6
   551                           
   552                           
   553                           ; 1 bytes @ 0x6
   554  0026                     	ds	1
   555  0027                     ??_updateKey:	
   556                           
   557                           ; 1 bytes @ 0x7
   558  0027                     	ds	1
   559  0028                     updateKey@localShift:	
   560                           
   561                           ; 1 bytes @ 0x8
   562  0028                     	ds	1
   563  0029                     _updateKey$97:	
   564                           
   565                           ; 1 bytes @ 0x9
   566  0029                     	ds	1
   567  002A                     updateKey@localCtrl:	
   568                           
   569                           ; 1 bytes @ 0xA
   570  002A                     	ds	1
   571  002B                     updateKey@key:	
   572                           
   573                           ; 1 bytes @ 0xB
   574  002B                     	ds	1
   575  002C                     updateKey@code:	
   576                           
   577                           ; 1 bytes @ 0xC
   578  002C                     	ds	1
   579  002D                     ??_main:	
   580                           
   581                           ; 1 bytes @ 0xD
   582  002D                     	ds	3
   583  0030                     main@i_118:	
   584                           
   585                           ; 1 bytes @ 0x10
   586  0030                     	ds	1
   587  0031                     main@i:	
   588                           
   589                           ; 1 bytes @ 0x11
   590  0031                     	ds	1
   591                           
   592                           	psect	maintext
   593  0031                     __pmaintext:	
   594 ;;
   595 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   596 ;;
   597 ;; *************** function _main *****************
   598 ;; Defined at:
   599 ;;		line 350 in file "main.c"
   600 ;; Parameters:    Size  Location     Type
   601 ;;		None
   602 ;; Auto vars:     Size  Location     Type
   603 ;;  i               1   16[BANK0 ] char 
   604 ;;  i               1   17[BANK0 ] char 
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : B00/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1
   614 ;;      Params:         0       0       0
   615 ;;      Locals:         0       2       0
   616 ;;      Temps:          0       3       0
   617 ;;      Totals:         0       5       0
   618 ;;Total ram usage:        5 bytes
   619 ;; Hardware stack levels required when called:    4
   620 ;; This function calls:
   621 ;;		_calculateBitsFromTable
   622 ;;		_sendDataToAltera
   623 ;;		_updateKey
   624 ;;		_updatePort
   625 ;; This function is called by:
   626 ;;		Startup code after reset
   627 ;; This function uses a non-reentrant model
   628 ;;
   629                           
   630                           
   631                           ;psect for function _main
   632  0031                     _main:	
   633                           
   634                           ;main.c: 352:     TRISA1 = 0;
   635                           
   636                           ;incstack = 0
   637                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   638  0031  1683               	bsf	3,5	;RP0=1, select bank1
   639  0032  1085               	bcf	5,1	;volatile
   640                           
   641                           ;main.c: 353:     TRISA2 = 0;
   642  0033  1105               	bcf	5,2	;volatile
   643                           
   644                           ;main.c: 354:     TRISA0 = 1;
   645  0034  1405               	bsf	5,0	;volatile
   646                           
   647                           ;main.c: 355:     TRISA4 = 1;
   648  0035  1605               	bsf	5,4	;volatile
   649                           
   650                           ;main.c: 356:     TRISA3 = 1;
   651  0036  1585               	bsf	5,3	;volatile
   652                           
   653                           ;main.c: 358:     PORTA = 0;
   654  0037  1283               	bcf	3,5	;RP0=0, select bank0
   655  0038  0185               	clrf	5	;volatile
   656                           
   657                           ;main.c: 360:     TRISB = 0;
   658  0039  1683               	bsf	3,5	;RP0=1, select bank1
   659  003A  0186               	clrf	6	;volatile
   660                           
   661                           ;main.c: 361:     PORTB = 0;
   662  003B  1283               	bcf	3,5	;RP0=0, select bank0
   663  003C  0186               	clrf	6	;volatile
   664                           
   665                           ;main.c: 381:     ps2Data = 0;
   666  003D  01BB               	clrf	_ps2Data
   667                           
   668                           ;main.c: 383:     ps2WaitCode = 0;
   669  003E  01B9               	clrf	_ps2WaitCode
   670                           
   671                           ;main.c: 384:     ps2Down = 1;
   672  003F  01C9               	clrf	_ps2Down
   673  0040  0AC9               	incf	_ps2Down,f
   674                           
   675                           ;main.c: 385:     ps2NeedEncode = 0;
   676  0041  01F9               	clrf	_ps2NeedEncode
   677                           
   678                           ;main.c: 386:     ps2DataState = 0;
   679  0042  01FC               	clrf	_ps2DataState
   680                           
   681                           ;main.c: 388:     delay = 0;
   682  0043  01B4               	clrf	_delay
   683  0044  01B5               	clrf	_delay+1
   684                           
   685                           ;main.c: 389:     delayedKey = 0;
   686  0045  01B6               	clrf	_delayedKey
   687                           
   688                           ;main.c: 390:     shift_ctrl_alt = 0;
   689  0046  01BD               	clrf	_shift_ctrl_alt
   690                           
   691                           ;main.c: 391:     replaced = 0;
   692  0047  01B7               	clrf	_replaced
   693                           
   694                           ;main.c: 397:     T0CS = 1;
   695  0048  1683               	bsf	3,5	;RP0=1, select bank1
   696  0049  1681               	bsf	1,5	;volatile
   697                           
   698                           ;main.c: 398:     T0SE = 1;
   699  004A  1601               	bsf	1,4	;volatile
   700                           
   701                           ;main.c: 399:     GIE = 1;
   702  004B  178B               	bsf	11,7	;volatile
   703                           
   704                           ;main.c: 400:     T0IE = 1;
   705  004C  168B               	bsf	11,5	;volatile
   706                           
   707                           ;main.c: 401:     PSA = 1;
   708  004D  1581               	bsf	1,3	;volatile
   709                           
   710                           ;main.c: 402:     T0IF = 0;
   711  004E  110B               	bcf	11,2	;volatile
   712                           
   713                           ;main.c: 403:     TMR0 = 255;
   714  004F  30FF               	movlw	255
   715  0050  1283               	bcf	3,5	;RP0=0, select bank0
   716  0051  0081               	movwf	1	;volatile
   717  0052                     l1174:	
   718                           ;main.c: 405:     while(1)
   719                           
   720                           
   721                           ;main.c: 406:     {;main.c: 408:         if ( ps2DataState == 2 ) {
   722  0052  3002               	movlw	2
   723  0053  067C               	xorwf	_ps2DataState,w
   724  0054  1D03               	btfss	3,2
   725  0055  291E               	goto	l1262
   726                           
   727                           ;main.c: 410:             if ( ps2Device == 0 ) {
   728  0056  1283               	bcf	3,5	;RP0=0, select bank0
   729  0057  083A               	movf	_ps2Device,w
   730  0058  1D03               	btfss	3,2
   731  0059  2916               	goto	l1258
   732                           
   733                           ;main.c: 416:                 calculateBitsFromTable(&shift_ctrl_alt, importantKeys, 6, 
      +                          0);
   734  005A  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
   735  005B  00AD               	movwf	??_main
   736  005C  082D               	movf	??_main,w
   737  005D  00A0               	movwf	calculateBitsFromTable@table
   738  005E  3006               	movlw	6
   739  005F  00AE               	movwf	??_main+1
   740  0060  082E               	movf	??_main+1,w
   741  0061  00A1               	movwf	calculateBitsFromTable@count
   742  0062  01A2               	clrf	calculateBitsFromTable@clearIfFound
   743  0063  303D               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
   744  0064  2400               	fcall	_calculateBitsFromTable
   745                           
   746                           ;main.c: 418:                 calculateBitsFromTable(&kempstonMouseEmulatorKeys, kempsto
      +                          nMouseKeys, 6, numLock);
   747  0065  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
   748  0066  1283               	bcf	3,5	;RP0=0, select bank0
   749  0067  00AD               	movwf	??_main
   750  0068  082D               	movf	??_main,w
   751  0069  00A0               	movwf	calculateBitsFromTable@table
   752  006A  3006               	movlw	6
   753  006B  00AE               	movwf	??_main+1
   754  006C  082E               	movf	??_main+1,w
   755  006D  00A1               	movwf	calculateBitsFromTable@count
   756  006E  0838               	movf	_numLock,w
   757  006F  00AF               	movwf	??_main+2
   758  0070  082F               	movf	??_main+2,w
   759  0071  00A2               	movwf	calculateBitsFromTable@clearIfFound
   760  0072  303C               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
   761  0073  2400               	fcall	_calculateBitsFromTable
   762                           
   763                           ;main.c: 426:                 if ( ps2Data == 119 && ps2Down ) {
   764  0074  3077               	movlw	119
   765  0075  1283               	bcf	3,5	;RP0=0, select bank0
   766  0076  063B               	xorwf	_ps2Data,w
   767  0077  1D03               	btfss	3,2
   768  0078  2885               	goto	l1186
   769  0079  0849               	movf	_ps2Down,w
   770  007A  1903               	btfsc	3,2
   771  007B  2885               	goto	l1186
   772                           
   773                           ;main.c: 427:                     numLock = !numLock;
   774  007C  0838               	movf	_numLock,w
   775  007D  1D03               	btfss	3,2
   776  007E  2881               	goto	u1250
   777  007F  3001               	movlw	1
   778  0080  2882               	goto	u1260
   779  0081                     u1250:	
   780  0081  3000               	movlw	0
   781  0082                     u1260:	
   782  0082  00AD               	movwf	??_main
   783  0083  082D               	movf	??_main,w
   784  0084  00B8               	movwf	_numLock
   785  0085                     l1186:	
   786                           ;main.c: 428:                 }
   787                           
   788                           
   789                           ;main.c: 431:                 if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 
      +                          0 && ps2Data == 31 && ps2Down ) {
   790  0085  083D               	movf	_shift_ctrl_alt,w
   791  0086  390C               	andlw	12
   792  0087  1903               	btfsc	3,2
   793  0088  2899               	goto	l156
   794  0089  083D               	movf	_shift_ctrl_alt,w
   795  008A  3930               	andlw	48
   796  008B  1903               	btfsc	3,2
   797  008C  2899               	goto	l156
   798  008D  301F               	movlw	31
   799  008E  063B               	xorwf	_ps2Data,w
   800  008F  1D03               	btfss	3,2
   801  0090  2899               	goto	l156
   802  0091  0849               	movf	_ps2Down,w
   803  0092  1903               	btfsc	3,2
   804  0093  2899               	goto	l156
   805                           
   806                           ;main.c: 432:                     outPorts[8] &= 253;
   807  0094  30FD               	movlw	253
   808  0095  00AD               	movwf	??_main
   809  0096  082D               	movf	??_main,w
   810  0097  05C6               	andwf	_outPorts+8,f
   811                           
   812                           ;main.c: 433:                 } else {
   813  0098  289A               	goto	l1196
   814  0099                     l156:	
   815                           
   816                           ;main.c: 434:                     outPorts[8] |= 2;
   817  0099  14C6               	bsf	_outPorts+8,1
   818  009A                     l1196:	
   819                           ;main.c: 435:                 }
   820                           
   821                           
   822                           ;main.c: 438:                 if ( (shift_ctrl_alt & 12) > 0 && ps2Data == 126 && ps2Dow
      +                          n ) {
   823  009A  083D               	movf	_shift_ctrl_alt,w
   824  009B  390C               	andlw	12
   825  009C  1903               	btfsc	3,2
   826  009D  28AA               	goto	l158
   827  009E  307E               	movlw	126
   828  009F  063B               	xorwf	_ps2Data,w
   829  00A0  1D03               	btfss	3,2
   830  00A1  28AA               	goto	l158
   831  00A2  0849               	movf	_ps2Down,w
   832  00A3  1903               	btfsc	3,2
   833  00A4  28AA               	goto	l158
   834                           
   835                           ;main.c: 439:                     outPorts[8] &= 251;
   836  00A5  30FB               	movlw	251
   837  00A6  00AD               	movwf	??_main
   838  00A7  082D               	movf	??_main,w
   839  00A8  05C6               	andwf	_outPorts+8,f
   840                           
   841                           ;main.c: 440:                 } else {
   842  00A9  28AB               	goto	l1204
   843  00AA                     l158:	
   844                           
   845                           ;main.c: 441:                     outPorts[8] |= 4;
   846  00AA  1546               	bsf	_outPorts+8,2
   847  00AB                     l1204:	
   848                           ;main.c: 442:                 }
   849                           
   850                           
   851                           ;main.c: 449:                 for(int8_t i = 0; i < 41 ;i+=2) {
   852  00AB  01B1               	clrf	main@i
   853  00AC  0831               	movf	main@i,w
   854  00AD  3A80               	xorlw	128
   855  00AE  3E57               	addlw	-169
   856  00AF  1803               	btfsc	3,0
   857  00B0  28E3               	goto	l1234
   858  00B1                     l1210:	
   859                           
   860                           ;main.c: 450:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   861  00B1  0831               	movf	main@i,w
   862  00B2  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   863  00B3  0084               	movwf	4
   864  00B4  2200               	fcall	stringdir
   865  00B5  063B               	xorwf	_ps2Data,w
   866  00B6  1D03               	skipz
   867  00B7  28DA               	goto	l1230
   868                           
   869                           ;main.c: 451:                         if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0)
      +                           || replaced == ps2Data) {
   870  00B8  083D               	movf	_shift_ctrl_alt,w
   871  00B9  3903               	andlw	3
   872  00BA  1903               	btfsc	3,2
   873  00BB  28BF               	goto	l1216
   874  00BC  0837               	movf	_replaced,w
   875  00BD  1903               	btfsc	3,2
   876  00BE  28C3               	goto	l1218
   877  00BF                     l1216:	
   878  00BF  0837               	movf	_replaced,w
   879  00C0  063B               	xorwf	_ps2Data,w
   880  00C1  1D03               	skipz
   881  00C2  28D5               	goto	l1226
   882  00C3                     l1218:	
   883                           
   884                           ;main.c: 452:                             if ( ps2Down ) replaced = ps2Data;
   885  00C3  0849               	movf	_ps2Down,w
   886  00C4  1903               	btfsc	3,2
   887  00C5  28CB               	goto	l1222
   888  00C6  083B               	movf	_ps2Data,w
   889  00C7  00AD               	movwf	??_main
   890  00C8  082D               	movf	??_main,w
   891  00C9  00B7               	movwf	_replaced
   892  00CA  28CC               	goto	l1224
   893  00CB                     l1222:	
   894                           ;main.c: 453:                             else replaced = 0;
   895                           
   896  00CB  01B7               	clrf	_replaced
   897  00CC                     l1224:	
   898                           
   899                           ;main.c: 454:                             ps2Data = replaceOnShiftKeyDown[i+1];
   900  00CC  0831               	movf	main@i,w
   901  00CD  3E01               	addlw	1
   902  00CE  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   903  00CF  0084               	movwf	4
   904  00D0  2200               	fcall	stringdir
   905  00D1  00AD               	movwf	??_main
   906  00D2  082D               	movf	??_main,w
   907  00D3  00BB               	movwf	_ps2Data
   908                           
   909                           ;main.c: 455:                         } else {
   910  00D4  28E3               	goto	l1234
   911  00D5                     l1226:	
   912                           
   913                           ;main.c: 456:                             if ( replaced != 0 ) ps2Data = 0;
   914  00D5  0837               	movf	_replaced,w
   915  00D6  1903               	btfsc	3,2
   916  00D7  28E3               	goto	l1234
   917  00D8  01BB               	clrf	_ps2Data
   918                           
   919                           ;main.c: 458:                         break;
   920                           
   921                           ;main.c: 457:                         }
   922  00D9  28E3               	goto	l1234
   923  00DA                     l1230:	
   924                           ;main.c: 459:                     }
   925                           
   926                           
   927                           ;main.c: 460:                 }
   928  00DA  3002               	movlw	2
   929  00DB  00AD               	movwf	??_main
   930  00DC  082D               	movf	??_main,w
   931  00DD  07B1               	addwf	main@i,f
   932  00DE  0831               	movf	main@i,w
   933  00DF  3A80               	xorlw	128
   934  00E0  3E57               	addlw	-169
   935  00E1  1C03               	skipc
   936  00E2  28B1               	goto	l1210
   937  00E3                     l1234:	
   938                           
   939                           ;main.c: 464:                 for(int8_t i = 0; i < 8; i++) {
   940  00E3  01B0               	clrf	main@i_118
   941  00E4  0830               	movf	main@i_118,w
   942  00E5  3A80               	xorlw	128
   943  00E6  3E78               	addlw	-136
   944  00E7  1803               	btfsc	3,0
   945  00E8  290F               	goto	l1254
   946  00E9                     l1240:	
   947                           
   948                           ;main.c: 465:                     if ( ps2Data == replaceOnDelayKeyDown[i] && ps2Down ) 
      +                          {
   949  00E9  0830               	movf	main@i_118,w
   950  00EA  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
   951  00EB  0084               	movwf	4
   952  00EC  2200               	fcall	stringdir
   953  00ED  063B               	xorwf	_ps2Data,w
   954  00EE  1D03               	skipz
   955  00EF  2906               	goto	l1250
   956  00F0  0849               	movf	_ps2Down,w
   957  00F1  1903               	btfsc	3,2
   958  00F2  2906               	goto	l1250
   959                           
   960                           ;main.c: 466:                         if ( delay == 0 ) {
   961  00F3  0834               	movf	_delay,w
   962  00F4  0435               	iorwf	_delay+1,w
   963  00F5  1D03               	btfss	3,2
   964  00F6  2904               	goto	l1248
   965                           
   966                           ;main.c: 467:                             delayedKey = ps2Data;
   967  00F7  083B               	movf	_ps2Data,w
   968  00F8  00AD               	movwf	??_main
   969  00F9  082D               	movf	??_main,w
   970  00FA  00B6               	movwf	_delayedKey
   971                           
   972                           ;main.c: 468:                             delay = 2600;
   973  00FB  3028               	movlw	40
   974  00FC  00B4               	movwf	_delay
   975  00FD  300A               	movlw	10
   976  00FE  00B5               	movwf	_delay+1
   977                           
   978                           ;main.c: 469:                             ps2Data = 111;
   979  00FF  306F               	movlw	111
   980  0100  00AD               	movwf	??_main
   981  0101  082D               	movf	??_main,w
   982  0102  00BB               	movwf	_ps2Data
   983                           
   984                           ;main.c: 470:                         } else {
   985  0103  290F               	goto	l1254
   986  0104                     l1248:	
   987                           
   988                           ;main.c: 471:                             ps2Data = 0;
   989  0104  01BB               	clrf	_ps2Data
   990                           
   991                           ;main.c: 473:                         break;
   992                           
   993                           ;main.c: 472:                         }
   994  0105  290F               	goto	l1254
   995  0106                     l1250:	
   996                           ;main.c: 474:                     }
   997                           
   998                           
   999                           ;main.c: 475:                 }
  1000  0106  3001               	movlw	1
  1001  0107  00AD               	movwf	??_main
  1002  0108  082D               	movf	??_main,w
  1003  0109  07B0               	addwf	main@i_118,f
  1004  010A  0830               	movf	main@i_118,w
  1005  010B  3A80               	xorlw	128
  1006  010C  3E78               	addlw	-136
  1007  010D  1C03               	skipc
  1008  010E  28E9               	goto	l1240
  1009  010F                     l1254:	
  1010                           
  1011                           ;main.c: 481:                 updateKey(ps2Data, ps2Down );
  1012  010F  0849               	movf	_ps2Down,w
  1013  0110  00AD               	movwf	??_main
  1014  0111  082D               	movf	??_main,w
  1015  0112  00A6               	movwf	updateKey@set
  1016  0113  083B               	movf	_ps2Data,w
  1017  0114  236C               	fcall	_updateKey
  1018                           
  1019                           ;main.c: 484:                 sendDataToAltera();
  1020  0115  23C0               	fcall	_sendDataToAltera
  1021  0116                     l1258:	
  1022                           ;main.c: 490:             }
  1023                           
  1024                           ;main.c: 486:             } else if ( ps2Device == 1 ) {
  1025                           
  1026                           
  1027                           ;main.c: 493:             ps2Data = 0;
  1028  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1029  0117  01BB               	clrf	_ps2Data
  1030                           
  1031                           ;main.c: 495:             ps2WaitCode = 0;
  1032  0118  01B9               	clrf	_ps2WaitCode
  1033                           
  1034                           ;main.c: 496:             ps2Down = 1;
  1035  0119  01C9               	clrf	_ps2Down
  1036  011A  0AC9               	incf	_ps2Down,f
  1037                           
  1038                           ;main.c: 497:             ps2NeedEncode = 0;
  1039  011B  01F9               	clrf	_ps2NeedEncode
  1040                           
  1041                           ;main.c: 498:             ps2DataState = 0;
  1042  011C  01FC               	clrf	_ps2DataState
  1043                           
  1044                           ;main.c: 502:         } else if ( delay != 0 ) {
  1045  011D  2973               	goto	l179
  1046  011E                     l1262:	
  1047  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1048  011F  0834               	movf	_delay,w
  1049  0120  0435               	iorwf	_delay+1,w
  1050  0121  1903               	btfsc	3,2
  1051  0122  2942               	goto	l1278
  1052                           
  1053                           ;main.c: 504:             delay--;
  1054  0123  3001               	movlw	1
  1055  0124  02B4               	subwf	_delay,f
  1056  0125  3000               	movlw	0
  1057  0126  1C03               	skipc
  1058  0127  03B5               	decf	_delay+1,f
  1059  0128  02B5               	subwf	_delay+1,f
  1060                           
  1061                           ;main.c: 505:             if ( delay == 0 ) {
  1062  0129  0834               	movf	_delay,w
  1063  012A  0435               	iorwf	_delay+1,w
  1064  012B  1D03               	btfss	3,2
  1065  012C  2932               	goto	l1270
  1066                           
  1067                           ;main.c: 507:                 updatePort(0x00, 0);
  1068  012D  01A0               	clrf	updatePort@set
  1069  012E  3000               	movlw	0
  1070  012F  243D               	fcall	_updatePort
  1071                           
  1072                           ;main.c: 509:                 sendDataToAltera();
  1073  0130  23C0               	fcall	_sendDataToAltera
  1074                           
  1075                           ;main.c: 511:             } else if ( delay == 1300 ) {
  1076  0131  2973               	goto	l179
  1077  0132                     l1270:	
  1078  0132  3014               	movlw	20
  1079  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0134  0634               	xorwf	_delay,w
  1081  0135  3005               	movlw	5
  1082  0136  1903               	skipnz
  1083  0137  0635               	xorwf	_delay+1,w
  1084  0138  1D03               	btfss	3,2
  1085  0139  2973               	goto	l179
  1086                           
  1087                           ;main.c: 513:                 updateKey(delayedKey, 1 );
  1088  013A  01A6               	clrf	updateKey@set
  1089  013B  0AA6               	incf	updateKey@set,f
  1090  013C  0836               	movf	_delayedKey,w
  1091  013D  236C               	fcall	_updateKey
  1092                           
  1093                           ;main.c: 514:                 delayedKey = 0;
  1094  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1095  013F  01B6               	clrf	_delayedKey
  1096                           
  1097                           ;main.c: 515:                 sendDataToAltera();
  1098  0140  23C0               	fcall	_sendDataToAltera
  1099                           
  1100                           ;main.c: 518:         } else {
  1101                           
  1102                           ;main.c: 516:             }
  1103  0141  2973               	goto	l179
  1104  0142                     l1278:	
  1105                           
  1106                           ;main.c: 521:             kempstonMouseEmulatorDelay++;
  1107  0142  3001               	movlw	1
  1108  0143  1283               	bcf	3,5	;RP0=0, select bank0
  1109  0144  07B2               	addwf	_kempstonMouseEmulatorDelay,f
  1110  0145  1803               	skipnc
  1111  0146  0AB3               	incf	_kempstonMouseEmulatorDelay+1,f
  1112  0147  3000               	movlw	0
  1113  0148  07B3               	addwf	_kempstonMouseEmulatorDelay+1,f
  1114                           
  1115                           ;main.c: 522:             if ( kempstonMouseEmulatorDelay > 2000 ) {
  1116  0149  3007               	movlw	7
  1117  014A  0233               	subwf	_kempstonMouseEmulatorDelay+1,w
  1118  014B  30D1               	movlw	209
  1119  014C  1903               	skipnz
  1120  014D  0232               	subwf	_kempstonMouseEmulatorDelay,w
  1121  014E  1C03               	skipc
  1122  014F  2973               	goto	l179
  1123                           
  1124                           ;main.c: 523:                 if ( numLock ) {
  1125  0150  0838               	movf	_numLock,w
  1126  0151  1903               	btfsc	3,2
  1127  0152  296F               	goto	l1302
  1128                           
  1129                           ;main.c: 524:                     if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]
      +                          -=2;
  1130  0153  1C3C               	btfss	_kempstonMouseEmulatorKeys,0
  1131  0154  2957               	goto	l1286
  1132  0155  3002               	movlw	2
  1133  0156  02C7               	subwf	_outPorts+9,f
  1134  0157                     l1286:	
  1135                           
  1136                           ;main.c: 525:                     if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]
      +                          +=2;
  1137  0157  1CBC               	btfss	_kempstonMouseEmulatorKeys,1
  1138  0158  295D               	goto	l1290
  1139  0159  3002               	movlw	2
  1140  015A  00AD               	movwf	??_main
  1141  015B  082D               	movf	??_main,w
  1142  015C  07C7               	addwf	_outPorts+9,f
  1143  015D                     l1290:	
  1144                           
  1145                           ;main.c: 526:                     if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10
      +                          ]+=2;
  1146  015D  1D3C               	btfss	_kempstonMouseEmulatorKeys,2
  1147  015E  2963               	goto	l1294
  1148  015F  3002               	movlw	2
  1149  0160  00AD               	movwf	??_main
  1150  0161  082D               	movf	??_main,w
  1151  0162  07C8               	addwf	_outPorts+10,f
  1152  0163                     l1294:	
  1153                           
  1154                           ;main.c: 527:                     if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10
      +                          ]-=2;
  1155  0163  1DBC               	btfss	_kempstonMouseEmulatorKeys,3
  1156  0164  2967               	goto	l1298
  1157  0165  3002               	movlw	2
  1158  0166  02C8               	subwf	_outPorts+10,f
  1159  0167                     l1298:	
  1160                           
  1161                           ;main.c: 528:                     if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8
      +                          ] &= 254;
  1162  0167  1E3C               	btfss	_kempstonMouseEmulatorKeys,4
  1163  0168  296E               	goto	l191
  1164  0169  30FE               	movlw	254
  1165  016A  00AD               	movwf	??_main
  1166  016B  082D               	movf	??_main,w
  1167  016C  05C6               	andwf	_outPorts+8,f
  1168  016D  296F               	goto	l1302
  1169  016E                     l191:	
  1170                           ;main.c: 529:                     else outPorts[8] |= 1;
  1171                           
  1172  016E  1446               	bsf	_outPorts+8,0
  1173  016F                     l1302:	
  1174                           ;main.c: 530:                 }
  1175                           
  1176                           
  1177                           ;main.c: 532:                 sendDataToAltera();
  1178  016F  23C0               	fcall	_sendDataToAltera
  1179                           
  1180                           ;main.c: 534:                 kempstonMouseEmulatorDelay = 0;
  1181  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1182  0171  01B2               	clrf	_kempstonMouseEmulatorDelay
  1183  0172  01B3               	clrf	_kempstonMouseEmulatorDelay+1
  1184  0173                     l179:	
  1185                           ;main.c: 537:         }
  1186                           
  1187                           ;main.c: 535:             }
  1188                           
  1189  0173  0064               	clrwdt	;# 
  1190                           
  1191                           ;main.c: 540:     }
  1192  0174  2852               	goto	l1174
  1193  0175                     __end_of_main:	
  1194                           
  1195                           	psect	text1
  1196  036C                     __ptext1:	
  1197 ;; *************** function _updateKey *****************
  1198 ;; Defined at:
  1199 ;;		line 178 in file "main.c"
  1200 ;; Parameters:    Size  Location     Type
  1201 ;;  key             1    wreg     unsigned char 
  1202 ;;  set             1    6[BANK0 ] unsigned char 
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;  key             1   11[BANK0 ] unsigned char 
  1205 ;;  code            1   12[BANK0 ] unsigned char 
  1206 ;;  localCtrl       1   10[BANK0 ] unsigned char 
  1207 ;;  localShift      1    8[BANK0 ] unsigned char 
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1
  1217 ;;      Params:         0       1       0
  1218 ;;      Locals:         0       5       0
  1219 ;;      Temps:          0       1       0
  1220 ;;      Totals:         0       7       0
  1221 ;;Total ram usage:        7 bytes
  1222 ;; Hardware stack levels used:    1
  1223 ;; Hardware stack levels required when called:    3
  1224 ;; This function calls:
  1225 ;;		_updatePort
  1226 ;; This function is called by:
  1227 ;;		_main
  1228 ;; This function uses a non-reentrant model
  1229 ;;
  1230                           
  1231                           
  1232                           ;psect for function _updateKey
  1233  036C                     _updateKey:	
  1234                           
  1235                           ;incstack = 0
  1236                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1237                           ;updateKey@key stored from wreg
  1238  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1239  036D  00AB               	movwf	updateKey@key
  1240                           
  1241                           ;main.c: 178: void updateKey(uint8_t key, uint8_t set);main.c: 179: {;main.c: 180:     u
      +                          int8_t code = 0xFF;
  1242  036E  30FF               	movlw	255
  1243  036F  00A7               	movwf	??_updateKey
  1244  0370  0827               	movf	??_updateKey,w
  1245  0371  00AC               	movwf	updateKey@code
  1246                           
  1247                           ;main.c: 181:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  1248  0372  01A9               	clrf	_updateKey$97
  1249  0373  083D               	movf	_shift_ctrl_alt,w
  1250  0374  3903               	andlw	3
  1251  0375  1903               	btfsc	3,2
  1252  0376  2B7C               	goto	l1010
  1253  0377  0837               	movf	_replaced,w
  1254  0378  1D03               	btfss	3,2
  1255  0379  2B7C               	goto	l1010
  1256  037A  01A9               	clrf	_updateKey$97
  1257  037B  0AA9               	incf	_updateKey$97,f
  1258  037C                     l1010:	
  1259  037C  0829               	movf	_updateKey$97,w
  1260  037D  00A7               	movwf	??_updateKey
  1261  037E  0827               	movf	??_updateKey,w
  1262  037F  00A8               	movwf	updateKey@localShift
  1263                           
  1264                           ;main.c: 182:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  1265  0380  083D               	movf	_shift_ctrl_alt,w
  1266  0381  390C               	andlw	12
  1267  0382  1903               	btfsc	3,2
  1268  0383  2B86               	goto	u840
  1269  0384  3001               	movlw	1
  1270  0385  2B87               	goto	u850
  1271  0386                     u840:	
  1272  0386  3000               	movlw	0
  1273  0387                     u850:	
  1274  0387  00A7               	movwf	??_updateKey
  1275  0388  0827               	movf	??_updateKey,w
  1276  0389  00AA               	movwf	updateKey@localCtrl
  1277                           
  1278                           ;main.c: 183:     if ( key < 128 ) code = codeToMatrix[key];
  1279  038A  3080               	movlw	128
  1280  038B  022B               	subwf	updateKey@key,w
  1281  038C  1803               	skipnc
  1282  038D  2B95               	goto	l1018
  1283  038E  082B               	movf	updateKey@key,w
  1284  038F  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  1285  0390  0084               	movwf	4
  1286  0391  2200               	fcall	stringdir
  1287  0392  00A7               	movwf	??_updateKey
  1288  0393  0827               	movf	??_updateKey,w
  1289  0394  00AC               	movwf	updateKey@code
  1290  0395                     l1018:	
  1291                           
  1292                           ;main.c: 184:     if ( code != 0xFF ) {
  1293  0395  0A2C               	incf	updateKey@code,w
  1294  0396  1903               	btfsc	3,2
  1295  0397  2BAF               	goto	l1026
  1296                           
  1297                           ;main.c: 185:         updatePort(code, set);
  1298  0398  0826               	movf	updateKey@set,w
  1299  0399  00A7               	movwf	??_updateKey
  1300  039A  0827               	movf	??_updateKey,w
  1301  039B  00A0               	movwf	updatePort@set
  1302  039C  082C               	movf	updateKey@code,w
  1303  039D  243D               	fcall	_updatePort
  1304                           
  1305                           ;main.c: 186:         localShift |= ((code & 64) > 0);
  1306  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1307  039F  1F2C               	btfss	updateKey@code,6
  1308  03A0  2BA3               	goto	u880
  1309  03A1  3001               	movlw	1
  1310  03A2  2BA4               	goto	u890
  1311  03A3                     u880:	
  1312  03A3  3000               	movlw	0
  1313  03A4                     u890:	
  1314  03A4  00A7               	movwf	??_updateKey
  1315  03A5  0827               	movf	??_updateKey,w
  1316  03A6  04A8               	iorwf	updateKey@localShift,f
  1317                           
  1318                           ;main.c: 187:         localCtrl |= ((code & 128) > 0);
  1319  03A7  1FAC               	btfss	updateKey@code,7
  1320  03A8  2BAB               	goto	u900
  1321  03A9  3001               	movlw	1
  1322  03AA  2BAC               	goto	u910
  1323  03AB                     u900:	
  1324  03AB  3000               	movlw	0
  1325  03AC                     u910:	
  1326  03AC  00A7               	movwf	??_updateKey
  1327  03AD  0827               	movf	??_updateKey,w
  1328  03AE  04AA               	iorwf	updateKey@localCtrl,f
  1329  03AF                     l1026:	
  1330                           ;main.c: 188:     }
  1331                           
  1332                           
  1333                           ;main.c: 189:     if ( set ) {
  1334  03AF  0826               	movf	updateKey@set,w
  1335  03B0  1903               	btfsc	3,2
  1336  03B1  0008               	return
  1337                           
  1338                           ;main.c: 190:         updatePort(0x00, localShift );
  1339  03B2  0828               	movf	updateKey@localShift,w
  1340  03B3  00A7               	movwf	??_updateKey
  1341  03B4  0827               	movf	??_updateKey,w
  1342  03B5  00A0               	movwf	updatePort@set
  1343  03B6  3000               	movlw	0
  1344  03B7  243D               	fcall	_updatePort
  1345                           
  1346                           ;main.c: 191:         updatePort(0x0F, localCtrl );
  1347  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  1348  03B9  082A               	movf	updateKey@localCtrl,w
  1349  03BA  00A7               	movwf	??_updateKey
  1350  03BB  0827               	movf	??_updateKey,w
  1351  03BC  00A0               	movwf	updatePort@set
  1352  03BD  300F               	movlw	15
  1353  03BE  243D               	fcall	_updatePort
  1354  03BF  0008               	return
  1355  03C0                     __end_of_updateKey:	
  1356                           ;main.c: 192:     }
  1357                           
  1358                           
  1359                           	psect	text2
  1360  043D                     __ptext2:	
  1361 ;; *************** function _updatePort *****************
  1362 ;; Defined at:
  1363 ;;		line 169 in file "main.c"
  1364 ;; Parameters:    Size  Location     Type
  1365 ;;  bit_id          1    wreg     unsigned char 
  1366 ;;  set             1    0[BANK0 ] unsigned char 
  1367 ;; Auto vars:     Size  Location     Type
  1368 ;;  bit_id          1    5[BANK0 ] unsigned char 
  1369 ;;  a               1    4[BANK0 ] unsigned char 
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMMON   BANK0   BANK1
  1379 ;;      Params:         0       1       0
  1380 ;;      Locals:         0       2       0
  1381 ;;      Temps:          0       3       0
  1382 ;;      Totals:         0       6       0
  1383 ;;Total ram usage:        6 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    2
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_updateKey
  1390 ;;		_main
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393                           
  1394                           
  1395                           ;psect for function _updatePort
  1396  043D                     _updatePort:	
  1397                           
  1398                           ;incstack = 0
  1399                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1400                           ;updatePort@bit_id stored from wreg
  1401  043D  1283               	bcf	3,5	;RP0=0, select bank0
  1402  043E  00A5               	movwf	updatePort@bit_id
  1403                           
  1404                           ;main.c: 169: void updatePort(uint8_t bit_id, uint8_t set);main.c: 170: {;main.c: 171:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  1405  043F  3001               	movlw	1
  1406  0440  00A1               	movwf	??_updatePort
  1407  0441  0825               	movf	updatePort@bit_id,w
  1408  0442  00A2               	movwf	??_updatePort+1
  1409  0443  3003               	movlw	3
  1410  0444                     u795:	
  1411  0444  1003               	clrc
  1412  0445  0CA2               	rrf	??_updatePort+1,f
  1413  0446  3EFF               	addlw	-1
  1414  0447  1D03               	skipz
  1415  0448  2C44               	goto	u795
  1416  0449  0822               	movf	??_updatePort+1,w
  1417  044A  3907               	andlw	7
  1418  044B  3E01               	addlw	1
  1419  044C  2C4F               	goto	u804
  1420  044D                     u805:	
  1421  044D  1003               	clrc
  1422  044E  0DA1               	rlf	??_updatePort,f
  1423  044F                     u804:	
  1424  044F  3EFF               	addlw	-1
  1425  0450  1D03               	skipz
  1426  0451  2C4D               	goto	u805
  1427  0452  0821               	movf	??_updatePort,w
  1428  0453  00A3               	movwf	??_updatePort+2
  1429  0454  0823               	movf	??_updatePort+2,w
  1430  0455  00A4               	movwf	updatePort@a
  1431                           
  1432                           ;main.c: 172:     if ( set ) outPorts[bit_id & 7] |= a;
  1433  0456  0820               	movf	updatePort@set,w
  1434  0457  1903               	btfsc	3,2
  1435  0458  2C63               	goto	l1000
  1436  0459  0824               	movf	updatePort@a,w
  1437  045A  00A1               	movwf	??_updatePort
  1438  045B  0825               	movf	updatePort@bit_id,w
  1439  045C  3907               	andlw	7
  1440  045D  3E3E               	addlw	(low (_outPorts| 0))& (0+255)
  1441  045E  0084               	movwf	4
  1442  045F  0821               	movf	??_updatePort,w
  1443  0460  1383               	bcf	3,7	;select IRP bank0
  1444  0461  0480               	iorwf	0,f
  1445  0462  0008               	return
  1446  0463                     l1000:	
  1447                           ;main.c: 173:     else outPorts[bit_id & 7] &= ~a;
  1448                           
  1449  0463  0924               	comf	updatePort@a,w
  1450  0464  00A1               	movwf	??_updatePort
  1451  0465  0825               	movf	updatePort@bit_id,w
  1452  0466  3907               	andlw	7
  1453  0467  3E3E               	addlw	(low (_outPorts| 0))& (0+255)
  1454  0468  0084               	movwf	4
  1455  0469  0821               	movf	??_updatePort,w
  1456  046A  1383               	bcf	3,7	;select IRP bank0
  1457  046B  0580               	andwf	0,f
  1458  046C  0008               	return
  1459  046D                     __end_of_updatePort:	
  1460                           
  1461                           	psect	text3
  1462  03C0                     __ptext3:	
  1463 ;; *************** function _sendDataToAltera *****************
  1464 ;; Defined at:
  1465 ;;		line 229 in file "main.c"
  1466 ;; Parameters:    Size  Location     Type
  1467 ;;		None
  1468 ;; Auto vars:     Size  Location     Type
  1469 ;;  i               1    4[BANK0 ] char 
  1470 ;; Return value:  Size  Location     Type
  1471 ;;                  1    wreg      void 
  1472 ;; Registers used:
  1473 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1474 ;; Tracked objects:
  1475 ;;		On entry : 0/0
  1476 ;;		On exit  : 0/0
  1477 ;;		Unchanged: 0/0
  1478 ;; Data sizes:     COMMON   BANK0   BANK1
  1479 ;;      Params:         0       0       0
  1480 ;;      Locals:         0       3       0
  1481 ;;      Temps:          0       2       0
  1482 ;;      Totals:         0       5       0
  1483 ;;Total ram usage:        5 bytes
  1484 ;; Hardware stack levels used:    1
  1485 ;; Hardware stack levels required when called:    3
  1486 ;; This function calls:
  1487 ;;		_myDelay
  1488 ;; This function is called by:
  1489 ;;		_main
  1490 ;; This function uses a non-reentrant model
  1491 ;;
  1492                           
  1493                           
  1494                           ;psect for function _sendDataToAltera
  1495  03C0                     _sendDataToAltera:	
  1496                           
  1497                           ;main.c: 232:     RA2 = 1;
  1498                           
  1499                           ;incstack = 0
  1500                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1501  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  1502  03C1  1505               	bsf	5,2	;volatile
  1503                           
  1504                           ;main.c: 233:     RA1 = 1;
  1505  03C2  1485               	bsf	5,1	;volatile
  1506                           
  1507                           ;main.c: 234:     myDelay();
  1508  03C3  2480               	fcall	_myDelay
  1509                           
  1510                           ;main.c: 235:     RA2 = 0;
  1511  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  1512  03C5  1105               	bcf	5,2	;volatile
  1513                           
  1514                           ;main.c: 236:     myDelay();
  1515  03C6  2480               	fcall	_myDelay
  1516                           
  1517                           ;main.c: 237:     RA2 = 1;
  1518  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  1519  03C8  1505               	bsf	5,2	;volatile
  1520                           
  1521                           ;main.c: 238:     RA1 = 0;
  1522  03C9  1085               	bcf	5,1	;volatile
  1523                           
  1524                           ;main.c: 239:     myDelay();
  1525  03CA  2480               	fcall	_myDelay
  1526                           
  1527                           ;main.c: 240:     for(int8_t i=0;i<11;i++) {
  1528  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  1529  03CC  01A4               	clrf	sendDataToAltera@i
  1530  03CD  0824               	movf	sendDataToAltera@i,w
  1531  03CE  3A80               	xorlw	128
  1532  03CF  3E75               	addlw	-139
  1533  03D0  1803               	btfsc	3,0
  1534  03D1  2BFC               	goto	l132
  1535  03D2                     l131:	
  1536                           
  1537                           ;main.c: 241:         RA2 = 1;
  1538  03D2  1505               	bsf	5,2	;volatile
  1539                           
  1540                           ;main.c: 242:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1541  03D3  0824               	movf	sendDataToAltera@i,w
  1542  03D4  3A80               	xorlw	128
  1543  03D5  3E78               	addlw	-136
  1544  03D6  1C03               	skipc
  1545  03D7  2BE3               	goto	l1050
  1546  03D8  0824               	movf	sendDataToAltera@i,w
  1547  03D9  3E3E               	addlw	(low (_outPorts| 0))& (0+255)
  1548  03DA  0084               	movwf	4
  1549  03DB  1383               	bcf	3,7	;select IRP bank0
  1550  03DC  0800               	movf	0,w
  1551  03DD  00A0               	movwf	??_sendDataToAltera
  1552  03DE  01A1               	clrf	??_sendDataToAltera+1
  1553  03DF  0820               	movf	??_sendDataToAltera,w
  1554  03E0  00A2               	movwf	_sendDataToAltera$104
  1555  03E1  0821               	movf	??_sendDataToAltera+1,w
  1556  03E2  2BED               	goto	L1
  1557  03E3                     l1050:	
  1558  03E3  0824               	movf	sendDataToAltera@i,w
  1559  03E4  3E3E               	addlw	(low (_outPorts| 0))& (0+255)
  1560  03E5  0084               	movwf	4
  1561  03E6  1383               	bcf	3,7	;select IRP bank0
  1562  03E7  0800               	movf	0,w
  1563  03E8  00A0               	movwf	??_sendDataToAltera
  1564  03E9  01A1               	clrf	??_sendDataToAltera+1
  1565  03EA  0920               	comf	??_sendDataToAltera,w
  1566  03EB  00A2               	movwf	_sendDataToAltera$104
  1567  03EC  0921               	comf	??_sendDataToAltera+1,w
  1568  03ED                     L1:	
  1569  03ED  00A3               	movwf	_sendDataToAltera$104+1
  1570  03EE  0822               	movf	_sendDataToAltera$104,w
  1571  03EF  0086               	movwf	6	;volatile
  1572                           
  1573                           ;main.c: 243:         RA2 = 0;
  1574  03F0  1105               	bcf	5,2	;volatile
  1575                           
  1576                           ;main.c: 244:         myDelay();
  1577  03F1  2480               	fcall	_myDelay
  1578                           
  1579                           ;main.c: 245:     }
  1580  03F2  3001               	movlw	1
  1581  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  1582  03F4  00A0               	movwf	??_sendDataToAltera
  1583  03F5  0820               	movf	??_sendDataToAltera,w
  1584  03F6  07A4               	addwf	sendDataToAltera@i,f
  1585  03F7  0824               	movf	sendDataToAltera@i,w
  1586  03F8  3A80               	xorlw	128
  1587  03F9  3E75               	addlw	-139
  1588  03FA  1C03               	skipc
  1589  03FB  2BD2               	goto	l131
  1590  03FC                     l132:	
  1591                           
  1592                           ;main.c: 246:     RA2 = 1;
  1593  03FC  1505               	bsf	5,2	;volatile
  1594                           
  1595                           ;main.c: 247:     PORTB = 0xFF;
  1596  03FD  30FF               	movlw	255
  1597  03FE  0086               	movwf	6	;volatile
  1598  03FF  0008               	return
  1599  0400                     __end_of_sendDataToAltera:	
  1600                           
  1601                           	psect	text4
  1602  0480                     __ptext4:	
  1603 ;; *************** function _myDelay *****************
  1604 ;; Defined at:
  1605 ;;		line 197 in file "main.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;		None
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      void 
  1612 ;; Registers used:
  1613 ;;		None
  1614 ;; Tracked objects:
  1615 ;;		On entry : 0/0
  1616 ;;		On exit  : 0/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMMON   BANK0   BANK1
  1619 ;;      Params:         0       0       0
  1620 ;;      Locals:         0       0       0
  1621 ;;      Temps:          0       0       0
  1622 ;;      Totals:         0       0       0
  1623 ;;Total ram usage:        0 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; Hardware stack levels required when called:    2
  1626 ;; This function calls:
  1627 ;;		Nothing
  1628 ;; This function is called by:
  1629 ;;		_sendDataToAltera
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           
  1634                           ;psect for function _myDelay
  1635  0480                     _myDelay:	
  1636                           
  1637                           ;incstack = 0
  1638                           ; Regs used in _myDelay: []
  1639  0480  0008               	return
  1640  0481                     __end_of_myDelay:	
  1641                           
  1642                           	psect	text5
  1643  0400                     __ptext5:	
  1644 ;; *************** function _calculateBitsFromTable *****************
  1645 ;; Defined at:
  1646 ;;		line 300 in file "main.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  bits            1    wreg     PTR unsigned char 
  1649 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1650 ;;  table           1    0[BANK0 ] PTR unsigned char 
  1651 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  1652 ;;  count           1    1[BANK0 ] unsigned char 
  1653 ;;  clearIfFound    1    2[BANK0 ] unsigned char 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  bits            1    5[BANK0 ] PTR unsigned char 
  1656 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1657 ;;  i               1    6[BANK0 ] unsigned char 
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      void 
  1660 ;; Registers used:
  1661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1
  1667 ;;      Params:         0       3       0
  1668 ;;      Locals:         0       2       0
  1669 ;;      Temps:          0       2       0
  1670 ;;      Totals:         0       7       0
  1671 ;;Total ram usage:        7 bytes
  1672 ;; Hardware stack levels used:    2
  1673 ;; Hardware stack levels required when called:    2
  1674 ;; This function calls:
  1675 ;;		Nothing
  1676 ;; This function is called by:
  1677 ;;		_main
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           
  1682                           ;psect for function _calculateBitsFromTable
  1683  0400                     _calculateBitsFromTable:	
  1684                           
  1685                           ;incstack = 0
  1686                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  1687                           ;calculateBitsFromTable@bits stored from wreg
  1688  0400  1283               	bcf	3,5	;RP0=0, select bank0
  1689  0401  00A5               	movwf	calculateBitsFromTable@bits
  1690                           
  1691                           ;main.c: 300: void calculateBitsFromTable(uint8_t* bits, uint8_t table[], uint8_t count,
      +                           uint8_t clearIfFound);main.c: 301: {;main.c: 302:     for(uint8_t i = 0; i < count;i++)
      +                           {
  1692  0402  01A6               	clrf	calculateBitsFromTable@i
  1693  0403                     l1080:	
  1694  0403  0821               	movf	calculateBitsFromTable@count,w
  1695  0404  0226               	subwf	calculateBitsFromTable@i,w
  1696  0405  1803               	btfsc	3,0
  1697  0406  0008               	return
  1698                           
  1699                           ;main.c: 303:         if ( ps2Data == table[i] ) {
  1700  0407  0826               	movf	calculateBitsFromTable@i,w
  1701  0408  0720               	addwf	calculateBitsFromTable@table,w
  1702  0409  0084               	movwf	4
  1703  040A  2200               	fcall	stringdir
  1704  040B  063B               	xorwf	_ps2Data,w
  1705  040C  1D03               	skipz
  1706  040D  2C38               	goto	l1078
  1707                           
  1708                           ;main.c: 304:             if ( ps2Down ) {
  1709  040E  0849               	movf	_ps2Down,w
  1710  040F  1903               	btfsc	3,2
  1711  0410  2C22               	goto	l1072
  1712                           
  1713                           ;main.c: 305:                 (*bits) |= (1 << i);
  1714  0411  3001               	movlw	1
  1715  0412  00A3               	movwf	??_calculateBitsFromTable
  1716  0413  0A26               	incf	calculateBitsFromTable@i,w
  1717  0414  2C17               	goto	u984
  1718  0415                     u985:	
  1719  0415  1003               	clrc
  1720  0416  0DA3               	rlf	??_calculateBitsFromTable,f
  1721  0417                     u984:	
  1722  0417  3EFF               	addlw	-1
  1723  0418  1D03               	skipz
  1724  0419  2C15               	goto	u985
  1725  041A  0823               	movf	??_calculateBitsFromTable,w
  1726  041B  00A4               	movwf	??_calculateBitsFromTable+1
  1727  041C  0825               	movf	calculateBitsFromTable@bits,w
  1728  041D  0084               	movwf	4
  1729  041E  0824               	movf	??_calculateBitsFromTable+1,w
  1730  041F  1383               	bcf	3,7	;select IRP bank0
  1731  0420  0480               	iorwf	0,f
  1732                           
  1733                           ;main.c: 306:             } else {
  1734  0421  2C33               	goto	l1074
  1735  0422                     l1072:	
  1736                           
  1737                           ;main.c: 307:                 (*bits) &= ~(1 << i);
  1738  0422  3001               	movlw	1
  1739  0423  00A3               	movwf	??_calculateBitsFromTable
  1740  0424  0A26               	incf	calculateBitsFromTable@i,w
  1741  0425  2C28               	goto	u994
  1742  0426                     u995:	
  1743  0426  1003               	clrc
  1744  0427  0DA3               	rlf	??_calculateBitsFromTable,f
  1745  0428                     u994:	
  1746  0428  3EFF               	addlw	-1
  1747  0429  1D03               	skipz
  1748  042A  2C26               	goto	u995
  1749  042B  0823               	movf	??_calculateBitsFromTable,w
  1750  042C  3AFF               	xorlw	255
  1751  042D  00A4               	movwf	??_calculateBitsFromTable+1
  1752  042E  0825               	movf	calculateBitsFromTable@bits,w
  1753  042F  0084               	movwf	4
  1754  0430  0824               	movf	??_calculateBitsFromTable+1,w
  1755  0431  1383               	bcf	3,7	;select IRP bank0
  1756  0432  0580               	andwf	0,f
  1757  0433                     l1074:	
  1758                           ;main.c: 308:             }
  1759                           
  1760                           
  1761                           ;main.c: 309:             if ( clearIfFound ) {
  1762  0433  0822               	movf	calculateBitsFromTable@clearIfFound,w
  1763  0434  1903               	btfsc	3,2
  1764  0435  0008               	return
  1765                           
  1766                           ;main.c: 310:                 ps2Data = 0;
  1767  0436  01BB               	clrf	_ps2Data
  1768                           
  1769                           ;main.c: 312:             break;
  1770                           
  1771                           ;main.c: 311:             }
  1772  0437  0008               	return
  1773  0438                     l1078:	
  1774                           ;main.c: 313:         }
  1775                           
  1776                           
  1777                           ;main.c: 314:     }
  1778  0438  3001               	movlw	1
  1779  0439  00A3               	movwf	??_calculateBitsFromTable
  1780  043A  0823               	movf	??_calculateBitsFromTable,w
  1781  043B  07A6               	addwf	calculateBitsFromTable@i,f
  1782  043C  2C03               	goto	l1080
  1783  043D                     __end_of_calculateBitsFromTable:	
  1784                           
  1785                           	psect	text6
  1786  02E0                     __ptext6:	
  1787 ;; *************** function _myIsr *****************
  1788 ;; Defined at:
  1789 ;;		line 102 in file "main.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;		None
  1792 ;; Auto vars:     Size  Location     Type
  1793 ;;  i               1    8[COMMON] char 
  1794 ;; Return value:  Size  Location     Type
  1795 ;;                  1    wreg      void 
  1796 ;; Registers used:
  1797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1798 ;; Tracked objects:
  1799 ;;		On entry : 0/0
  1800 ;;		On exit  : 0/0
  1801 ;;		Unchanged: 0/0
  1802 ;; Data sizes:     COMMON   BANK0   BANK1
  1803 ;;      Params:         0       0       0
  1804 ;;      Locals:         3       0       0
  1805 ;;      Temps:          6       0       0
  1806 ;;      Totals:         9       0       0
  1807 ;;Total ram usage:        9 bytes
  1808 ;; Hardware stack levels used:    2
  1809 ;; This function calls:
  1810 ;;		Nothing
  1811 ;; This function is called by:
  1812 ;;		Interrupt level 1
  1813 ;; This function uses a non-reentrant model
  1814 ;;
  1815                           
  1816                           
  1817                           ;psect for function _myIsr
  1818  02E0                     _myIsr:	
  1819                           
  1820                           ;main.c: 104:     if(T0IE && T0IF){
  1821  02E0  1A8B               	btfsc	11,5	;volatile
  1822  02E1  1D0B               	btfss	11,2	;volatile
  1823  02E2  2B60               	goto	i1l111
  1824                           
  1825                           ;main.c: 106:         T0IF=0;
  1826  02E3  110B               	bcf	11,2	;volatile
  1827                           
  1828                           ;main.c: 107:         TMR0 = 255;
  1829  02E4  30FF               	movlw	255
  1830  02E5  0081               	movwf	1	;volatile
  1831                           
  1832                           ;main.c: 111:         if ( ps2DataState == 0 ) {
  1833  02E6  087C               	movf	_ps2DataState,w
  1834  02E7  1D03               	btfss	3,2
  1835  02E8  2AF5               	goto	i1l1102
  1836                           
  1837                           ;main.c: 112:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  1838  02E9  1E05               	btfss	5,4	;volatile
  1839  02EA  1985               	btfsc	5,3	;volatile
  1840  02EB  2B60               	goto	i1l111
  1841                           
  1842                           ;main.c: 113:                 ps2BitsCount = 0;
  1843  02EC  01FA               	clrf	_ps2BitsCount
  1844                           
  1845                           ;main.c: 114:                 ps2Bits = 0;
  1846  02ED  01FB               	clrf	_ps2Bits
  1847                           
  1848                           ;main.c: 115:                 ps2DataState = 1;
  1849  02EE  01FC               	clrf	_ps2DataState
  1850  02EF  0AFC               	incf	_ps2DataState,f
  1851                           
  1852                           ;main.c: 116:                 ps2Device = PORTAbits.RA0;
  1853  02F0  3000               	movlw	0
  1854  02F1  1805               	btfsc	5,0	;volatile
  1855  02F2  3001               	movlw	1
  1856  02F3  00BA               	movwf	_ps2Device
  1857                           
  1858                           ;main.c: 118:         } else if ( ps2DataState == 1 ) {
  1859                           
  1860                           ;main.c: 117:             }
  1861  02F4  2B60               	goto	i1l111
  1862  02F5                     i1l1102:	
  1863  02F5  037C               	decf	_ps2DataState,w
  1864  02F6  1D03               	btfss	3,2
  1865  02F7  2B5C               	goto	i1l1150
  1866                           
  1867                           ;main.c: 119:             if ( ps2BitsCount < 8 ) {
  1868  02F8  087A               	movf	_ps2BitsCount,w
  1869  02F9  3A80               	xorlw	128
  1870  02FA  3E78               	addlw	-136
  1871  02FB  1803               	skipnc
  1872  02FC  2B0D               	goto	i1l1110
  1873                           
  1874                           ;main.c: 120:                 if ( PORTAbits.RA3 ) {
  1875  02FD  1D85               	btfss	5,3	;volatile
  1876  02FE  2B11               	goto	i1l1112
  1877                           
  1878                           ;main.c: 121:                     ps2Bits |= ( 1 << ps2BitsCount );
  1879  02FF  3001               	movlw	1
  1880  0300  00F0               	movwf	??_myIsr
  1881  0301  0A7A               	incf	_ps2BitsCount,w
  1882  0302  2B05               	goto	u110_24
  1883  0303                     u110_25:	
  1884  0303  1003               	clrc
  1885  0304  0DF0               	rlf	??_myIsr,f
  1886  0305                     u110_24:	
  1887  0305  3EFF               	addlw	-1
  1888  0306  1D03               	skipz
  1889  0307  2B03               	goto	u110_25
  1890  0308  0870               	movf	??_myIsr,w
  1891  0309  00F1               	movwf	??_myIsr+1
  1892  030A  0871               	movf	??_myIsr+1,w
  1893  030B  04FB               	iorwf	_ps2Bits,f
  1894                           
  1895                           ;main.c: 122:                 }
  1896  030C  2B11               	goto	i1l1112
  1897  030D                     i1l1110:	
  1898                           ;main.c: 124:             } else if ( ps2BitsCount == 8 ) {
  1899                           
  1900                           ;main.c: 123:                 ps2BitsCount++;
  1901                           
  1902  030D  3008               	movlw	8
  1903  030E  067A               	xorwf	_ps2BitsCount,w
  1904  030F  1D03               	btfss	3,2
  1905  0310  2B16               	goto	i1l1114
  1906  0311                     i1l1112:	
  1907                           
  1908                           ;main.c: 125:                 ps2BitsCount++;
  1909  0311  3001               	movlw	1
  1910  0312  00F0               	movwf	??_myIsr
  1911  0313  0870               	movf	??_myIsr,w
  1912  0314  07FA               	addwf	_ps2BitsCount,f
  1913                           
  1914                           ;main.c: 126:             } else if ( ps2BitsCount == 9 ) {
  1915  0315  2B60               	goto	i1l111
  1916  0316                     i1l1114:	
  1917  0316  3009               	movlw	9
  1918  0317  067A               	xorwf	_ps2BitsCount,w
  1919  0318  1D03               	btfss	3,2
  1920  0319  2B60               	goto	i1l111
  1921                           
  1922                           ;main.c: 128:                 if ( ps2NeedEncode ) {
  1923  031A  0879               	movf	_ps2NeedEncode,w
  1924  031B  1903               	btfsc	3,2
  1925  031C  2B35               	goto	i1l1132
  1926                           
  1927                           ;main.c: 129:                     for (int8_t i=0; i < 27; i+=2) {
  1928  031D  01F8               	clrf	myIsr@i
  1929  031E                     L4:	
  1930  031E  0878               	movf	myIsr@i,w
  1931  031F  3A80               	xorlw	128
  1932  0320  3E65               	addlw	-155
  1933  0321  1803               	btfsc	3,0
  1934  0322  2B48               	goto	i1l1138
  1935                           
  1936                           ;main.c: 130:                         if ( ps2Bits == replaceTwoBytesCodes[i] ) {
  1937  0323  0878               	movf	myIsr@i,w
  1938  0324  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1939  0325  0084               	movwf	4
  1940  0326  2200               	fcall	stringdir
  1941  0327  067B               	xorwf	_ps2Bits,w
  1942  0328  1D03               	skipz
  1943  0329  2B30               	goto	i1l1128
  1944                           
  1945                           ;main.c: 131:                             ps2Data = replaceTwoBytesCodes[i+1];
  1946  032A  0878               	movf	myIsr@i,w
  1947  032B  3E01               	addlw	1
  1948  032C  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1949  032D  0084               	movwf	4
  1950  032E  2200               	fcall	stringdir
  1951  032F  2B45               	goto	L2
  1952  0330                     i1l1128:	
  1953                           ;main.c: 133:                         }
  1954                           
  1955                           ;main.c: 132:                             break;
  1956                           
  1957                           
  1958                           ;main.c: 134:                     }
  1959  0330  3002               	movlw	2
  1960  0331  00F0               	movwf	??_myIsr
  1961  0332  0870               	movf	??_myIsr,w
  1962  0333  07F8               	addwf	myIsr@i,f
  1963  0334  2B1E               	goto	L4
  1964  0335                     i1l1132:	
  1965                           ;main.c: 135:                 } else {
  1966                           
  1967                           
  1968                           ;main.c: 136:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  1969  0335  3083               	movlw	131
  1970  0336  067B               	xorwf	_ps2Bits,w
  1971  0337  1903               	btfsc	3,2
  1972  0338  2B40               	goto	i1l1136
  1973  0339  087B               	movf	_ps2Bits,w
  1974  033A  00F0               	movwf	??_myIsr
  1975  033B  01F1               	clrf	??_myIsr+1
  1976  033C  0870               	movf	??_myIsr,w
  1977  033D  00F6               	movwf	_myIsr$87
  1978  033E  0871               	movf	??_myIsr+1,w
  1979  033F  2B43               	goto	L3
  1980  0340                     i1l1136:	
  1981  0340  303F               	movlw	63
  1982  0341  00F6               	movwf	_myIsr$87
  1983  0342  3000               	movlw	0
  1984  0343                     L3:	
  1985  0343  00F7               	movwf	_myIsr$87+1
  1986  0344  0876               	movf	_myIsr$87,w
  1987  0345                     L2:	
  1988  0345  00F0               	movwf	??_myIsr
  1989  0346  0870               	movf	??_myIsr,w
  1990  0347  00BB               	movwf	_ps2Data
  1991  0348                     i1l1138:	
  1992                           ;main.c: 137:                 }
  1993                           
  1994                           
  1995                           ;main.c: 138:                 if ( ps2Bits == 0xF0 ) {
  1996  0348  30F0               	movlw	240
  1997  0349  067B               	xorwf	_ps2Bits,w
  1998  034A  1D03               	btfss	3,2
  1999  034B  2B4F               	goto	i1l1142
  2000                           
  2001                           ;main.c: 139:                     ps2DataState = 0;
  2002  034C  01FC               	clrf	_ps2DataState
  2003                           
  2004                           ;main.c: 140:                     ps2Down = 0;
  2005  034D  01C9               	clrf	_ps2Down
  2006                           
  2007                           ;main.c: 141:                 } else if ( ps2Bits == 0xE0 ) {
  2008  034E  2B60               	goto	i1l111
  2009  034F                     i1l1142:	
  2010  034F  30E0               	movlw	224
  2011  0350  067B               	xorwf	_ps2Bits,w
  2012  0351  1D03               	btfss	3,2
  2013  0352  2B57               	goto	i1l1148
  2014                           
  2015                           ;main.c: 142:                     ps2DataState = 0;
  2016  0353  01FC               	clrf	_ps2DataState
  2017                           
  2018                           ;main.c: 143:                     ps2NeedEncode = 1;
  2019  0354  01F9               	clrf	_ps2NeedEncode
  2020  0355  0AF9               	incf	_ps2NeedEncode,f
  2021                           
  2022                           ;main.c: 152:                 } else {
  2023  0356  2B60               	goto	i1l111
  2024  0357                     i1l1148:	
  2025                           
  2026                           ;main.c: 153:                     ps2DataState = 2;
  2027  0357  3002               	movlw	2
  2028  0358  00F0               	movwf	??_myIsr
  2029  0359  0870               	movf	??_myIsr,w
  2030  035A  00FC               	movwf	_ps2DataState
  2031                           
  2032                           ;main.c: 157:         } else if ( ps2DataState == 4 ) {
  2033                           
  2034                           ;main.c: 156:             }
  2035                           
  2036                           ;main.c: 154:                 }
  2037  035B  2B60               	goto	i1l111
  2038  035C                     i1l1150:	
  2039  035C  3004               	movlw	4
  2040  035D  067C               	xorwf	_ps2DataState,w
  2041  035E  1903               	btfsc	3,2
  2042                           
  2043                           ;main.c: 159:             ps2DataState = 0;
  2044  035F  01FC               	clrf	_ps2DataState
  2045  0360                     i1l111:	
  2046                           ;main.c: 163:     }
  2047                           
  2048                           ;main.c: 161:     } else {
  2049                           
  2050                           ;main.c: 160:         }
  2051                           
  2052                           
  2053                           ;main.c: 164:     GIE = 1;
  2054  0360  178B               	bsf	11,7	;volatile
  2055  0361  0875               	movf	??_myIsr+5,w
  2056  0362  00FF               	movwf	127
  2057  0363  0874               	movf	??_myIsr+4,w
  2058  0364  008A               	movwf	10
  2059  0365  0873               	movf	??_myIsr+3,w
  2060  0366  0084               	movwf	4
  2061  0367  0E72               	swapf	(??_myIsr+2)^(0+4294967168),w
  2062  0368  0083               	movwf	3
  2063  0369  0EFE               	swapf	126,f
  2064  036A  0E7E               	swapf	126,w
  2065  036B  0009               	retfie
  2066  036C                     __end_of_myIsr:	
  2067  007E                     btemp	set	126	;btemp
  2068  007E                     wtemp0	set	126
  2069                           
  2070                           	psect	intentry
  2071  0004                     __pintentry:	
  2072                           ;incstack = 0
  2073                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath]
  2074                           
  2075  0004                     interrupt_function:	
  2076  007E                     saved_w	set	btemp
  2077  0004  00FE               	movwf	btemp
  2078  0005  0E03               	swapf	3,w
  2079  0006  00F2               	movwf	??_myIsr+2
  2080  0007  0804               	movf	4,w
  2081  0008  00F3               	movwf	??_myIsr+3
  2082  0009  080A               	movf	10,w
  2083  000A  00F4               	movwf	??_myIsr+4
  2084  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2085  000C  087F               	movf	btemp+1,w
  2086  000D  00F5               	movwf	??_myIsr+5
  2087  000E  2AE0               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         16
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80     18      42
    BANK1            32      0       0

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2292
                                             13 BANK0      5     5      0
             _calculateBitsFromTable
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                              6 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              0 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculateBitsFromTable                               7     4      3     722
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                9     9      0     114
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateBitsFromTable
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK1               20      0       0       5        0.0%
BITBANK1            20      0       0       7        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      2A       4       52.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      37       8        0.0%
ABS                  0      0      37       6        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Sep 28 18:57:25 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0023                                 l131 03D2  
                               l132 03FC                                 l156 0099  
                               l158 00AA                                 l191 016E  
                               l179 0173                                 _GIE 005F  
                               _RA1 0029                                 _RA2 002A  
                               u804 044F                                 u900 03AB  
                               u805 044D                                 u910 03AC  
                               _PSA 040B                                 u840 0386  
                               u850 0387                                 u880 03A3  
                               u890 03A4                                 u795 0444  
                               u984 0417                                 u985 0415  
                               u994 0428                                 u995 0426  
                               fsr0 0004                                 indf 0000  
                              l1000 0463                                l1010 037C  
                              l1050 03E3                                l1026 03AF  
                              l1018 0395                                l1210 00B1  
                              l1204 00AB                                l1302 016F  
                              l1222 00CB                                l1230 00DA  
                              l1072 0422                                l1080 0403  
                              l1240 00E9                                l1224 00CC  
                              l1216 00BF                                l1074 0433  
                              l1250 0106                                l1226 00D5  
                              l1218 00C3                                l1234 00E3  
                              l1078 0438                                l1270 0132  
                              l1254 010F                                l1262 011E  
                              l1174 0052                                l1248 0104  
                              l1290 015D                                l1186 0085  
                              l1258 0116                                l1196 009A  
                              l1294 0163                                l1286 0157  
                              l1278 0142                                l1298 0167  
                              _T0IE 005D                                _T0IF 005A  
                              _T0CS 040D                                u1250 0081  
                              _T0SE 040C                                u1260 0082  
                              _TMR0 0001                                _main 0031  
                              btemp 007E                                start 000F  
                             ?_main 0070        __end_of_replaceTwoBytesCodes 02CC  
                             i1l111 0360                               _PORTA 0005  
                             _PORTB 0006                __end_of_codeToMatrix 0286  
                             _TRISB 0086                               _delay 0034  
                   __end_of_myDelay 0481                               _myIsr 02E0  
                             main@i 0031                    updatePort@bit_id 0025  
                             pclath 000A                               status 0003  
                      updateKey@key 002B                        updateKey@set 0026  
                             wtemp0 007E                     __initialization 0010  
                      __end_of_main 0175                              ??_main 002D  
   __size_of_calculateBitsFromTable 003D                   sendDataToAltera@i 0024  
                            ?_myIsr 0070                              i1l1110 030D  
                            i1l1102 02F5                              i1l1112 0311  
                            i1l1114 0316                              i1l1132 0335  
                            u110_24 0305                              u110_25 0303  
                            i1l1142 034F                              i1l1150 035C  
                            i1l1136 0340                              i1l1128 0330  
                            i1l1138 0348                              i1l1148 0357  
                            _TRISA0 0428                              _TRISA1 0429  
                            _TRISA2 042A                              _TRISA3 042B  
                            _TRISA4 042C            __end_of_sendDataToAltera 0400  
             _replaceOnDelayKeyDown 02CC                           ??_myDelay 0020  
                            myIsr@i 0078                              saved_w 007E  
                     updateKey@code 002C             __end_of__initialization 002F  
            _calculateBitsFromTable 0400                _replaceTwoBytesCodes 02B0  
                     updatePort@set 0020                      __pcstackCOMMON 0070  
                      __pidataBANK0 046D                       __end_of_myIsr 036C  
               updateKey@localShift 0028                             ??_myIsr 0070  
                      _ps2DataState 007C                          __pbssBANK0 0032  
                      _ps2BitsCount 007A                        _codeToMatrix 0206  
                        _delayedKey 0036                _sendDataToAltera$104 0022  
                        __pmaintext 0031                          __pintentry 0004  
        calculateBitsFromTable@bits 0025                  __size_of_updateKey 0054  
                        __stringtab 0200          _kempstonMouseEmulatorDelay 0032  
     __end_of_replaceOnShiftKeyDown 02B0                             _ps2Data 003B  
                           _ps2Bits 007B                             _ps2Down 0049  
                           __ptext1 036C                             __ptext2 043D  
                           __ptext3 03C0                             __ptext4 0480  
                           __ptext5 0400                             __ptext6 02E0  
                           _myDelay 0480  calculateBitsFromTable@clearIfFound 0022  
                           _numLock 0038                             clrloop0 0479  
              end_of_initialization 002F                       _importantKeys 02D4  
                    _shift_ctrl_alt 003D                   ?_sendDataToAltera 0070  
                 __end_of_updateKey 03C0                  ??_sendDataToAltera 0020  
                 _kempstonMouseKeys 02DA                           _PORTAbits 0005  
                        _updatePort 043D             ?_calculateBitsFromTable 0020  
         __end_of_kempstonMouseKeys 02E0                 start_initialization 0010  
                       updatePort@a 0024      __end_of_calculateBitsFromTable 043D  
           calculateBitsFromTable@i 0026                         __pdataBANK0 003E  
                       __pbssCOMMON 0079                           ___latbits 0000  
                     __pcstackBANK0 0020                         ?_updatePort 0020  
                updateKey@localCtrl 002A                           __pnvBANK0 0049  
                         _ps2Device 003A                           __pstrings 0200  
                     _ps2NeedEncode 0079                            ?_myDelay 0070  
                       _ps2WaitCode 0039         calculateBitsFromTable@count 0021  
                    __size_of_myIsr 008C         calculateBitsFromTable@table 0020  
                 interrupt_function 0004                           clear_ram0 0478  
               __size_of_updatePort 0030               _replaceOnShiftKeyDown 0286  
                         _updateKey 036C                         __stringbase 0205  
                         main@i_118 0030           __size_of_sendDataToAltera 0040  
                        ?_updateKey 0026                  __end_of__stringtab 0206  
                  __size_of_myDelay 0001                            _myIsr$87 0076  
                     __size_of_main 0144       __end_of_replaceOnDelayKeyDown 02D4  
                          _replaced 0037                            _outPorts 003E  
                      ??_updatePort 0021           _kempstonMouseEmulatorKeys 003C  
                          intlevel1 0000                           stringcode 0200  
                __end_of_updatePort 046D                         ??_updateKey 0027  
                  _sendDataToAltera 03C0                            stringdir 0200  
                          stringtab 0200               __end_of_importantKeys 02DA  
                      _updateKey$97 0029  
