

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Nov 04 14:49:02 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.00
    24                           ; Generated 27/05/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F628A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  008C                     	;# 
    85  008E                     	;# 
    86  0092                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009F                     	;# 
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0015                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001F                     	;# 
   118  0081                     	;# 
   119  0085                     	;# 
   120  0086                     	;# 
   121  008C                     	;# 
   122  008E                     	;# 
   123  0092                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009F                     	;# 
   131                           
   132                           	psect	idataBANK0
   133  0495                     __pidataBANK0:	
   134                           
   135                           ;initializer for _outPorts
   136  0495  3400               	retlw	0
   137  0496  3400               	retlw	0
   138  0497  3400               	retlw	0
   139  0498  3400               	retlw	0
   140  0499  3400               	retlw	0
   141  049A  3400               	retlw	0
   142  049B  3400               	retlw	0
   143  049C  3400               	retlw	0
   144  049D  3407               	retlw	7
   145  049E  34F5               	retlw	245
   146  049F  34DA               	retlw	218
   147                           
   148                           	psect	strings
   149  0200                     __pstrings:	
   150  0200                     stringtab:	
   151  0200                     __stringtab:	
   152  0200                     stringcode:	
   153                           ;	String table - string pointers are 1 byte each
   154                           
   155  0200                     stringdir:	
   156  0200  3002               	movlw	high stringdir
   157  0201  008A               	movwf	10
   158  0202  0804               	movf	4,w
   159  0203  0A84               	incf	4,f
   160  0204  0782               	addwf	2,f
   161  0205                     __stringbase:	
   162  0205  3400               	retlw	0
   163  0206                     __end_of__stringtab:	
   164  0206                     _codeToMatrix:	
   165  0206  34FF               	retlw	255
   166  0207  34FF               	retlw	255
   167  0208  34FF               	retlw	255
   168  0209  34FF               	retlw	255
   169  020A  34FF               	retlw	255
   170  020B  34FF               	retlw	255
   171  020C  34FF               	retlw	255
   172  020D  34FF               	retlw	255
   173  020E  34FF               	retlw	255
   174  020F  34FF               	retlw	255
   175  0210  34FF               	retlw	255
   176  0211  34FF               	retlw	255
   177  0212  34FF               	retlw	255
   178  0213  34FF               	retlw	255
   179  0214  349C               	retlw	156
   180  0215  34FF               	retlw	255
   181  0216  34FF               	retlw	255
   182  0217  34FF               	retlw	255
   183  0218  34FF               	retlw	255
   184  0219  34FF               	retlw	255
   185  021A  34FF               	retlw	255
   186  021B  3402               	retlw	2
   187  021C  3403               	retlw	3
   188  021D  34FF               	retlw	255
   189  021E  34FF               	retlw	255
   190  021F  34FF               	retlw	255
   191  0220  3408               	retlw	8
   192  0221  3409               	retlw	9
   193  0222  3401               	retlw	1
   194  0223  340A               	retlw	10
   195  0224  340B               	retlw	11
   196  0225  34D6               	retlw	214
   197  0226  34FF               	retlw	255
   198  0227  3418               	retlw	24
   199  0228  3410               	retlw	16
   200  0229  3411               	retlw	17
   201  022A  3412               	retlw	18
   202  022B  341B               	retlw	27
   203  022C  3413               	retlw	19
   204  022D  34FF               	retlw	255
   205  022E  345C               	retlw	92
   206  022F  3407               	retlw	7
   207  0230  3420               	retlw	32
   208  0231  3419               	retlw	25
   209  0232  3422               	retlw	34
   210  0233  341A               	retlw	26
   211  0234  3423               	retlw	35
   212  0235  3463               	retlw	99
   213  0236  3464               	retlw	100
   214  0237  341F               	retlw	31
   215  0238  3427               	retlw	39
   216  0239  3426               	retlw	38
   217  023A  3421               	retlw	33
   218  023B  3425               	retlw	37
   219  023C  3424               	retlw	36
   220  023D  3454               	retlw	84
   221  023E  34A0               	retlw	160
   222  023F  3406               	retlw	6
   223  0240  3417               	retlw	23
   224  0241  341E               	retlw	30
   225  0242  341D               	retlw	29
   226  0243  341C               	retlw	28
   227  0244  3414               	retlw	20
   228  0245  34FF               	retlw	255
   229  0246  34FF               	retlw	255
   230  0247  349F               	retlw	159
   231  0248  3416               	retlw	22
   232  0249  3415               	retlw	21
   233  024A  340D               	retlw	13
   234  024B  3404               	retlw	4
   235  024C  340C               	retlw	12
   236  024D  34FF               	retlw	255
   237  024E  34C1               	retlw	193
   238  024F  3497               	retlw	151
   239  0250  34A0               	retlw	160
   240  0251  340E               	retlw	14
   241  0252  348D               	retlw	141
   242  0253  3405               	retlw	5
   243  0254  349E               	retlw	158
   244  0255  3483               	retlw	131
   245  0256  348B               	retlw	139
   246  0257  3493               	retlw	147
   247  0258  349C               	retlw	156
   248  0259  349B               	retlw	155
   249  025A  34E5               	retlw	229
   250  025B  348E               	retlw	142
   251  025C  34A3               	retlw	163
   252  025D  34A6               	retlw	166
   253  025E  344B               	retlw	75
   254  025F  34FF               	retlw	255
   255  0260  3406               	retlw	6
   256  0261  34DD               	retlw	221
   257  0262  34A4               	retlw	164
   258  0263  34D1               	retlw	209
   259  0264  34A7               	retlw	167
   260  0265  3494               	retlw	148
   261  0266  348C               	retlw	140
   262  0267  3484               	retlw	132
   263  0268  3496               	retlw	150
   264  0269  34C9               	retlw	201
   265  026A  34D9               	retlw	217
   266  026B  34E1               	retlw	225
   267  026C  3444               	retlw	68
   268  026D  3488               	retlw	136
   269  026E  3485               	retlw	133
   270  026F  3403               	retlw	3
   271  0270  349A               	retlw	154
   272  0271  341B               	retlw	27
   273  0272  341C               	retlw	28
   274  0273  34A2               	retlw	162
   275  0274  3498               	retlw	152
   276  0275  34C0               	retlw	192
   277  0276  3404               	retlw	4
   278  0277  3497               	retlw	151
   279  0278  340B               	retlw	11
   280  0279  3423               	retlw	35
   281  027A  3424               	retlw	36
   282  027B  3414               	retlw	20
   283  027C  3443               	retlw	67
   284  027D  34FF               	retlw	255
   285  027E  34FF               	retlw	255
   286  027F  3496               	retlw	150
   287  0280  3413               	retlw	19
   288  0281  349E               	retlw	158
   289  0282  34A7               	retlw	167
   290  0283  340C               	retlw	12
   291  0284  34FF               	retlw	255
   292  0285  34FF               	retlw	255
   293  0286                     __end_of_codeToMatrix:	
   294  0286                     _replaceOnShiftKeyDown:	
   295  0286  3416               	retlw	22
   296  0287  344F               	retlw	79
   297  0288  341E               	retlw	30
   298  0289  3450               	retlw	80
   299  028A  3426               	retlw	38
   300  028B  3451               	retlw	81
   301  028C  3425               	retlw	37
   302  028D  3453               	retlw	83
   303  028E  342E               	retlw	46
   304  028F  3456               	retlw	86
   305  0290  3436               	retlw	54
   306  0291  3457               	retlw	87
   307  0292  343D               	retlw	61
   308  0293  345C               	retlw	92
   309  0294  343E               	retlw	62
   310  0295  345E               	retlw	94
   311  0296  3446               	retlw	70
   312  0297  345F               	retlw	95
   313  0298  3445               	retlw	69
   314  0299  3460               	retlw	96
   315  029A  344E               	retlw	78
   316  029B  3461               	retlw	97
   317  029C  3455               	retlw	85
   318  029D  3462               	retlw	98
   319  029E  345D               	retlw	93
   320  029F  3463               	retlw	99
   321  02A0  344C               	retlw	76
   322  02A1  3467               	retlw	103
   323  02A2  3452               	retlw	82
   324  02A3  3468               	retlw	104
   325  02A4  3441               	retlw	65
   326  02A5  346A               	retlw	106
   327  02A6  3449               	retlw	73
   328  02A7  346D               	retlw	109
   329  02A8  344A               	retlw	74
   330  02A9  346E               	retlw	110
   331  02AA  340E               	retlw	14
   332  02AB  3448               	retlw	72
   333  02AC  3454               	retlw	84
   334  02AD  3464               	retlw	100
   335  02AE  345B               	retlw	91
   336  02AF  3465               	retlw	101
   337  02B0                     __end_of_replaceOnShiftKeyDown:	
   338  02B0                     _replaceTwoBytesCodes:	
   339  02B0  3411               	retlw	17
   340  02B1  3408               	retlw	8
   341  02B2  3414               	retlw	20
   342  02B3  3413               	retlw	19
   343  02B4  3470               	retlw	112
   344  02B5  3417               	retlw	23
   345  02B6  346C               	retlw	108
   346  02B7  3418               	retlw	24
   347  02B8  347D               	retlw	125
   348  02B9  3419               	retlw	25
   349  02BA  3471               	retlw	113
   350  02BB  341F               	retlw	31
   351  02BC  3469               	retlw	105
   352  02BD  3420               	retlw	32
   353  02BE  347A               	retlw	122
   354  02BF  3427               	retlw	39
   355  02C0  3475               	retlw	117
   356  02C1  3428               	retlw	40
   357  02C2  346B               	retlw	107
   358  02C3  342F               	retlw	47
   359  02C4  3472               	retlw	114
   360  02C5  3430               	retlw	48
   361  02C6  3474               	retlw	116
   362  02C7  3437               	retlw	55
   363  02C8  344A               	retlw	74
   364  02C9  3438               	retlw	56
   365  02CA  345A               	retlw	90
   366  02CB  3439               	retlw	57
   367  02CC                     __end_of_replaceTwoBytesCodes:	
   368  02CC                     _replaceOnDelayKeyDown:	
   369  02CC  341F               	retlw	31
   370  02CD  3454               	retlw	84
   371  02CE  345B               	retlw	91
   372  02CF  3463               	retlw	99
   373  02D0  3464               	retlw	100
   374  02D1  3465               	retlw	101
   375  02D2  3448               	retlw	72
   376  02D3  345D               	retlw	93
   377  02D4                     __end_of_replaceOnDelayKeyDown:	
   378  02D4                     _importantKeys:	
   379  02D4  3412               	retlw	18
   380  02D5  3459               	retlw	89
   381  02D6  3414               	retlw	20
   382  02D7  3413               	retlw	19
   383  02D8  3411               	retlw	17
   384  02D9  3408               	retlw	8
   385  02DA                     __end_of_importantKeys:	
   386  02DA                     _kempstonMouseKeys:	
   387  02DA  346B               	retlw	107
   388  02DB  3474               	retlw	116
   389  02DC  3475               	retlw	117
   390  02DD  3472               	retlw	114
   391  02DE  3473               	retlw	115
   392  02DF  3404               	retlw	4
   393  02E0                     __end_of_kempstonMouseKeys:	
   394  0005                     _PORTA	set	5
   395  0018                     _RCSTA	set	24
   396  001F                     _CMCON	set	31
   397  0017                     _CCP1CON	set	23
   398  0016                     _CCPR1H	set	22
   399  0015                     _CCPR1L	set	21
   400  0010                     _T1CON	set	16
   401  0011                     _TMR2	set	17
   402  000F                     _TMR1H	set	15
   403  000E                     _TMR1L	set	14
   404  0006                     _PORTB	set	6
   405  0005                     _PORTAbits	set	5
   406  0001                     _TMR0	set	1
   407  00C7                     _SPEN	set	199
   408  0060                     _TMR1IF	set	96
   409  0061                     _TMR2IF	set	97
   410  0062                     _CCP1IF	set	98
   411  0064                     _TXIF	set	100
   412  0065                     _RCIF	set	101
   413  0066                     _CMIF	set	102
   414  0067                     _EEIF	set	103
   415  0058                     _RBIF	set	88
   416  0059                     _INTF	set	89
   417  005B                     _RBIE	set	91
   418  005C                     _INTE	set	92
   419  005E                     _PEIE	set	94
   420  005F                     _GIE	set	95
   421  0029                     _RA1	set	41
   422  002A                     _RA2	set	42
   423  005A                     _T0IF	set	90
   424  005D                     _T0IE	set	93
   425  0086                     _TRISB	set	134
   426  0098                     _TXSTA	set	152
   427  009F                     _VRCON	set	159
   428  042F                     _TRISA7	set	1071
   429  042E                     _TRISA6	set	1070
   430  042D                     _TRISA5	set	1069
   431  042C                     _TRISA4	set	1068
   432  042B                     _TRISA3	set	1067
   433  042A                     _TRISA2	set	1066
   434  0429                     _TRISA1	set	1065
   435  0428                     _TRISA0	set	1064
   436  0408                     _PS0	set	1032
   437  0409                     _PS1	set	1033
   438  040A                     _PS2	set	1034
   439  040B                     _PSA	set	1035
   440  040C                     _T0SE	set	1036
   441  040D                     _T0CS	set	1037
   442  040E                     _INTEDG	set	1038
   443  040F                     _nRBPU	set	1039
   444  0460                     _TMR1IE	set	1120
   445  0461                     _TMR2IE	set	1121
   446  0462                     _CCP1IE	set	1122
   447  0464                     _TXIE	set	1124
   448  0465                     _RCIE	set	1125
   449  0466                     _CMIE	set	1126
   450  0467                     _EEIE	set	1127
   451                           
   452                           	psect	cinit
   453  0011                     start_initialization:	
   454                           ; #config settings
   455                           
   456  0011                     __initialization:	
   457                           
   458                           ; Initialize objects allocated to BANK0
   459  0011  2495               	fcall	__pidataBANK0	;fetch initializer
   460  0012  00CF               	movwf	__pdataBANK0& (0+127)
   461  0013  2496               	fcall	__pidataBANK0+1	;fetch initializer
   462  0014  00D0               	movwf	(__pdataBANK0+1)& (0+127)
   463  0015  2497               	fcall	__pidataBANK0+2	;fetch initializer
   464  0016  00D1               	movwf	(__pdataBANK0+2)& (0+127)
   465  0017  2498               	fcall	__pidataBANK0+3	;fetch initializer
   466  0018  00D2               	movwf	(__pdataBANK0+3)& (0+127)
   467  0019  2499               	fcall	__pidataBANK0+4	;fetch initializer
   468  001A  00D3               	movwf	(__pdataBANK0+4)& (0+127)
   469  001B  249A               	fcall	__pidataBANK0+5	;fetch initializer
   470  001C  00D4               	movwf	(__pdataBANK0+5)& (0+127)
   471  001D  249B               	fcall	__pidataBANK0+6	;fetch initializer
   472  001E  00D5               	movwf	(__pdataBANK0+6)& (0+127)
   473  001F  249C               	fcall	__pidataBANK0+7	;fetch initializer
   474  0020  00D6               	movwf	(__pdataBANK0+7)& (0+127)
   475  0021  249D               	fcall	__pidataBANK0+8	;fetch initializer
   476  0022  00D7               	movwf	(__pdataBANK0+8)& (0+127)
   477  0023  249E               	fcall	__pidataBANK0+9	;fetch initializer
   478  0024  00D8               	movwf	(__pdataBANK0+9)& (0+127)
   479  0025  249F               	fcall	__pidataBANK0+10	;fetch initializer
   480  0026  00D9               	movwf	(__pdataBANK0+10)& (0+127)
   481                           
   482                           ; Clear objects allocated to BANK0
   483  0027  1383               	bcf	3,7	;select IRP bank0
   484  0028  3038               	movlw	low __pbssBANK0
   485  0029  0084               	movwf	4
   486  002A  304F               	movlw	low (__pbssBANK0+23)
   487  002B  24A0               	fcall	clear_ram0
   488                           
   489                           ; Clear objects allocated to COMMON
   490  002C  3079               	movlw	low __pbssCOMMON
   491  002D  0084               	movwf	4
   492  002E  307E               	movlw	low (__pbssCOMMON+5)
   493  002F  24A0               	fcall	clear_ram0
   494  0030                     end_of_initialization:	
   495                           ;End of C runtime variable initialization code
   496                           
   497  0030                     __end_of__initialization:	
   498  0030  0183               	clrf	3
   499  0031  2832               	ljmp	_main	;jump to C main() function
   500                           
   501                           	psect	bssCOMMON
   502  0079                     __pbssCOMMON:	
   503  0079                     _ps2DataA:	
   504  0079                     	ds	1
   505  007A                     _inDataPos:	
   506  007A                     	ds	1
   507  007B                     _ps2BitsCount:	
   508  007B                     	ds	1
   509  007C                     _ps2Bits:	
   510  007C                     	ds	1
   511  007D                     _ps2DataState:	
   512  007D                     	ds	1
   513                           
   514                           	psect	bssBANK0
   515  0038                     __pbssBANK0:	
   516  0038                     _inData:	
   517  0038                     	ds	8
   518  0040                     _kempstonMouseEmulatorDelay:	
   519  0040                     	ds	2
   520  0042                     _delay:	
   521  0042                     	ds	2
   522  0044                     _ps2NeedEncode:	
   523  0044                     	ds	1
   524  0045                     _ps2DownA:	
   525  0045                     	ds	1
   526  0046                     _ps2WaitCode:	
   527  0046                     	ds	1
   528  0047                     _ps2Device:	
   529  0047                     	ds	1
   530  0048                     _ps2DataCount:	
   531  0048                     	ds	1
   532  0049                     _readDataPos:	
   533  0049                     	ds	1
   534  004A                     _delayedKey:	
   535  004A                     	ds	1
   536  004B                     _replaced:	
   537  004B                     	ds	1
   538  004C                     _numLock:	
   539  004C                     	ds	1
   540  004D                     _kempstonMouseEmulatorKeys:	
   541  004D                     	ds	1
   542  004E                     _shift_ctrl_alt:	
   543  004E                     	ds	1
   544                           
   545                           	psect	dataBANK0
   546  004F                     __pdataBANK0:	
   547  004F                     _outPorts:	
   548  004F                     	ds	11
   549                           
   550                           	psect	clrtext
   551  04A0                     clear_ram0:	
   552                           ;	Called with FSR containing the base address, and
   553                           ;	W with the last address+1
   554                           
   555  04A0  0064               	clrwdt	;clear the watchdog before getting into this loop
   556  04A1                     clrloop0:	
   557  04A1  0180               	clrf	0	;clear RAM location pointed to by FSR
   558  04A2  0A84               	incf	4,f	;increment pointer
   559  04A3  0604               	xorwf	4,w	;XOR with final address
   560  04A4  1903               	btfsc	3,2	;have we reached the end yet?
   561  04A5  3400               	retlw	0	;all done for this memory range, return
   562  04A6  0604               	xorwf	4,w	;XOR again to restore value
   563  04A7  2CA1               	goto	clrloop0	;do the next byte
   564                           
   565                           	psect	cstackCOMMON
   566  0070                     __pcstackCOMMON:	
   567  0070                     ?_myIsr:	
   568  0070                     ??_myIsr:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ?_myDelay:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_sendDataToAltera:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_main:	
   578                           ; 1 bytes @ 0x0
   579                           
   580                           
   581                           ; 1 bytes @ 0x0
   582  0070                     	ds	6
   583  0076                     _myIsr$139:	
   584                           
   585                           ; 2 bytes @ 0x6
   586  0076                     	ds	2
   587  0078                     myIsr@i:	
   588                           
   589                           ; 1 bytes @ 0x8
   590  0078                     	ds	1
   591                           
   592                           	psect	cstackBANK0
   593  0020                     __pcstackBANK0:	
   594  0020                     ?_updatePort:	
   595  0020                     ??_myDelay:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0020                     ??_sendDataToAltera:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0020                     ?_calculateBitsFromTable:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0020                     updatePort@set:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0020                     calculateBitsFromTable@keyDown:	
   608                           ; 1 bytes @ 0x0
   609                           
   610                           
   611                           ; 1 bytes @ 0x0
   612  0020                     	ds	1
   613  0021                     ??_updatePort:	
   614  0021                     calculateBitsFromTable@bits:	
   615                           ; 1 bytes @ 0x1
   616                           
   617                           
   618                           ; 1 bytes @ 0x1
   619  0021                     	ds	1
   620  0022                     calculateBitsFromTable@table:	
   621  0022                     _sendDataToAltera$156:	
   622                           ; 1 bytes @ 0x2
   623                           
   624                           
   625                           ; 2 bytes @ 0x2
   626  0022                     	ds	1
   627  0023                     calculateBitsFromTable@count:	
   628                           
   629                           ; 1 bytes @ 0x3
   630  0023                     	ds	1
   631  0024                     updatePort@a:	
   632  0024                     sendDataToAltera@i:	
   633                           ; 1 bytes @ 0x4
   634                           
   635  0024                     calculateBitsFromTable@clearIfFound:	
   636                           ; 1 bytes @ 0x4
   637                           
   638                           
   639                           ; 1 bytes @ 0x4
   640  0024                     	ds	1
   641  0025                     ??_calculateBitsFromTable:	
   642  0025                     updatePort@bit_id:	
   643                           ; 1 bytes @ 0x5
   644                           
   645                           
   646                           ; 1 bytes @ 0x5
   647  0025                     	ds	1
   648  0026                     ?_updateKey:	
   649  0026                     updateKey@down:	
   650                           ; 1 bytes @ 0x6
   651                           
   652                           
   653                           ; 1 bytes @ 0x6
   654  0026                     	ds	1
   655  0027                     ??_updateKey:	
   656  0027                     calculateBitsFromTable@keyCode:	
   657                           ; 1 bytes @ 0x7
   658                           
   659                           
   660                           ; 1 bytes @ 0x7
   661  0027                     	ds	1
   662  0028                     updateKey@key:	
   663  0028                     calculateBitsFromTable@i:	
   664                           ; 1 bytes @ 0x8
   665                           
   666                           
   667                           ; 1 bytes @ 0x8
   668  0028                     	ds	1
   669  0029                     updateKey@localShift:	
   670                           
   671                           ; 1 bytes @ 0x9
   672  0029                     	ds	1
   673  002A                     _updateKey$149:	
   674                           
   675                           ; 1 bytes @ 0xA
   676  002A                     	ds	1
   677  002B                     updateKey@localCtrl:	
   678                           
   679                           ; 1 bytes @ 0xB
   680  002B                     	ds	1
   681  002C                     updateKey@code:	
   682                           
   683                           ; 1 bytes @ 0xC
   684  002C                     	ds	1
   685  002D                     ??_main:	
   686                           
   687                           ; 1 bytes @ 0xD
   688  002D                     	ds	5
   689  0032                     main@needSave:	
   690                           
   691                           ; 1 bytes @ 0x12
   692  0032                     	ds	1
   693  0033                     main@i:	
   694                           
   695                           ; 1 bytes @ 0x13
   696  0033                     	ds	1
   697  0034                     main@i_177:	
   698                           
   699                           ; 1 bytes @ 0x14
   700  0034                     	ds	1
   701  0035                     main@i_176:	
   702                           
   703                           ; 1 bytes @ 0x15
   704  0035                     	ds	1
   705  0036                     main@keyDown:	
   706                           
   707                           ; 1 bytes @ 0x16
   708  0036                     	ds	1
   709  0037                     main@keyCode:	
   710                           
   711                           ; 1 bytes @ 0x17
   712  0037                     	ds	1
   713                           
   714                           	psect	maintext
   715  0032                     __pmaintext:	
   716 ;;
   717 ;;Main: autosize = 0, tempsize = 5, incstack = 0, save=0
   718 ;;
   719 ;; *************** function _main *****************
   720 ;; Defined at:
   721 ;;		line 376 in file "main.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;		None
   724 ;; Auto vars:     Size  Location     Type
   725 ;;  i               1   20[BANK0 ] char 
   726 ;;  i               1   21[BANK0 ] char 
   727 ;;  keyCode         1   23[BANK0 ] unsigned char 
   728 ;;  keyDown         1   22[BANK0 ] unsigned char 
   729 ;;  needSave        1   18[BANK0 ] unsigned char 
   730 ;;  i               1   19[BANK0 ] char 
   731 ;; Return value:  Size  Location     Type
   732 ;;                  1    wreg      void 
   733 ;; Registers used:
   734 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   735 ;; Tracked objects:
   736 ;;		On entry : B00/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   740 ;;      Params:         0       0       0       0
   741 ;;      Locals:         0       6       0       0
   742 ;;      Temps:          0       5       0       0
   743 ;;      Totals:         0      11       0       0
   744 ;;Total ram usage:       11 bytes
   745 ;; Hardware stack levels required when called:    4
   746 ;; This function calls:
   747 ;;		_calculateBitsFromTable
   748 ;;		_sendDataToAltera
   749 ;;		_updateKey
   750 ;;		_updatePort
   751 ;; This function is called by:
   752 ;;		Startup code after reset
   753 ;; This function uses a non-reentrant model
   754 ;;
   755                           
   756                           
   757                           ;psect for function _main
   758  0032                     _main:	
   759                           
   760                           ;main.c: 379:     ps2DataA = 0;
   761                           
   762                           ;incstack = 0
   763                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   764  0032  01F9               	clrf	_ps2DataA
   765                           
   766                           ;main.c: 380:     ps2DataCount = 0;
   767  0033  1283               	bcf	3,5	;RP0=0, select bank0
   768  0034  1303               	bcf	3,6	;RP1=0, select bank0
   769  0035  01C8               	clrf	_ps2DataCount
   770                           
   771                           ;main.c: 381:     ps2WaitCode = 0;
   772  0036  01C6               	clrf	_ps2WaitCode
   773                           
   774                           ;main.c: 382:     ps2DownA = 0;
   775  0037  01C5               	clrf	_ps2DownA
   776                           
   777                           ;main.c: 383:     ps2NeedEncode = 0;
   778  0038  01C4               	clrf	_ps2NeedEncode
   779                           
   780                           ;main.c: 384:     ps2DataState = 0;
   781  0039  01FD               	clrf	_ps2DataState
   782                           
   783                           ;main.c: 387:     for(int8_t i=0;i<8;i++) {
   784  003A  01B3               	clrf	main@i
   785  003B  0833               	movf	main@i,w
   786  003C  3A80               	xorlw	128
   787  003D  3E78               	addlw	-136
   788  003E  1803               	btfsc	3,0
   789  003F  284E               	goto	l1489
   790  0040                     l1483:	
   791                           
   792                           ;main.c: 388:         outPorts[i] = 0;
   793  0040  0833               	movf	main@i,w
   794  0041  3E4F               	addlw	(low (_outPorts| 0))& (0+255)
   795  0042  0084               	movwf	4
   796  0043  1383               	bcf	3,7	;select IRP bank0
   797  0044  0180               	clrf	0
   798                           
   799                           ;main.c: 389:     }
   800  0045  3001               	movlw	1
   801  0046  00AD               	movwf	??_main
   802  0047  082D               	movf	??_main,w
   803  0048  07B3               	addwf	main@i,f
   804  0049  0833               	movf	main@i,w
   805  004A  3A80               	xorlw	128
   806  004B  3E78               	addlw	-136
   807  004C  1C03               	skipc
   808  004D  2840               	goto	l1483
   809  004E                     l1489:	
   810                           
   811                           ;main.c: 390:     outPorts[8] = 0x07;
   812  004E  3007               	movlw	7
   813  004F  00AD               	movwf	??_main
   814  0050  082D               	movf	??_main,w
   815  0051  00D7               	movwf	_outPorts+8
   816                           
   817                           ;main.c: 391:     outPorts[9] = 0xF5;
   818  0052  30F5               	movlw	245
   819  0053  00AD               	movwf	??_main
   820  0054  082D               	movf	??_main,w
   821  0055  00D8               	movwf	_outPorts+9
   822                           
   823                           ;main.c: 392:     outPorts[10] = 0xDA;
   824  0056  30DA               	movlw	218
   825  0057  00AD               	movwf	??_main
   826  0058  082D               	movf	??_main,w
   827  0059  00D9               	movwf	_outPorts+10
   828                           
   829                           ;main.c: 393:     sendDataToAltera();
   830  005A  23D5               	fcall	_sendDataToAltera
   831                           
   832                           ;main.c: 398:     GIE = 1;
   833  005B  178B               	bsf	11,7	;volatile
   834                           
   835                           ;main.c: 399:     PEIE = 0;
   836  005C  130B               	bcf	11,6	;volatile
   837                           
   838                           ;main.c: 400:     T0IE = 1;
   839  005D  168B               	bsf	11,5	;volatile
   840                           
   841                           ;main.c: 401:     INTE = 0;
   842  005E  120B               	bcf	11,4	;volatile
   843                           
   844                           ;main.c: 402:     RBIE = 0;
   845  005F  118B               	bcf	11,3	;volatile
   846                           
   847                           ;main.c: 403:     T0IF = 0;
   848  0060  110B               	bcf	11,2	;volatile
   849                           
   850                           ;main.c: 404:     INTF = 0;
   851  0061  108B               	bcf	11,1	;volatile
   852                           
   853                           ;main.c: 405:     RBIF = 0;
   854  0062  100B               	bcf	11,0	;volatile
   855                           
   856                           ;main.c: 408:     EEIF = 0;
   857  0063  1283               	bcf	3,5	;RP0=0, select bank0
   858  0064  1303               	bcf	3,6	;RP1=0, select bank0
   859  0065  138C               	bcf	12,7	;volatile
   860                           
   861                           ;main.c: 409:     CMIF = 0;
   862  0066  130C               	bcf	12,6	;volatile
   863                           
   864                           ;main.c: 410:     RCIF = 0;
   865  0067  128C               	bcf	12,5	;volatile
   866                           
   867                           ;main.c: 411:     TXIF = 0;
   868  0068  120C               	bcf	12,4	;volatile
   869                           
   870                           ;main.c: 412:     CCP1IF = 0;
   871  0069  110C               	bcf	12,2	;volatile
   872                           
   873                           ;main.c: 413:     TMR2IF = 0;
   874  006A  108C               	bcf	12,1	;volatile
   875                           
   876                           ;main.c: 414:     TMR1IF = 0;
   877  006B  100C               	bcf	12,0	;volatile
   878                           
   879                           ;main.c: 417:     EEIE = 0;
   880  006C  1683               	bsf	3,5	;RP0=1, select bank1
   881  006D  1303               	bcf	3,6	;RP1=0, select bank1
   882  006E  138C               	bcf	12,7	;volatile
   883                           
   884                           ;main.c: 418:     CMIE = 0;
   885  006F  130C               	bcf	12,6	;volatile
   886                           
   887                           ;main.c: 419:     RCIE = 0;
   888  0070  128C               	bcf	12,5	;volatile
   889                           
   890                           ;main.c: 420:     TXIE = 0;
   891  0071  120C               	bcf	12,4	;volatile
   892                           
   893                           ;main.c: 421:     CCP1IE = 0;
   894  0072  110C               	bcf	12,2	;volatile
   895                           
   896                           ;main.c: 422:     TMR2IE = 0;
   897  0073  108C               	bcf	12,1	;volatile
   898                           
   899                           ;main.c: 423:     TMR1IE = 0;
   900  0074  100C               	bcf	12,0	;volatile
   901                           
   902                           ;main.c: 426:     nRBPU = 0;
   903  0075  1381               	bcf	1,7	;volatile
   904                           
   905                           ;main.c: 427:     INTEDG = 0;
   906  0076  1301               	bcf	1,6	;volatile
   907                           
   908                           ;main.c: 428:     T0CS = 1;
   909  0077  1681               	bsf	1,5	;volatile
   910                           
   911                           ;main.c: 429:     T0SE = 1;
   912  0078  1601               	bsf	1,4	;volatile
   913                           
   914                           ;main.c: 430:     PSA = 1;
   915  0079  1581               	bsf	1,3	;volatile
   916                           
   917                           ;main.c: 431:     PS2 = 0;
   918  007A  1101               	bcf	1,2	;volatile
   919                           
   920                           ;main.c: 432:     PS1 = 0;
   921  007B  1081               	bcf	1,1	;volatile
   922                           
   923                           ;main.c: 433:     PS0 = 0;
   924  007C  1001               	bcf	1,0	;volatile
   925                           
   926                           ;main.c: 436:     TMR0 = 255;
   927  007D  30FF               	movlw	255
   928  007E  1283               	bcf	3,5	;RP0=0, select bank0
   929  007F  1303               	bcf	3,6	;RP1=0, select bank0
   930  0080  0081               	movwf	1	;volatile
   931                           
   932                           ;main.c: 437:     TMR1L = 0;
   933  0081  018E               	clrf	14	;volatile
   934                           
   935                           ;main.c: 438:     TMR1H = 0;
   936  0082  018F               	clrf	15	;volatile
   937                           
   938                           ;main.c: 439:     TMR2 = 0;
   939  0083  0191               	clrf	17	;volatile
   940                           
   941                           ;main.c: 440:     T1CON = 6;
   942  0084  3006               	movlw	6
   943  0085  0090               	movwf	16	;volatile
   944                           
   945                           ;main.c: 441:     CCPR1L = 0;
   946  0086  0195               	clrf	21	;volatile
   947                           
   948                           ;main.c: 442:     CCPR1H = 0;
   949  0087  0196               	clrf	22	;volatile
   950                           
   951                           ;main.c: 443:     CCP1CON = 0;
   952  0088  0197               	clrf	23	;volatile
   953                           
   954                           ;main.c: 444:     CMCON = 7;
   955  0089  3007               	movlw	7
   956  008A  009F               	movwf	31	;volatile
   957                           
   958                           ;main.c: 445:     VRCON = 0;
   959  008B  1683               	bsf	3,5	;RP0=1, select bank1
   960  008C  1303               	bcf	3,6	;RP1=0, select bank1
   961  008D  019F               	clrf	31	;volatile
   962                           
   963                           ;main.c: 446:     RCSTA = 0;
   964  008E  1283               	bcf	3,5	;RP0=0, select bank0
   965  008F  1303               	bcf	3,6	;RP1=0, select bank0
   966  0090  0198               	clrf	24	;volatile
   967                           
   968                           ;main.c: 447:     TXSTA = 128;
   969  0091  3080               	movlw	128
   970  0092  1683               	bsf	3,5	;RP0=1, select bank1
   971  0093  1303               	bcf	3,6	;RP1=0, select bank1
   972  0094  0098               	movwf	24	;volatile
   973                           
   974                           ;main.c: 448:     SPEN = 0;
   975  0095  1283               	bcf	3,5	;RP0=0, select bank0
   976  0096  1303               	bcf	3,6	;RP1=0, select bank0
   977  0097  1398               	bcf	24,7	;volatile
   978                           
   979                           ;main.c: 453:     PORTA = 0;
   980  0098  0185               	clrf	5	;volatile
   981                           
   982                           ;main.c: 455:     TRISA0 = 1;
   983  0099  1683               	bsf	3,5	;RP0=1, select bank1
   984  009A  1303               	bcf	3,6	;RP1=0, select bank1
   985  009B  1405               	bsf	5,0	;volatile
   986                           
   987                           ;main.c: 456:     TRISA1 = 0;
   988  009C  1085               	bcf	5,1	;volatile
   989                           
   990                           ;main.c: 457:     TRISA2 = 0;
   991  009D  1105               	bcf	5,2	;volatile
   992                           
   993                           ;main.c: 458:     TRISA3 = 1;
   994  009E  1585               	bsf	5,3	;volatile
   995                           
   996                           ;main.c: 459:     TRISA4 = 1;
   997  009F  1605               	bsf	5,4	;volatile
   998                           
   999                           ;main.c: 460:     TRISA5 = 1;
  1000  00A0  1685               	bsf	5,5	;volatile
  1001                           
  1002                           ;main.c: 461:     TRISA6 = 1;
  1003  00A1  1705               	bsf	5,6	;volatile
  1004                           
  1005                           ;main.c: 462:     TRISA7 = 1;
  1006  00A2  1785               	bsf	5,7	;volatile
  1007                           
  1008                           ;main.c: 465:     TRISB = 0;
  1009  00A3  0186               	clrf	6	;volatile
  1010                           
  1011                           ;main.c: 466:     PORTB = 0xFF;
  1012  00A4  30FF               	movlw	255
  1013  00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1014  00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1015  00A7  0086               	movwf	6	;volatile
  1016                           
  1017                           ;main.c: 469:     delay = 0;
  1018  00A8  01C2               	clrf	_delay
  1019  00A9  01C3               	clrf	_delay+1
  1020                           
  1021                           ;main.c: 470:     delayedKey = 0;
  1022  00AA  01CA               	clrf	_delayedKey
  1023                           
  1024                           ;main.c: 471:     shift_ctrl_alt = 0;
  1025  00AB  01CE               	clrf	_shift_ctrl_alt
  1026                           
  1027                           ;main.c: 472:     replaced = 0;
  1028  00AC  01CB               	clrf	_replaced
  1029  00AD                     l1609:	
  1030                           ;main.c: 482:     while(1)
  1031                           
  1032                           
  1033                           ;main.c: 483:     {;main.c: 484:         uint8_t needSave = 0;
  1034  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1035  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1036  00AF  01B2               	clrf	main@needSave
  1037                           
  1038                           ;main.c: 487:         if ( readDataPos != inDataPos ) {
  1039  00B0  0849               	movf	_readDataPos,w
  1040  00B1  067A               	xorwf	_inDataPos,w
  1041  00B2  1903               	skipnz
  1042  00B3  299C               	goto	l1699
  1043                           
  1044                           ;main.c: 489:             uint8_t keyCode = (inData[readDataPos] & 127);
  1045  00B4  0849               	movf	_readDataPos,w
  1046  00B5  3E38               	addlw	(low (_inData| 0))& (0+255)
  1047  00B6  0084               	movwf	4
  1048  00B7  1383               	bcf	3,7	;select IRP bank0
  1049  00B8  0800               	movf	0,w
  1050  00B9  397F               	andlw	127
  1051  00BA  00AD               	movwf	??_main
  1052  00BB  082D               	movf	??_main,w
  1053  00BC  00B7               	movwf	main@keyCode
  1054                           
  1055                           ;main.c: 490:             uint8_t keyDown = (inData[readDataPos] & 128) == 0;
  1056  00BD  0849               	movf	_readDataPos,w
  1057  00BE  3E38               	addlw	(low (_inData| 0))& (0+255)
  1058  00BF  0084               	movwf	4
  1059  00C0  1B80               	btfsc	0,7
  1060  00C1  28C4               	goto	u1260
  1061  00C2  3001               	movlw	1
  1062  00C3  28C5               	goto	u1270
  1063  00C4                     u1260:	
  1064  00C4  3000               	movlw	0
  1065  00C5                     u1270:	
  1066  00C5  00AD               	movwf	??_main
  1067  00C6  082D               	movf	??_main,w
  1068  00C7  00B6               	movwf	main@keyDown
  1069                           
  1070                           ;main.c: 491:             readDataPos = (readDataPos + 1) & 7;
  1071  00C8  0849               	movf	_readDataPos,w
  1072  00C9  3E01               	addlw	1
  1073  00CA  3907               	andlw	7
  1074  00CB  00AD               	movwf	??_main
  1075  00CC  082D               	movf	??_main,w
  1076  00CD  00C9               	movwf	_readDataPos
  1077                           
  1078                           ;main.c: 499:                 calculateBitsFromTable(&keyCode, &keyDown, &shift_ctrl_alt
      +                          , importantKeys, 6, 0);
  1079  00CE  3036               	movlw	(low (main@keyDown| 0))& (0+255)
  1080  00CF  00AD               	movwf	??_main
  1081  00D0  082D               	movf	??_main,w
  1082  00D1  00A0               	movwf	calculateBitsFromTable@keyDown
  1083  00D2  304E               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
  1084  00D3  00AE               	movwf	??_main+1
  1085  00D4  082E               	movf	??_main+1,w
  1086  00D5  00A1               	movwf	calculateBitsFromTable@bits
  1087  00D6  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
  1088  00D7  00AF               	movwf	??_main+2
  1089  00D8  082F               	movf	??_main+2,w
  1090  00D9  00A2               	movwf	calculateBitsFromTable@table
  1091  00DA  3006               	movlw	6
  1092  00DB  00B0               	movwf	??_main+3
  1093  00DC  0830               	movf	??_main+3,w
  1094  00DD  00A3               	movwf	calculateBitsFromTable@count
  1095  00DE  01A4               	clrf	calculateBitsFromTable@clearIfFound
  1096  00DF  3037               	movlw	(low (main@keyCode| 0))& (0+255)
  1097  00E0  241F               	fcall	_calculateBitsFromTable
  1098                           
  1099                           ;main.c: 501:                 calculateBitsFromTable(&keyCode, &keyDown, &kempstonMouseE
      +                          mulatorKeys, kempstonMouseKeys, 6, numLock);
  1100  00E1  3036               	movlw	(low (main@keyDown| 0))& (0+255)
  1101  00E2  1283               	bcf	3,5	;RP0=0, select bank0
  1102  00E3  1303               	bcf	3,6	;RP1=0, select bank0
  1103  00E4  00AD               	movwf	??_main
  1104  00E5  082D               	movf	??_main,w
  1105  00E6  00A0               	movwf	calculateBitsFromTable@keyDown
  1106  00E7  304D               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
  1107  00E8  00AE               	movwf	??_main+1
  1108  00E9  082E               	movf	??_main+1,w
  1109  00EA  00A1               	movwf	calculateBitsFromTable@bits
  1110  00EB  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
  1111  00EC  00AF               	movwf	??_main+2
  1112  00ED  082F               	movf	??_main+2,w
  1113  00EE  00A2               	movwf	calculateBitsFromTable@table
  1114  00EF  3006               	movlw	6
  1115  00F0  00B0               	movwf	??_main+3
  1116  00F1  0830               	movf	??_main+3,w
  1117  00F2  00A3               	movwf	calculateBitsFromTable@count
  1118  00F3  084C               	movf	_numLock,w
  1119  00F4  00B1               	movwf	??_main+4
  1120  00F5  0831               	movf	??_main+4,w
  1121  00F6  00A4               	movwf	calculateBitsFromTable@clearIfFound
  1122  00F7  3037               	movlw	(low (main@keyCode| 0))& (0+255)
  1123  00F8  241F               	fcall	_calculateBitsFromTable
  1124                           
  1125                           ;main.c: 508:                 if ( keyCode == 119 && keyDown ) {
  1126  00F9  3077               	movlw	119
  1127  00FA  1283               	bcf	3,5	;RP0=0, select bank0
  1128  00FB  1303               	bcf	3,6	;RP1=0, select bank0
  1129  00FC  0637               	xorwf	main@keyCode,w
  1130  00FD  1D03               	btfss	3,2
  1131  00FE  290B               	goto	l1627
  1132  00FF  0836               	movf	main@keyDown,w
  1133  0100  1903               	btfsc	3,2
  1134  0101  290B               	goto	l1627
  1135                           
  1136                           ;main.c: 509:                     numLock = !numLock;
  1137  0102  084C               	movf	_numLock,w
  1138  0103  1D03               	btfss	3,2
  1139  0104  2907               	goto	u1300
  1140  0105  3001               	movlw	1
  1141  0106  2908               	goto	u1310
  1142  0107                     u1300:	
  1143  0107  3000               	movlw	0
  1144  0108                     u1310:	
  1145  0108  00AD               	movwf	??_main
  1146  0109  082D               	movf	??_main,w
  1147  010A  00CC               	movwf	_numLock
  1148  010B                     l1627:	
  1149                           ;main.c: 510:                 }
  1150                           
  1151                           
  1152                           ;main.c: 513:                 if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 
      +                          0 && keyCode == 31 && keyDown ) {
  1153  010B  084E               	movf	_shift_ctrl_alt,w
  1154  010C  390C               	andlw	12
  1155  010D  1903               	btfsc	3,2
  1156  010E  291F               	goto	l242
  1157  010F  084E               	movf	_shift_ctrl_alt,w
  1158  0110  3930               	andlw	48
  1159  0111  1903               	btfsc	3,2
  1160  0112  291F               	goto	l242
  1161  0113  301F               	movlw	31
  1162  0114  0637               	xorwf	main@keyCode,w
  1163  0115  1D03               	btfss	3,2
  1164  0116  291F               	goto	l242
  1165  0117  0836               	movf	main@keyDown,w
  1166  0118  1903               	btfsc	3,2
  1167  0119  291F               	goto	l242
  1168                           
  1169                           ;main.c: 514:                     outPorts[8] &= 253;
  1170  011A  30FD               	movlw	253
  1171  011B  00AD               	movwf	??_main
  1172  011C  082D               	movf	??_main,w
  1173  011D  05D7               	andwf	_outPorts+8,f
  1174                           
  1175                           ;main.c: 515:                 } else {
  1176  011E  2920               	goto	l1637
  1177  011F                     l242:	
  1178                           
  1179                           ;main.c: 516:                     outPorts[8] |= 2;
  1180  011F  14D7               	bsf	_outPorts+8,1
  1181  0120                     l1637:	
  1182                           ;main.c: 517:                 }
  1183                           
  1184                           
  1185                           ;main.c: 520:                 if ( (shift_ctrl_alt & 12) > 0 && keyCode == 126 && keyDow
      +                          n ) {
  1186  0120  084E               	movf	_shift_ctrl_alt,w
  1187  0121  390C               	andlw	12
  1188  0122  1903               	btfsc	3,2
  1189  0123  2930               	goto	l244
  1190  0124  307E               	movlw	126
  1191  0125  0637               	xorwf	main@keyCode,w
  1192  0126  1D03               	btfss	3,2
  1193  0127  2930               	goto	l244
  1194  0128  0836               	movf	main@keyDown,w
  1195  0129  1903               	btfsc	3,2
  1196  012A  2930               	goto	l244
  1197                           
  1198                           ;main.c: 521:                     outPorts[8] &= 251;
  1199  012B  30FB               	movlw	251
  1200  012C  00AD               	movwf	??_main
  1201  012D  082D               	movf	??_main,w
  1202  012E  05D7               	andwf	_outPorts+8,f
  1203                           
  1204                           ;main.c: 522:                 } else {
  1205  012F  2931               	goto	l1645
  1206  0130                     l244:	
  1207                           
  1208                           ;main.c: 523:                     outPorts[8] |= 4;
  1209  0130  1557               	bsf	_outPorts+8,2
  1210  0131                     l1645:	
  1211                           ;main.c: 524:                 }
  1212                           
  1213                           
  1214                           ;main.c: 531:                 for(int8_t i = 0; i < 41 ;i+=2) {
  1215  0131  01B5               	clrf	main@i_176
  1216  0132  0835               	movf	main@i_176,w
  1217  0133  3A80               	xorlw	128
  1218  0134  3E57               	addlw	-169
  1219  0135  1803               	btfsc	3,0
  1220  0136  2969               	goto	l1675
  1221  0137                     l1651:	
  1222                           
  1223                           ;main.c: 532:                     if ( keyCode == replaceOnShiftKeyDown[i] ) {
  1224  0137  0835               	movf	main@i_176,w
  1225  0138  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1226  0139  0084               	movwf	4
  1227  013A  2200               	fcall	stringdir
  1228  013B  0637               	xorwf	main@keyCode,w
  1229  013C  1D03               	skipz
  1230  013D  2960               	goto	l1671
  1231                           
  1232                           ;main.c: 533:                         if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0)
      +                           || replaced == keyCode) {
  1233  013E  084E               	movf	_shift_ctrl_alt,w
  1234  013F  3903               	andlw	3
  1235  0140  1903               	btfsc	3,2
  1236  0141  2945               	goto	l1657
  1237  0142  084B               	movf	_replaced,w
  1238  0143  1903               	btfsc	3,2
  1239  0144  2949               	goto	l1659
  1240  0145                     l1657:	
  1241  0145  084B               	movf	_replaced,w
  1242  0146  0637               	xorwf	main@keyCode,w
  1243  0147  1D03               	skipz
  1244  0148  295B               	goto	l1667
  1245  0149                     l1659:	
  1246                           
  1247                           ;main.c: 534:                             if ( keyDown ) replaced = keyCode;
  1248  0149  0836               	movf	main@keyDown,w
  1249  014A  1903               	btfsc	3,2
  1250  014B  2951               	goto	l1663
  1251  014C  0837               	movf	main@keyCode,w
  1252  014D  00AD               	movwf	??_main
  1253  014E  082D               	movf	??_main,w
  1254  014F  00CB               	movwf	_replaced
  1255  0150  2952               	goto	l1665
  1256  0151                     l1663:	
  1257                           ;main.c: 535:                             else replaced = 0;
  1258                           
  1259  0151  01CB               	clrf	_replaced
  1260  0152                     l1665:	
  1261                           
  1262                           ;main.c: 536:                             keyCode = replaceOnShiftKeyDown[i+1];
  1263  0152  0835               	movf	main@i_176,w
  1264  0153  3E01               	addlw	1
  1265  0154  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1266  0155  0084               	movwf	4
  1267  0156  2200               	fcall	stringdir
  1268  0157  00AD               	movwf	??_main
  1269  0158  082D               	movf	??_main,w
  1270  0159  00B7               	movwf	main@keyCode
  1271                           
  1272                           ;main.c: 537:                         } else {
  1273  015A  2969               	goto	l1675
  1274  015B                     l1667:	
  1275                           
  1276                           ;main.c: 538:                             if ( replaced != 0 ) keyCode = 0;
  1277  015B  084B               	movf	_replaced,w
  1278  015C  1903               	btfsc	3,2
  1279  015D  2969               	goto	l1675
  1280  015E  01B7               	clrf	main@keyCode
  1281                           
  1282                           ;main.c: 540:                         break;
  1283                           
  1284                           ;main.c: 539:                         }
  1285  015F  2969               	goto	l1675
  1286  0160                     l1671:	
  1287                           ;main.c: 541:                     }
  1288                           
  1289                           
  1290                           ;main.c: 542:                 }
  1291  0160  3002               	movlw	2
  1292  0161  00AD               	movwf	??_main
  1293  0162  082D               	movf	??_main,w
  1294  0163  07B5               	addwf	main@i_176,f
  1295  0164  0835               	movf	main@i_176,w
  1296  0165  3A80               	xorlw	128
  1297  0166  3E57               	addlw	-169
  1298  0167  1C03               	skipc
  1299  0168  2937               	goto	l1651
  1300  0169                     l1675:	
  1301                           
  1302                           ;main.c: 546:                 for(int8_t i = 0; i < 8; i++) {
  1303  0169  01B4               	clrf	main@i_177
  1304  016A  0834               	movf	main@i_177,w
  1305  016B  3A80               	xorlw	128
  1306  016C  3E78               	addlw	-136
  1307  016D  1803               	btfsc	3,0
  1308  016E  2995               	goto	l1695
  1309  016F                     l1681:	
  1310                           
  1311                           ;main.c: 547:                     if ( keyCode == replaceOnDelayKeyDown[i] && keyDown ) 
      +                          {
  1312  016F  0834               	movf	main@i_177,w
  1313  0170  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
  1314  0171  0084               	movwf	4
  1315  0172  2200               	fcall	stringdir
  1316  0173  0637               	xorwf	main@keyCode,w
  1317  0174  1D03               	skipz
  1318  0175  298C               	goto	l1691
  1319  0176  0836               	movf	main@keyDown,w
  1320  0177  1903               	btfsc	3,2
  1321  0178  298C               	goto	l1691
  1322                           
  1323                           ;main.c: 548:                         if ( delay == 0 ) {
  1324  0179  0842               	movf	_delay,w
  1325  017A  0443               	iorwf	_delay+1,w
  1326  017B  1D03               	btfss	3,2
  1327  017C  298A               	goto	l1689
  1328                           
  1329                           ;main.c: 549:                             delayedKey = keyCode;
  1330  017D  0837               	movf	main@keyCode,w
  1331  017E  00AD               	movwf	??_main
  1332  017F  082D               	movf	??_main,w
  1333  0180  00CA               	movwf	_delayedKey
  1334                           
  1335                           ;main.c: 550:                             delay = 2600;
  1336  0181  3028               	movlw	40
  1337  0182  00C2               	movwf	_delay
  1338  0183  300A               	movlw	10
  1339  0184  00C3               	movwf	_delay+1
  1340                           
  1341                           ;main.c: 551:                             keyCode = 111;
  1342  0185  306F               	movlw	111
  1343  0186  00AD               	movwf	??_main
  1344  0187  082D               	movf	??_main,w
  1345  0188  00B7               	movwf	main@keyCode
  1346                           
  1347                           ;main.c: 552:                         } else {
  1348  0189  2995               	goto	l1695
  1349  018A                     l1689:	
  1350                           
  1351                           ;main.c: 553:                             keyCode = 0;
  1352  018A  01B7               	clrf	main@keyCode
  1353                           
  1354                           ;main.c: 555:                         break;
  1355                           
  1356                           ;main.c: 554:                         }
  1357  018B  2995               	goto	l1695
  1358  018C                     l1691:	
  1359                           ;main.c: 556:                     }
  1360                           
  1361                           
  1362                           ;main.c: 557:                 }
  1363  018C  3001               	movlw	1
  1364  018D  00AD               	movwf	??_main
  1365  018E  082D               	movf	??_main,w
  1366  018F  07B4               	addwf	main@i_177,f
  1367  0190  0834               	movf	main@i_177,w
  1368  0191  3A80               	xorlw	128
  1369  0192  3E78               	addlw	-136
  1370  0193  1C03               	skipc
  1371  0194  296F               	goto	l1681
  1372  0195                     l1695:	
  1373                           
  1374                           ;main.c: 563:                 updateKey(keyCode, keyDown );
  1375  0195  0836               	movf	main@keyDown,w
  1376  0196  00AD               	movwf	??_main
  1377  0197  082D               	movf	??_main,w
  1378  0198  00A6               	movwf	updateKey@down
  1379  0199  0837               	movf	main@keyCode,w
  1380  019A  2382               	fcall	_updateKey
  1381  019B  29AD               	goto	l1707
  1382  019C                     l1699:	
  1383                           ;main.c: 576:         } else if ( delay != 0 ) {
  1384                           
  1385                           ;main.c: 566:                 needSave = 1;
  1386                           
  1387  019C  0842               	movf	_delay,w
  1388  019D  0443               	iorwf	_delay+1,w
  1389  019E  1903               	btfsc	3,2
  1390  019F  29BF               	goto	l1717
  1391                           
  1392                           ;main.c: 578:             delay--;
  1393  01A0  3001               	movlw	1
  1394  01A1  02C2               	subwf	_delay,f
  1395  01A2  3000               	movlw	0
  1396  01A3  1C03               	skipc
  1397  01A4  03C3               	decf	_delay+1,f
  1398  01A5  02C3               	subwf	_delay+1,f
  1399                           
  1400                           ;main.c: 579:             if ( delay == 0 ) {
  1401  01A6  0842               	movf	_delay,w
  1402  01A7  0443               	iorwf	_delay+1,w
  1403  01A8  1D03               	btfss	3,2
  1404  01A9  29B0               	goto	l1709
  1405                           
  1406                           ;main.c: 581:                 updatePort(0x00, 0);
  1407  01AA  01A0               	clrf	updatePort@set
  1408  01AB  3000               	movlw	0
  1409  01AC  2464               	fcall	_updatePort
  1410  01AD                     l1707:	
  1411                           
  1412                           ;main.c: 583:                 needSave = 1;
  1413  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1414  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1415  01AF  29ED               	goto	l1743
  1416  01B0                     l1709:	
  1417                           ;main.c: 585:             } else if ( delay == 1300 ) {
  1418                           
  1419  01B0  3014               	movlw	20
  1420  01B1  0642               	xorwf	_delay,w
  1421  01B2  3005               	movlw	5
  1422  01B3  1903               	skipnz
  1423  01B4  0643               	xorwf	_delay+1,w
  1424  01B5  1D03               	btfss	3,2
  1425  01B6  29EF               	goto	l1745
  1426                           
  1427                           ;main.c: 587:                 updateKey(delayedKey, 1 );
  1428  01B7  01A6               	clrf	updateKey@down
  1429  01B8  0AA6               	incf	updateKey@down,f
  1430  01B9  084A               	movf	_delayedKey,w
  1431  01BA  2382               	fcall	_updateKey
  1432                           
  1433                           ;main.c: 588:                 delayedKey = 0;
  1434  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1435  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1436  01BD  01CA               	clrf	_delayedKey
  1437  01BE  29ED               	goto	l1743
  1438  01BF                     l1717:	
  1439                           ;main.c: 592:         } else {
  1440                           
  1441                           ;main.c: 590:             }
  1442                           
  1443                           ;main.c: 589:                 needSave = 1;
  1444                           
  1445                           
  1446                           ;main.c: 595:             kempstonMouseEmulatorDelay++;
  1447  01BF  3001               	movlw	1
  1448  01C0  07C0               	addwf	_kempstonMouseEmulatorDelay,f
  1449  01C1  1803               	skipnc
  1450  01C2  0AC1               	incf	_kempstonMouseEmulatorDelay+1,f
  1451  01C3  3000               	movlw	0
  1452  01C4  07C1               	addwf	_kempstonMouseEmulatorDelay+1,f
  1453                           
  1454                           ;main.c: 596:             if ( kempstonMouseEmulatorDelay > 2000 ) {
  1455  01C5  3007               	movlw	7
  1456  01C6  0241               	subwf	_kempstonMouseEmulatorDelay+1,w
  1457  01C7  30D1               	movlw	209
  1458  01C8  1903               	skipnz
  1459  01C9  0240               	subwf	_kempstonMouseEmulatorDelay,w
  1460  01CA  1C03               	skipc
  1461  01CB  29EF               	goto	l1745
  1462                           
  1463                           ;main.c: 598:                 if ( numLock ) {
  1464  01CC  084C               	movf	_numLock,w
  1465  01CD  1903               	btfsc	3,2
  1466  01CE  29EB               	goto	l1741
  1467                           
  1468                           ;main.c: 599:                     if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]
      +                          -=2;
  1469  01CF  1C4D               	btfss	_kempstonMouseEmulatorKeys,0
  1470  01D0  29D3               	goto	l1725
  1471  01D1  3002               	movlw	2
  1472  01D2  02D8               	subwf	_outPorts+9,f
  1473  01D3                     l1725:	
  1474                           
  1475                           ;main.c: 600:                     if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]
      +                          +=2;
  1476  01D3  1CCD               	btfss	_kempstonMouseEmulatorKeys,1
  1477  01D4  29D9               	goto	l1729
  1478  01D5  3002               	movlw	2
  1479  01D6  00AD               	movwf	??_main
  1480  01D7  082D               	movf	??_main,w
  1481  01D8  07D8               	addwf	_outPorts+9,f
  1482  01D9                     l1729:	
  1483                           
  1484                           ;main.c: 601:                     if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10
      +                          ]+=2;
  1485  01D9  1D4D               	btfss	_kempstonMouseEmulatorKeys,2
  1486  01DA  29DF               	goto	l1733
  1487  01DB  3002               	movlw	2
  1488  01DC  00AD               	movwf	??_main
  1489  01DD  082D               	movf	??_main,w
  1490  01DE  07D9               	addwf	_outPorts+10,f
  1491  01DF                     l1733:	
  1492                           
  1493                           ;main.c: 602:                     if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10
      +                          ]-=2;
  1494  01DF  1DCD               	btfss	_kempstonMouseEmulatorKeys,3
  1495  01E0  29E3               	goto	l1737
  1496  01E1  3002               	movlw	2
  1497  01E2  02D9               	subwf	_outPorts+10,f
  1498  01E3                     l1737:	
  1499                           
  1500                           ;main.c: 603:                     if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8
      +                          ] &= 254;
  1501  01E3  1E4D               	btfss	_kempstonMouseEmulatorKeys,4
  1502  01E4  29EA               	goto	l275
  1503  01E5  30FE               	movlw	254
  1504  01E6  00AD               	movwf	??_main
  1505  01E7  082D               	movf	??_main,w
  1506  01E8  05D7               	andwf	_outPorts+8,f
  1507  01E9  29EB               	goto	l1741
  1508  01EA                     l275:	
  1509                           ;main.c: 604:                     else outPorts[8] |= 1;
  1510                           
  1511  01EA  1457               	bsf	_outPorts+8,0
  1512  01EB                     l1741:	
  1513                           ;main.c: 605:                 }
  1514                           
  1515                           
  1516                           ;main.c: 606:                 kempstonMouseEmulatorDelay = 0;
  1517  01EB  01C0               	clrf	_kempstonMouseEmulatorDelay
  1518  01EC  01C1               	clrf	_kempstonMouseEmulatorDelay+1
  1519  01ED                     l1743:	
  1520                           
  1521                           ;main.c: 607:                 needSave = 1;
  1522  01ED  01B2               	clrf	main@needSave
  1523  01EE  0AB2               	incf	main@needSave,f
  1524  01EF                     l1745:	
  1525                           ;main.c: 610:         }
  1526                           
  1527                           ;main.c: 608:             }
  1528                           
  1529                           
  1530                           ;main.c: 612:         if ( needSave) {
  1531  01EF  0832               	movf	main@needSave,w
  1532  01F0  1903               	btfsc	3,2
  1533  01F1  29F3               	goto	l277
  1534                           
  1535                           ;main.c: 613:             sendDataToAltera();
  1536  01F2  23D5               	fcall	_sendDataToAltera
  1537  01F3                     l277:	
  1538                           ;main.c: 614:         }
  1539                           
  1540  01F3  0064               	clrwdt	;# 
  1541                           
  1542                           ;main.c: 617:     }
  1543  01F4  28AD               	goto	l1609
  1544  01F5                     __end_of_main:	
  1545                           
  1546                           	psect	text1
  1547  0382                     __ptext1:	
  1548 ;; *************** function _updateKey *****************
  1549 ;; Defined at:
  1550 ;;		line 204 in file "main.c"
  1551 ;; Parameters:    Size  Location     Type
  1552 ;;  key             1    wreg     unsigned char 
  1553 ;;  down            1    6[BANK0 ] unsigned char 
  1554 ;; Auto vars:     Size  Location     Type
  1555 ;;  key             1    8[BANK0 ] unsigned char 
  1556 ;;  code            1   12[BANK0 ] unsigned char 
  1557 ;;  localCtrl       1   11[BANK0 ] unsigned char 
  1558 ;;  localShift      1    9[BANK0 ] unsigned char 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  1    wreg      void 
  1561 ;; Registers used:
  1562 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1568 ;;      Params:         0       1       0       0
  1569 ;;      Locals:         0       5       0       0
  1570 ;;      Temps:          0       1       0       0
  1571 ;;      Totals:         0       7       0       0
  1572 ;;Total ram usage:        7 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    3
  1575 ;; This function calls:
  1576 ;;		_updatePort
  1577 ;; This function is called by:
  1578 ;;		_main
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           
  1583                           ;psect for function _updateKey
  1584  0382                     _updateKey:	
  1585                           
  1586                           ;incstack = 0
  1587                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1588                           ;updateKey@key stored from wreg
  1589  0382  1283               	bcf	3,5	;RP0=0, select bank0
  1590  0383  1303               	bcf	3,6	;RP1=0, select bank0
  1591  0384  00A8               	movwf	updateKey@key
  1592                           
  1593                           ;main.c: 204: void updateKey(uint8_t key, uint8_t down);main.c: 205: {;main.c: 206:     
      +                          uint8_t code = 0xFF;
  1594  0385  30FF               	movlw	255
  1595  0386  00A7               	movwf	??_updateKey
  1596  0387  0827               	movf	??_updateKey,w
  1597  0388  00AC               	movwf	updateKey@code
  1598                           
  1599                           ;main.c: 207:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  1600  0389  01AA               	clrf	_updateKey$149
  1601  038A  084E               	movf	_shift_ctrl_alt,w
  1602  038B  3903               	andlw	3
  1603  038C  1903               	btfsc	3,2
  1604  038D  2B93               	goto	l1315
  1605  038E  084B               	movf	_replaced,w
  1606  038F  1D03               	btfss	3,2
  1607  0390  2B93               	goto	l1315
  1608  0391  01AA               	clrf	_updateKey$149
  1609  0392  0AAA               	incf	_updateKey$149,f
  1610  0393                     l1315:	
  1611  0393  082A               	movf	_updateKey$149,w
  1612  0394  00A7               	movwf	??_updateKey
  1613  0395  0827               	movf	??_updateKey,w
  1614  0396  00A9               	movwf	updateKey@localShift
  1615                           
  1616                           ;main.c: 208:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  1617  0397  084E               	movf	_shift_ctrl_alt,w
  1618  0398  390C               	andlw	12
  1619  0399  1903               	btfsc	3,2
  1620  039A  2B9D               	goto	u870
  1621  039B  3001               	movlw	1
  1622  039C  2B9E               	goto	u880
  1623  039D                     u870:	
  1624  039D  3000               	movlw	0
  1625  039E                     u880:	
  1626  039E  00A7               	movwf	??_updateKey
  1627  039F  0827               	movf	??_updateKey,w
  1628  03A0  00AB               	movwf	updateKey@localCtrl
  1629                           
  1630                           ;main.c: 209:     code = codeToMatrix[key];
  1631  03A1  0828               	movf	updateKey@key,w
  1632  03A2  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  1633  03A3  0084               	movwf	4
  1634  03A4  2200               	fcall	stringdir
  1635  03A5  00A7               	movwf	??_updateKey
  1636  03A6  0827               	movf	??_updateKey,w
  1637  03A7  00AC               	movwf	updateKey@code
  1638                           
  1639                           ;main.c: 210:     if ( code != 0xFF ) {
  1640  03A8  0A2C               	incf	updateKey@code,w
  1641  03A9  1903               	btfsc	3,2
  1642  03AA  2BC3               	goto	l1329
  1643                           
  1644                           ;main.c: 211:         updatePort(code, down);
  1645  03AB  0826               	movf	updateKey@down,w
  1646  03AC  00A7               	movwf	??_updateKey
  1647  03AD  0827               	movf	??_updateKey,w
  1648  03AE  00A0               	movwf	updatePort@set
  1649  03AF  082C               	movf	updateKey@code,w
  1650  03B0  2464               	fcall	_updatePort
  1651                           
  1652                           ;main.c: 212:         localShift |= ((code & 64) > 0);
  1653  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  1654  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  1655  03B3  1F2C               	btfss	updateKey@code,6
  1656  03B4  2BB7               	goto	u900
  1657  03B5  3001               	movlw	1
  1658  03B6  2BB8               	goto	u910
  1659  03B7                     u900:	
  1660  03B7  3000               	movlw	0
  1661  03B8                     u910:	
  1662  03B8  00A7               	movwf	??_updateKey
  1663  03B9  0827               	movf	??_updateKey,w
  1664  03BA  04A9               	iorwf	updateKey@localShift,f
  1665                           
  1666                           ;main.c: 213:         localCtrl |= ((code & 128) > 0);
  1667  03BB  1FAC               	btfss	updateKey@code,7
  1668  03BC  2BBF               	goto	u920
  1669  03BD  3001               	movlw	1
  1670  03BE  2BC0               	goto	u930
  1671  03BF                     u920:	
  1672  03BF  3000               	movlw	0
  1673  03C0                     u930:	
  1674  03C0  00A7               	movwf	??_updateKey
  1675  03C1  0827               	movf	??_updateKey,w
  1676  03C2  04AB               	iorwf	updateKey@localCtrl,f
  1677  03C3                     l1329:	
  1678                           ;main.c: 214:     }
  1679                           
  1680                           
  1681                           ;main.c: 215:     if ( down ) {
  1682  03C3  0826               	movf	updateKey@down,w
  1683  03C4  1903               	btfsc	3,2
  1684  03C5  0008               	return
  1685                           
  1686                           ;main.c: 216:         updatePort(0x00, localShift );
  1687  03C6  0829               	movf	updateKey@localShift,w
  1688  03C7  00A7               	movwf	??_updateKey
  1689  03C8  0827               	movf	??_updateKey,w
  1690  03C9  00A0               	movwf	updatePort@set
  1691  03CA  3000               	movlw	0
  1692  03CB  2464               	fcall	_updatePort
  1693                           
  1694                           ;main.c: 217:         updatePort(0x0F, localCtrl );
  1695  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  1696  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  1697  03CE  082B               	movf	updateKey@localCtrl,w
  1698  03CF  00A7               	movwf	??_updateKey
  1699  03D0  0827               	movf	??_updateKey,w
  1700  03D1  00A0               	movwf	updatePort@set
  1701  03D2  300F               	movlw	15
  1702  03D3  2464               	fcall	_updatePort
  1703  03D4  0008               	return
  1704  03D5                     __end_of_updateKey:	
  1705                           ;main.c: 218:     }
  1706                           
  1707                           
  1708                           	psect	text2
  1709  0464                     __ptext2:	
  1710 ;; *************** function _updatePort *****************
  1711 ;; Defined at:
  1712 ;;		line 195 in file "main.c"
  1713 ;; Parameters:    Size  Location     Type
  1714 ;;  bit_id          1    wreg     unsigned char 
  1715 ;;  set             1    0[BANK0 ] unsigned char 
  1716 ;; Auto vars:     Size  Location     Type
  1717 ;;  bit_id          1    5[BANK0 ] unsigned char 
  1718 ;;  a               1    4[BANK0 ] unsigned char 
  1719 ;; Return value:  Size  Location     Type
  1720 ;;                  1    wreg      void 
  1721 ;; Registers used:
  1722 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1723 ;; Tracked objects:
  1724 ;;		On entry : 0/0
  1725 ;;		On exit  : 0/0
  1726 ;;		Unchanged: 0/0
  1727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1728 ;;      Params:         0       1       0       0
  1729 ;;      Locals:         0       2       0       0
  1730 ;;      Temps:          0       3       0       0
  1731 ;;      Totals:         0       6       0       0
  1732 ;;Total ram usage:        6 bytes
  1733 ;; Hardware stack levels used:    1
  1734 ;; Hardware stack levels required when called:    2
  1735 ;; This function calls:
  1736 ;;		Nothing
  1737 ;; This function is called by:
  1738 ;;		_updateKey
  1739 ;;		_main
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           
  1744                           ;psect for function _updatePort
  1745  0464                     _updatePort:	
  1746                           
  1747                           ;incstack = 0
  1748                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1749                           ;updatePort@bit_id stored from wreg
  1750  0464  1283               	bcf	3,5	;RP0=0, select bank0
  1751  0465  1303               	bcf	3,6	;RP1=0, select bank0
  1752  0466  00A5               	movwf	updatePort@bit_id
  1753                           
  1754                           ;main.c: 195: void updatePort(uint8_t bit_id, uint8_t set);main.c: 196: {;main.c: 197:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  1755  0467  3001               	movlw	1
  1756  0468  00A1               	movwf	??_updatePort
  1757  0469  0825               	movf	updatePort@bit_id,w
  1758  046A  00A2               	movwf	??_updatePort+1
  1759  046B  3003               	movlw	3
  1760  046C                     u825:	
  1761  046C  1003               	clrc
  1762  046D  0CA2               	rrf	??_updatePort+1,f
  1763  046E  3EFF               	addlw	-1
  1764  046F  1D03               	skipz
  1765  0470  2C6C               	goto	u825
  1766  0471  0822               	movf	??_updatePort+1,w
  1767  0472  3907               	andlw	7
  1768  0473  3E01               	addlw	1
  1769  0474  2C77               	goto	u834
  1770  0475                     u835:	
  1771  0475  1003               	clrc
  1772  0476  0DA1               	rlf	??_updatePort,f
  1773  0477                     u834:	
  1774  0477  3EFF               	addlw	-1
  1775  0478  1D03               	skipz
  1776  0479  2C75               	goto	u835
  1777  047A  0821               	movf	??_updatePort,w
  1778  047B  00A3               	movwf	??_updatePort+2
  1779  047C  0823               	movf	??_updatePort+2,w
  1780  047D  00A4               	movwf	updatePort@a
  1781                           
  1782                           ;main.c: 198:     if ( set ) outPorts[bit_id & 7] |= a;
  1783  047E  0820               	movf	updatePort@set,w
  1784  047F  1903               	btfsc	3,2
  1785  0480  2C8B               	goto	l1305
  1786  0481  0824               	movf	updatePort@a,w
  1787  0482  00A1               	movwf	??_updatePort
  1788  0483  0825               	movf	updatePort@bit_id,w
  1789  0484  3907               	andlw	7
  1790  0485  3E4F               	addlw	(low (_outPorts| 0))& (0+255)
  1791  0486  0084               	movwf	4
  1792  0487  0821               	movf	??_updatePort,w
  1793  0488  1383               	bcf	3,7	;select IRP bank0
  1794  0489  0480               	iorwf	0,f
  1795  048A  0008               	return
  1796  048B                     l1305:	
  1797                           ;main.c: 199:     else outPorts[bit_id & 7] &= ~a;
  1798                           
  1799  048B  0924               	comf	updatePort@a,w
  1800  048C  00A1               	movwf	??_updatePort
  1801  048D  0825               	movf	updatePort@bit_id,w
  1802  048E  3907               	andlw	7
  1803  048F  3E4F               	addlw	(low (_outPorts| 0))& (0+255)
  1804  0490  0084               	movwf	4
  1805  0491  0821               	movf	??_updatePort,w
  1806  0492  1383               	bcf	3,7	;select IRP bank0
  1807  0493  0580               	andwf	0,f
  1808  0494  0008               	return
  1809  0495                     __end_of_updatePort:	
  1810                           
  1811                           	psect	text3
  1812  03D5                     __ptext3:	
  1813 ;; *************** function _sendDataToAltera *****************
  1814 ;; Defined at:
  1815 ;;		line 255 in file "main.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;		None
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;  i               1    4[BANK0 ] char 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      void 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1829 ;;      Params:         0       0       0       0
  1830 ;;      Locals:         0       3       0       0
  1831 ;;      Temps:          0       2       0       0
  1832 ;;      Totals:         0       5       0       0
  1833 ;;Total ram usage:        5 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    3
  1836 ;; This function calls:
  1837 ;;		_myDelay
  1838 ;; This function is called by:
  1839 ;;		_main
  1840 ;; This function uses a non-reentrant model
  1841 ;;
  1842                           
  1843                           
  1844                           ;psect for function _sendDataToAltera
  1845  03D5                     _sendDataToAltera:	
  1846                           
  1847                           ;main.c: 257:     RA2 = 1;
  1848                           
  1849                           ;incstack = 0
  1850                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1851  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  1852  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  1853  03D7  1505               	bsf	5,2	;volatile
  1854                           
  1855                           ;main.c: 258:     RA1 = 0;
  1856  03D8  1085               	bcf	5,1	;volatile
  1857                           
  1858                           ;main.c: 259:     myDelay();
  1859  03D9  24A8               	fcall	_myDelay
  1860                           
  1861                           ;main.c: 260:     RA1 = 1;
  1862  03DA  1283               	bcf	3,5	;RP0=0, select bank0
  1863  03DB  1303               	bcf	3,6	;RP1=0, select bank0
  1864  03DC  1485               	bsf	5,1	;volatile
  1865                           
  1866                           ;main.c: 261:     myDelay();
  1867  03DD  24A8               	fcall	_myDelay
  1868                           
  1869                           ;main.c: 262:     RA1 = 0;
  1870  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  1871  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  1872  03E0  1085               	bcf	5,1	;volatile
  1873                           
  1874                           ;main.c: 263:     myDelay();
  1875  03E1  24A8               	fcall	_myDelay
  1876                           
  1877                           ;main.c: 264:     for(int8_t i=0;i<11;i++) {
  1878  03E2  1283               	bcf	3,5	;RP0=0, select bank0
  1879  03E3  1303               	bcf	3,6	;RP1=0, select bank0
  1880  03E4  01A4               	clrf	sendDataToAltera@i
  1881  03E5  0824               	movf	sendDataToAltera@i,w
  1882  03E6  3A80               	xorlw	128
  1883  03E7  3E75               	addlw	-139
  1884  03E8  1803               	btfsc	3,0
  1885  03E9  2C1C               	goto	l1369
  1886  03EA                     l216:	
  1887                           
  1888                           ;main.c: 265:         RA2 = 1;
  1889  03EA  1505               	bsf	5,2	;volatile
  1890                           
  1891                           ;main.c: 266:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1892  03EB  0824               	movf	sendDataToAltera@i,w
  1893  03EC  3A80               	xorlw	128
  1894  03ED  3E78               	addlw	-136
  1895  03EE  1C03               	skipc
  1896  03EF  2BFB               	goto	l1351
  1897  03F0  0824               	movf	sendDataToAltera@i,w
  1898  03F1  3E4F               	addlw	(low (_outPorts| 0))& (0+255)
  1899  03F2  0084               	movwf	4
  1900  03F3  1383               	bcf	3,7	;select IRP bank0
  1901  03F4  0800               	movf	0,w
  1902  03F5  00A0               	movwf	??_sendDataToAltera
  1903  03F6  01A1               	clrf	??_sendDataToAltera+1
  1904  03F7  0820               	movf	??_sendDataToAltera,w
  1905  03F8  00A2               	movwf	_sendDataToAltera$156
  1906  03F9  0821               	movf	??_sendDataToAltera+1,w
  1907  03FA  2C05               	goto	L1
  1908  03FB                     l1351:	
  1909  03FB  0824               	movf	sendDataToAltera@i,w
  1910  03FC  3E4F               	addlw	(low (_outPorts| 0))& (0+255)
  1911  03FD  0084               	movwf	4
  1912  03FE  1383               	bcf	3,7	;select IRP bank0
  1913  03FF  0800               	movf	0,w
  1914  0400  00A0               	movwf	??_sendDataToAltera
  1915  0401  01A1               	clrf	??_sendDataToAltera+1
  1916  0402  0920               	comf	??_sendDataToAltera,w
  1917  0403  00A2               	movwf	_sendDataToAltera$156
  1918  0404  0921               	comf	??_sendDataToAltera+1,w
  1919  0405                     L1:	
  1920  0405  00A3               	movwf	_sendDataToAltera$156+1
  1921  0406  0822               	movf	_sendDataToAltera$156,w
  1922  0407  0086               	movwf	6	;volatile
  1923                           
  1924                           ;main.c: 267:         myDelay();
  1925  0408  24A8               	fcall	_myDelay
  1926                           
  1927                           ;main.c: 268:         RA2 = 0;
  1928  0409  1283               	bcf	3,5	;RP0=0, select bank0
  1929  040A  1303               	bcf	3,6	;RP1=0, select bank0
  1930  040B  1105               	bcf	5,2	;volatile
  1931                           
  1932                           ;main.c: 269:         myDelay();
  1933  040C  24A8               	fcall	_myDelay
  1934                           
  1935                           ;main.c: 270:         RA2 = 1;
  1936  040D  1283               	bcf	3,5	;RP0=0, select bank0
  1937  040E  1303               	bcf	3,6	;RP1=0, select bank0
  1938  040F  1505               	bsf	5,2	;volatile
  1939                           
  1940                           ;main.c: 271:         myDelay();
  1941  0410  24A8               	fcall	_myDelay
  1942                           
  1943                           ;main.c: 272:     }
  1944  0411  3001               	movlw	1
  1945  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1946  0413  1303               	bcf	3,6	;RP1=0, select bank0
  1947  0414  00A0               	movwf	??_sendDataToAltera
  1948  0415  0820               	movf	??_sendDataToAltera,w
  1949  0416  07A4               	addwf	sendDataToAltera@i,f
  1950  0417  0824               	movf	sendDataToAltera@i,w
  1951  0418  3A80               	xorlw	128
  1952  0419  3E75               	addlw	-139
  1953  041A  1C03               	skipc
  1954  041B  2BEA               	goto	l216
  1955  041C                     l1369:	
  1956                           
  1957                           ;main.c: 273:     PORTB = 0xFF;
  1958  041C  30FF               	movlw	255
  1959  041D  0086               	movwf	6	;volatile
  1960  041E  0008               	return
  1961  041F                     __end_of_sendDataToAltera:	
  1962                           
  1963                           	psect	text4
  1964  04A8                     __ptext4:	
  1965 ;; *************** function _myDelay *****************
  1966 ;; Defined at:
  1967 ;;		line 223 in file "main.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;		None
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      void 
  1974 ;; Registers used:
  1975 ;;		None
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1981 ;;      Params:         0       0       0       0
  1982 ;;      Locals:         0       0       0       0
  1983 ;;      Temps:          0       0       0       0
  1984 ;;      Totals:         0       0       0       0
  1985 ;;Total ram usage:        0 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    2
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_sendDataToAltera
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           
  1996                           ;psect for function _myDelay
  1997  04A8                     _myDelay:	
  1998                           
  1999                           ;incstack = 0
  2000                           ; Regs used in _myDelay: []
  2001  04A8  0008               	return
  2002  04A9                     __end_of_myDelay:	
  2003                           
  2004                           	psect	text5
  2005  041F                     __ptext5:	
  2006 ;; *************** function _calculateBitsFromTable *****************
  2007 ;; Defined at:
  2008 ;;		line 326 in file "main.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  keyCode         1    wreg     PTR unsigned char 
  2011 ;;		 -> main@keyCode(1), 
  2012 ;;  keyDown         1    0[BANK0 ] PTR unsigned char 
  2013 ;;		 -> main@keyDown(1), 
  2014 ;;  bits            1    1[BANK0 ] PTR unsigned char 
  2015 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  2016 ;;  table           1    2[BANK0 ] PTR unsigned char 
  2017 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  2018 ;;  count           1    3[BANK0 ] unsigned char 
  2019 ;;  clearIfFound    1    4[BANK0 ] unsigned char 
  2020 ;; Auto vars:     Size  Location     Type
  2021 ;;  keyCode         1    7[BANK0 ] PTR unsigned char 
  2022 ;;		 -> main@keyCode(1), 
  2023 ;;  i               1    8[BANK0 ] unsigned char 
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  1    wreg      void 
  2026 ;; Registers used:
  2027 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2028 ;; Tracked objects:
  2029 ;;		On entry : 0/0
  2030 ;;		On exit  : 0/0
  2031 ;;		Unchanged: 0/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2033 ;;      Params:         0       5       0       0
  2034 ;;      Locals:         0       2       0       0
  2035 ;;      Temps:          0       2       0       0
  2036 ;;      Totals:         0       9       0       0
  2037 ;;Total ram usage:        9 bytes
  2038 ;; Hardware stack levels used:    2
  2039 ;; Hardware stack levels required when called:    2
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_main
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046                           
  2047                           
  2048                           ;psect for function _calculateBitsFromTable
  2049  041F                     _calculateBitsFromTable:	
  2050                           
  2051                           ;incstack = 0
  2052                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  2053                           ;calculateBitsFromTable@keyCode stored from wreg
  2054  041F  1283               	bcf	3,5	;RP0=0, select bank0
  2055  0420  1303               	bcf	3,6	;RP1=0, select bank0
  2056  0421  00A7               	movwf	calculateBitsFromTable@keyCode
  2057                           
  2058                           ;main.c: 326: void calculateBitsFromTable(uint8_t* keyCode, uint8_t* keyDown, uint8_t* b
      +                          its, uint8_t table[], uint8_t count, uint8_t clearIfFound);main.c: 327: {;main.c: 328:  
      +                             for(uint8_t i = 0; i < count;i++) {
  2059  0422  01A8               	clrf	calculateBitsFromTable@i
  2060  0423                     l1387:	
  2061  0423  0823               	movf	calculateBitsFromTable@count,w
  2062  0424  0228               	subwf	calculateBitsFromTable@i,w
  2063  0425  1803               	btfsc	3,0
  2064  0426  0008               	return
  2065                           
  2066                           ;main.c: 329:         if ( (*keyCode) == table[i] ) {
  2067  0427  0828               	movf	calculateBitsFromTable@i,w
  2068  0428  0722               	addwf	calculateBitsFromTable@table,w
  2069  0429  0084               	movwf	4
  2070  042A  2200               	fcall	stringdir
  2071  042B  00A5               	movwf	??_calculateBitsFromTable
  2072  042C  0827               	movf	calculateBitsFromTable@keyCode,w
  2073  042D  0084               	movwf	4
  2074  042E  1383               	bcf	3,7	;select IRP bank0
  2075  042F  0800               	movf	0,w
  2076  0430  0625               	xorwf	??_calculateBitsFromTable,w
  2077  0431  1D03               	skipz
  2078  0432  2C5F               	goto	l1385
  2079                           
  2080                           ;main.c: 330:             if ( (*keyDown) ) {
  2081  0433  0820               	movf	calculateBitsFromTable@keyDown,w
  2082  0434  0084               	movwf	4
  2083  0435  0800               	movf	0,w
  2084  0436  1903               	btfsc	3,2
  2085  0437  2C48               	goto	l1379
  2086                           
  2087                           ;main.c: 331:                 (*bits) |= (1 << i);
  2088  0438  3001               	movlw	1
  2089  0439  00A5               	movwf	??_calculateBitsFromTable
  2090  043A  0A28               	incf	calculateBitsFromTable@i,w
  2091  043B  2C3E               	goto	u1004
  2092  043C                     u1005:	
  2093  043C  1003               	clrc
  2094  043D  0DA5               	rlf	??_calculateBitsFromTable,f
  2095  043E                     u1004:	
  2096  043E  3EFF               	addlw	-1
  2097  043F  1D03               	skipz
  2098  0440  2C3C               	goto	u1005
  2099  0441  0825               	movf	??_calculateBitsFromTable,w
  2100  0442  00A6               	movwf	??_calculateBitsFromTable+1
  2101  0443  0821               	movf	calculateBitsFromTable@bits,w
  2102  0444  0084               	movwf	4
  2103  0445  0826               	movf	??_calculateBitsFromTable+1,w
  2104  0446  0480               	iorwf	0,f
  2105                           
  2106                           ;main.c: 332:             } else {
  2107  0447  2C58               	goto	l1381
  2108  0448                     l1379:	
  2109                           
  2110                           ;main.c: 333:                 (*bits) &= ~(1 << i);
  2111  0448  3001               	movlw	1
  2112  0449  00A5               	movwf	??_calculateBitsFromTable
  2113  044A  0A28               	incf	calculateBitsFromTable@i,w
  2114  044B  2C4E               	goto	u1014
  2115  044C                     u1015:	
  2116  044C  1003               	clrc
  2117  044D  0DA5               	rlf	??_calculateBitsFromTable,f
  2118  044E                     u1014:	
  2119  044E  3EFF               	addlw	-1
  2120  044F  1D03               	skipz
  2121  0450  2C4C               	goto	u1015
  2122  0451  0825               	movf	??_calculateBitsFromTable,w
  2123  0452  3AFF               	xorlw	255
  2124  0453  00A6               	movwf	??_calculateBitsFromTable+1
  2125  0454  0821               	movf	calculateBitsFromTable@bits,w
  2126  0455  0084               	movwf	4
  2127  0456  0826               	movf	??_calculateBitsFromTable+1,w
  2128  0457  0580               	andwf	0,f
  2129  0458                     l1381:	
  2130                           ;main.c: 334:             }
  2131                           
  2132                           
  2133                           ;main.c: 335:             if ( clearIfFound ) {
  2134  0458  0824               	movf	calculateBitsFromTable@clearIfFound,w
  2135  0459  1903               	btfsc	3,2
  2136  045A  0008               	return
  2137                           
  2138                           ;main.c: 336:                 (*keyCode) = 0;
  2139  045B  0827               	movf	calculateBitsFromTable@keyCode,w
  2140  045C  0084               	movwf	4
  2141  045D  0180               	clrf	0
  2142                           
  2143                           ;main.c: 338:             break;
  2144                           
  2145                           ;main.c: 337:             }
  2146  045E  0008               	return
  2147  045F                     l1385:	
  2148                           ;main.c: 339:         }
  2149                           
  2150                           
  2151                           ;main.c: 340:     }
  2152  045F  3001               	movlw	1
  2153  0460  00A5               	movwf	??_calculateBitsFromTable
  2154  0461  0825               	movf	??_calculateBitsFromTable,w
  2155  0462  07A8               	addwf	calculateBitsFromTable@i,f
  2156  0463  2C23               	goto	l1387
  2157  0464                     __end_of_calculateBitsFromTable:	
  2158                           
  2159                           	psect	text6
  2160  02E0                     __ptext6:	
  2161 ;; *************** function _myIsr *****************
  2162 ;; Defined at:
  2163 ;;		line 117 in file "main.c"
  2164 ;; Parameters:    Size  Location     Type
  2165 ;;		None
  2166 ;; Auto vars:     Size  Location     Type
  2167 ;;  i               1    8[COMMON] char 
  2168 ;; Return value:  Size  Location     Type
  2169 ;;                  1    wreg      void 
  2170 ;; Registers used:
  2171 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2172 ;; Tracked objects:
  2173 ;;		On entry : 0/0
  2174 ;;		On exit  : 0/0
  2175 ;;		Unchanged: 0/0
  2176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2177 ;;      Params:         0       0       0       0
  2178 ;;      Locals:         3       0       0       0
  2179 ;;      Temps:          6       0       0       0
  2180 ;;      Totals:         9       0       0       0
  2181 ;;Total ram usage:        9 bytes
  2182 ;; Hardware stack levels used:    2
  2183 ;; This function calls:
  2184 ;;		Nothing
  2185 ;; This function is called by:
  2186 ;;		Interrupt level 1
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           
  2191                           ;psect for function _myIsr
  2192  02E0                     _myIsr:	
  2193                           
  2194                           ;main.c: 119:     if(T0IE && T0IF){
  2195  02E0  1A8B               	btfsc	11,5	;volatile
  2196  02E1  1D0B               	btfss	11,2	;volatile
  2197  02E2  2B77               	goto	i1l198
  2198                           
  2199                           ;main.c: 121:         T0IF=0;
  2200  02E3  110B               	bcf	11,2	;volatile
  2201                           
  2202                           ;main.c: 122:         TMR0 = 255;
  2203  02E4  30FF               	movlw	255
  2204  02E5  0081               	movwf	1	;volatile
  2205                           
  2206                           ;main.c: 126:         if ( ps2DataState == 0 ) {
  2207  02E6  087D               	movf	_ps2DataState,w
  2208  02E7  1D03               	btfss	3,2
  2209  02E8  2AF5               	goto	i1l1409
  2210                           
  2211                           ;main.c: 127:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  2212  02E9  1E05               	btfss	5,4	;volatile
  2213  02EA  1985               	btfsc	5,3	;volatile
  2214  02EB  2B77               	goto	i1l198
  2215                           
  2216                           ;main.c: 128:                 ps2BitsCount = 0;
  2217  02EC  01FB               	clrf	_ps2BitsCount
  2218                           
  2219                           ;main.c: 129:                 ps2Bits = 0;
  2220  02ED  01FC               	clrf	_ps2Bits
  2221                           
  2222                           ;main.c: 130:                 ps2DataState = 1;
  2223  02EE  01FD               	clrf	_ps2DataState
  2224  02EF  0AFD               	incf	_ps2DataState,f
  2225                           
  2226                           ;main.c: 131:                 ps2Device = PORTAbits.RA0;
  2227  02F0  3000               	movlw	0
  2228  02F1  1805               	btfsc	5,0	;volatile
  2229  02F2  3001               	movlw	1
  2230  02F3  00C7               	movwf	_ps2Device
  2231                           
  2232                           ;main.c: 133:         } else if ( ps2DataState == 1 ) {
  2233                           
  2234                           ;main.c: 132:             }
  2235  02F4  2B77               	goto	i1l198
  2236  02F5                     i1l1409:	
  2237  02F5  037D               	decf	_ps2DataState,w
  2238  02F6  1D03               	btfss	3,2
  2239  02F7  2B73               	goto	i1l1473
  2240                           
  2241                           ;main.c: 134:             if ( ps2BitsCount < 8 ) {
  2242  02F8  087B               	movf	_ps2BitsCount,w
  2243  02F9  3A80               	xorlw	128
  2244  02FA  3E78               	addlw	-136
  2245  02FB  1803               	skipnc
  2246  02FC  2B0D               	goto	i1l1417
  2247                           
  2248                           ;main.c: 135:                 if ( PORTAbits.RA3 ) {
  2249  02FD  1D85               	btfss	5,3	;volatile
  2250  02FE  2B11               	goto	i1l1419
  2251                           
  2252                           ;main.c: 136:                     ps2Bits |= ( 1 << ps2BitsCount );
  2253  02FF  3001               	movlw	1
  2254  0300  00F0               	movwf	??_myIsr
  2255  0301  0A7B               	incf	_ps2BitsCount,w
  2256  0302  2B05               	goto	u112_24
  2257  0303                     u112_25:	
  2258  0303  1003               	clrc
  2259  0304  0DF0               	rlf	??_myIsr,f
  2260  0305                     u112_24:	
  2261  0305  3EFF               	addlw	-1
  2262  0306  1D03               	skipz
  2263  0307  2B03               	goto	u112_25
  2264  0308  0870               	movf	??_myIsr,w
  2265  0309  00F1               	movwf	??_myIsr+1
  2266  030A  0871               	movf	??_myIsr+1,w
  2267  030B  04FC               	iorwf	_ps2Bits,f
  2268                           
  2269                           ;main.c: 137:                 }
  2270  030C  2B11               	goto	i1l1419
  2271  030D                     i1l1417:	
  2272                           ;main.c: 139:             } else if ( ps2BitsCount == 8 ) {
  2273                           
  2274                           ;main.c: 138:                 ps2BitsCount++;
  2275                           
  2276  030D  3008               	movlw	8
  2277  030E  067B               	xorwf	_ps2BitsCount,w
  2278  030F  1D03               	btfss	3,2
  2279  0310  2B16               	goto	i1l1421
  2280  0311                     i1l1419:	
  2281                           
  2282                           ;main.c: 140:                 ps2BitsCount++;
  2283  0311  3001               	movlw	1
  2284  0312  00F0               	movwf	??_myIsr
  2285  0313  0870               	movf	??_myIsr,w
  2286  0314  07FB               	addwf	_ps2BitsCount,f
  2287                           
  2288                           ;main.c: 141:             } else if ( ps2BitsCount == 9 ) {
  2289  0315  2B77               	goto	i1l198
  2290  0316                     i1l1421:	
  2291  0316  3009               	movlw	9
  2292  0317  067B               	xorwf	_ps2BitsCount,w
  2293  0318  1D03               	btfss	3,2
  2294  0319  2B77               	goto	i1l198
  2295                           
  2296                           ;main.c: 142:                 ps2DataCount++;
  2297  031A  3001               	movlw	1
  2298  031B  00F0               	movwf	??_myIsr
  2299  031C  0870               	movf	??_myIsr,w
  2300  031D  07C8               	addwf	_ps2DataCount,f
  2301                           
  2302                           ;main.c: 143:                 if ( ps2NeedEncode ) {
  2303  031E  0844               	movf	_ps2NeedEncode,w
  2304  031F  1903               	btfsc	3,2
  2305  0320  2B39               	goto	i1l1439
  2306                           
  2307                           ;main.c: 144:                     for (int8_t i=0; i < 27; i+=2) {
  2308  0321  01F8               	clrf	myIsr@i
  2309  0322                     L4:	
  2310  0322  0878               	movf	myIsr@i,w
  2311  0323  3A80               	xorlw	128
  2312  0324  3E65               	addlw	-155
  2313  0325  1803               	btfsc	3,0
  2314  0326  2B4C               	goto	i1l1445
  2315                           
  2316                           ;main.c: 145:                         if ( ps2Bits == replaceTwoBytesCodes[i] ) {
  2317  0327  0878               	movf	myIsr@i,w
  2318  0328  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2319  0329  0084               	movwf	4
  2320  032A  2200               	fcall	stringdir
  2321  032B  067C               	xorwf	_ps2Bits,w
  2322  032C  1D03               	skipz
  2323  032D  2B34               	goto	i1l1435
  2324                           
  2325                           ;main.c: 146:                             ps2DataA = replaceTwoBytesCodes[i+1];
  2326  032E  0878               	movf	myIsr@i,w
  2327  032F  3E01               	addlw	1
  2328  0330  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2329  0331  0084               	movwf	4
  2330  0332  2200               	fcall	stringdir
  2331  0333  2B49               	goto	L2
  2332  0334                     i1l1435:	
  2333                           ;main.c: 148:                         }
  2334                           
  2335                           ;main.c: 147:                             break;
  2336                           
  2337                           
  2338                           ;main.c: 149:                     }
  2339  0334  3002               	movlw	2
  2340  0335  00F0               	movwf	??_myIsr
  2341  0336  0870               	movf	??_myIsr,w
  2342  0337  07F8               	addwf	myIsr@i,f
  2343  0338  2B22               	goto	L4
  2344  0339                     i1l1439:	
  2345                           ;main.c: 150:                 } else {
  2346                           
  2347                           
  2348                           ;main.c: 151:                     ps2DataA = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2349  0339  3083               	movlw	131
  2350  033A  067C               	xorwf	_ps2Bits,w
  2351  033B  1903               	btfsc	3,2
  2352  033C  2B44               	goto	i1l1443
  2353  033D  087C               	movf	_ps2Bits,w
  2354  033E  00F0               	movwf	??_myIsr
  2355  033F  01F1               	clrf	??_myIsr+1
  2356  0340  0870               	movf	??_myIsr,w
  2357  0341  00F6               	movwf	_myIsr$139
  2358  0342  0871               	movf	??_myIsr+1,w
  2359  0343  2B47               	goto	L3
  2360  0344                     i1l1443:	
  2361  0344  303F               	movlw	63
  2362  0345  00F6               	movwf	_myIsr$139
  2363  0346  3000               	movlw	0
  2364  0347                     L3:	
  2365  0347  00F7               	movwf	_myIsr$139+1
  2366  0348  0876               	movf	_myIsr$139,w
  2367  0349                     L2:	
  2368  0349  00F0               	movwf	??_myIsr
  2369  034A  0870               	movf	??_myIsr,w
  2370  034B  00F9               	movwf	_ps2DataA
  2371  034C                     i1l1445:	
  2372                           ;main.c: 152:                 }
  2373                           
  2374                           
  2375                           ;main.c: 153:                 if ( ps2Bits == 0xF0 ) {
  2376  034C  30F0               	movlw	240
  2377  034D  067C               	xorwf	_ps2Bits,w
  2378  034E  1D03               	btfss	3,2
  2379  034F  2B56               	goto	i1l1451
  2380                           
  2381                           ;main.c: 154:                     ps2DataState = 0;
  2382  0350  01FD               	clrf	_ps2DataState
  2383                           
  2384                           ;main.c: 155:                     ps2DownA = 128;
  2385  0351  3080               	movlw	128
  2386  0352  00F0               	movwf	??_myIsr
  2387  0353  0870               	movf	??_myIsr,w
  2388  0354  00C5               	movwf	_ps2DownA
  2389                           
  2390                           ;main.c: 156:                 } else if ( ps2Bits == 0xE0 ) {
  2391  0355  2B77               	goto	i1l198
  2392  0356                     i1l1451:	
  2393  0356  30E0               	movlw	224
  2394  0357  067C               	xorwf	_ps2Bits,w
  2395  0358  1D03               	btfss	3,2
  2396  0359  2B5E               	goto	i1l1457
  2397                           
  2398                           ;main.c: 157:                     ps2DataState = 0;
  2399  035A  01FD               	clrf	_ps2DataState
  2400                           
  2401                           ;main.c: 158:                     ps2NeedEncode = 1;
  2402  035B  01C4               	clrf	_ps2NeedEncode
  2403  035C  0AC4               	incf	_ps2NeedEncode,f
  2404                           
  2405                           ;main.c: 167:                 } else {
  2406  035D  2B77               	goto	i1l198
  2407  035E                     i1l1457:	
  2408                           
  2409                           ;main.c: 170:                     inData[inDataPos] = (ps2DataA | ps2DownA);
  2410  035E  0879               	movf	_ps2DataA,w
  2411  035F  0445               	iorwf	_ps2DownA,w
  2412  0360  00F0               	movwf	??_myIsr
  2413  0361  087A               	movf	_inDataPos,w
  2414  0362  3E38               	addlw	(low (_inData| 0))& (0+255)
  2415  0363  0084               	movwf	4
  2416  0364  0870               	movf	??_myIsr,w
  2417  0365  1383               	bcf	3,7	;select IRP bank0
  2418  0366  0080               	movwf	0
  2419                           
  2420                           ;main.c: 171:                     inDataPos = (inDataPos+1) & 7;
  2421  0367  087A               	movf	_inDataPos,w
  2422  0368  3E01               	addlw	1
  2423  0369  3907               	andlw	7
  2424  036A  00F0               	movwf	??_myIsr
  2425  036B  0870               	movf	??_myIsr,w
  2426  036C  00FA               	movwf	_inDataPos
  2427                           
  2428                           ;main.c: 174:                     ps2DataA = 0;
  2429  036D  01F9               	clrf	_ps2DataA
  2430                           
  2431                           ;main.c: 175:                     ps2DataCount = 0;
  2432  036E  01C8               	clrf	_ps2DataCount
  2433                           
  2434                           ;main.c: 176:                     ps2WaitCode = 0;
  2435  036F  01C6               	clrf	_ps2WaitCode
  2436                           
  2437                           ;main.c: 177:                     ps2DownA = 0;
  2438  0370  01C5               	clrf	_ps2DownA
  2439                           
  2440                           ;main.c: 178:                     ps2NeedEncode = 0;
  2441  0371  01C4               	clrf	_ps2NeedEncode
  2442  0372  2B76               	goto	i1l1475
  2443  0373                     i1l1473:	
  2444                           ;main.c: 183:         } else if ( ps2DataState == 4 ) {
  2445                           
  2446                           ;main.c: 182:             }
  2447                           
  2448                           ;main.c: 180:                 }
  2449                           
  2450                           ;main.c: 179:                     ps2DataState = 0;
  2451                           
  2452  0373  3004               	movlw	4
  2453  0374  067D               	xorwf	_ps2DataState,w
  2454  0375  1903               	btfsc	3,2
  2455  0376                     i1l1475:	
  2456                           
  2457                           ;main.c: 185:             ps2DataState = 0;
  2458  0376  01FD               	clrf	_ps2DataState
  2459  0377                     i1l198:	
  2460                           ;main.c: 189:     }
  2461                           
  2462                           ;main.c: 187:     } else {
  2463                           
  2464                           ;main.c: 186:         }
  2465                           
  2466  0377  0875               	movf	??_myIsr+5,w
  2467  0378  00FF               	movwf	127
  2468  0379  0874               	movf	??_myIsr+4,w
  2469  037A  008A               	movwf	10
  2470  037B  0873               	movf	??_myIsr+3,w
  2471  037C  0084               	movwf	4
  2472  037D  0E72               	swapf	(??_myIsr+2)^(0+4294967168),w
  2473  037E  0083               	movwf	3
  2474  037F  0EFE               	swapf	126,f
  2475  0380  0E7E               	swapf	126,w
  2476  0381  0009               	retfie
  2477  0382                     __end_of_myIsr:	
  2478  007E                     btemp	set	126	;btemp
  2479  007E                     wtemp0	set	126
  2480                           
  2481                           	psect	intentry
  2482  0004                     __pintentry:	
  2483                           ;incstack = 0
  2484                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath]
  2485                           
  2486  0004                     interrupt_function:	
  2487  007E                     saved_w	set	btemp
  2488  0004  00FE               	movwf	btemp
  2489  0005  0E03               	swapf	3,w
  2490  0006  00F2               	movwf	??_myIsr+2
  2491  0007  0804               	movf	4,w
  2492  0008  00F3               	movwf	??_myIsr+3
  2493  0009  080A               	movf	10,w
  2494  000A  00F4               	movwf	??_myIsr+4
  2495  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2496  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2497  000D  087F               	movf	btemp+1,w
  2498  000E  00F5               	movwf	??_myIsr+5
  2499  000F  2AE0               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     24      58
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@keyDown	PTR unsigned char  size(1) Largest target is 1
		 -> main@keyDown(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 

    calculateBitsFromTable@keyCode	PTR unsigned char  size(1) Largest target is 1
		 -> main@keyCode(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    3163
                                             13 BANK0     11    11      0
             _calculateBitsFromTable
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     817
                                              6 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              0 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculateBitsFromTable                               9     4      5    1092
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                9     9      0     114
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateBitsFromTable
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     18      3A       3       72.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      48      10        0.0%
ABS                  0      0      48       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Nov 04 14:49:02 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0025                                 l216 03EA  
                               l242 011F                                 l244 0130  
                               l275 01EA                                 l277 01F3  
                               _GIE 005F                                 _RA1 0029  
                               _RA2 002A                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               u900 03B7                                 u910 03B8  
                               _PSA 040B                                 u920 03BF  
                               u825 046C                                 u834 0477  
                               u930 03C0                                 u835 0475  
                               u870 039D                                 u880 039E  
                               fsr0 0004                                 indf 0000  
                              l1305 048B                                l1315 0393  
                              l1351 03FB                                l1329 03C3  
                              l1381 0458                                l1385 045F  
                              l1369 041C                                l1609 00AD  
                              l1379 0448                                l1387 0423  
                              l1707 01AD                                l1651 0137  
                              l1627 010B                                l1483 0040  
                              l1733 01DF                                l1725 01D3  
                              l1741 01EB                                l1709 01B0  
                              l1717 01BF                                l1645 0131  
                              l1637 0120                                l1743 01ED  
                              l1663 0151                                l1671 0160  
                              l1737 01E3                                l1729 01D9  
                              l1745 01EF                                l1681 016F  
                              l1665 0152                                l1657 0145  
                              l1489 004E                                l1691 018C  
                              l1667 015B                                l1659 0149  
                              l1675 0169                                l1695 0195  
                              l1689 018A                                l1699 019C  
                       main@keyCode 0037                                _EEIE 0467  
                              _EEIF 0067                         main@keyDown 0036  
                              _CMIE 0466                                _CMIF 0066  
                              _T0IE 005D                                _T0IF 005A  
                              _T0CS 040D                                u1004 043E  
                              u1005 043C                                u1014 044E  
                              u1015 044C                                u1300 0107  
                              u1310 0108                                _T0SE 040C  
                              u1260 00C4                                u1270 00C5  
                              _PEIE 005E                                _INTE 005C  
                              _INTF 0059                                _RBIE 005B  
                              _RBIF 0058                                _RCIE 0465  
                              _RCIF 0065                                _TMR0 0001  
                              _TMR2 0011                                _SPEN 00C7  
                              _TXIE 0464                                _TXIF 0064  
                              _main 0032                                btemp 007E  
                              start 0010                               ?_main 0070  
                      main@needSave 0032                               _CMCON 001F  
      __end_of_replaceTwoBytesCodes 02CC                               _T1CON 0010  
                             i1l198 0377                               _RCSTA 0018  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
              __end_of_codeToMatrix 0286                               _TRISB 0086  
                             _VRCON 009F                               _TXSTA 0098  
                             _nRBPU 040F                               _delay 0042  
                   __end_of_myDelay 04A9                               _myIsr 02E0  
                             main@i 0033                    updatePort@bit_id 0025  
                             pclath 000A                               status 0003  
                      updateKey@key 0028                               wtemp0 007E  
                   __initialization 0011                        __end_of_main 01F5  
                            ??_main 002D     __size_of_calculateBitsFromTable 0045  
                 sendDataToAltera@i 0024                              _CCP1IE 0462  
                            _CCP1IF 0062                              ?_myIsr 0070  
                            _CCPR1H 0016                              _CCPR1L 0015  
                            i1l1421 0316                              i1l1417 030D  
                            i1l1409 02F5                              i1l1451 0356  
                            i1l1443 0344                              i1l1435 0334  
                            i1l1419 0311                              u112_24 0305  
                            i1l1445 034C                              u112_25 0303  
                            i1l1439 0339                              i1l1457 035E  
                            i1l1473 0373                              i1l1475 0376  
                            _INTEDG 040E                              _TMR1IE 0460  
                            _TMR1IF 0060                              _TMR2IE 0461  
                            _TMR2IF 0061                              _TRISA0 0428  
                            _TRISA1 0429                              _TRISA2 042A  
                            _TRISA3 042B                              _TRISA4 042C  
                            _TRISA5 042D                              _TRISA6 042E  
                            _TRISA7 042F            __end_of_sendDataToAltera 041F  
             _replaceOnDelayKeyDown 02CC                              _inData 0038  
                         ??_myDelay 0020                              myIsr@i 0078  
                            saved_w 007E                       updateKey@code 002C  
                     updateKey@down 0026             __end_of__initialization 0030  
            _calculateBitsFromTable 041F                _replaceTwoBytesCodes 02B0  
                     updatePort@set 0020                      __pcstackCOMMON 0070  
                      __pidataBANK0 0495                       __end_of_myIsr 0382  
               updateKey@localShift 0029                             ??_myIsr 0070  
                      _ps2DataCount 0048                        _ps2DataState 007D  
                        __pbssBANK0 0038                        _ps2BitsCount 007B  
                      _codeToMatrix 0206                          _delayedKey 004A  
              _sendDataToAltera$156 0022                          __pmaintext 0032  
                        __pintentry 0004                             _CCP1CON 0017  
        calculateBitsFromTable@bits 0021                  __size_of_updateKey 0053  
                        __stringtab 0200          _kempstonMouseEmulatorDelay 0040  
     __end_of_replaceOnShiftKeyDown 02B0                             _ps2Bits 007C  
                           __ptext1 0382                             __ptext2 0464  
                           __ptext3 03D5                             __ptext4 04A8  
                           __ptext5 041F                             __ptext6 02E0  
     calculateBitsFromTable@keyCode 0027       calculateBitsFromTable@keyDown 0020  
                           _myDelay 04A8  calculateBitsFromTable@clearIfFound 0024  
                           _numLock 004C                             clrloop0 04A1  
              end_of_initialization 0030                       _importantKeys 02D4  
                    _shift_ctrl_alt 004E                   ?_sendDataToAltera 0070  
                 __end_of_updateKey 03D5                  ??_sendDataToAltera 0020  
                 _kempstonMouseKeys 02DA                           _PORTAbits 0005  
                        _updatePort 0464             ?_calculateBitsFromTable 0020  
         __end_of_kempstonMouseKeys 02E0                 start_initialization 0011  
                       updatePort@a 0024      __end_of_calculateBitsFromTable 0464  
           calculateBitsFromTable@i 0028                         __pdataBANK0 004F  
                       __pbssCOMMON 0079                           ___latbits 0000  
                     __pcstackBANK0 0020                         ?_updatePort 0020  
                updateKey@localCtrl 002B                           _inDataPos 007A  
                         _ps2Device 0047                           __pstrings 0200  
                     _ps2NeedEncode 0044                            ?_myDelay 0070  
                       _ps2WaitCode 0046                           _myIsr$139 0076  
       calculateBitsFromTable@count 0023                      __size_of_myIsr 00A2  
       calculateBitsFromTable@table 0022                   interrupt_function 0004  
                         clear_ram0 04A0                 __size_of_updatePort 0031  
             _replaceOnShiftKeyDown 0286                           _updateKey 0382  
                       __stringbase 0205                           main@i_176 0035  
                         main@i_177 0034           __size_of_sendDataToAltera 004A  
                       _readDataPos 0049                          ?_updateKey 0026  
                __end_of__stringtab 0206                    __size_of_myDelay 0001  
                          _ps2DataA 0079                            _ps2DownA 0045  
                     __size_of_main 01C3       __end_of_replaceOnDelayKeyDown 02D4  
                          _replaced 004B                            _outPorts 004F  
                      ??_updatePort 0021           _kempstonMouseEmulatorKeys 004D  
                          intlevel1 0000                           stringcode 0200  
                __end_of_updatePort 0495                         ??_updateKey 0027  
                  _sendDataToAltera 03D5                            stringdir 0200  
                          stringtab 0200               __end_of_importantKeys 02DA  
                     _updateKey$149 002A  
