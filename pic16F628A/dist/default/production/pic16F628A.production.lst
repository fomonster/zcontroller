

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Nov 12 09:27:56 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	intentry,global,class=CODE,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.00
    29                           ; Generated 27/05/2018 GMT
    30                           ; 
    31                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F628A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0015                     	;# 
    79  0015                     	;# 
    80  0016                     	;# 
    81  0017                     	;# 
    82  0018                     	;# 
    83  0019                     	;# 
    84  001A                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  008C                     	;# 
    90  008E                     	;# 
    91  0092                     	;# 
    92  0098                     	;# 
    93  0099                     	;# 
    94  009A                     	;# 
    95  009B                     	;# 
    96  009C                     	;# 
    97  009D                     	;# 
    98  009F                     	;# 
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000E                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0015                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001F                     	;# 
   123  0081                     	;# 
   124  0085                     	;# 
   125  0086                     	;# 
   126  008C                     	;# 
   127  008E                     	;# 
   128  0092                     	;# 
   129  0098                     	;# 
   130  0099                     	;# 
   131  009A                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009F                     	;# 
   136                           
   137                           	psect	idataBANK0
   138  061C                     __pidataBANK0:	
   139                           
   140                           ;initializer for _outPorts
   141  061C  3400               	retlw	0
   142  061D  3400               	retlw	0
   143  061E  3400               	retlw	0
   144  061F  3400               	retlw	0
   145  0620  3400               	retlw	0
   146  0621  3400               	retlw	0
   147  0622  3400               	retlw	0
   148  0623  3400               	retlw	0
   149  0624  3407               	retlw	7
   150  0625  34F5               	retlw	245
   151  0626  34DA               	retlw	218
   152                           
   153                           	psect	strings
   154  0100                     __pstrings:	
   155  0100                     stringtab:	
   156  0100                     __stringtab:	
   157  0100                     stringcode:	
   158                           ;	String table - string pointers are 1 byte each
   159                           
   160  0100                     stringdir:	
   161  0100  3001               	movlw	high stringdir
   162  0101  008A               	movwf	10
   163  0102  0804               	movf	4,w
   164  0103  0A84               	incf	4,f
   165  0104  0782               	addwf	2,f
   166  0105                     __stringbase:	
   167  0105  3400               	retlw	0
   168  0106                     __end_of__stringtab:	
   169  0106                     _codeToMatrix:	
   170  0106  34FF               	retlw	255
   171  0107  34FF               	retlw	255
   172  0108  34FF               	retlw	255
   173  0109  34FF               	retlw	255
   174  010A  34FF               	retlw	255
   175  010B  34FF               	retlw	255
   176  010C  34FF               	retlw	255
   177  010D  34FF               	retlw	255
   178  010E  34FF               	retlw	255
   179  010F  34FF               	retlw	255
   180  0110  34FF               	retlw	255
   181  0111  34FF               	retlw	255
   182  0112  34FF               	retlw	255
   183  0113  34FF               	retlw	255
   184  0114  349C               	retlw	156
   185  0115  34FF               	retlw	255
   186  0116  34FF               	retlw	255
   187  0117  34FF               	retlw	255
   188  0118  34FF               	retlw	255
   189  0119  34FF               	retlw	255
   190  011A  34FF               	retlw	255
   191  011B  3402               	retlw	2
   192  011C  3403               	retlw	3
   193  011D  34FF               	retlw	255
   194  011E  34FF               	retlw	255
   195  011F  34FF               	retlw	255
   196  0120  3408               	retlw	8
   197  0121  3409               	retlw	9
   198  0122  3401               	retlw	1
   199  0123  340A               	retlw	10
   200  0124  340B               	retlw	11
   201  0125  34D6               	retlw	214
   202  0126  34FF               	retlw	255
   203  0127  3418               	retlw	24
   204  0128  3410               	retlw	16
   205  0129  3411               	retlw	17
   206  012A  3412               	retlw	18
   207  012B  341B               	retlw	27
   208  012C  3413               	retlw	19
   209  012D  34FF               	retlw	255
   210  012E  345C               	retlw	92
   211  012F  3407               	retlw	7
   212  0130  3420               	retlw	32
   213  0131  3419               	retlw	25
   214  0132  3422               	retlw	34
   215  0133  341A               	retlw	26
   216  0134  3423               	retlw	35
   217  0135  3463               	retlw	99
   218  0136  3464               	retlw	100
   219  0137  341F               	retlw	31
   220  0138  3427               	retlw	39
   221  0139  3426               	retlw	38
   222  013A  3421               	retlw	33
   223  013B  3425               	retlw	37
   224  013C  3424               	retlw	36
   225  013D  3454               	retlw	84
   226  013E  34A0               	retlw	160
   227  013F  3406               	retlw	6
   228  0140  3417               	retlw	23
   229  0141  341E               	retlw	30
   230  0142  341D               	retlw	29
   231  0143  341C               	retlw	28
   232  0144  3414               	retlw	20
   233  0145  34FF               	retlw	255
   234  0146  34FF               	retlw	255
   235  0147  349F               	retlw	159
   236  0148  3416               	retlw	22
   237  0149  3415               	retlw	21
   238  014A  340D               	retlw	13
   239  014B  3404               	retlw	4
   240  014C  340C               	retlw	12
   241  014D  34FF               	retlw	255
   242  014E  34C1               	retlw	193
   243  014F  3497               	retlw	151
   244  0150  34A0               	retlw	160
   245  0151  340E               	retlw	14
   246  0152  348D               	retlw	141
   247  0153  3405               	retlw	5
   248  0154  349E               	retlw	158
   249  0155  3483               	retlw	131
   250  0156  348B               	retlw	139
   251  0157  3493               	retlw	147
   252  0158  349C               	retlw	156
   253  0159  349B               	retlw	155
   254  015A  34E5               	retlw	229
   255  015B  348E               	retlw	142
   256  015C  34A3               	retlw	163
   257  015D  34A6               	retlw	166
   258  015E  344B               	retlw	75
   259  015F  34FF               	retlw	255
   260  0160  3406               	retlw	6
   261  0161  34DD               	retlw	221
   262  0162  34A4               	retlw	164
   263  0163  34D1               	retlw	209
   264  0164  34A7               	retlw	167
   265  0165  3494               	retlw	148
   266  0166  348C               	retlw	140
   267  0167  3484               	retlw	132
   268  0168  3496               	retlw	150
   269  0169  34C9               	retlw	201
   270  016A  34D9               	retlw	217
   271  016B  34E1               	retlw	225
   272  016C  3444               	retlw	68
   273  016D  3488               	retlw	136
   274  016E  3485               	retlw	133
   275  016F  3403               	retlw	3
   276  0170  349A               	retlw	154
   277  0171  341B               	retlw	27
   278  0172  341C               	retlw	28
   279  0173  34A2               	retlw	162
   280  0174  3498               	retlw	152
   281  0175  34C0               	retlw	192
   282  0176  3404               	retlw	4
   283  0177  3497               	retlw	151
   284  0178  340B               	retlw	11
   285  0179  3423               	retlw	35
   286  017A  3424               	retlw	36
   287  017B  3414               	retlw	20
   288  017C  3443               	retlw	67
   289  017D  34FF               	retlw	255
   290  017E  34FF               	retlw	255
   291  017F  3496               	retlw	150
   292  0180  3413               	retlw	19
   293  0181  349E               	retlw	158
   294  0182  34A7               	retlw	167
   295  0183  340C               	retlw	12
   296  0184  34FF               	retlw	255
   297  0185  34FF               	retlw	255
   298  0186                     __end_of_codeToMatrix:	
   299  0186                     _replaceOnShiftKeyDown:	
   300  0186  3416               	retlw	22
   301  0187  344F               	retlw	79
   302  0188  341E               	retlw	30
   303  0189  3450               	retlw	80
   304  018A  3426               	retlw	38
   305  018B  3451               	retlw	81
   306  018C  3425               	retlw	37
   307  018D  3453               	retlw	83
   308  018E  342E               	retlw	46
   309  018F  3456               	retlw	86
   310  0190  3436               	retlw	54
   311  0191  3457               	retlw	87
   312  0192  343D               	retlw	61
   313  0193  345C               	retlw	92
   314  0194  343E               	retlw	62
   315  0195  345E               	retlw	94
   316  0196  3446               	retlw	70
   317  0197  345F               	retlw	95
   318  0198  3445               	retlw	69
   319  0199  3460               	retlw	96
   320  019A  344E               	retlw	78
   321  019B  3461               	retlw	97
   322  019C  3455               	retlw	85
   323  019D  3462               	retlw	98
   324  019E  345D               	retlw	93
   325  019F  3463               	retlw	99
   326  01A0  344C               	retlw	76
   327  01A1  3467               	retlw	103
   328  01A2  3452               	retlw	82
   329  01A3  3468               	retlw	104
   330  01A4  3441               	retlw	65
   331  01A5  346A               	retlw	106
   332  01A6  3449               	retlw	73
   333  01A7  346D               	retlw	109
   334  01A8  344A               	retlw	74
   335  01A9  346E               	retlw	110
   336  01AA  340E               	retlw	14
   337  01AB  3448               	retlw	72
   338  01AC  3454               	retlw	84
   339  01AD  3464               	retlw	100
   340  01AE  345B               	retlw	91
   341  01AF  3465               	retlw	101
   342  01B0                     __end_of_replaceOnShiftKeyDown:	
   343  01B0                     _replaceTwoBytesCodes:	
   344  01B0  3411               	retlw	17
   345  01B1  3408               	retlw	8
   346  01B2  3414               	retlw	20
   347  01B3  3413               	retlw	19
   348  01B4  3470               	retlw	112
   349  01B5  3417               	retlw	23
   350  01B6  346C               	retlw	108
   351  01B7  3418               	retlw	24
   352  01B8  347D               	retlw	125
   353  01B9  3419               	retlw	25
   354  01BA  3471               	retlw	113
   355  01BB  341F               	retlw	31
   356  01BC  3469               	retlw	105
   357  01BD  3420               	retlw	32
   358  01BE  347A               	retlw	122
   359  01BF  3427               	retlw	39
   360  01C0  3475               	retlw	117
   361  01C1  3428               	retlw	40
   362  01C2  346B               	retlw	107
   363  01C3  342F               	retlw	47
   364  01C4  3472               	retlw	114
   365  01C5  3430               	retlw	48
   366  01C6  3474               	retlw	116
   367  01C7  3437               	retlw	55
   368  01C8  344A               	retlw	74
   369  01C9  3438               	retlw	56
   370  01CA  345A               	retlw	90
   371  01CB  3439               	retlw	57
   372  01CC                     __end_of_replaceTwoBytesCodes:	
   373  01CC                     _replaceOnDelayKeyDown:	
   374  01CC  341F               	retlw	31
   375  01CD  3454               	retlw	84
   376  01CE  345B               	retlw	91
   377  01CF  3463               	retlw	99
   378  01D0  3464               	retlw	100
   379  01D1  3465               	retlw	101
   380  01D2  3448               	retlw	72
   381  01D3  345D               	retlw	93
   382  01D4                     __end_of_replaceOnDelayKeyDown:	
   383  01D4                     _importantKeys:	
   384  01D4  3412               	retlw	18
   385  01D5  3459               	retlw	89
   386  01D6  3414               	retlw	20
   387  01D7  3413               	retlw	19
   388  01D8  3411               	retlw	17
   389  01D9  3408               	retlw	8
   390  01DA                     __end_of_importantKeys:	
   391  01DA                     _kempstonMouseKeys:	
   392  01DA  346B               	retlw	107
   393  01DB  3474               	retlw	116
   394  01DC  3475               	retlw	117
   395  01DD  3472               	retlw	114
   396  01DE  3473               	retlw	115
   397  01DF  3404               	retlw	4
   398  01E0                     __end_of_kempstonMouseKeys:	
   399  0005                     _PORTA	set	5
   400  0018                     _RCSTA	set	24
   401  001F                     _CMCON	set	31
   402  0017                     _CCP1CON	set	23
   403  0016                     _CCPR1H	set	22
   404  0015                     _CCPR1L	set	21
   405  0010                     _T1CON	set	16
   406  0011                     _TMR2	set	17
   407  000F                     _TMR1H	set	15
   408  000E                     _TMR1L	set	14
   409  0006                     _PORTB	set	6
   410  0001                     _TMR0	set	1
   411  00C7                     _SPEN	set	199
   412  0060                     _TMR1IF	set	96
   413  0061                     _TMR2IF	set	97
   414  0062                     _CCP1IF	set	98
   415  0064                     _TXIF	set	100
   416  0065                     _RCIF	set	101
   417  0066                     _CMIF	set	102
   418  0067                     _EEIF	set	103
   419  0058                     _RBIF	set	88
   420  0059                     _INTF	set	89
   421  005B                     _RBIE	set	91
   422  005C                     _INTE	set	92
   423  005E                     _PEIE	set	94
   424  005F                     _GIE	set	95
   425  0029                     _RA1	set	41
   426  002A                     _RA2	set	42
   427  0028                     _RA0	set	40
   428  002C                     _RA4	set	44
   429  002B                     _RA3	set	43
   430  005A                     _T0IF	set	90
   431  005D                     _T0IE	set	93
   432  0086                     _TRISB	set	134
   433  0098                     _TXSTA	set	152
   434  009F                     _VRCON	set	159
   435  0085                     _TRISA	set	133
   436  0408                     _PS0	set	1032
   437  0409                     _PS1	set	1033
   438  040A                     _PS2	set	1034
   439  040B                     _PSA	set	1035
   440  040C                     _T0SE	set	1036
   441  040D                     _T0CS	set	1037
   442  040E                     _INTEDG	set	1038
   443  040F                     _nRBPU	set	1039
   444  0460                     _TMR1IE	set	1120
   445  0461                     _TMR2IE	set	1121
   446  0462                     _CCP1IE	set	1122
   447  0464                     _TXIE	set	1124
   448  0465                     _RCIE	set	1125
   449  0466                     _CMIE	set	1126
   450  0467                     _EEIE	set	1127
   451                           
   452                           	psect	cinit
   453  000D                     start_initialization:	
   454                           ; #config settings
   455                           
   456  000D                     __initialization:	
   457                           
   458                           ; Initialize objects allocated to BANK0
   459  000D  261C               	fcall	__pidataBANK0	;fetch initializer
   460  000E  00BF               	movwf	__pdataBANK0& (0+127)
   461  000F  261D               	fcall	__pidataBANK0+1	;fetch initializer
   462  0010  00C0               	movwf	(__pdataBANK0+1)& (0+127)
   463  0011  261E               	fcall	__pidataBANK0+2	;fetch initializer
   464  0012  00C1               	movwf	(__pdataBANK0+2)& (0+127)
   465  0013  261F               	fcall	__pidataBANK0+3	;fetch initializer
   466  0014  00C2               	movwf	(__pdataBANK0+3)& (0+127)
   467  0015  2620               	fcall	__pidataBANK0+4	;fetch initializer
   468  0016  00C3               	movwf	(__pdataBANK0+4)& (0+127)
   469  0017  2621               	fcall	__pidataBANK0+5	;fetch initializer
   470  0018  00C4               	movwf	(__pdataBANK0+5)& (0+127)
   471  0019  2622               	fcall	__pidataBANK0+6	;fetch initializer
   472  001A  00C5               	movwf	(__pdataBANK0+6)& (0+127)
   473  001B  2623               	fcall	__pidataBANK0+7	;fetch initializer
   474  001C  00C6               	movwf	(__pdataBANK0+7)& (0+127)
   475  001D  2624               	fcall	__pidataBANK0+8	;fetch initializer
   476  001E  00C7               	movwf	(__pdataBANK0+8)& (0+127)
   477  001F  2625               	fcall	__pidataBANK0+9	;fetch initializer
   478  0020  00C8               	movwf	(__pdataBANK0+9)& (0+127)
   479  0021  2626               	fcall	__pidataBANK0+10	;fetch initializer
   480  0022  00C9               	movwf	(__pdataBANK0+10)& (0+127)
   481                           
   482                           ; Clear objects allocated to BANK1
   483  0023  1383               	bcf	3,7	;select IRP bank0
   484  0024  30A0               	movlw	low __pbssBANK1
   485  0025  0084               	movwf	4
   486  0026  30C0               	movlw	low (__pbssBANK1+32)
   487  0027  2627               	fcall	clear_ram0
   488                           
   489                           ; Clear objects allocated to BANK0
   490  0028  304A               	movlw	low __pbssBANK0
   491  0029  0084               	movwf	4
   492  002A  3053               	movlw	low (__pbssBANK0+9)
   493  002B  2627               	fcall	clear_ram0
   494                           
   495                           ; Clear objects allocated to COMMON
   496  002C  3070               	movlw	low __pbssCOMMON
   497  002D  0084               	movwf	4
   498  002E  3076               	movlw	low (__pbssCOMMON+6)
   499  002F  2627               	fcall	clear_ram0
   500  0030                     end_of_initialization:	
   501                           ;End of C runtime variable initialization code
   502                           
   503  0030                     __end_of__initialization:	
   504  0030  0183               	clrf	3
   505  0031  2AB5               	ljmp	_main	;jump to C main() function
   506                           
   507                           	psect	bssCOMMON
   508  0070                     __pbssCOMMON:	
   509  0070                     _replaced:	
   510  0070                     	ds	1
   511  0071                     _ps2BitsCount:	
   512  0071                     	ds	1
   513  0072                     _ps2Parity:	
   514  0072                     	ds	1
   515  0073                     _ps2Bits:	
   516  0073                     	ds	1
   517  0074                     _ps2DataState:	
   518  0074                     	ds	1
   519  0075                     _shift_ctrl_alt:	
   520  0075                     	ds	1
   521                           
   522                           	psect	bssBANK0
   523  004A                     __pbssBANK0:	
   524  004A                     _kempstonMouseEmulatorDelay:	
   525  004A                     	ds	2
   526  004C                     _delay:	
   527  004C                     	ds	2
   528  004E                     _delayedKey:	
   529  004E                     	ds	1
   530  004F                     _numLock:	
   531  004F                     	ds	1
   532  0050                     _needSave:	
   533  0050                     	ds	1
   534  0051                     _ps2Device:	
   535  0051                     	ds	1
   536  0052                     _kempstonMouseEmulatorKeys:	
   537  0052                     	ds	1
   538                           
   539                           	psect	dataBANK0
   540  003F                     __pdataBANK0:	
   541  003F                     _outPorts:	
   542  003F                     	ds	11
   543                           
   544                           	psect	bssBANK1
   545  00A0                     __pbssBANK1:	
   546  00A0                     _devices:	
   547  00A0                     	ds	32
   548                           
   549                           	psect	clrtext
   550  0627                     clear_ram0:	
   551                           ;	Called with FSR containing the base address, and
   552                           ;	W with the last address+1
   553                           
   554  0627  0064               	clrwdt	;clear the watchdog before getting into this loop
   555  0628                     clrloop0:	
   556  0628  0180               	clrf	0	;clear RAM location pointed to by FSR
   557  0629  0A84               	incf	4,f	;increment pointer
   558  062A  0604               	xorwf	4,w	;XOR with final address
   559  062B  1903               	btfsc	3,2	;have we reached the end yet?
   560  062C  3400               	retlw	0	;all done for this memory range, return
   561  062D  0604               	xorwf	4,w	;XOR again to restore value
   562  062E  2E28               	goto	clrloop0	;do the next byte
   563                           
   564                           	psect	cstackCOMMON
   565  0076                     __pcstackCOMMON:	
   566  0076                     ?_myIsr:	
   567  0076                     ??_myIsr:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0076                     ?_myDelay:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0076                     ?_sendDataToAltera:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0076                     ?_deviceDataRead:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0076                     ?_deviceDataUpdate:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0076                     ?_main:	
   583                           ; 1 bytes @ 0x0
   584                           
   585                           
   586                           ; 1 bytes @ 0x0
   587  0076                     	ds	5
   588  007B                     myIsr@device:	
   589                           
   590                           ; 1 bytes @ 0x5
   591  007B                     	ds	1
   592                           
   593                           	psect	cstackBANK0
   594  0020                     __pcstackBANK0:	
   595  0020                     ?_updatePort:	
   596  0020                     ?_calculateBitsFromTable:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0020                     ??_myDelay:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0020                     ??_sendDataToAltera:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0020                     ?_deviceDataInit:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0020                     ??_deviceDataRead:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0020                     updatePort@set:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0020                     calculateBitsFromTable@keyDown:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0020                     deviceDataInit@device:	
   618                           ; 1 bytes @ 0x0
   619                           
   620                           
   621                           ; 2 bytes @ 0x0
   622  0020                     	ds	1
   623  0021                     ??_updatePort:	
   624  0021                     calculateBitsFromTable@bits:	
   625                           ; 1 bytes @ 0x1
   626                           
   627                           
   628                           ; 1 bytes @ 0x1
   629  0021                     	ds	1
   630  0022                     ??_deviceDataInit:	
   631  0022                     calculateBitsFromTable@table:	
   632                           ; 1 bytes @ 0x2
   633                           
   634  0022                     deviceDataRead@code:	
   635                           ; 1 bytes @ 0x2
   636                           
   637  0022                     _sendDataToAltera$155:	
   638                           ; 1 bytes @ 0x2
   639                           
   640                           
   641                           ; 2 bytes @ 0x2
   642  0022                     	ds	1
   643  0023                     calculateBitsFromTable@count:	
   644  0023                     deviceDataRead@device:	
   645                           ; 1 bytes @ 0x3
   646                           
   647                           
   648                           ; 1 bytes @ 0x3
   649  0023                     	ds	1
   650  0024                     updatePort@a:	
   651  0024                     calculateBitsFromTable@clearIfFound:	
   652                           ; 1 bytes @ 0x4
   653                           
   654  0024                     sendDataToAltera@i:	
   655                           ; 1 bytes @ 0x4
   656                           
   657                           
   658                           ; 1 bytes @ 0x4
   659  0024                     	ds	1
   660  0025                     ??_calculateBitsFromTable:	
   661  0025                     updatePort@bit_id:	
   662                           ; 1 bytes @ 0x5
   663                           
   664                           
   665                           ; 1 bytes @ 0x5
   666  0025                     	ds	1
   667  0026                     ?_updateKey:	
   668  0026                     updateKey@down:	
   669                           ; 1 bytes @ 0x6
   670                           
   671                           
   672                           ; 1 bytes @ 0x6
   673  0026                     	ds	1
   674  0027                     ??_updateKey:	
   675  0027                     calculateBitsFromTable@keyCode:	
   676                           ; 1 bytes @ 0x7
   677                           
   678                           
   679                           ; 1 bytes @ 0x7
   680  0027                     	ds	1
   681  0028                     calculateBitsFromTable@i:	
   682  0028                     updateKey@key:	
   683                           ; 1 bytes @ 0x8
   684                           
   685                           
   686                           ; 1 bytes @ 0x8
   687  0028                     	ds	1
   688  0029                     updateKey@localShift:	
   689                           
   690                           ; 1 bytes @ 0x9
   691  0029                     	ds	1
   692  002A                     _updateKey$148:	
   693                           
   694                           ; 1 bytes @ 0xA
   695  002A                     	ds	1
   696  002B                     updateKey@localCtrl:	
   697                           
   698                           ; 1 bytes @ 0xB
   699  002B                     	ds	1
   700  002C                     updateKey@code:	
   701                           
   702                           ; 1 bytes @ 0xC
   703  002C                     	ds	1
   704  002D                     ?_processKeyCode:	
   705  002D                     processKeyCode@keyDown:	
   706                           ; 1 bytes @ 0xD
   707                           
   708                           
   709                           ; 1 bytes @ 0xD
   710  002D                     	ds	1
   711  002E                     ??_processKeyCode:	
   712                           
   713                           ; 1 bytes @ 0xE
   714  002E                     	ds	5
   715  0033                     processKeyCode@i_161:	
   716                           
   717                           ; 1 bytes @ 0x13
   718  0033                     	ds	1
   719  0034                     processKeyCode@i:	
   720                           
   721                           ; 1 bytes @ 0x14
   722  0034                     	ds	1
   723  0035                     processKeyCode@keyCode:	
   724                           
   725                           ; 1 bytes @ 0x15
   726  0035                     	ds	1
   727  0036                     ??_deviceDataUpdate:	
   728                           
   729                           ; 1 bytes @ 0x16
   730  0036                     	ds	2
   731  0038                     _deviceDataUpdate$197:	
   732                           
   733                           ; 2 bytes @ 0x18
   734  0038                     	ds	2
   735  003A                     deviceDataUpdate@i:	
   736                           
   737                           ; 1 bytes @ 0x1A
   738  003A                     	ds	1
   739  003B                     deviceDataUpdate@code:	
   740                           
   741                           ; 1 bytes @ 0x1B
   742  003B                     	ds	1
   743  003C                     deviceDataUpdate@device:	
   744                           
   745                           ; 1 bytes @ 0x1C
   746  003C                     	ds	1
   747  003D                     ??_main:	
   748                           
   749                           ; 1 bytes @ 0x1D
   750  003D                     	ds	1
   751  003E                     main@i:	
   752                           
   753                           ; 1 bytes @ 0x1E
   754  003E                     	ds	1
   755                           
   756                           	psect	maintext
   757  02B5                     __pmaintext:	
   758 ;;
   759 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   760 ;;
   761 ;; *************** function _main *****************
   762 ;; Defined at:
   763 ;;		line 504 in file "main.c"
   764 ;; Parameters:    Size  Location     Type
   765 ;;		None
   766 ;; Auto vars:     Size  Location     Type
   767 ;;  i               1   30[BANK0 ] char 
   768 ;; Return value:  Size  Location     Type
   769 ;;                  1    wreg      void 
   770 ;; Registers used:
   771 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   772 ;; Tracked objects:
   773 ;;		On entry : B00/0
   774 ;;		On exit  : 0/0
   775 ;;		Unchanged: 0/0
   776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   777 ;;      Params:         0       0       0       0
   778 ;;      Locals:         0       1       0       0
   779 ;;      Temps:          0       1       0       0
   780 ;;      Totals:         0       2       0       0
   781 ;;Total ram usage:        2 bytes
   782 ;; Hardware stack levels required when called:    5
   783 ;; This function calls:
   784 ;;		_deviceDataInit
   785 ;;		_deviceDataUpdate
   786 ;;		_sendDataToAltera
   787 ;; This function is called by:
   788 ;;		Startup code after reset
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           
   793                           ;psect for function _main
   794  02B5                     _main:	
   795                           
   796                           ;main.c: 507:     deviceDataInit(0);
   797                           
   798                           ;incstack = 0
   799                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   800  02B5  3000               	movlw	0
   801  02B6  1283               	bcf	3,5	;RP0=0, select bank0
   802  02B7  1303               	bcf	3,6	;RP1=0, select bank0
   803  02B8  00A0               	movwf	deviceDataInit@device
   804  02B9  3000               	movlw	0
   805  02BA  00A1               	movwf	deviceDataInit@device+1
   806  02BB  2487               	fcall	_deviceDataInit
   807                           
   808                           ;main.c: 508:     deviceDataInit(1);
   809  02BC  3001               	movlw	1
   810  02BD  1283               	bcf	3,5	;RP0=0, select bank0
   811  02BE  1303               	bcf	3,6	;RP1=0, select bank0
   812  02BF  00A0               	movwf	deviceDataInit@device
   813  02C0  3000               	movlw	0
   814  02C1  00A1               	movwf	deviceDataInit@device+1
   815  02C2  2487               	fcall	_deviceDataInit
   816                           
   817                           ;main.c: 511:     for(int8_t i=0;i<8;i++) {
   818  02C3  1283               	bcf	3,5	;RP0=0, select bank0
   819  02C4  1303               	bcf	3,6	;RP1=0, select bank0
   820  02C5  01BE               	clrf	main@i
   821  02C6  083E               	movf	main@i,w
   822  02C7  3A80               	xorlw	128
   823  02C8  3E78               	addlw	-136
   824  02C9  1803               	btfsc	3,0
   825  02CA  2AD9               	goto	l2064
   826  02CB                     l2058:	
   827                           
   828                           ;main.c: 512:         outPorts[i] = 0;
   829  02CB  083E               	movf	main@i,w
   830  02CC  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
   831  02CD  0084               	movwf	4
   832  02CE  1383               	bcf	3,7	;select IRP bank0
   833  02CF  0180               	clrf	0
   834                           
   835                           ;main.c: 513:     }
   836  02D0  3001               	movlw	1
   837  02D1  00BD               	movwf	??_main
   838  02D2  083D               	movf	??_main,w
   839  02D3  07BE               	addwf	main@i,f
   840  02D4  083E               	movf	main@i,w
   841  02D5  3A80               	xorlw	128
   842  02D6  3E78               	addlw	-136
   843  02D7  1C03               	skipc
   844  02D8  2ACB               	goto	l2058
   845  02D9                     l2064:	
   846                           
   847                           ;main.c: 514:     outPorts[8] = 0x07;
   848  02D9  3007               	movlw	7
   849  02DA  00BD               	movwf	??_main
   850  02DB  083D               	movf	??_main,w
   851  02DC  00C7               	movwf	_outPorts+8
   852                           
   853                           ;main.c: 515:     outPorts[9] = 0xF5;
   854  02DD  30F5               	movlw	245
   855  02DE  00BD               	movwf	??_main
   856  02DF  083D               	movf	??_main,w
   857  02E0  00C8               	movwf	_outPorts+9
   858                           
   859                           ;main.c: 516:     outPorts[10] = 0xDA;
   860  02E1  30DA               	movlw	218
   861  02E2  00BD               	movwf	??_main
   862  02E3  083D               	movf	??_main,w
   863  02E4  00C9               	movwf	_outPorts+10
   864                           
   865                           ;main.c: 517:     sendDataToAltera();
   866  02E5  253D               	fcall	_sendDataToAltera
   867                           
   868                           ;main.c: 522:     GIE = 1;
   869  02E6  178B               	bsf	11,7	;volatile
   870                           
   871                           ;main.c: 523:     PEIE = 0;
   872  02E7  130B               	bcf	11,6	;volatile
   873                           
   874                           ;main.c: 524:     T0IE = 1;
   875  02E8  168B               	bsf	11,5	;volatile
   876                           
   877                           ;main.c: 525:     INTE = 0;
   878  02E9  120B               	bcf	11,4	;volatile
   879                           
   880                           ;main.c: 526:     RBIE = 0;
   881  02EA  118B               	bcf	11,3	;volatile
   882                           
   883                           ;main.c: 527:     T0IF = 0;
   884  02EB  110B               	bcf	11,2	;volatile
   885                           
   886                           ;main.c: 528:     INTF = 0;
   887  02EC  108B               	bcf	11,1	;volatile
   888                           
   889                           ;main.c: 529:     RBIF = 0;
   890  02ED  100B               	bcf	11,0	;volatile
   891                           
   892                           ;main.c: 532:     EEIF = 0;
   893  02EE  1283               	bcf	3,5	;RP0=0, select bank0
   894  02EF  1303               	bcf	3,6	;RP1=0, select bank0
   895  02F0  138C               	bcf	12,7	;volatile
   896                           
   897                           ;main.c: 533:     CMIF = 0;
   898  02F1  130C               	bcf	12,6	;volatile
   899                           
   900                           ;main.c: 534:     RCIF = 0;
   901  02F2  128C               	bcf	12,5	;volatile
   902                           
   903                           ;main.c: 535:     TXIF = 0;
   904  02F3  120C               	bcf	12,4	;volatile
   905                           
   906                           ;main.c: 536:     CCP1IF = 0;
   907  02F4  110C               	bcf	12,2	;volatile
   908                           
   909                           ;main.c: 537:     TMR2IF = 0;
   910  02F5  108C               	bcf	12,1	;volatile
   911                           
   912                           ;main.c: 538:     TMR1IF = 0;
   913  02F6  100C               	bcf	12,0	;volatile
   914                           
   915                           ;main.c: 541:     EEIE = 0;
   916  02F7  1683               	bsf	3,5	;RP0=1, select bank1
   917  02F8  1303               	bcf	3,6	;RP1=0, select bank1
   918  02F9  138C               	bcf	12,7	;volatile
   919                           
   920                           ;main.c: 542:     CMIE = 0;
   921  02FA  130C               	bcf	12,6	;volatile
   922                           
   923                           ;main.c: 543:     RCIE = 0;
   924  02FB  128C               	bcf	12,5	;volatile
   925                           
   926                           ;main.c: 544:     TXIE = 0;
   927  02FC  120C               	bcf	12,4	;volatile
   928                           
   929                           ;main.c: 545:     CCP1IE = 0;
   930  02FD  110C               	bcf	12,2	;volatile
   931                           
   932                           ;main.c: 546:     TMR2IE = 0;
   933  02FE  108C               	bcf	12,1	;volatile
   934                           
   935                           ;main.c: 547:     TMR1IE = 0;
   936  02FF  100C               	bcf	12,0	;volatile
   937                           
   938                           ;main.c: 550:     nRBPU = 1;
   939  0300  1781               	bsf	1,7	;volatile
   940                           
   941                           ;main.c: 551:     INTEDG = 0;
   942  0301  1301               	bcf	1,6	;volatile
   943                           
   944                           ;main.c: 552:     T0CS = 1;
   945  0302  1681               	bsf	1,5	;volatile
   946                           
   947                           ;main.c: 553:     T0SE = 1;
   948  0303  1601               	bsf	1,4	;volatile
   949                           
   950                           ;main.c: 554:     PSA = 1;
   951  0304  1581               	bsf	1,3	;volatile
   952                           
   953                           ;main.c: 555:     PS2 = 0;
   954  0305  1101               	bcf	1,2	;volatile
   955                           
   956                           ;main.c: 556:     PS1 = 0;
   957  0306  1081               	bcf	1,1	;volatile
   958                           
   959                           ;main.c: 557:     PS0 = 0;
   960  0307  1001               	bcf	1,0	;volatile
   961                           
   962                           ;main.c: 560:     TMR0 = 255;
   963  0308  30FF               	movlw	255
   964  0309  1283               	bcf	3,5	;RP0=0, select bank0
   965  030A  1303               	bcf	3,6	;RP1=0, select bank0
   966  030B  0081               	movwf	1	;volatile
   967                           
   968                           ;main.c: 561:     TMR1L = 0;
   969  030C  018E               	clrf	14	;volatile
   970                           
   971                           ;main.c: 562:     TMR1H = 0;
   972  030D  018F               	clrf	15	;volatile
   973                           
   974                           ;main.c: 563:     TMR2 = 0;
   975  030E  0191               	clrf	17	;volatile
   976                           
   977                           ;main.c: 564:     T1CON = 6;
   978  030F  3006               	movlw	6
   979  0310  0090               	movwf	16	;volatile
   980                           
   981                           ;main.c: 565:     CCPR1L = 0;
   982  0311  0195               	clrf	21	;volatile
   983                           
   984                           ;main.c: 566:     CCPR1H = 0;
   985  0312  0196               	clrf	22	;volatile
   986                           
   987                           ;main.c: 567:     CCP1CON = 0;
   988  0313  0197               	clrf	23	;volatile
   989                           
   990                           ;main.c: 568:     CMCON = 7;
   991  0314  3007               	movlw	7
   992  0315  009F               	movwf	31	;volatile
   993                           
   994                           ;main.c: 569:     VRCON = 0;
   995  0316  1683               	bsf	3,5	;RP0=1, select bank1
   996  0317  1303               	bcf	3,6	;RP1=0, select bank1
   997  0318  019F               	clrf	31	;volatile
   998                           
   999                           ;main.c: 570:     RCSTA = 0;
  1000  0319  1283               	bcf	3,5	;RP0=0, select bank0
  1001  031A  1303               	bcf	3,6	;RP1=0, select bank0
  1002  031B  0198               	clrf	24	;volatile
  1003                           
  1004                           ;main.c: 571:     TXSTA = 128;
  1005  031C  3080               	movlw	128
  1006  031D  1683               	bsf	3,5	;RP0=1, select bank1
  1007  031E  1303               	bcf	3,6	;RP1=0, select bank1
  1008  031F  0098               	movwf	24	;volatile
  1009                           
  1010                           ;main.c: 572:     SPEN = 0;
  1011  0320  1283               	bcf	3,5	;RP0=0, select bank0
  1012  0321  1303               	bcf	3,6	;RP1=0, select bank0
  1013  0322  1398               	bcf	24,7	;volatile
  1014                           
  1015                           ;main.c: 577:     TRISA = 0b11111001;
  1016  0323  30F9               	movlw	249
  1017  0324  1683               	bsf	3,5	;RP0=1, select bank1
  1018  0325  1303               	bcf	3,6	;RP1=0, select bank1
  1019  0326  0085               	movwf	5	;volatile
  1020                           
  1021                           ;main.c: 578:     PORTA = 0;
  1022  0327  1283               	bcf	3,5	;RP0=0, select bank0
  1023  0328  1303               	bcf	3,6	;RP1=0, select bank0
  1024  0329  0185               	clrf	5	;volatile
  1025                           
  1026                           ;main.c: 581:     TRISB = 0;
  1027  032A  1683               	bsf	3,5	;RP0=1, select bank1
  1028  032B  1303               	bcf	3,6	;RP1=0, select bank1
  1029  032C  0186               	clrf	6	;volatile
  1030                           
  1031                           ;main.c: 582:     PORTB = 0xFF;
  1032  032D  30FF               	movlw	255
  1033  032E  1283               	bcf	3,5	;RP0=0, select bank0
  1034  032F  1303               	bcf	3,6	;RP1=0, select bank0
  1035  0330  0086               	movwf	6	;volatile
  1036                           
  1037                           ;main.c: 585:     delay = 0;
  1038  0331  01CC               	clrf	_delay
  1039  0332  01CD               	clrf	_delay+1
  1040                           
  1041                           ;main.c: 586:     delayedKey = 0;
  1042  0333  01CE               	clrf	_delayedKey
  1043                           
  1044                           ;main.c: 587:     shift_ctrl_alt = 0;
  1045  0334  01F5               	clrf	_shift_ctrl_alt
  1046                           
  1047                           ;main.c: 588:     replaced = 0;
  1048  0335  01F0               	clrf	_replaced
  1049  0336                     l2170:	
  1050                           ;main.c: 602:     while(1)
  1051                           
  1052                           
  1053                           ;main.c: 603:     {;main.c: 604:         needSave = 0;
  1054  0336  1283               	bcf	3,5	;RP0=0, select bank0
  1055  0337  1303               	bcf	3,6	;RP1=0, select bank0
  1056  0338  01D0               	clrf	_needSave
  1057                           
  1058                           ;main.c: 606:         deviceDataUpdate(&devices[0]);
  1059  0339  30A0               	movlw	(low (_devices| 0))& (0+255)
  1060  033A  240A               	fcall	_deviceDataUpdate
  1061                           
  1062                           ;main.c: 607:         deviceDataUpdate(&devices[1]);
  1063  033B  30B0               	movlw	(low ((_devices| 0+16)))& (0+255)
  1064  033C  240A               	fcall	_deviceDataUpdate
  1065                           
  1066                           ;main.c: 609:         kempstonMouseEmulatorDelay++;
  1067  033D  3001               	movlw	1
  1068  033E  1283               	bcf	3,5	;RP0=0, select bank0
  1069  033F  1303               	bcf	3,6	;RP1=0, select bank0
  1070  0340  07CA               	addwf	_kempstonMouseEmulatorDelay,f
  1071  0341  1803               	skipnc
  1072  0342  0ACB               	incf	_kempstonMouseEmulatorDelay+1,f
  1073  0343  3000               	movlw	0
  1074  0344  07CB               	addwf	_kempstonMouseEmulatorDelay+1,f
  1075                           
  1076                           ;main.c: 610:         if ( kempstonMouseEmulatorDelay > 2000 ) {
  1077  0345  3007               	movlw	7
  1078  0346  024B               	subwf	_kempstonMouseEmulatorDelay+1,w
  1079  0347  30D1               	movlw	209
  1080  0348  1903               	skipnz
  1081  0349  024A               	subwf	_kempstonMouseEmulatorDelay,w
  1082  034A  1C03               	skipc
  1083  034B  2B6F               	goto	l2206
  1084                           
  1085                           ;main.c: 612:             if ( numLock ) {
  1086  034C  084F               	movf	_numLock,w
  1087  034D  1903               	btfsc	3,2
  1088  034E  2B6B               	goto	l2202
  1089                           
  1090                           ;main.c: 613:                 if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]-=2;
  1091  034F  1C52               	btfss	_kempstonMouseEmulatorKeys,0
  1092  0350  2B53               	goto	l2186
  1093  0351  3002               	movlw	2
  1094  0352  02C8               	subwf	_outPorts+9,f
  1095  0353                     l2186:	
  1096                           
  1097                           ;main.c: 614:                 if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]+=2;
  1098  0353  1CD2               	btfss	_kempstonMouseEmulatorKeys,1
  1099  0354  2B59               	goto	l2190
  1100  0355  3002               	movlw	2
  1101  0356  00BD               	movwf	??_main
  1102  0357  083D               	movf	??_main,w
  1103  0358  07C8               	addwf	_outPorts+9,f
  1104  0359                     l2190:	
  1105                           
  1106                           ;main.c: 615:                 if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10]+=2
      +                          ;
  1107  0359  1D52               	btfss	_kempstonMouseEmulatorKeys,2
  1108  035A  2B5F               	goto	l2194
  1109  035B  3002               	movlw	2
  1110  035C  00BD               	movwf	??_main
  1111  035D  083D               	movf	??_main,w
  1112  035E  07C9               	addwf	_outPorts+10,f
  1113  035F                     l2194:	
  1114                           
  1115                           ;main.c: 616:                 if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10]-=2
      +                          ;
  1116  035F  1DD2               	btfss	_kempstonMouseEmulatorKeys,3
  1117  0360  2B63               	goto	l2198
  1118  0361  3002               	movlw	2
  1119  0362  02C9               	subwf	_outPorts+10,f
  1120  0363                     l2198:	
  1121                           
  1122                           ;main.c: 617:                 if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8] &=
      +                           254;
  1123  0363  1E52               	btfss	_kempstonMouseEmulatorKeys,4
  1124  0364  2B6A               	goto	l284
  1125  0365  30FE               	movlw	254
  1126  0366  00BD               	movwf	??_main
  1127  0367  083D               	movf	??_main,w
  1128  0368  05C7               	andwf	_outPorts+8,f
  1129  0369  2B6B               	goto	l2202
  1130  036A                     l284:	
  1131                           ;main.c: 618:                 else outPorts[8] |= 1;
  1132                           
  1133  036A  1447               	bsf	_outPorts+8,0
  1134  036B                     l2202:	
  1135                           ;main.c: 619:             }
  1136                           
  1137                           
  1138                           ;main.c: 620:             kempstonMouseEmulatorDelay = 0;
  1139  036B  01CA               	clrf	_kempstonMouseEmulatorDelay
  1140  036C  01CB               	clrf	_kempstonMouseEmulatorDelay+1
  1141                           
  1142                           ;main.c: 621:             needSave = 1;
  1143  036D  01D0               	clrf	_needSave
  1144  036E  0AD0               	incf	_needSave,f
  1145  036F                     l2206:	
  1146                           ;main.c: 622:         }
  1147                           
  1148                           
  1149                           ;main.c: 624:         if ( needSave) {
  1150  036F  0850               	movf	_needSave,w
  1151  0370  1903               	btfsc	3,2
  1152  0371  2B73               	goto	l286
  1153                           
  1154                           ;main.c: 625:             sendDataToAltera();
  1155  0372  253D               	fcall	_sendDataToAltera
  1156  0373                     l286:	
  1157                           ;main.c: 626:         }
  1158                           
  1159  0373  0064               	clrwdt	;# 
  1160                           
  1161                           ;main.c: 629:     }
  1162  0374  2B36               	goto	l2170
  1163  0375                     __end_of_main:	
  1164                           
  1165                           	psect	text1
  1166  053D                     __ptext1:	
  1167 ;; *************** function _sendDataToAltera *****************
  1168 ;; Defined at:
  1169 ;;		line 303 in file "main.c"
  1170 ;; Parameters:    Size  Location     Type
  1171 ;;		None
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  i               1    4[BANK0 ] char 
  1174 ;; Return value:  Size  Location     Type
  1175 ;;                  1    wreg      void 
  1176 ;; Registers used:
  1177 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1178 ;; Tracked objects:
  1179 ;;		On entry : 0/0
  1180 ;;		On exit  : 0/0
  1181 ;;		Unchanged: 0/0
  1182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1183 ;;      Params:         0       0       0       0
  1184 ;;      Locals:         0       3       0       0
  1185 ;;      Temps:          0       2       0       0
  1186 ;;      Totals:         0       5       0       0
  1187 ;;Total ram usage:        5 bytes
  1188 ;; Hardware stack levels used:    1
  1189 ;; Hardware stack levels required when called:    2
  1190 ;; This function calls:
  1191 ;;		_myDelay
  1192 ;; This function is called by:
  1193 ;;		_main
  1194 ;; This function uses a non-reentrant model
  1195 ;;
  1196                           
  1197                           
  1198                           ;psect for function _sendDataToAltera
  1199  053D                     _sendDataToAltera:	
  1200                           
  1201                           ;main.c: 305:     RA2 = 1;
  1202                           
  1203                           ;incstack = 0
  1204                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1205  053D  1283               	bcf	3,5	;RP0=0, select bank0
  1206  053E  1303               	bcf	3,6	;RP1=0, select bank0
  1207  053F  1505               	bsf	5,2	;volatile
  1208                           
  1209                           ;main.c: 306:     RA1 = 0;
  1210  0540  1085               	bcf	5,1	;volatile
  1211                           
  1212                           ;main.c: 307:     myDelay();
  1213  0541  262F               	fcall	_myDelay
  1214                           
  1215                           ;main.c: 308:     RA1 = 1;
  1216  0542  1283               	bcf	3,5	;RP0=0, select bank0
  1217  0543  1303               	bcf	3,6	;RP1=0, select bank0
  1218  0544  1485               	bsf	5,1	;volatile
  1219                           
  1220                           ;main.c: 309:     myDelay();
  1221  0545  262F               	fcall	_myDelay
  1222                           
  1223                           ;main.c: 310:     RA1 = 0;
  1224  0546  1283               	bcf	3,5	;RP0=0, select bank0
  1225  0547  1303               	bcf	3,6	;RP1=0, select bank0
  1226  0548  1085               	bcf	5,1	;volatile
  1227                           
  1228                           ;main.c: 311:     myDelay();
  1229  0549  262F               	fcall	_myDelay
  1230                           
  1231                           ;main.c: 312:     for(int8_t i=0;i<11;i++) {
  1232  054A  1283               	bcf	3,5	;RP0=0, select bank0
  1233  054B  1303               	bcf	3,6	;RP1=0, select bank0
  1234  054C  01A4               	clrf	sendDataToAltera@i
  1235  054D  0824               	movf	sendDataToAltera@i,w
  1236  054E  3A80               	xorlw	128
  1237  054F  3E75               	addlw	-139
  1238  0550  1803               	btfsc	3,0
  1239  0551  2D84               	goto	l1996
  1240  0552                     l214:	
  1241                           
  1242                           ;main.c: 313:         RA2 = 1;
  1243  0552  1505               	bsf	5,2	;volatile
  1244                           
  1245                           ;main.c: 314:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1246  0553  0824               	movf	sendDataToAltera@i,w
  1247  0554  3A80               	xorlw	128
  1248  0555  3E78               	addlw	-136
  1249  0556  1C03               	skipc
  1250  0557  2D63               	goto	l1978
  1251  0558  0824               	movf	sendDataToAltera@i,w
  1252  0559  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
  1253  055A  0084               	movwf	4
  1254  055B  1383               	bcf	3,7	;select IRP bank0
  1255  055C  0800               	movf	0,w
  1256  055D  00A0               	movwf	??_sendDataToAltera
  1257  055E  01A1               	clrf	??_sendDataToAltera+1
  1258  055F  0820               	movf	??_sendDataToAltera,w
  1259  0560  00A2               	movwf	_sendDataToAltera$155
  1260  0561  0821               	movf	??_sendDataToAltera+1,w
  1261  0562  2D6D               	goto	L1
  1262  0563                     l1978:	
  1263  0563  0824               	movf	sendDataToAltera@i,w
  1264  0564  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
  1265  0565  0084               	movwf	4
  1266  0566  1383               	bcf	3,7	;select IRP bank0
  1267  0567  0800               	movf	0,w
  1268  0568  00A0               	movwf	??_sendDataToAltera
  1269  0569  01A1               	clrf	??_sendDataToAltera+1
  1270  056A  0920               	comf	??_sendDataToAltera,w
  1271  056B  00A2               	movwf	_sendDataToAltera$155
  1272  056C  0921               	comf	??_sendDataToAltera+1,w
  1273  056D                     L1:	
  1274  056D  00A3               	movwf	_sendDataToAltera$155+1
  1275  056E  0822               	movf	_sendDataToAltera$155,w
  1276  056F  0086               	movwf	6	;volatile
  1277                           
  1278                           ;main.c: 315:         myDelay();
  1279  0570  262F               	fcall	_myDelay
  1280                           
  1281                           ;main.c: 316:         RA2 = 0;
  1282  0571  1283               	bcf	3,5	;RP0=0, select bank0
  1283  0572  1303               	bcf	3,6	;RP1=0, select bank0
  1284  0573  1105               	bcf	5,2	;volatile
  1285                           
  1286                           ;main.c: 317:         myDelay();
  1287  0574  262F               	fcall	_myDelay
  1288                           
  1289                           ;main.c: 318:         RA2 = 1;
  1290  0575  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0576  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0577  1505               	bsf	5,2	;volatile
  1293                           
  1294                           ;main.c: 319:         myDelay();
  1295  0578  262F               	fcall	_myDelay
  1296                           
  1297                           ;main.c: 320:     }
  1298  0579  3001               	movlw	1
  1299  057A  1283               	bcf	3,5	;RP0=0, select bank0
  1300  057B  1303               	bcf	3,6	;RP1=0, select bank0
  1301  057C  00A0               	movwf	??_sendDataToAltera
  1302  057D  0820               	movf	??_sendDataToAltera,w
  1303  057E  07A4               	addwf	sendDataToAltera@i,f
  1304  057F  0824               	movf	sendDataToAltera@i,w
  1305  0580  3A80               	xorlw	128
  1306  0581  3E75               	addlw	-139
  1307  0582  1C03               	skipc
  1308  0583  2D52               	goto	l214
  1309  0584                     l1996:	
  1310                           
  1311                           ;main.c: 321:     PORTB = 0xFF;
  1312  0584  30FF               	movlw	255
  1313  0585  0086               	movwf	6	;volatile
  1314  0586  0008               	return
  1315  0587                     __end_of_sendDataToAltera:	
  1316                           
  1317                           	psect	text2
  1318  062F                     __ptext2:	
  1319 ;; *************** function _myDelay *****************
  1320 ;; Defined at:
  1321 ;;		line 298 in file "main.c"
  1322 ;; Parameters:    Size  Location     Type
  1323 ;;		None
  1324 ;; Auto vars:     Size  Location     Type
  1325 ;;		None
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  1    wreg      void 
  1328 ;; Registers used:
  1329 ;;		None
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1335 ;;      Params:         0       0       0       0
  1336 ;;      Locals:         0       0       0       0
  1337 ;;      Temps:          0       0       0       0
  1338 ;;      Totals:         0       0       0       0
  1339 ;;Total ram usage:        0 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; Hardware stack levels required when called:    1
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_sendDataToAltera
  1346 ;; This function uses a non-reentrant model
  1347 ;;
  1348                           
  1349                           
  1350                           ;psect for function _myDelay
  1351  062F                     _myDelay:	
  1352                           
  1353                           ;incstack = 0
  1354                           ; Regs used in _myDelay: []
  1355  062F  0008               	return
  1356  0630                     __end_of_myDelay:	
  1357                           
  1358                           	psect	text3
  1359  040A                     __ptext3:	
  1360 ;; *************** function _deviceDataUpdate *****************
  1361 ;; Defined at:
  1362 ;;		line 415 in file "main.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  device          1    wreg     PTR struct PS2DeviceData
  1365 ;;		 -> devices(32), 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  device          1   28[BANK0 ] PTR struct PS2DeviceData
  1368 ;;		 -> devices(32), 
  1369 ;;  i               1   26[BANK0 ] char 
  1370 ;;  code            1   27[BANK0 ] unsigned char 
  1371 ;; Return value:  Size  Location     Type
  1372 ;;                  1    wreg      void 
  1373 ;; Registers used:
  1374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1375 ;; Tracked objects:
  1376 ;;		On entry : 0/0
  1377 ;;		On exit  : 0/0
  1378 ;;		Unchanged: 0/0
  1379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1380 ;;      Params:         0       0       0       0
  1381 ;;      Locals:         0       5       0       0
  1382 ;;      Temps:          0       2       0       0
  1383 ;;      Totals:         0       7       0       0
  1384 ;;Total ram usage:        7 bytes
  1385 ;; Hardware stack levels used:    1
  1386 ;; Hardware stack levels required when called:    4
  1387 ;; This function calls:
  1388 ;;		_deviceDataRead
  1389 ;;		_processKeyCode
  1390 ;; This function is called by:
  1391 ;;		_main
  1392 ;; This function uses a non-reentrant model
  1393 ;;
  1394                           
  1395                           
  1396                           ;psect for function _deviceDataUpdate
  1397  040A                     _deviceDataUpdate:	
  1398                           
  1399                           ;incstack = 0
  1400                           ; Regs used in _deviceDataUpdate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1401                           ;deviceDataUpdate@device stored from wreg
  1402  040A  1283               	bcf	3,5	;RP0=0, select bank0
  1403  040B  1303               	bcf	3,6	;RP1=0, select bank0
  1404  040C  00BC               	movwf	deviceDataUpdate@device
  1405                           
  1406                           ;main.c: 415: void deviceDataUpdate(struct PS2DeviceData* device);main.c: 416: {;main.c:
      +                           420:     uint8_t code;;main.c: 452:              if ( device->deviceMode == 3 ) {
  1407  040D  083C               	movf	deviceDataUpdate@device,w
  1408  040E  0084               	movwf	4
  1409  040F  3003               	movlw	3
  1410  0410  1383               	bcf	3,7	;select IRP bank0
  1411  0411  0600               	xorwf	0,w
  1412  0412  1D03               	btfss	3,2
  1413  0413  0008               	return
  1414                           
  1415                           ;main.c: 454:         if ( device->readDataPos != device->inDataPos ) {
  1416  0414  083C               	movf	deviceDataUpdate@device,w
  1417  0415  3E04               	addlw	4
  1418  0416  0084               	movwf	4
  1419  0417  0800               	movf	0,w
  1420  0418  00B6               	movwf	??_deviceDataUpdate
  1421  0419  083C               	movf	deviceDataUpdate@device,w
  1422  041A  3E05               	addlw	5
  1423  041B  0084               	movwf	4
  1424  041C  0800               	movf	0,w
  1425  041D  0636               	xorwf	??_deviceDataUpdate,w
  1426  041E  1903               	skipnz
  1427  041F  0008               	return
  1428                           
  1429                           ;main.c: 456:             code = deviceDataRead(device);
  1430  0420  083C               	movf	deviceDataUpdate@device,w
  1431  0421  25FD               	fcall	_deviceDataRead
  1432  0422  1283               	bcf	3,5	;RP0=0, select bank0
  1433  0423  1303               	bcf	3,6	;RP1=0, select bank0
  1434  0424  00B6               	movwf	??_deviceDataUpdate
  1435  0425  0836               	movf	??_deviceDataUpdate,w
  1436  0426  00BB               	movwf	deviceDataUpdate@code
  1437                           
  1438                           ;main.c: 458:             if ( device->ps2NeedEncode ) {
  1439  0427  083C               	movf	deviceDataUpdate@device,w
  1440  0428  3E03               	addlw	3
  1441  0429  0084               	movwf	4
  1442  042A  1383               	bcf	3,7	;select IRP bank0
  1443  042B  0800               	movf	0,w
  1444  042C  1903               	btfsc	3,2
  1445  042D  2C46               	goto	l2028
  1446                           
  1447                           ;main.c: 459:                 for (int8_t i=0; i < 27; i+=2) {
  1448  042E  01BA               	clrf	deviceDataUpdate@i
  1449  042F                     L4:	
  1450  042F  083A               	movf	deviceDataUpdate@i,w
  1451  0430  3A80               	xorlw	128
  1452  0431  3E65               	addlw	-155
  1453  0432  1803               	btfsc	3,0
  1454  0433  2C59               	goto	l2034
  1455                           
  1456                           ;main.c: 460:                     if ( code == replaceTwoBytesCodes[i] ) {
  1457  0434  083A               	movf	deviceDataUpdate@i,w
  1458  0435  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1459  0436  0084               	movwf	4
  1460  0437  2100               	fcall	stringdir
  1461  0438  063B               	xorwf	deviceDataUpdate@code,w
  1462  0439  1D03               	skipz
  1463  043A  2C41               	goto	l2024
  1464                           
  1465                           ;main.c: 461:                         code = replaceTwoBytesCodes[i+1];
  1466  043B  083A               	movf	deviceDataUpdate@i,w
  1467  043C  3E01               	addlw	1
  1468  043D  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1469  043E  0084               	movwf	4
  1470  043F  2100               	fcall	stringdir
  1471  0440  2C56               	goto	L2
  1472  0441                     l2024:	
  1473                           ;main.c: 463:                     }
  1474                           
  1475                           ;main.c: 462:                         break;
  1476                           
  1477                           
  1478                           ;main.c: 464:                 }
  1479  0441  3002               	movlw	2
  1480  0442  00B6               	movwf	??_deviceDataUpdate
  1481  0443  0836               	movf	??_deviceDataUpdate,w
  1482  0444  07BA               	addwf	deviceDataUpdate@i,f
  1483  0445  2C2F               	goto	L4
  1484  0446                     l2028:	
  1485                           ;main.c: 465:             } else {
  1486                           
  1487                           
  1488                           ;main.c: 466:                 code = ( code == 131 ) ? 63 : code;
  1489  0446  3083               	movlw	131
  1490  0447  063B               	xorwf	deviceDataUpdate@code,w
  1491  0448  1903               	btfsc	3,2
  1492  0449  2C51               	goto	l2032
  1493  044A  083B               	movf	deviceDataUpdate@code,w
  1494  044B  00B6               	movwf	??_deviceDataUpdate
  1495  044C  01B7               	clrf	??_deviceDataUpdate+1
  1496  044D  0836               	movf	??_deviceDataUpdate,w
  1497  044E  00B8               	movwf	_deviceDataUpdate$197
  1498  044F  0837               	movf	??_deviceDataUpdate+1,w
  1499  0450  2C54               	goto	L3
  1500  0451                     l2032:	
  1501  0451  303F               	movlw	63
  1502  0452  00B8               	movwf	_deviceDataUpdate$197
  1503  0453  3000               	movlw	0
  1504  0454                     L3:	
  1505  0454  00B9               	movwf	_deviceDataUpdate$197+1
  1506  0455  0838               	movf	_deviceDataUpdate$197,w
  1507  0456                     L2:	
  1508  0456  00B6               	movwf	??_deviceDataUpdate
  1509  0457  0836               	movf	??_deviceDataUpdate,w
  1510  0458  00BB               	movwf	deviceDataUpdate@code
  1511  0459                     l2034:	
  1512                           ;main.c: 467:             }
  1513                           
  1514                           
  1515                           ;main.c: 468:             if ( code == 0xF0 ) {
  1516  0459  30F0               	movlw	240
  1517  045A  063B               	xorwf	deviceDataUpdate@code,w
  1518  045B  1D03               	btfss	3,2
  1519  045C  2C63               	goto	l2038
  1520                           
  1521                           ;main.c: 469:                 device->ps2Down = 0;
  1522  045D  083C               	movf	deviceDataUpdate@device,w
  1523  045E  3E02               	addlw	2
  1524  045F  0084               	movwf	4
  1525  0460  1383               	bcf	3,7	;select IRP bank0
  1526  0461  0180               	clrf	0
  1527                           
  1528                           ;main.c: 470:             } else if ( code == 0xE0 ) {
  1529  0462  0008               	return
  1530  0463                     l2038:	
  1531  0463  30E0               	movlw	224
  1532  0464  063B               	xorwf	deviceDataUpdate@code,w
  1533  0465  1D03               	btfss	3,2
  1534  0466  2C6E               	goto	l2042
  1535                           
  1536                           ;main.c: 471:                 device->ps2NeedEncode = 1;
  1537  0467  083C               	movf	deviceDataUpdate@device,w
  1538  0468  3E03               	addlw	3
  1539  0469  0084               	movwf	4
  1540  046A  1383               	bcf	3,7	;select IRP bank0
  1541  046B  0180               	clrf	0
  1542  046C  0A80               	incf	0,f
  1543                           
  1544                           ;main.c: 472:             } else {
  1545  046D  0008               	return
  1546  046E                     l2042:	
  1547                           
  1548                           ;main.c: 473:                 processKeyCode(code, device->ps2Down);
  1549  046E  083C               	movf	deviceDataUpdate@device,w
  1550  046F  3E02               	addlw	2
  1551  0470  0084               	movwf	4
  1552  0471  1383               	bcf	3,7	;select IRP bank0
  1553  0472  0800               	movf	0,w
  1554  0473  00B6               	movwf	??_deviceDataUpdate
  1555  0474  0836               	movf	??_deviceDataUpdate,w
  1556  0475  00AD               	movwf	processKeyCode@keyDown
  1557  0476  083B               	movf	deviceDataUpdate@code,w
  1558  0477  21E0               	fcall	_processKeyCode
  1559                           
  1560                           ;main.c: 474:                 needSave = 1;
  1561  0478  1283               	bcf	3,5	;RP0=0, select bank0
  1562  0479  1303               	bcf	3,6	;RP1=0, select bank0
  1563  047A  01D0               	clrf	_needSave
  1564  047B  0AD0               	incf	_needSave,f
  1565                           
  1566                           ;main.c: 475:                 device->ps2Down = 1;
  1567  047C  083C               	movf	deviceDataUpdate@device,w
  1568  047D  3E02               	addlw	2
  1569  047E  0084               	movwf	4
  1570  047F  1383               	bcf	3,7	;select IRP bank0
  1571  0480  0180               	clrf	0
  1572  0481  0A80               	incf	0,f
  1573                           
  1574                           ;main.c: 476:                 device->ps2NeedEncode = 0;
  1575  0482  083C               	movf	deviceDataUpdate@device,w
  1576  0483  3E03               	addlw	3
  1577  0484  0084               	movwf	4
  1578  0485  0180               	clrf	0
  1579                           
  1580                           ;main.c: 479:         }
  1581                           
  1582                           ;main.c: 477:             }
  1583  0486  0008               	return
  1584  0487                     __end_of_deviceDataUpdate:	
  1585                           ;main.c: 480:     }
  1586                           
  1587                           
  1588                           	psect	text4
  1589  01E0                     __ptext4:	
  1590 ;; *************** function _processKeyCode *****************
  1591 ;; Defined at:
  1592 ;;		line 324 in file "main.c"
  1593 ;; Parameters:    Size  Location     Type
  1594 ;;  keyCode         1    wreg     unsigned char 
  1595 ;;  keyDown         1   13[BANK0 ] unsigned char 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;  keyCode         1   21[BANK0 ] unsigned char 
  1598 ;;  i               1   19[BANK0 ] char 
  1599 ;;  i               1   20[BANK0 ] char 
  1600 ;; Return value:  Size  Location     Type
  1601 ;;                  1    wreg      void 
  1602 ;; Registers used:
  1603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1604 ;; Tracked objects:
  1605 ;;		On entry : 0/0
  1606 ;;		On exit  : 0/0
  1607 ;;		Unchanged: 0/0
  1608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1609 ;;      Params:         0       1       0       0
  1610 ;;      Locals:         0       3       0       0
  1611 ;;      Temps:          0       5       0       0
  1612 ;;      Totals:         0       9       0       0
  1613 ;;Total ram usage:        9 bytes
  1614 ;; Hardware stack levels used:    1
  1615 ;; Hardware stack levels required when called:    3
  1616 ;; This function calls:
  1617 ;;		_calculateBitsFromTable
  1618 ;;		_updateKey
  1619 ;; This function is called by:
  1620 ;;		_deviceDataUpdate
  1621 ;; This function uses a non-reentrant model
  1622 ;;
  1623                           
  1624                           
  1625                           ;psect for function _processKeyCode
  1626  01E0                     _processKeyCode:	
  1627                           
  1628                           ;incstack = 0
  1629                           ; Regs used in _processKeyCode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1630                           ;processKeyCode@keyCode stored from wreg
  1631  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1632  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  1633  01E2  00B5               	movwf	processKeyCode@keyCode
  1634                           
  1635                           ;main.c: 324: void processKeyCode(uint8_t keyCode, uint8_t keyDown);main.c: 325: {;main.
      +                          c: 326:     if ( keyCode > 127 ) return;
  1636  01E3  3080               	movlw	128
  1637  01E4  0235               	subwf	processKeyCode@keyCode,w
  1638  01E5  1803               	btfsc	3,0
  1639  01E6  0008               	return
  1640                           
  1641                           ;main.c: 330:     calculateBitsFromTable(&keyCode, &keyDown, &shift_ctrl_alt, importantK
      +                          eys, 6, 0);
  1642  01E7  302D               	movlw	(low (processKeyCode@keyDown| 0))& (0+255)
  1643  01E8  00AE               	movwf	??_processKeyCode
  1644  01E9  082E               	movf	??_processKeyCode,w
  1645  01EA  00A0               	movwf	calculateBitsFromTable@keyDown
  1646  01EB  3075               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
  1647  01EC  00AF               	movwf	??_processKeyCode+1
  1648  01ED  082F               	movf	??_processKeyCode+1,w
  1649  01EE  00A1               	movwf	calculateBitsFromTable@bits
  1650  01EF  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
  1651  01F0  00B0               	movwf	??_processKeyCode+2
  1652  01F1  0830               	movf	??_processKeyCode+2,w
  1653  01F2  00A2               	movwf	calculateBitsFromTable@table
  1654  01F3  3006               	movlw	6
  1655  01F4  00B1               	movwf	??_processKeyCode+3
  1656  01F5  0831               	movf	??_processKeyCode+3,w
  1657  01F6  00A3               	movwf	calculateBitsFromTable@count
  1658  01F7  01A4               	clrf	calculateBitsFromTable@clearIfFound
  1659  01F8  3035               	movlw	(low (processKeyCode@keyCode| 0))& (0+255)
  1660  01F9  2587               	fcall	_calculateBitsFromTable
  1661                           
  1662                           ;main.c: 332:     calculateBitsFromTable(&keyCode, &keyDown, &kempstonMouseEmulatorKeys,
      +                           kempstonMouseKeys, 6, numLock);
  1663  01FA  302D               	movlw	(low (processKeyCode@keyDown| 0))& (0+255)
  1664  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1665  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  1666  01FD  00AE               	movwf	??_processKeyCode
  1667  01FE  082E               	movf	??_processKeyCode,w
  1668  01FF  00A0               	movwf	calculateBitsFromTable@keyDown
  1669  0200  3052               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
  1670  0201  00AF               	movwf	??_processKeyCode+1
  1671  0202  082F               	movf	??_processKeyCode+1,w
  1672  0203  00A1               	movwf	calculateBitsFromTable@bits
  1673  0204  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
  1674  0205  00B0               	movwf	??_processKeyCode+2
  1675  0206  0830               	movf	??_processKeyCode+2,w
  1676  0207  00A2               	movwf	calculateBitsFromTable@table
  1677  0208  3006               	movlw	6
  1678  0209  00B1               	movwf	??_processKeyCode+3
  1679  020A  0831               	movf	??_processKeyCode+3,w
  1680  020B  00A3               	movwf	calculateBitsFromTable@count
  1681  020C  084F               	movf	_numLock,w
  1682  020D  00B2               	movwf	??_processKeyCode+4
  1683  020E  0832               	movf	??_processKeyCode+4,w
  1684  020F  00A4               	movwf	calculateBitsFromTable@clearIfFound
  1685  0210  3035               	movlw	(low (processKeyCode@keyCode| 0))& (0+255)
  1686  0211  2587               	fcall	_calculateBitsFromTable
  1687                           
  1688                           ;main.c: 338:     if ( keyCode == 119 && keyDown ) {
  1689  0212  3077               	movlw	119
  1690  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1691  0214  1303               	bcf	3,6	;RP1=0, select bank0
  1692  0215  0635               	xorwf	processKeyCode@keyCode,w
  1693  0216  1D03               	btfss	3,2
  1694  0217  2A24               	goto	l1884
  1695  0218  082D               	movf	processKeyCode@keyDown,w
  1696  0219  1903               	btfsc	3,2
  1697  021A  2A24               	goto	l1884
  1698                           
  1699                           ;main.c: 339:         numLock = !numLock;
  1700  021B  084F               	movf	_numLock,w
  1701  021C  1D03               	btfss	3,2
  1702  021D  2A20               	goto	u2000
  1703  021E  3001               	movlw	1
  1704  021F  2A21               	goto	u2010
  1705  0220                     u2000:	
  1706  0220  3000               	movlw	0
  1707  0221                     u2010:	
  1708  0221  00AE               	movwf	??_processKeyCode
  1709  0222  082E               	movf	??_processKeyCode,w
  1710  0223  00CF               	movwf	_numLock
  1711  0224                     l1884:	
  1712                           ;main.c: 340:     }
  1713                           
  1714                           
  1715                           ;main.c: 343:     if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 0 && keyCode
      +                           == 31 && keyDown ) {
  1716  0224  0875               	movf	_shift_ctrl_alt,w
  1717  0225  390C               	andlw	12
  1718  0226  1903               	btfsc	3,2
  1719  0227  2A38               	goto	l226
  1720  0228  0875               	movf	_shift_ctrl_alt,w
  1721  0229  3930               	andlw	48
  1722  022A  1903               	btfsc	3,2
  1723  022B  2A38               	goto	l226
  1724  022C  301F               	movlw	31
  1725  022D  0635               	xorwf	processKeyCode@keyCode,w
  1726  022E  1D03               	btfss	3,2
  1727  022F  2A38               	goto	l226
  1728  0230  082D               	movf	processKeyCode@keyDown,w
  1729  0231  1903               	btfsc	3,2
  1730  0232  2A38               	goto	l226
  1731                           
  1732                           ;main.c: 344:         outPorts[8] &= 253;
  1733  0233  30FD               	movlw	253
  1734  0234  00AE               	movwf	??_processKeyCode
  1735  0235  082E               	movf	??_processKeyCode,w
  1736  0236  05C7               	andwf	_outPorts+8,f
  1737                           
  1738                           ;main.c: 345:     } else {
  1739  0237  2A39               	goto	l1894
  1740  0238                     l226:	
  1741                           
  1742                           ;main.c: 346:         outPorts[8] |= 2;
  1743  0238  14C7               	bsf	_outPorts+8,1
  1744  0239                     l1894:	
  1745                           ;main.c: 347:     }
  1746                           
  1747                           
  1748                           ;main.c: 350:     if ( (shift_ctrl_alt & 12) > 0 && keyCode == 126 && keyDown ) {
  1749  0239  0875               	movf	_shift_ctrl_alt,w
  1750  023A  390C               	andlw	12
  1751  023B  1903               	btfsc	3,2
  1752  023C  2A49               	goto	l228
  1753  023D  307E               	movlw	126
  1754  023E  0635               	xorwf	processKeyCode@keyCode,w
  1755  023F  1D03               	btfss	3,2
  1756  0240  2A49               	goto	l228
  1757  0241  082D               	movf	processKeyCode@keyDown,w
  1758  0242  1903               	btfsc	3,2
  1759  0243  2A49               	goto	l228
  1760                           
  1761                           ;main.c: 351:         outPorts[8] &= 251;
  1762  0244  30FB               	movlw	251
  1763  0245  00AE               	movwf	??_processKeyCode
  1764  0246  082E               	movf	??_processKeyCode,w
  1765  0247  05C7               	andwf	_outPorts+8,f
  1766                           
  1767                           ;main.c: 352:     } else {
  1768  0248  2A4A               	goto	l1902
  1769  0249                     l228:	
  1770                           
  1771                           ;main.c: 353:         outPorts[8] |= 4;
  1772  0249  1547               	bsf	_outPorts+8,2
  1773  024A                     l1902:	
  1774                           ;main.c: 354:     }
  1775                           
  1776                           
  1777                           ;main.c: 360:     for(int8_t i = 0; i < 41 ;i+=2) {
  1778  024A  01B4               	clrf	processKeyCode@i
  1779  024B  0834               	movf	processKeyCode@i,w
  1780  024C  3A80               	xorlw	128
  1781  024D  3E57               	addlw	-169
  1782  024E  1803               	btfsc	3,0
  1783  024F  2A82               	goto	l1932
  1784  0250                     l1908:	
  1785                           
  1786                           ;main.c: 361:         if ( keyCode == replaceOnShiftKeyDown[i] ) {
  1787  0250  0834               	movf	processKeyCode@i,w
  1788  0251  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1789  0252  0084               	movwf	4
  1790  0253  2100               	fcall	stringdir
  1791  0254  0635               	xorwf	processKeyCode@keyCode,w
  1792  0255  1D03               	skipz
  1793  0256  2A79               	goto	l1928
  1794                           
  1795                           ;main.c: 362:             if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0) || replaced
      +                           == keyCode) {
  1796  0257  0875               	movf	_shift_ctrl_alt,w
  1797  0258  3903               	andlw	3
  1798  0259  1903               	btfsc	3,2
  1799  025A  2A5E               	goto	l1914
  1800  025B  0870               	movf	_replaced,w
  1801  025C  1903               	btfsc	3,2
  1802  025D  2A62               	goto	l1916
  1803  025E                     l1914:	
  1804  025E  0870               	movf	_replaced,w
  1805  025F  0635               	xorwf	processKeyCode@keyCode,w
  1806  0260  1D03               	skipz
  1807  0261  2A74               	goto	l1924
  1808  0262                     l1916:	
  1809                           
  1810                           ;main.c: 363:                 if ( keyDown ) replaced = keyCode;
  1811  0262  082D               	movf	processKeyCode@keyDown,w
  1812  0263  1903               	btfsc	3,2
  1813  0264  2A6A               	goto	l1920
  1814  0265  0835               	movf	processKeyCode@keyCode,w
  1815  0266  00AE               	movwf	??_processKeyCode
  1816  0267  082E               	movf	??_processKeyCode,w
  1817  0268  00F0               	movwf	_replaced
  1818  0269  2A6B               	goto	l1922
  1819  026A                     l1920:	
  1820                           ;main.c: 364:                 else replaced = 0;
  1821                           
  1822  026A  01F0               	clrf	_replaced
  1823  026B                     l1922:	
  1824                           
  1825                           ;main.c: 365:                 keyCode = replaceOnShiftKeyDown[i+1];
  1826  026B  0834               	movf	processKeyCode@i,w
  1827  026C  3E01               	addlw	1
  1828  026D  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1829  026E  0084               	movwf	4
  1830  026F  2100               	fcall	stringdir
  1831  0270  00AE               	movwf	??_processKeyCode
  1832  0271  082E               	movf	??_processKeyCode,w
  1833  0272  00B5               	movwf	processKeyCode@keyCode
  1834                           
  1835                           ;main.c: 366:             } else {
  1836  0273  2A82               	goto	l1932
  1837  0274                     l1924:	
  1838                           
  1839                           ;main.c: 367:                 if ( replaced != 0 ) keyCode = 0;
  1840  0274  0870               	movf	_replaced,w
  1841  0275  1903               	btfsc	3,2
  1842  0276  2A82               	goto	l1932
  1843  0277  01B5               	clrf	processKeyCode@keyCode
  1844                           
  1845                           ;main.c: 369:             break;
  1846                           
  1847                           ;main.c: 368:             }
  1848  0278  2A82               	goto	l1932
  1849  0279                     l1928:	
  1850                           ;main.c: 370:         }
  1851                           
  1852                           
  1853                           ;main.c: 371:     }
  1854  0279  3002               	movlw	2
  1855  027A  00AE               	movwf	??_processKeyCode
  1856  027B  082E               	movf	??_processKeyCode,w
  1857  027C  07B4               	addwf	processKeyCode@i,f
  1858  027D  0834               	movf	processKeyCode@i,w
  1859  027E  3A80               	xorlw	128
  1860  027F  3E57               	addlw	-169
  1861  0280  1C03               	skipc
  1862  0281  2A50               	goto	l1908
  1863  0282                     l1932:	
  1864                           
  1865                           ;main.c: 375:     for(int8_t i = 0; i < 8; i++) {
  1866  0282  01B3               	clrf	processKeyCode@i_161
  1867  0283  0833               	movf	processKeyCode@i_161,w
  1868  0284  3A80               	xorlw	128
  1869  0285  3E78               	addlw	-136
  1870  0286  1803               	btfsc	3,0
  1871  0287  2AAE               	goto	l1952
  1872  0288                     l1938:	
  1873                           
  1874                           ;main.c: 376:         if ( keyCode == replaceOnDelayKeyDown[i] && keyDown ) {
  1875  0288  0833               	movf	processKeyCode@i_161,w
  1876  0289  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
  1877  028A  0084               	movwf	4
  1878  028B  2100               	fcall	stringdir
  1879  028C  0635               	xorwf	processKeyCode@keyCode,w
  1880  028D  1D03               	skipz
  1881  028E  2AA5               	goto	l1948
  1882  028F  082D               	movf	processKeyCode@keyDown,w
  1883  0290  1903               	btfsc	3,2
  1884  0291  2AA5               	goto	l1948
  1885                           
  1886                           ;main.c: 377:             if ( delay == 0 ) {
  1887  0292  084C               	movf	_delay,w
  1888  0293  044D               	iorwf	_delay+1,w
  1889  0294  1D03               	btfss	3,2
  1890  0295  2AA3               	goto	l1946
  1891                           
  1892                           ;main.c: 378:                 delayedKey = keyCode;
  1893  0296  0835               	movf	processKeyCode@keyCode,w
  1894  0297  00AE               	movwf	??_processKeyCode
  1895  0298  082E               	movf	??_processKeyCode,w
  1896  0299  00CE               	movwf	_delayedKey
  1897                           
  1898                           ;main.c: 379:                 delay = 2600;
  1899  029A  3028               	movlw	40
  1900  029B  00CC               	movwf	_delay
  1901  029C  300A               	movlw	10
  1902  029D  00CD               	movwf	_delay+1
  1903                           
  1904                           ;main.c: 380:                 keyCode = 111;
  1905  029E  306F               	movlw	111
  1906  029F  00AE               	movwf	??_processKeyCode
  1907  02A0  082E               	movf	??_processKeyCode,w
  1908  02A1  00B5               	movwf	processKeyCode@keyCode
  1909                           
  1910                           ;main.c: 381:             } else {
  1911  02A2  2AAE               	goto	l1952
  1912  02A3                     l1946:	
  1913                           
  1914                           ;main.c: 382:                 keyCode = 0;
  1915  02A3  01B5               	clrf	processKeyCode@keyCode
  1916                           
  1917                           ;main.c: 384:             break;
  1918                           
  1919                           ;main.c: 383:             }
  1920  02A4  2AAE               	goto	l1952
  1921  02A5                     l1948:	
  1922                           ;main.c: 385:         }
  1923                           
  1924                           
  1925                           ;main.c: 386:     }
  1926  02A5  3001               	movlw	1
  1927  02A6  00AE               	movwf	??_processKeyCode
  1928  02A7  082E               	movf	??_processKeyCode,w
  1929  02A8  07B3               	addwf	processKeyCode@i_161,f
  1930  02A9  0833               	movf	processKeyCode@i_161,w
  1931  02AA  3A80               	xorlw	128
  1932  02AB  3E78               	addlw	-136
  1933  02AC  1C03               	skipc
  1934  02AD  2A88               	goto	l1938
  1935  02AE                     l1952:	
  1936                           
  1937                           ;main.c: 390:     updateKey(keyCode, keyDown );
  1938  02AE  082D               	movf	processKeyCode@keyDown,w
  1939  02AF  00AE               	movwf	??_processKeyCode
  1940  02B0  082E               	movf	??_processKeyCode,w
  1941  02B1  00A6               	movwf	updateKey@down
  1942  02B2  0835               	movf	processKeyCode@keyCode,w
  1943  02B3  24EA               	fcall	_updateKey
  1944  02B4  0008               	return
  1945  02B5                     __end_of_processKeyCode:	
  1946                           
  1947                           	psect	text5
  1948  04EA                     __ptext5:	
  1949 ;; *************** function _updateKey *****************
  1950 ;; Defined at:
  1951 ;;		line 280 in file "main.c"
  1952 ;; Parameters:    Size  Location     Type
  1953 ;;  key             1    wreg     unsigned char 
  1954 ;;  down            1    6[BANK0 ] unsigned char 
  1955 ;; Auto vars:     Size  Location     Type
  1956 ;;  key             1    8[BANK0 ] unsigned char 
  1957 ;;  code            1   12[BANK0 ] unsigned char 
  1958 ;;  localCtrl       1   11[BANK0 ] unsigned char 
  1959 ;;  localShift      1    9[BANK0 ] unsigned char 
  1960 ;; Return value:  Size  Location     Type
  1961 ;;                  1    wreg      void 
  1962 ;; Registers used:
  1963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1969 ;;      Params:         0       1       0       0
  1970 ;;      Locals:         0       5       0       0
  1971 ;;      Temps:          0       1       0       0
  1972 ;;      Totals:         0       7       0       0
  1973 ;;Total ram usage:        7 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    2
  1976 ;; This function calls:
  1977 ;;		_updatePort
  1978 ;; This function is called by:
  1979 ;;		_processKeyCode
  1980 ;; This function uses a non-reentrant model
  1981 ;;
  1982                           
  1983                           
  1984                           ;psect for function _updateKey
  1985  04EA                     _updateKey:	
  1986                           
  1987                           ;incstack = 0
  1988                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1989                           ;updateKey@key stored from wreg
  1990  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1991  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1992  04EC  00A8               	movwf	updateKey@key
  1993                           
  1994                           ;main.c: 280: void updateKey(uint8_t key, uint8_t down);main.c: 281: {;main.c: 282:     
      +                          uint8_t code = 0xFF;
  1995  04ED  30FF               	movlw	255
  1996  04EE  00A7               	movwf	??_updateKey
  1997  04EF  0827               	movf	??_updateKey,w
  1998  04F0  00AC               	movwf	updateKey@code
  1999                           
  2000                           ;main.c: 283:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  2001  04F1  01AA               	clrf	_updateKey$148
  2002  04F2  0875               	movf	_shift_ctrl_alt,w
  2003  04F3  3903               	andlw	3
  2004  04F4  1903               	btfsc	3,2
  2005  04F5  2CFB               	goto	l1854
  2006  04F6  0870               	movf	_replaced,w
  2007  04F7  1D03               	btfss	3,2
  2008  04F8  2CFB               	goto	l1854
  2009  04F9  01AA               	clrf	_updateKey$148
  2010  04FA  0AAA               	incf	_updateKey$148,f
  2011  04FB                     l1854:	
  2012  04FB  082A               	movf	_updateKey$148,w
  2013  04FC  00A7               	movwf	??_updateKey
  2014  04FD  0827               	movf	??_updateKey,w
  2015  04FE  00A9               	movwf	updateKey@localShift
  2016                           
  2017                           ;main.c: 284:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  2018  04FF  0875               	movf	_shift_ctrl_alt,w
  2019  0500  390C               	andlw	12
  2020  0501  1903               	btfsc	3,2
  2021  0502  2D05               	goto	u1890
  2022  0503  3001               	movlw	1
  2023  0504  2D06               	goto	u1900
  2024  0505                     u1890:	
  2025  0505  3000               	movlw	0
  2026  0506                     u1900:	
  2027  0506  00A7               	movwf	??_updateKey
  2028  0507  0827               	movf	??_updateKey,w
  2029  0508  00AB               	movwf	updateKey@localCtrl
  2030                           
  2031                           ;main.c: 285:     code = codeToMatrix[key];
  2032  0509  0828               	movf	updateKey@key,w
  2033  050A  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  2034  050B  0084               	movwf	4
  2035  050C  2100               	fcall	stringdir
  2036  050D  00A7               	movwf	??_updateKey
  2037  050E  0827               	movf	??_updateKey,w
  2038  050F  00AC               	movwf	updateKey@code
  2039                           
  2040                           ;main.c: 286:     if ( code != 0xFF ) {
  2041  0510  0A2C               	incf	updateKey@code,w
  2042  0511  1903               	btfsc	3,2
  2043  0512  2D2B               	goto	l1868
  2044                           
  2045                           ;main.c: 287:         updatePort(code, down);
  2046  0513  0826               	movf	updateKey@down,w
  2047  0514  00A7               	movwf	??_updateKey
  2048  0515  0827               	movf	??_updateKey,w
  2049  0516  00A0               	movwf	updatePort@set
  2050  0517  082C               	movf	updateKey@code,w
  2051  0518  25CC               	fcall	_updatePort
  2052                           
  2053                           ;main.c: 288:         localShift |= ((code & 64) > 0);
  2054  0519  1283               	bcf	3,5	;RP0=0, select bank0
  2055  051A  1303               	bcf	3,6	;RP1=0, select bank0
  2056  051B  1F2C               	btfss	updateKey@code,6
  2057  051C  2D1F               	goto	u1920
  2058  051D  3001               	movlw	1
  2059  051E  2D20               	goto	u1930
  2060  051F                     u1920:	
  2061  051F  3000               	movlw	0
  2062  0520                     u1930:	
  2063  0520  00A7               	movwf	??_updateKey
  2064  0521  0827               	movf	??_updateKey,w
  2065  0522  04A9               	iorwf	updateKey@localShift,f
  2066                           
  2067                           ;main.c: 289:         localCtrl |= ((code & 128) > 0);
  2068  0523  1FAC               	btfss	updateKey@code,7
  2069  0524  2D27               	goto	u1940
  2070  0525  3001               	movlw	1
  2071  0526  2D28               	goto	u1950
  2072  0527                     u1940:	
  2073  0527  3000               	movlw	0
  2074  0528                     u1950:	
  2075  0528  00A7               	movwf	??_updateKey
  2076  0529  0827               	movf	??_updateKey,w
  2077  052A  04AB               	iorwf	updateKey@localCtrl,f
  2078  052B                     l1868:	
  2079                           ;main.c: 290:     }
  2080                           
  2081                           
  2082                           ;main.c: 291:     if ( down ) {
  2083  052B  0826               	movf	updateKey@down,w
  2084  052C  1903               	btfsc	3,2
  2085  052D  0008               	return
  2086                           
  2087                           ;main.c: 292:         updatePort(0x00, localShift );
  2088  052E  0829               	movf	updateKey@localShift,w
  2089  052F  00A7               	movwf	??_updateKey
  2090  0530  0827               	movf	??_updateKey,w
  2091  0531  00A0               	movwf	updatePort@set
  2092  0532  3000               	movlw	0
  2093  0533  25CC               	fcall	_updatePort
  2094                           
  2095                           ;main.c: 293:         updatePort(0x0F, localCtrl );
  2096  0534  1283               	bcf	3,5	;RP0=0, select bank0
  2097  0535  1303               	bcf	3,6	;RP1=0, select bank0
  2098  0536  082B               	movf	updateKey@localCtrl,w
  2099  0537  00A7               	movwf	??_updateKey
  2100  0538  0827               	movf	??_updateKey,w
  2101  0539  00A0               	movwf	updatePort@set
  2102  053A  300F               	movlw	15
  2103  053B  25CC               	fcall	_updatePort
  2104  053C  0008               	return
  2105  053D                     __end_of_updateKey:	
  2106                           ;main.c: 294:     }
  2107                           
  2108                           
  2109                           	psect	text6
  2110  05CC                     __ptext6:	
  2111 ;; *************** function _updatePort *****************
  2112 ;; Defined at:
  2113 ;;		line 254 in file "main.c"
  2114 ;; Parameters:    Size  Location     Type
  2115 ;;  bit_id          1    wreg     unsigned char 
  2116 ;;  set             1    0[BANK0 ] unsigned char 
  2117 ;; Auto vars:     Size  Location     Type
  2118 ;;  bit_id          1    5[BANK0 ] unsigned char 
  2119 ;;  a               1    4[BANK0 ] unsigned char 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2129 ;;      Params:         0       1       0       0
  2130 ;;      Locals:         0       2       0       0
  2131 ;;      Temps:          0       3       0       0
  2132 ;;      Totals:         0       6       0       0
  2133 ;;Total ram usage:        6 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    1
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_updateKey
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           
  2144                           ;psect for function _updatePort
  2145  05CC                     _updatePort:	
  2146                           
  2147                           ;incstack = 0
  2148                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  2149                           ;updatePort@bit_id stored from wreg
  2150  05CC  1283               	bcf	3,5	;RP0=0, select bank0
  2151  05CD  1303               	bcf	3,6	;RP1=0, select bank0
  2152  05CE  00A5               	movwf	updatePort@bit_id
  2153                           
  2154                           ;main.c: 254: void updatePort(uint8_t bit_id, uint8_t set);main.c: 255: {;main.c: 256:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  2155  05CF  3001               	movlw	1
  2156  05D0  00A1               	movwf	??_updatePort
  2157  05D1  0825               	movf	updatePort@bit_id,w
  2158  05D2  00A2               	movwf	??_updatePort+1
  2159  05D3  3003               	movlw	3
  2160  05D4                     u1785:	
  2161  05D4  1003               	clrc
  2162  05D5  0CA2               	rrf	??_updatePort+1,f
  2163  05D6  3EFF               	addlw	-1
  2164  05D7  1D03               	skipz
  2165  05D8  2DD4               	goto	u1785
  2166  05D9  0822               	movf	??_updatePort+1,w
  2167  05DA  3907               	andlw	7
  2168  05DB  3E01               	addlw	1
  2169  05DC  2DDF               	goto	u1794
  2170  05DD                     u1795:	
  2171  05DD  1003               	clrc
  2172  05DE  0DA1               	rlf	??_updatePort,f
  2173  05DF                     u1794:	
  2174  05DF  3EFF               	addlw	-1
  2175  05E0  1D03               	skipz
  2176  05E1  2DDD               	goto	u1795
  2177  05E2  0821               	movf	??_updatePort,w
  2178  05E3  00A3               	movwf	??_updatePort+2
  2179  05E4  0823               	movf	??_updatePort+2,w
  2180  05E5  00A4               	movwf	updatePort@a
  2181                           
  2182                           ;main.c: 257:     if ( set ) outPorts[bit_id & 7] |= a;
  2183  05E6  0820               	movf	updatePort@set,w
  2184  05E7  1903               	btfsc	3,2
  2185  05E8  2DF3               	goto	l1826
  2186  05E9  0824               	movf	updatePort@a,w
  2187  05EA  00A1               	movwf	??_updatePort
  2188  05EB  0825               	movf	updatePort@bit_id,w
  2189  05EC  3907               	andlw	7
  2190  05ED  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
  2191  05EE  0084               	movwf	4
  2192  05EF  0821               	movf	??_updatePort,w
  2193  05F0  1383               	bcf	3,7	;select IRP bank0
  2194  05F1  0480               	iorwf	0,f
  2195  05F2  0008               	return
  2196  05F3                     l1826:	
  2197                           ;main.c: 258:     else outPorts[bit_id & 7] &= ~a;
  2198                           
  2199  05F3  0924               	comf	updatePort@a,w
  2200  05F4  00A1               	movwf	??_updatePort
  2201  05F5  0825               	movf	updatePort@bit_id,w
  2202  05F6  3907               	andlw	7
  2203  05F7  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
  2204  05F8  0084               	movwf	4
  2205  05F9  0821               	movf	??_updatePort,w
  2206  05FA  1383               	bcf	3,7	;select IRP bank0
  2207  05FB  0580               	andwf	0,f
  2208  05FC  0008               	return
  2209  05FD                     __end_of_updatePort:	
  2210                           
  2211                           	psect	text7
  2212  0587                     __ptext7:	
  2213 ;; *************** function _calculateBitsFromTable *****************
  2214 ;; Defined at:
  2215 ;;		line 262 in file "main.c"
  2216 ;; Parameters:    Size  Location     Type
  2217 ;;  keyCode         1    wreg     PTR unsigned char 
  2218 ;;		 -> processKeyCode@keyCode(1), 
  2219 ;;  keyDown         1    0[BANK0 ] PTR unsigned char 
  2220 ;;		 -> processKeyCode@keyDown(1), 
  2221 ;;  bits            1    1[BANK0 ] PTR unsigned char 
  2222 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  2223 ;;  table           1    2[BANK0 ] PTR unsigned char 
  2224 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  2225 ;;  count           1    3[BANK0 ] unsigned char 
  2226 ;;  clearIfFound    1    4[BANK0 ] unsigned char 
  2227 ;; Auto vars:     Size  Location     Type
  2228 ;;  keyCode         1    7[BANK0 ] PTR unsigned char 
  2229 ;;		 -> processKeyCode@keyCode(1), 
  2230 ;;  i               1    8[BANK0 ] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2240 ;;      Params:         0       5       0       0
  2241 ;;      Locals:         0       2       0       0
  2242 ;;      Temps:          0       2       0       0
  2243 ;;      Totals:         0       9       0       0
  2244 ;;Total ram usage:        9 bytes
  2245 ;; Hardware stack levels used:    2
  2246 ;; Hardware stack levels required when called:    1
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_processKeyCode
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function _calculateBitsFromTable
  2256  0587                     _calculateBitsFromTable:	
  2257                           
  2258                           ;incstack = 0
  2259                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  2260                           ;calculateBitsFromTable@keyCode stored from wreg
  2261  0587  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0588  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0589  00A7               	movwf	calculateBitsFromTable@keyCode
  2264                           
  2265                           ;main.c: 262: void calculateBitsFromTable(uint8_t* keyCode, uint8_t* keyDown, uint8_t* b
      +                          its, uint8_t table[], uint8_t count, uint8_t clearIfFound);main.c: 263: {;main.c: 264:  
      +                             for(uint8_t i = 0; i < count;i++) {
  2266  058A  01A8               	clrf	calculateBitsFromTable@i
  2267  058B                     l1844:	
  2268  058B  0823               	movf	calculateBitsFromTable@count,w
  2269  058C  0228               	subwf	calculateBitsFromTable@i,w
  2270  058D  1803               	btfsc	3,0
  2271  058E  0008               	return
  2272                           
  2273                           ;main.c: 265:         if ( (*keyCode) == table[i] ) {
  2274  058F  0828               	movf	calculateBitsFromTable@i,w
  2275  0590  0722               	addwf	calculateBitsFromTable@table,w
  2276  0591  0084               	movwf	4
  2277  0592  2100               	fcall	stringdir
  2278  0593  00A5               	movwf	??_calculateBitsFromTable
  2279  0594  0827               	movf	calculateBitsFromTable@keyCode,w
  2280  0595  0084               	movwf	4
  2281  0596  1383               	bcf	3,7	;select IRP bank0
  2282  0597  0800               	movf	0,w
  2283  0598  0625               	xorwf	??_calculateBitsFromTable,w
  2284  0599  1D03               	skipz
  2285  059A  2DC7               	goto	l1842
  2286                           
  2287                           ;main.c: 266:             if ( (*keyDown) ) {
  2288  059B  0820               	movf	calculateBitsFromTable@keyDown,w
  2289  059C  0084               	movwf	4
  2290  059D  0800               	movf	0,w
  2291  059E  1903               	btfsc	3,2
  2292  059F  2DB0               	goto	l1836
  2293                           
  2294                           ;main.c: 267:                 (*bits) |= (1 << i);
  2295  05A0  3001               	movlw	1
  2296  05A1  00A5               	movwf	??_calculateBitsFromTable
  2297  05A2  0A28               	incf	calculateBitsFromTable@i,w
  2298  05A3  2DA6               	goto	u1834
  2299  05A4                     u1835:	
  2300  05A4  1003               	clrc
  2301  05A5  0DA5               	rlf	??_calculateBitsFromTable,f
  2302  05A6                     u1834:	
  2303  05A6  3EFF               	addlw	-1
  2304  05A7  1D03               	skipz
  2305  05A8  2DA4               	goto	u1835
  2306  05A9  0825               	movf	??_calculateBitsFromTable,w
  2307  05AA  00A6               	movwf	??_calculateBitsFromTable+1
  2308  05AB  0821               	movf	calculateBitsFromTable@bits,w
  2309  05AC  0084               	movwf	4
  2310  05AD  0826               	movf	??_calculateBitsFromTable+1,w
  2311  05AE  0480               	iorwf	0,f
  2312                           
  2313                           ;main.c: 268:             } else {
  2314  05AF  2DC0               	goto	l1838
  2315  05B0                     l1836:	
  2316                           
  2317                           ;main.c: 269:                 (*bits) &= ~(1 << i);
  2318  05B0  3001               	movlw	1
  2319  05B1  00A5               	movwf	??_calculateBitsFromTable
  2320  05B2  0A28               	incf	calculateBitsFromTable@i,w
  2321  05B3  2DB6               	goto	u1844
  2322  05B4                     u1845:	
  2323  05B4  1003               	clrc
  2324  05B5  0DA5               	rlf	??_calculateBitsFromTable,f
  2325  05B6                     u1844:	
  2326  05B6  3EFF               	addlw	-1
  2327  05B7  1D03               	skipz
  2328  05B8  2DB4               	goto	u1845
  2329  05B9  0825               	movf	??_calculateBitsFromTable,w
  2330  05BA  3AFF               	xorlw	255
  2331  05BB  00A6               	movwf	??_calculateBitsFromTable+1
  2332  05BC  0821               	movf	calculateBitsFromTable@bits,w
  2333  05BD  0084               	movwf	4
  2334  05BE  0826               	movf	??_calculateBitsFromTable+1,w
  2335  05BF  0580               	andwf	0,f
  2336  05C0                     l1838:	
  2337                           ;main.c: 270:             }
  2338                           
  2339                           
  2340                           ;main.c: 271:             if ( clearIfFound ) {
  2341  05C0  0824               	movf	calculateBitsFromTable@clearIfFound,w
  2342  05C1  1903               	btfsc	3,2
  2343  05C2  0008               	return
  2344                           
  2345                           ;main.c: 272:                 (*keyCode) = 0;
  2346  05C3  0827               	movf	calculateBitsFromTable@keyCode,w
  2347  05C4  0084               	movwf	4
  2348  05C5  0180               	clrf	0
  2349                           
  2350                           ;main.c: 274:             break;
  2351                           
  2352                           ;main.c: 273:             }
  2353  05C6  0008               	return
  2354  05C7                     l1842:	
  2355                           ;main.c: 275:         }
  2356                           
  2357                           
  2358                           ;main.c: 276:     }
  2359  05C7  3001               	movlw	1
  2360  05C8  00A5               	movwf	??_calculateBitsFromTable
  2361  05C9  0825               	movf	??_calculateBitsFromTable,w
  2362  05CA  07A8               	addwf	calculateBitsFromTable@i,f
  2363  05CB  2D8B               	goto	l1844
  2364  05CC                     __end_of_calculateBitsFromTable:	
  2365                           
  2366                           	psect	text8
  2367  05FD                     __ptext8:	
  2368 ;; *************** function _deviceDataRead *****************
  2369 ;; Defined at:
  2370 ;;		line 408 in file "main.c"
  2371 ;; Parameters:    Size  Location     Type
  2372 ;;  device          1    wreg     PTR struct PS2DeviceData
  2373 ;;		 -> devices(32), 
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;  device          1    3[BANK0 ] PTR struct PS2DeviceData
  2376 ;;		 -> devices(32), 
  2377 ;;  code            1    2[BANK0 ] unsigned char 
  2378 ;; Return value:  Size  Location     Type
  2379 ;;                  1    wreg      unsigned char 
  2380 ;; Registers used:
  2381 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2382 ;; Tracked objects:
  2383 ;;		On entry : 0/0
  2384 ;;		On exit  : 0/0
  2385 ;;		Unchanged: 0/0
  2386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2387 ;;      Params:         0       0       0       0
  2388 ;;      Locals:         0       2       0       0
  2389 ;;      Temps:          0       2       0       0
  2390 ;;      Totals:         0       4       0       0
  2391 ;;Total ram usage:        4 bytes
  2392 ;; Hardware stack levels used:    1
  2393 ;; Hardware stack levels required when called:    1
  2394 ;; This function calls:
  2395 ;;		Nothing
  2396 ;; This function is called by:
  2397 ;;		_deviceDataUpdate
  2398 ;; This function uses a non-reentrant model
  2399 ;;
  2400                           
  2401                           
  2402                           ;psect for function _deviceDataRead
  2403  05FD                     _deviceDataRead:	
  2404                           
  2405                           ;incstack = 0
  2406                           ; Regs used in _deviceDataRead: [wreg-fsr0h+status,2+status,0]
  2407                           ;deviceDataRead@device stored from wreg
  2408  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  2409  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  2410  05FF  00A3               	movwf	deviceDataRead@device
  2411                           
  2412                           ;main.c: 408: uint8_t deviceDataRead(struct PS2DeviceData* device);main.c: 409: {;main.c
      +                          : 410:     uint8_t code = device->inData[device->readDataPos];
  2413  0600  0823               	movf	deviceDataRead@device,w
  2414  0601  3E05               	addlw	5
  2415  0602  0084               	movwf	4
  2416  0603  1383               	bcf	3,7	;select IRP bank0
  2417  0604  0800               	movf	0,w
  2418  0605  3E06               	addlw	6
  2419  0606  0723               	addwf	deviceDataRead@device,w
  2420  0607  00A0               	movwf	??_deviceDataRead
  2421  0608  0820               	movf	??_deviceDataRead,w
  2422  0609  0084               	movwf	4
  2423  060A  0800               	movf	0,w
  2424  060B  00A1               	movwf	??_deviceDataRead+1
  2425  060C  0821               	movf	??_deviceDataRead+1,w
  2426  060D  00A2               	movwf	deviceDataRead@code
  2427                           
  2428                           ;main.c: 411:     device->readDataPos = (device->readDataPos + 1) & 7;
  2429  060E  0823               	movf	deviceDataRead@device,w
  2430  060F  3E05               	addlw	5
  2431  0610  0084               	movwf	4
  2432  0611  0800               	movf	0,w
  2433  0612  3E01               	addlw	1
  2434  0613  3907               	andlw	7
  2435  0614  00A0               	movwf	??_deviceDataRead
  2436  0615  0823               	movf	deviceDataRead@device,w
  2437  0616  3E05               	addlw	5
  2438  0617  0084               	movwf	4
  2439  0618  0820               	movf	??_deviceDataRead,w
  2440  0619  0080               	movwf	0
  2441                           
  2442                           ;main.c: 412:     return code;
  2443  061A  0822               	movf	deviceDataRead@code,w
  2444  061B  0008               	return
  2445  061C                     __end_of_deviceDataRead:	
  2446                           
  2447                           	psect	text9
  2448  0487                     __ptext9:	
  2449 ;; *************** function _deviceDataInit *****************
  2450 ;; Defined at:
  2451 ;;		line 397 in file "main.c"
  2452 ;; Parameters:    Size  Location     Type
  2453 ;;  device          2    0[BANK0 ] PTR struct PS2DeviceData
  2454 ;;		 -> RAM(512), NULL(0), 
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;                  1    wreg      void 
  2459 ;; Registers used:
  2460 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2461 ;; Tracked objects:
  2462 ;;		On entry : 0/0
  2463 ;;		On exit  : 0/0
  2464 ;;		Unchanged: 0/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2466 ;;      Params:         0       2       0       0
  2467 ;;      Locals:         0       0       0       0
  2468 ;;      Temps:          0       2       0       0
  2469 ;;      Totals:         0       4       0       0
  2470 ;;Total ram usage:        4 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    1
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479                           
  2480                           
  2481                           ;psect for function _deviceDataInit
  2482  0487                     _deviceDataInit:	
  2483                           
  2484                           ;main.c: 397: void deviceDataInit(struct PS2DeviceData* device);main.c: 398: {;main.c: 3
      +                          99:     device->ps2Down = 1;
  2485                           
  2486                           ;incstack = 0
  2487                           ; Regs used in _deviceDataInit: [wreg-fsr0h+status,2+status,0]
  2488  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2489  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2490  0489  0820               	movf	deviceDataInit@device,w
  2491  048A  3E02               	addlw	2
  2492  048B  00A2               	movwf	??_deviceDataInit
  2493  048C  0821               	movf	deviceDataInit@device+1,w
  2494  048D  1803               	skipnc
  2495  048E  3E01               	addlw	1
  2496  048F  3E00               	addlw	0
  2497  0490  00A3               	movwf	??_deviceDataInit+1
  2498  0491  0822               	movf	??_deviceDataInit,w
  2499  0492  0084               	movwf	4
  2500  0493  1783               	bsf	3,7
  2501  0494  1C23               	btfss	??_deviceDataInit+1,0
  2502  0495  1383               	bcf	3,7
  2503  0496  0180               	clrf	0
  2504  0497  0A80               	incf	0,f
  2505                           
  2506                           ;main.c: 400:     device->ps2NeedEncode = 0;
  2507  0498  0820               	movf	deviceDataInit@device,w
  2508  0499  3E03               	addlw	3
  2509  049A  00A2               	movwf	??_deviceDataInit
  2510  049B  0821               	movf	deviceDataInit@device+1,w
  2511  049C  1803               	skipnc
  2512  049D  3E01               	addlw	1
  2513  049E  3E00               	addlw	0
  2514  049F  00A3               	movwf	??_deviceDataInit+1
  2515  04A0  0822               	movf	??_deviceDataInit,w
  2516  04A1  0084               	movwf	4
  2517  04A2  1783               	bsf	3,7
  2518  04A3  1C23               	btfss	??_deviceDataInit+1,0
  2519  04A4  1383               	bcf	3,7
  2520  04A5  0180               	clrf	0
  2521                           
  2522                           ;main.c: 401:     device->readDataPos = 0;
  2523  04A6  0820               	movf	deviceDataInit@device,w
  2524  04A7  3E05               	addlw	5
  2525  04A8  00A2               	movwf	??_deviceDataInit
  2526  04A9  0821               	movf	deviceDataInit@device+1,w
  2527  04AA  1803               	skipnc
  2528  04AB  3E01               	addlw	1
  2529  04AC  3E00               	addlw	0
  2530  04AD  00A3               	movwf	??_deviceDataInit+1
  2531  04AE  0822               	movf	??_deviceDataInit,w
  2532  04AF  0084               	movwf	4
  2533  04B0  1783               	bsf	3,7
  2534  04B1  1C23               	btfss	??_deviceDataInit+1,0
  2535  04B2  1383               	bcf	3,7
  2536  04B3  0180               	clrf	0
  2537                           
  2538                           ;main.c: 402:     device->inDataPos = 0;
  2539  04B4  0820               	movf	deviceDataInit@device,w
  2540  04B5  3E04               	addlw	4
  2541  04B6  00A2               	movwf	??_deviceDataInit
  2542  04B7  0821               	movf	deviceDataInit@device+1,w
  2543  04B8  1803               	skipnc
  2544  04B9  3E01               	addlw	1
  2545  04BA  3E00               	addlw	0
  2546  04BB  00A3               	movwf	??_deviceDataInit+1
  2547  04BC  0822               	movf	??_deviceDataInit,w
  2548  04BD  0084               	movwf	4
  2549  04BE  1783               	bsf	3,7
  2550  04BF  1C23               	btfss	??_deviceDataInit+1,0
  2551  04C0  1383               	bcf	3,7
  2552  04C1  0180               	clrf	0
  2553                           
  2554                           ;main.c: 403:     device->deviceMode = 3;
  2555  04C2  3003               	movlw	3
  2556  04C3  00A2               	movwf	??_deviceDataInit
  2557  04C4  0820               	movf	deviceDataInit@device,w
  2558  04C5  0084               	movwf	4
  2559  04C6  1783               	bsf	3,7
  2560  04C7  1C21               	btfss	deviceDataInit@device+1,0
  2561  04C8  1383               	bcf	3,7
  2562  04C9  0822               	movf	??_deviceDataInit,w
  2563  04CA  0080               	movwf	0
  2564                           
  2565                           ;main.c: 404:     device->state = 0;
  2566  04CB  0820               	movf	deviceDataInit@device,w
  2567  04CC  3E01               	addlw	1
  2568  04CD  00A2               	movwf	??_deviceDataInit
  2569  04CE  0821               	movf	deviceDataInit@device+1,w
  2570  04CF  1803               	skipnc
  2571  04D0  3E01               	addlw	1
  2572  04D1  3E00               	addlw	0
  2573  04D2  00A3               	movwf	??_deviceDataInit+1
  2574  04D3  0822               	movf	??_deviceDataInit,w
  2575  04D4  0084               	movwf	4
  2576  04D5  1783               	bsf	3,7
  2577  04D6  1C23               	btfss	??_deviceDataInit+1,0
  2578  04D7  1383               	bcf	3,7
  2579  04D8  0180               	clrf	0
  2580                           
  2581                           ;main.c: 405:     device->delay = 0;
  2582  04D9  0820               	movf	deviceDataInit@device,w
  2583  04DA  3E0E               	addlw	14
  2584  04DB  00A2               	movwf	??_deviceDataInit
  2585  04DC  0821               	movf	deviceDataInit@device+1,w
  2586  04DD  1803               	skipnc
  2587  04DE  3E01               	addlw	1
  2588  04DF  3E00               	addlw	0
  2589  04E0  00A3               	movwf	??_deviceDataInit+1
  2590  04E1  0822               	movf	??_deviceDataInit,w
  2591  04E2  0084               	movwf	4
  2592  04E3  1783               	bsf	3,7
  2593  04E4  1C23               	btfss	??_deviceDataInit+1,0
  2594  04E5  1383               	bcf	3,7
  2595  04E6  0180               	clrf	0
  2596  04E7  0A84               	incf	4,f
  2597  04E8  0180               	clrf	0
  2598  04E9  0008               	return
  2599  04EA                     __end_of_deviceDataInit:	
  2600                           
  2601                           	psect	text10
  2602  0375                     __ptext10:	
  2603 ;; *************** function _myIsr *****************
  2604 ;; Defined at:
  2605 ;;		line 156 in file "main.c"
  2606 ;; Parameters:    Size  Location     Type
  2607 ;;		None
  2608 ;; Auto vars:     Size  Location     Type
  2609 ;;  device          1    5[COMMON] PTR struct PS2DeviceData
  2610 ;;		 -> devices(32), 
  2611 ;; Return value:  Size  Location     Type
  2612 ;;                  1    wreg      void 
  2613 ;; Registers used:
  2614 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2615 ;; Tracked objects:
  2616 ;;		On entry : 0/0
  2617 ;;		On exit  : 0/0
  2618 ;;		Unchanged: 0/0
  2619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2620 ;;      Params:         0       0       0       0
  2621 ;;      Locals:         1       0       0       0
  2622 ;;      Temps:          5       0       0       0
  2623 ;;      Totals:         6       0       0       0
  2624 ;;Total ram usage:        6 bytes
  2625 ;; Hardware stack levels used:    1
  2626 ;; This function calls:
  2627 ;;		Nothing
  2628 ;; This function is called by:
  2629 ;;		Interrupt level 1
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _myIsr
  2635  0375                     _myIsr:	
  2636                           
  2637                           ;main.c: 158:     if(T0IE && T0IF){
  2638  0375  1A8B               	btfsc	11,5	;volatile
  2639  0376  1D0B               	btfss	11,2	;volatile
  2640  0377  2C01               	goto	i1l177
  2641                           
  2642                           ;main.c: 159:         if ( ps2DataState == 2 ) {
  2643  0378  3002               	movlw	2
  2644  0379  0674               	xorwf	_ps2DataState,w
  2645  037A  1D03               	btfss	3,2
  2646  037B  2BA4               	goto	i1l1622
  2647                           
  2648                           ;main.c: 161:             if ( ps2BitsCount < 8 ) {
  2649  037C  3008               	movlw	8
  2650  037D  0271               	subwf	_ps2BitsCount,w
  2651  037E  1803               	skipnc
  2652  037F  2B91               	goto	i1l1614
  2653                           
  2654                           ;main.c: 162:                 RA3 = ps2Bits & 1;
  2655  0380  1C73               	btfss	_ps2Bits,0
  2656  0381  2B86               	goto	u154_20
  2657  0382  1283               	bcf	3,5	;RP0=0, select bank0
  2658  0383  1303               	bcf	3,6	;RP1=0, select bank0
  2659  0384  1585               	bsf	5,3	;volatile
  2660  0385  2B89               	goto	i1l1610
  2661  0386                     u154_20:	
  2662  0386  1283               	bcf	3,5	;RP0=0, select bank0
  2663  0387  1303               	bcf	3,6	;RP1=0, select bank0
  2664  0388  1185               	bcf	5,3	;volatile
  2665  0389                     i1l1610:	
  2666                           
  2667                           ;main.c: 163:                 ps2Parity ^= ps2Bits & 1;
  2668  0389  0873               	movf	_ps2Bits,w
  2669  038A  3901               	andlw	1
  2670  038B  00F6               	movwf	??_myIsr
  2671  038C  0876               	movf	??_myIsr,w
  2672  038D  06F2               	xorwf	_ps2Parity,f
  2673                           
  2674                           ;main.c: 164:                 ps2Bits >>= 1;
  2675  038E  1003               	clrc
  2676  038F  0CF3               	rrf	_ps2Bits,f
  2677                           
  2678                           ;main.c: 165:             } else if (ps2BitsCount == 8 ) {
  2679  0390  2BB7               	goto	i1l1636
  2680  0391                     i1l1614:	
  2681  0391  3008               	movlw	8
  2682  0392  0671               	xorwf	_ps2BitsCount,w
  2683  0393  1D03               	btfss	3,2
  2684  0394  2B9F               	goto	i1l163
  2685                           
  2686                           ;main.c: 167:                 RA3 = ps2Parity;
  2687  0395  1C72               	btfss	_ps2Parity,0
  2688  0396  2B9B               	goto	u157_20
  2689  0397  1283               	bcf	3,5	;RP0=0, select bank0
  2690  0398  1303               	bcf	3,6	;RP1=0, select bank0
  2691  0399  1585               	bsf	5,3	;volatile
  2692  039A  2BB7               	goto	i1l1636
  2693  039B                     u157_20:	
  2694  039B  1283               	bcf	3,5	;RP0=0, select bank0
  2695  039C  1303               	bcf	3,6	;RP1=0, select bank0
  2696  039D  1185               	bcf	5,3	;volatile
  2697                           
  2698                           ;main.c: 168:             } else {
  2699  039E  2BB7               	goto	i1l1636
  2700  039F                     i1l163:	
  2701                           
  2702                           ;main.c: 169:                 RA3 = 1;
  2703  039F  1283               	bcf	3,5	;RP0=0, select bank0
  2704  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  2705  03A1  1585               	bsf	5,3	;volatile
  2706                           
  2707                           ;main.c: 170:                 ps2DataState = 0;
  2708  03A2  01F4               	clrf	_ps2DataState
  2709                           
  2710                           ;main.c: 171:             }
  2711  03A3  2BB7               	goto	i1l1636
  2712  03A4                     i1l1622:	
  2713                           ;main.c: 174:         } else if ( ps2DataState == 1 ) {
  2714                           
  2715                           ;main.c: 172:             ps2BitsCount++;
  2716                           
  2717  03A4  0374               	decf	_ps2DataState,w
  2718  03A5  1D03               	btfss	3,2
  2719  03A6  2BEC               	goto	i1l1648
  2720                           
  2721                           ;main.c: 175:             if ( ps2BitsCount < 8 ) {
  2722  03A7  3008               	movlw	8
  2723  03A8  0271               	subwf	_ps2BitsCount,w
  2724  03A9  1803               	skipnc
  2725  03AA  2BB3               	goto	i1l1634
  2726                           
  2727                           ;main.c: 176:                 ps2Bits >>= 1;
  2728  03AB  1003               	clrc
  2729  03AC  0CF3               	rrf	_ps2Bits,f
  2730                           
  2731                           ;main.c: 177:                 if ( RA3 ) ps2Bits |= 128;
  2732  03AD  1283               	bcf	3,5	;RP0=0, select bank0
  2733  03AE  1303               	bcf	3,6	;RP1=0, select bank0
  2734  03AF  1D85               	btfss	5,3	;volatile
  2735  03B0  2BB7               	goto	i1l1636
  2736  03B1  17F3               	bsf	_ps2Bits,7
  2737  03B2  2BB7               	goto	i1l1636
  2738  03B3                     i1l1634:	
  2739                           ;main.c: 179:             } else if ( ps2BitsCount == 8 ) {
  2740                           
  2741                           ;main.c: 178:                 ps2BitsCount++;
  2742                           
  2743  03B3  3008               	movlw	8
  2744  03B4  0671               	xorwf	_ps2BitsCount,w
  2745  03B5  1D03               	btfss	3,2
  2746  03B6  2BBC               	goto	i1l1638
  2747  03B7                     i1l1636:	
  2748                           
  2749                           ;main.c: 180:                 ps2BitsCount++;
  2750  03B7  3001               	movlw	1
  2751  03B8  00F6               	movwf	??_myIsr
  2752  03B9  0876               	movf	??_myIsr,w
  2753  03BA  07F1               	addwf	_ps2BitsCount,f
  2754                           
  2755                           ;main.c: 181:             } else if ( ps2BitsCount == 9 ) {
  2756  03BB  2BFC               	goto	i1l1660
  2757  03BC                     i1l1638:	
  2758  03BC  3009               	movlw	9
  2759  03BD  0671               	xorwf	_ps2BitsCount,w
  2760  03BE  1D03               	btfss	3,2
  2761  03BF  2BFC               	goto	i1l1660
  2762                           
  2763                           ;main.c: 184:                 struct PS2DeviceData* device = &devices[ps2Device];
  2764  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  2765  03C1  1303               	bcf	3,6	;RP1=0, select bank0
  2766  03C2  0851               	movf	_ps2Device,w
  2767  03C3  00F6               	movwf	??_myIsr
  2768  03C4  3003               	movlw	3
  2769  03C5                     u164_25:	
  2770  03C5  1003               	clrc
  2771  03C6  0DF6               	rlf	??_myIsr,f
  2772  03C7  3EFF               	addlw	-1
  2773  03C8  1D03               	skipz
  2774  03C9  2BC5               	goto	u164_25
  2775  03CA  1003               	clrc
  2776  03CB  0D76               	rlf	??_myIsr,w
  2777  03CC  3EA0               	addlw	(low (_devices| 0))& (0+255)
  2778  03CD  00F7               	movwf	??_myIsr+1
  2779  03CE  0877               	movf	??_myIsr+1,w
  2780  03CF  00FB               	movwf	myIsr@device
  2781                           
  2782                           ;main.c: 186:                 device->inData[device->inDataPos] = ps2Bits;
  2783  03D0  0873               	movf	_ps2Bits,w
  2784  03D1  00F6               	movwf	??_myIsr
  2785  03D2  087B               	movf	myIsr@device,w
  2786  03D3  3E04               	addlw	4
  2787  03D4  0084               	movwf	4
  2788  03D5  1383               	bcf	3,7	;select IRP bank0
  2789  03D6  0800               	movf	0,w
  2790  03D7  3E06               	addlw	6
  2791  03D8  077B               	addwf	myIsr@device,w
  2792  03D9  00F7               	movwf	??_myIsr+1
  2793  03DA  0877               	movf	??_myIsr+1,w
  2794  03DB  0084               	movwf	4
  2795  03DC  0876               	movf	??_myIsr,w
  2796  03DD  0080               	movwf	0
  2797                           
  2798                           ;main.c: 187:                 device->inDataPos = (device->inDataPos+1) & 7;
  2799  03DE  087B               	movf	myIsr@device,w
  2800  03DF  3E04               	addlw	4
  2801  03E0  0084               	movwf	4
  2802  03E1  0800               	movf	0,w
  2803  03E2  3E01               	addlw	1
  2804  03E3  3907               	andlw	7
  2805  03E4  00F6               	movwf	??_myIsr
  2806  03E5  087B               	movf	myIsr@device,w
  2807  03E6  3E04               	addlw	4
  2808  03E7  0084               	movwf	4
  2809  03E8  0876               	movf	??_myIsr,w
  2810  03E9  0080               	movwf	0
  2811                           
  2812                           ;main.c: 189:                 ps2DataState = 0;
  2813  03EA  01F4               	clrf	_ps2DataState
  2814                           
  2815                           ;main.c: 191:         } else if ( ps2DataState == 0 ) {
  2816                           
  2817                           ;main.c: 190:             }
  2818  03EB  2BFC               	goto	i1l1660
  2819  03EC                     i1l1648:	
  2820  03EC  0874               	movf	_ps2DataState,w
  2821  03ED  1D03               	btfss	3,2
  2822  03EE  2BFC               	goto	i1l1660
  2823                           
  2824                           ;main.c: 192:             if ( !RA4 && !RA3 ) {
  2825  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2826  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2827  03F1  1E05               	btfss	5,4	;volatile
  2828  03F2  1985               	btfsc	5,3	;volatile
  2829  03F3  2BFC               	goto	i1l1660
  2830                           
  2831                           ;main.c: 193:                 ps2BitsCount = 0;
  2832  03F4  01F1               	clrf	_ps2BitsCount
  2833                           
  2834                           ;main.c: 194:                 ps2Bits = 0;
  2835  03F5  01F3               	clrf	_ps2Bits
  2836                           
  2837                           ;main.c: 195:                 ps2DataState = 1;
  2838  03F6  01F4               	clrf	_ps2DataState
  2839  03F7  0AF4               	incf	_ps2DataState,f
  2840                           
  2841                           ;main.c: 196:                 ps2Device = RA0;
  2842  03F8  3000               	movlw	0
  2843  03F9  1805               	btfsc	5,0	;volatile
  2844  03FA  3001               	movlw	1
  2845  03FB  00D1               	movwf	_ps2Device
  2846  03FC                     i1l1660:	
  2847                           ;main.c: 198:         }
  2848                           
  2849                           ;main.c: 197:             }
  2850                           
  2851                           
  2852                           ;main.c: 199:         T0IF=0;
  2853  03FC  110B               	bcf	11,2	;volatile
  2854                           
  2855                           ;main.c: 200:         TMR0 = 255;
  2856  03FD  30FF               	movlw	255
  2857  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  2858  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  2859  0400  0081               	movwf	1	;volatile
  2860  0401                     i1l177:	
  2861                           ;main.c: 203:     }
  2862                           
  2863                           ;main.c: 201:     } else {
  2864                           
  2865  0401  087A               	movf	??_myIsr+4,w
  2866  0402  008A               	movwf	10
  2867  0403  0879               	movf	??_myIsr+3,w
  2868  0404  0084               	movwf	4
  2869  0405  0E78               	swapf	(??_myIsr+2)^(0+4294967168),w
  2870  0406  0083               	movwf	3
  2871  0407  0EFE               	swapf	126,f
  2872  0408  0E7E               	swapf	126,w
  2873  0409  0009               	retfie
  2874  040A                     __end_of_myIsr:	
  2875  007E                     btemp	set	126	;btemp
  2876  007E                     wtemp0	set	126
  2877                           
  2878                           	psect	intentry
  2879  0004                     __pintentry:	
  2880                           ;incstack = 0
  2881                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0]
  2882                           
  2883  0004                     interrupt_function:	
  2884  007E                     saved_w	set	btemp
  2885  0004  00FE               	movwf	btemp
  2886  0005  0E03               	swapf	3,w
  2887  0006  00F8               	movwf	??_myIsr+2
  2888  0007  0804               	movf	4,w
  2889  0008  00F9               	movwf	??_myIsr+3
  2890  0009  080A               	movf	10,w
  2891  000A  00FA               	movwf	??_myIsr+4
  2892  000B  2B75               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     31      51
    BANK1            80      0      32
    BANK2            48      0       0

Pointer List with Targets:

    deviceDataUpdate@device	PTR struct PS2DeviceData size(1) Largest target is 32
		 -> devices(BANK1[32]), 

    deviceDataRead@device	PTR struct PS2DeviceData size(1) Largest target is 32
		 -> devices(BANK1[32]), 

    deviceDataInit@device	PTR struct PS2DeviceData size(2) Largest target is 512
		 -> RAM(DATA[512]), NULL(NULL[0]), 

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(COMMON[1]), 

    calculateBitsFromTable@keyDown	PTR unsigned char  size(1) Largest target is 1
		 -> processKeyCode@keyDown(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 

    calculateBitsFromTable@keyCode	PTR unsigned char  size(1) Largest target is 1
		 -> processKeyCode@keyCode(BANK0[1]), 

    myIsr@device	PTR struct PS2DeviceData size(1) Largest target is 32
		 -> devices(BANK1[32]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_deviceDataUpdate
    _deviceDataUpdate->_processKeyCode
    _processKeyCode->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4828
                                             29 BANK0      2     2      0
                     _deviceDataInit
                   _deviceDataUpdate
                   _sendDataToAltera
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     198
                                              0 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _deviceDataUpdate                                     7     7      0    4134
                                             22 BANK0      7     7      0
                     _deviceDataRead
                     _processKeyCode
 ---------------------------------------------------------------------------------
 (2) _processKeyCode                                       9     8      1    3196
                                             13 BANK0      9     8      1
             _calculateBitsFromTable
                          _updateKey
 ---------------------------------------------------------------------------------
 (3) _updateKey                                            7     6      1     883
                                              6 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (4) _updatePort                                           6     5      1     459
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (4) _calculateBitsFromTable                               9     4      5    1350
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (2) _deviceDataRead                                       4     4      0     194
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _deviceDataInit                                       4     2      2     397
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _myIsr                                                6     6      0      89
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _deviceDataInit
   _deviceDataUpdate
     _deviceDataRead
     _processKeyCode
       _calculateBitsFromTable
       _updateKey
         _updatePort
   _sendDataToAltera
     _myDelay

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      20       7       40.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1F      33       3       63.8%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5F      10        0.0%
ABS                  0      0      5F       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Nov 12 09:27:56 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0025                                 l214 0552  
                               l226 0238                                 l228 0249  
                               l284 036A                                 l286 0373  
                               _GIE 005F                                 _RA0 0028  
                               _RA1 0029                                 _RA2 002A  
                               _RA3 002B                                 _RA4 002C  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _PSA 040B  
                               fsr0 0004                                 indf 0000  
                  _deviceDataUpdate 040A                                l2032 0451  
                              l2024 0441                                l2042 046E  
                              l2034 0459                                l2202 036B  
                              l2028 0446                                l2038 0463  
                              l2206 036F                                l2064 02D9  
                              l2170 0336                                l2058 02CB  
                              l2190 0359                                l2194 035F  
                              l2186 0353                                l1902 024A  
                              l2198 0363                                l1920 026A  
                              l1842 05C7                                l1826 05F3  
                              l1922 026B                                l1914 025E  
                              l1836 05B0                                l1844 058B  
                              l1924 0274                                l1916 0262  
                              l1932 0282                                l1908 0250  
                              l1838 05C0                                l1854 04FB  
                              l1952 02AE                                l1928 0279  
                              l1946 02A3                                l1938 0288  
                              l1868 052B                                l1948 02A5  
                              l1884 0224                                l1894 0239  
                              l1978 0563                                l1996 0584  
                              _EEIE 0467                                _EEIF 0067  
                              _CMIE 0466                                _CMIF 0066  
                              _T0IE 005D                                _T0IF 005A  
                              _T0CS 040D                                u2000 0220  
                              u2010 0221                                _T0SE 040C  
                              u1900 0506                                u1920 051F  
                              u1834 05A6                                u1930 0520  
                              u1835 05A4                                u1844 05B6  
                              u1940 0527                                u1845 05B4  
                              u1950 0528                                u1785 05D4  
                              u1794 05DF                                u1890 0505  
                              u1795 05DD                                _PEIE 005E  
                              _INTE 005C                                _INTF 0059  
                              _RBIE 005B                                _RBIF 0058  
                              _RCIE 0465                                _RCIF 0065  
                              _TMR0 0001                                _TMR2 0011  
                              _SPEN 00C7                                _TXIE 0464  
                              _TXIF 0064                                _main 02B5  
                              btemp 007E                                start 000C  
                             ?_main 0076                               _CMCON 001F  
      __end_of_replaceTwoBytesCodes 01CC                               _T1CON 0010  
                             i1l163 039F                               i1l177 0401  
                             _RCSTA 0018                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                __end_of_codeToMatrix 0186  
                             _TRISA 0085                               _TRISB 0086  
                             _VRCON 009F                               _TXSTA 0098  
                             _nRBPU 040F                               _delay 004C  
                   __end_of_myDelay 0630                               _myIsr 0375  
                             main@i 003E                    updatePort@bit_id 0025  
                             pclath 000A                               status 0003  
                      updateKey@key 0028                               wtemp0 007E  
                   __initialization 000D                        __end_of_main 0375  
                            ??_main 003D     __size_of_calculateBitsFromTable 0045  
                 sendDataToAltera@i 0024                              _CCP1IE 0462  
                            _CCP1IF 0062                              ?_myIsr 0076  
                            _CCPR1H 0016                              _CCPR1L 0015  
                            i1l1610 0389                              i1l1614 0391  
                            i1l1622 03A4                              i1l1634 03B3  
                            i1l1636 03B7                              i1l1660 03FC  
                            i1l1638 03BC                              i1l1648 03EC  
                            _INTEDG 040E                              u154_20 0386  
                            u164_25 03C5                              u157_20 039B  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _TMR2IE 0461                              _TMR2IF 0061  
          __end_of_sendDataToAltera 0587               _replaceOnDelayKeyDown 01CC  
                  ??_processKeyCode 002E                           ??_myDelay 0020  
                            saved_w 007E                       updateKey@code 002C  
                     updateKey@down 0026             __end_of__initialization 0030  
            _calculateBitsFromTable 0587                _replaceTwoBytesCodes 01B0  
                       myIsr@device 007B            __end_of_deviceDataUpdate 0487  
                     updatePort@set 0020                      __pcstackCOMMON 0076  
                      __pidataBANK0 061C                       __end_of_myIsr 040A  
              deviceDataInit@device 0020                deviceDataRead@device 0023  
               updateKey@localShift 0029                             ??_myIsr 0076  
           __size_of_deviceDataInit 0063             __size_of_deviceDataRead 001F  
                      _ps2DataState 0074                          __pbssBANK0 004A  
                        __pbssBANK1 00A0                        _ps2BitsCount 0071  
                      _codeToMatrix 0106                          _delayedKey 004E  
              _sendDataToAltera$155 0022                          __pmaintext 02B5  
                        __pintentry 0004                             _CCP1CON 0017  
        calculateBitsFromTable@bits 0021                     processKeyCode@i 0034  
                __size_of_updateKey 0053                          __stringtab 0100  
        _kempstonMouseEmulatorDelay 004A       __end_of_replaceOnShiftKeyDown 01B0  
                           _ps2Bits 0073                             _devices 00A0  
                           __ptext1 053D                             __ptext2 062F  
                           __ptext3 040A                             __ptext4 01E0  
                           __ptext5 04EA                             __ptext6 05CC  
                           __ptext7 0587                             __ptext8 05FD  
                           __ptext9 0487       calculateBitsFromTable@keyCode 0027  
     calculateBitsFromTable@keyDown 0020                             _myDelay 062F  
calculateBitsFromTable@clearIfFound 0024                             _numLock 004F  
                 deviceDataUpdate@i 003A                             clrloop0 0628  
              end_of_initialization 0030                       _importantKeys 01D4  
              _deviceDataUpdate$197 0038                      _shift_ctrl_alt 0075  
                 ?_sendDataToAltera 0076                   __end_of_updateKey 053D  
                ??_sendDataToAltera 0020                   _kempstonMouseKeys 01DA  
              deviceDataUpdate@code 003B                          _updatePort 05CC  
                    _deviceDataInit 0487                      _deviceDataRead 05FD  
           ?_calculateBitsFromTable 0020                   ?_deviceDataUpdate 0076  
         __end_of_kempstonMouseKeys 01E0                  ??_deviceDataUpdate 0036  
             processKeyCode@keyCode 0035               processKeyCode@keyDown 002D  
               start_initialization 000D              __end_of_deviceDataInit 04EA  
            __end_of_deviceDataRead 061C                         updatePort@a 0024  
    __end_of_calculateBitsFromTable 05CC             calculateBitsFromTable@i 0028  
                       __pdataBANK0 003F             __size_of_processKeyCode 00D5  
                       __pbssCOMMON 0070                           ___latbits 0000  
                   ?_deviceDataInit 0020                     ?_deviceDataRead 0076  
                     __pcstackBANK0 0020                         ?_updatePort 0020  
                updateKey@localCtrl 002B                           _ps2Device 0051  
                         _ps2Parity 0072                           __pstrings 0100  
                          ?_myDelay 0076         calculateBitsFromTable@count 0023  
                    __size_of_myIsr 0095         calculateBitsFromTable@table 0022  
                 interrupt_function 0004                           clear_ram0 0627  
               __size_of_updatePort 0031               _replaceOnShiftKeyDown 0186  
                         _updateKey 04EA                         __stringbase 0105  
         __size_of_sendDataToAltera 004A                          ?_updateKey 0026  
                __end_of__stringtab 0106                      _processKeyCode 01E0  
                deviceDataRead@code 0022           __size_of_deviceDataUpdate 007D  
                  __size_of_myDelay 0001                            __ptext10 0375  
                          _needSave 0050                       __size_of_main 00C0  
     __end_of_replaceOnDelayKeyDown 01D4                            _replaced 0070  
                          _outPorts 003F              __end_of_processKeyCode 02B5  
               processKeyCode@i_161 0033                    ??_deviceDataInit 0022  
                  ??_deviceDataRead 0020                        ??_updatePort 0021  
         _kempstonMouseEmulatorKeys 0052                            intlevel1 0000  
                         stringcode 0100                  __end_of_updatePort 05FD  
                   ?_processKeyCode 002D                         ??_updateKey 0027  
            deviceDataUpdate@device 003C                    _sendDataToAltera 053D  
                          stringdir 0100                            stringtab 0100  
             __end_of_importantKeys 01DA                       _updateKey$148 002A  
