

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Wed Nov 28 16:11:45 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.00
    32                           ; Generated 27/05/2018 GMT
    33                           ; 
    34                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F628A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  008C                     	;# 
    93  008E                     	;# 
    94  0092                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009F                     	;# 
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000E                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0015                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001F                     	;# 
   126  0081                     	;# 
   127  0085                     	;# 
   128  0086                     	;# 
   129  008C                     	;# 
   130  008E                     	;# 
   131  0092                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009F                     	;# 
   139                           
   140                           	psect	idataBANK0
   141  0270                     __pidataBANK0:	
   142                           
   143                           ;initializer for _outPorts
   144  0270  3400               	retlw	0
   145  0271  3400               	retlw	0
   146  0272  3400               	retlw	0
   147  0273  3400               	retlw	0
   148  0274  3400               	retlw	0
   149  0275  3400               	retlw	0
   150  0276  3400               	retlw	0
   151  0277  3400               	retlw	0
   152  0278  3407               	retlw	7
   153  0279  34F5               	retlw	245
   154  027A  34DA               	retlw	218
   155                           
   156                           ;initializer for _ps2DeviceMain
   157  027B  3403               	retlw	3
   158                           
   159                           	psect	strings
   160  0300                     __pstrings:	
   161  0300                     stringtab:	
   162  0300                     __stringtab:	
   163  0300                     stringcode:	
   164                           ;	String table - string pointers are 1 byte each
   165                           
   166  0300                     stringdir:	
   167  0300  3003               	movlw	high stringdir
   168  0301  008A               	movwf	10
   169  0302  0804               	movf	4,w
   170  0303  0A84               	incf	4,f
   171  0304  0782               	addwf	2,f
   172  0305                     __stringbase:	
   173  0305  3400               	retlw	0
   174  0306                     __end_of__stringtab:	
   175  0306                     _codeToMatrix:	
   176  0306  34FF               	retlw	255
   177  0307  34FF               	retlw	255
   178  0308  34FF               	retlw	255
   179  0309  34FF               	retlw	255
   180  030A  34FF               	retlw	255
   181  030B  34FF               	retlw	255
   182  030C  34FF               	retlw	255
   183  030D  34FF               	retlw	255
   184  030E  34FF               	retlw	255
   185  030F  34FF               	retlw	255
   186  0310  34FF               	retlw	255
   187  0311  34FF               	retlw	255
   188  0312  34FF               	retlw	255
   189  0313  34FF               	retlw	255
   190  0314  349C               	retlw	156
   191  0315  34FF               	retlw	255
   192  0316  34FF               	retlw	255
   193  0317  34FF               	retlw	255
   194  0318  34FF               	retlw	255
   195  0319  34FF               	retlw	255
   196  031A  34FF               	retlw	255
   197  031B  3402               	retlw	2
   198  031C  3403               	retlw	3
   199  031D  34FF               	retlw	255
   200  031E  34FF               	retlw	255
   201  031F  34FF               	retlw	255
   202  0320  3408               	retlw	8
   203  0321  3409               	retlw	9
   204  0322  3401               	retlw	1
   205  0323  340A               	retlw	10
   206  0324  340B               	retlw	11
   207  0325  34D6               	retlw	214
   208  0326  34FF               	retlw	255
   209  0327  3418               	retlw	24
   210  0328  3410               	retlw	16
   211  0329  3411               	retlw	17
   212  032A  3412               	retlw	18
   213  032B  341B               	retlw	27
   214  032C  3413               	retlw	19
   215  032D  34FF               	retlw	255
   216  032E  345C               	retlw	92
   217  032F  3407               	retlw	7
   218  0330  3420               	retlw	32
   219  0331  3419               	retlw	25
   220  0332  3422               	retlw	34
   221  0333  341A               	retlw	26
   222  0334  3423               	retlw	35
   223  0335  3463               	retlw	99
   224  0336  3464               	retlw	100
   225  0337  341F               	retlw	31
   226  0338  3427               	retlw	39
   227  0339  3426               	retlw	38
   228  033A  3421               	retlw	33
   229  033B  3425               	retlw	37
   230  033C  3424               	retlw	36
   231  033D  3454               	retlw	84
   232  033E  34A0               	retlw	160
   233  033F  3406               	retlw	6
   234  0340  3417               	retlw	23
   235  0341  341E               	retlw	30
   236  0342  341D               	retlw	29
   237  0343  341C               	retlw	28
   238  0344  3414               	retlw	20
   239  0345  34FF               	retlw	255
   240  0346  34FF               	retlw	255
   241  0347  349F               	retlw	159
   242  0348  3416               	retlw	22
   243  0349  3415               	retlw	21
   244  034A  340D               	retlw	13
   245  034B  3404               	retlw	4
   246  034C  340C               	retlw	12
   247  034D  34FF               	retlw	255
   248  034E  34C1               	retlw	193
   249  034F  3497               	retlw	151
   250  0350  34A0               	retlw	160
   251  0351  340E               	retlw	14
   252  0352  348D               	retlw	141
   253  0353  3405               	retlw	5
   254  0354  349E               	retlw	158
   255  0355  3483               	retlw	131
   256  0356  348B               	retlw	139
   257  0357  3493               	retlw	147
   258  0358  349C               	retlw	156
   259  0359  349B               	retlw	155
   260  035A  34E5               	retlw	229
   261  035B  348E               	retlw	142
   262  035C  34A3               	retlw	163
   263  035D  34A6               	retlw	166
   264  035E  344B               	retlw	75
   265  035F  34FF               	retlw	255
   266  0360  3406               	retlw	6
   267  0361  34DD               	retlw	221
   268  0362  34A4               	retlw	164
   269  0363  34D1               	retlw	209
   270  0364  34A7               	retlw	167
   271  0365  3494               	retlw	148
   272  0366  348C               	retlw	140
   273  0367  3484               	retlw	132
   274  0368  3496               	retlw	150
   275  0369  34C9               	retlw	201
   276  036A  34D9               	retlw	217
   277  036B  34E1               	retlw	225
   278  036C  3444               	retlw	68
   279  036D  3488               	retlw	136
   280  036E  3485               	retlw	133
   281  036F  3403               	retlw	3
   282  0370  349A               	retlw	154
   283  0371  341B               	retlw	27
   284  0372  341C               	retlw	28
   285  0373  34A2               	retlw	162
   286  0374  3498               	retlw	152
   287  0375  34C0               	retlw	192
   288  0376  3404               	retlw	4
   289  0377  3497               	retlw	151
   290  0378  340B               	retlw	11
   291  0379  3423               	retlw	35
   292  037A  3424               	retlw	36
   293  037B  3414               	retlw	20
   294  037C  3443               	retlw	67
   295  037D  34FF               	retlw	255
   296  037E  34FF               	retlw	255
   297  037F  3496               	retlw	150
   298  0380  3413               	retlw	19
   299  0381  349E               	retlw	158
   300  0382  34A7               	retlw	167
   301  0383  340C               	retlw	12
   302  0384  34FF               	retlw	255
   303  0385  34FF               	retlw	255
   304  0386                     __end_of_codeToMatrix:	
   305  0386                     _replaceOnShiftKeyDown:	
   306  0386  3416               	retlw	22
   307  0387  344F               	retlw	79
   308  0388  341E               	retlw	30
   309  0389  3450               	retlw	80
   310  038A  3426               	retlw	38
   311  038B  3451               	retlw	81
   312  038C  3425               	retlw	37
   313  038D  3453               	retlw	83
   314  038E  342E               	retlw	46
   315  038F  3456               	retlw	86
   316  0390  3436               	retlw	54
   317  0391  3457               	retlw	87
   318  0392  343D               	retlw	61
   319  0393  345C               	retlw	92
   320  0394  343E               	retlw	62
   321  0395  345E               	retlw	94
   322  0396  3446               	retlw	70
   323  0397  345F               	retlw	95
   324  0398  3445               	retlw	69
   325  0399  3460               	retlw	96
   326  039A  344E               	retlw	78
   327  039B  3461               	retlw	97
   328  039C  3455               	retlw	85
   329  039D  3462               	retlw	98
   330  039E  345D               	retlw	93
   331  039F  3463               	retlw	99
   332  03A0  344C               	retlw	76
   333  03A1  3467               	retlw	103
   334  03A2  3452               	retlw	82
   335  03A3  3468               	retlw	104
   336  03A4  3441               	retlw	65
   337  03A5  346A               	retlw	106
   338  03A6  3449               	retlw	73
   339  03A7  346D               	retlw	109
   340  03A8  344A               	retlw	74
   341  03A9  346E               	retlw	110
   342  03AA  340E               	retlw	14
   343  03AB  3448               	retlw	72
   344  03AC  3454               	retlw	84
   345  03AD  3464               	retlw	100
   346  03AE  345B               	retlw	91
   347  03AF  3465               	retlw	101
   348  03B0                     __end_of_replaceOnShiftKeyDown:	
   349  03B0                     _replaceTwoBytesCodes:	
   350  03B0  3411               	retlw	17
   351  03B1  3408               	retlw	8
   352  03B2  3414               	retlw	20
   353  03B3  3413               	retlw	19
   354  03B4  3470               	retlw	112
   355  03B5  3417               	retlw	23
   356  03B6  346C               	retlw	108
   357  03B7  3418               	retlw	24
   358  03B8  347D               	retlw	125
   359  03B9  3419               	retlw	25
   360  03BA  3471               	retlw	113
   361  03BB  341F               	retlw	31
   362  03BC  3469               	retlw	105
   363  03BD  3420               	retlw	32
   364  03BE  347A               	retlw	122
   365  03BF  3427               	retlw	39
   366  03C0  3475               	retlw	117
   367  03C1  3428               	retlw	40
   368  03C2  346B               	retlw	107
   369  03C3  342F               	retlw	47
   370  03C4  3472               	retlw	114
   371  03C5  3430               	retlw	48
   372  03C6  3474               	retlw	116
   373  03C7  3437               	retlw	55
   374  03C8  344A               	retlw	74
   375  03C9  3438               	retlw	56
   376  03CA  345A               	retlw	90
   377  03CB  3439               	retlw	57
   378  03CC                     __end_of_replaceTwoBytesCodes:	
   379  03CC                     _deviceLogic:	
   380  03CC  34F2               	retlw	242
   381  03CD  34FF               	retlw	255
   382  03CE  34AA               	retlw	170
   383  03CF  34F4               	retlw	244
   384  03D0  34E8               	retlw	232
   385  03D1  34F3               	retlw	243
   386  03D2  343C               	retlw	60
   387  03D3  3400               	retlw	0
   388  03D4  34AA               	retlw	170
   389  03D5                     __end_of_deviceLogic:	
   390  03D5                     _replaceOnDelayKeyDown:	
   391  03D5  341F               	retlw	31
   392  03D6  3454               	retlw	84
   393  03D7  345B               	retlw	91
   394  03D8  3463               	retlw	99
   395  03D9  3464               	retlw	100
   396  03DA  3465               	retlw	101
   397  03DB  3448               	retlw	72
   398  03DC  345D               	retlw	93
   399  03DD                     __end_of_replaceOnDelayKeyDown:	
   400  03DD                     _deviceLogicMax:	
   401  03DD  3409               	retlw	9
   402  03DE                     __end_of_deviceLogicMax:	
   403  03DE                     _deviceLogicMouseIndex:	
   404  03DE  3403               	retlw	3
   405  03DF                     __end_of_deviceLogicMouseIndex:	
   406  03DF                     _importantKeys:	
   407  03DF  3412               	retlw	18
   408  03E0  3459               	retlw	89
   409  03E1  3414               	retlw	20
   410  03E2  3413               	retlw	19
   411  03E3  3411               	retlw	17
   412  03E4  3408               	retlw	8
   413  03E5                     __end_of_importantKeys:	
   414  03E5                     _kempstonMouseKeys:	
   415  03E5  346B               	retlw	107
   416  03E6  3474               	retlw	116
   417  03E7  3475               	retlw	117
   418  03E8  3472               	retlw	114
   419  03E9  3473               	retlw	115
   420  03EA  3404               	retlw	4
   421  03EB                     __end_of_kempstonMouseKeys:	
   422  0005                     _PORTA	set	5
   423  0018                     _RCSTA	set	24
   424  001F                     _CMCON	set	31
   425  0017                     _CCP1CON	set	23
   426  0016                     _CCPR1H	set	22
   427  0015                     _CCPR1L	set	21
   428  0010                     _T1CON	set	16
   429  0011                     _TMR2	set	17
   430  000F                     _TMR1H	set	15
   431  000E                     _TMR1L	set	14
   432  0006                     _PORTB	set	6
   433  0001                     _TMR0	set	1
   434  00C7                     _SPEN	set	199
   435  0060                     _TMR1IF	set	96
   436  0061                     _TMR2IF	set	97
   437  0062                     _CCP1IF	set	98
   438  0064                     _TXIF	set	100
   439  0065                     _RCIF	set	101
   440  0066                     _CMIF	set	102
   441  0067                     _EEIF	set	103
   442  0058                     _RBIF	set	88
   443  0059                     _INTF	set	89
   444  005B                     _RBIE	set	91
   445  005C                     _INTE	set	92
   446  005E                     _PEIE	set	94
   447  005F                     _GIE	set	95
   448  0029                     _RA1	set	41
   449  002A                     _RA2	set	42
   450  0028                     _RA0	set	40
   451  002C                     _RA4	set	44
   452  002B                     _RA3	set	43
   453  005A                     _T0IF	set	90
   454  005D                     _T0IE	set	93
   455  0086                     _TRISB	set	134
   456  0098                     _TXSTA	set	152
   457  009F                     _VRCON	set	159
   458  0085                     _TRISA	set	133
   459  0408                     _PS0	set	1032
   460  0409                     _PS1	set	1033
   461  040A                     _PS2	set	1034
   462  040B                     _PSA	set	1035
   463  040C                     _T0SE	set	1036
   464  040D                     _T0CS	set	1037
   465  040E                     _INTEDG	set	1038
   466  040F                     _nRBPU	set	1039
   467  0460                     _TMR1IE	set	1120
   468  0461                     _TMR2IE	set	1121
   469  0462                     _CCP1IE	set	1122
   470  0464                     _TXIE	set	1124
   471  0465                     _RCIE	set	1125
   472  0466                     _CMIE	set	1126
   473  0467                     _EEIE	set	1127
   474                           
   475                           	psect	cinit
   476  000D                     start_initialization:	
   477                           ; #config settings
   478                           
   479  000D                     __initialization:	
   480                           
   481                           ; Initialize objects allocated to BANK0
   482  000D  2270               	fcall	__pidataBANK0	;fetch initializer
   483  000E  00D9               	movwf	__pdataBANK0& (0+127)
   484  000F  2271               	fcall	__pidataBANK0+1	;fetch initializer
   485  0010  00DA               	movwf	(__pdataBANK0+1)& (0+127)
   486  0011  2272               	fcall	__pidataBANK0+2	;fetch initializer
   487  0012  00DB               	movwf	(__pdataBANK0+2)& (0+127)
   488  0013  2273               	fcall	__pidataBANK0+3	;fetch initializer
   489  0014  00DC               	movwf	(__pdataBANK0+3)& (0+127)
   490  0015  2274               	fcall	__pidataBANK0+4	;fetch initializer
   491  0016  00DD               	movwf	(__pdataBANK0+4)& (0+127)
   492  0017  2275               	fcall	__pidataBANK0+5	;fetch initializer
   493  0018  00DE               	movwf	(__pdataBANK0+5)& (0+127)
   494  0019  2276               	fcall	__pidataBANK0+6	;fetch initializer
   495  001A  00DF               	movwf	(__pdataBANK0+6)& (0+127)
   496  001B  2277               	fcall	__pidataBANK0+7	;fetch initializer
   497  001C  00E0               	movwf	(__pdataBANK0+7)& (0+127)
   498  001D  2278               	fcall	__pidataBANK0+8	;fetch initializer
   499  001E  00E1               	movwf	(__pdataBANK0+8)& (0+127)
   500  001F  2279               	fcall	__pidataBANK0+9	;fetch initializer
   501  0020  00E2               	movwf	(__pdataBANK0+9)& (0+127)
   502  0021  227A               	fcall	__pidataBANK0+10	;fetch initializer
   503  0022  00E3               	movwf	(__pdataBANK0+10)& (0+127)
   504  0023  227B               	fcall	__pidataBANK0+11	;fetch initializer
   505  0024  00E4               	movwf	(__pdataBANK0+11)& (0+127)
   506                           
   507                           ; Clear objects allocated to BANK1
   508  0025  1383               	bcf	3,7	;select IRP bank0
   509  0026  30A0               	movlw	low __pbssBANK1
   510  0027  0084               	movwf	4
   511  0028  30BA               	movlw	low (__pbssBANK1+26)
   512  0029  227C               	fcall	clear_ram0
   513                           
   514                           ; Clear objects allocated to BANK0
   515  002A  3044               	movlw	low __pbssBANK0
   516  002B  0084               	movwf	4
   517  002C  3059               	movlw	low (__pbssBANK0+21)
   518  002D  227C               	fcall	clear_ram0
   519                           
   520                           ; Clear objects allocated to COMMON
   521  002E  307A               	movlw	low __pbssCOMMON
   522  002F  0084               	movwf	4
   523  0030  307E               	movlw	low (__pbssCOMMON+4)
   524  0031  227C               	fcall	clear_ram0
   525  0032                     end_of_initialization:	
   526                           ;End of C runtime variable initialization code
   527                           
   528  0032                     __end_of__initialization:	
   529  0032  0183               	clrf	3
   530  0033  2834               	ljmp	_main	;jump to C main() function
   531                           
   532                           	psect	bssCOMMON
   533  007A                     __pbssCOMMON:	
   534  007A                     _ps2Device:	
   535  007A                     	ds	1
   536  007B                     _ps2BitsCount:	
   537  007B                     	ds	1
   538  007C                     _ps2Bits:	
   539  007C                     	ds	1
   540  007D                     _ps2DataState:	
   541  007D                     	ds	1
   542                           
   543                           	psect	bssBANK0
   544  0044                     __pbssBANK0:	
   545  0044                     _kempstonMouseCounterA:	
   546  0044                     	ds	2
   547  0046                     _kempstonMouseEmulatorDelay:	
   548  0046                     	ds	2
   549  0048                     _delay:	
   550  0048                     	ds	2
   551  004A                     _deviceLogicDelay:	
   552  004A                     	ds	2
   553  004C                     _delayedKey:	
   554  004C                     	ds	1
   555  004D                     _replaced:	
   556  004D                     	ds	1
   557  004E                     _numLock:	
   558  004E                     	ds	1
   559  004F                     _needSave:	
   560  004F                     	ds	1
   561  0050                     _kempstonMouseCounterC:	
   562  0050                     	ds	1
   563  0051                     _kempstonMouseCounterB:	
   564  0051                     	ds	1
   565  0052                     _deviceLogicDevice:	
   566  0052                     	ds	1
   567  0053                     _deviceLogicState:	
   568  0053                     	ds	1
   569  0054                     _deviceLogicCommand:	
   570  0054                     	ds	1
   571  0055                     _deviceLogicIndex:	
   572  0055                     	ds	1
   573  0056                     _ps2Parity:	
   574  0056                     	ds	1
   575  0057                     _shift_ctrl_alt:	
   576  0057                     	ds	1
   577  0058                     _kempstonMouseEmulatorKeys:	
   578  0058                     	ds	1
   579                           
   580                           	psect	dataBANK0
   581  0059                     __pdataBANK0:	
   582  0059                     _outPorts:	
   583  0059                     	ds	11
   584  0064                     _ps2DeviceMain:	
   585  0064                     	ds	1
   586                           
   587                           	psect	bssBANK1
   588  00A0                     __pbssBANK1:	
   589  00A0                     _devices:	
   590  00A0                     	ds	26
   591                           
   592                           	psect	clrtext
   593  027C                     clear_ram0:	
   594                           ;	Called with FSR containing the base address, and
   595                           ;	W with the last address+1
   596                           
   597  027C  0064               	clrwdt	;clear the watchdog before getting into this loop
   598  027D                     clrloop0:	
   599  027D  0180               	clrf	0	;clear RAM location pointed to by FSR
   600  027E  0A84               	incf	4,f	;increment pointer
   601  027F  0604               	xorwf	4,w	;XOR with final address
   602  0280  1903               	btfsc	3,2	;have we reached the end yet?
   603  0281  3400               	retlw	0	;all done for this memory range, return
   604  0282  0604               	xorwf	4,w	;XOR again to restore value
   605  0283  2A7D               	goto	clrloop0	;do the next byte
   606                           
   607                           	psect	cstackCOMMON
   608  0070                     __pcstackCOMMON:	
   609  0070                     ?_myIsr:	
   610  0070                     ?_myDelay:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_sendDataToAltera:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_deviceDataInit:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_deviceDataUpdateKeyboard:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_deviceDataUpdateMouse:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_main:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?i1___bmul:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     i1___bmul@multiplicand:	
   632                           ; 1 bytes @ 0x0
   633                           
   634                           
   635                           ; 1 bytes @ 0x0
   636  0070                     	ds	1
   637  0071                     ??i1___bmul:	
   638                           
   639                           ; 1 bytes @ 0x1
   640  0071                     	ds	1
   641  0072                     i1___bmul@multiplier:	
   642                           
   643                           ; 1 bytes @ 0x2
   644  0072                     	ds	1
   645  0073                     i1___bmul@product:	
   646                           
   647                           ; 1 bytes @ 0x3
   648  0073                     	ds	1
   649  0074                     ??_myIsr:	
   650                           
   651                           ; 1 bytes @ 0x4
   652  0074                     	ds	5
   653  0079                     myIsr@device:	
   654                           
   655                           ; 1 bytes @ 0x9
   656  0079                     	ds	1
   657                           
   658                           	psect	cstackBANK0
   659  0020                     __pcstackBANK0:	
   660  0020                     ?_send:	
   661  0020                     ?_updatePort:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0020                     ?_calculateBitsFromTable:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0020                     ??_myDelay:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0020                     ??_sendDataToAltera:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0020                     ??_deviceDataInit:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0020                     ??_deviceDataUpdateMouse:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0020                     ?___bmul:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0020                     send@byte:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0020                     updatePort@set:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0020                     calculateBitsFromTable@keyDown:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0020                     deviceDataInit@device:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0020                     ___bmul@multiplicand:	
   695                           ; 1 bytes @ 0x0
   696                           
   697                           
   698                           ; 1 bytes @ 0x0
   699  0020                     	ds	1
   700  0021                     ??_send:	
   701  0021                     ??_updatePort:	
   702                           ; 1 bytes @ 0x1
   703                           
   704  0021                     ??___bmul:	
   705                           ; 1 bytes @ 0x1
   706                           
   707  0021                     calculateBitsFromTable@bits:	
   708                           ; 1 bytes @ 0x1
   709                           
   710                           
   711                           ; 1 bytes @ 0x1
   712  0021                     	ds	1
   713  0022                     send@device:	
   714  0022                     calculateBitsFromTable@table:	
   715                           ; 1 bytes @ 0x2
   716                           
   717  0022                     deviceDataUpdateMouse@code:	
   718                           ; 1 bytes @ 0x2
   719                           
   720  0022                     ___bmul@product:	
   721                           ; 1 bytes @ 0x2
   722                           
   723  0022                     _sendDataToAltera$161:	
   724                           ; 1 bytes @ 0x2
   725                           
   726                           
   727                           ; 2 bytes @ 0x2
   728  0022                     	ds	1
   729  0023                     send@i:	
   730  0023                     calculateBitsFromTable@count:	
   731                           ; 1 bytes @ 0x3
   732                           
   733  0023                     deviceDataUpdateMouse@j:	
   734                           ; 1 bytes @ 0x3
   735                           
   736  0023                     ___bmul@multiplier:	
   737                           ; 1 bytes @ 0x3
   738                           
   739                           
   740                           ; 1 bytes @ 0x3
   741  0023                     	ds	1
   742  0024                     send@j:	
   743  0024                     updatePort@a:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0024                     calculateBitsFromTable@clearIfFound:	
   747                           ; 1 bytes @ 0x4
   748                           
   749  0024                     sendDataToAltera@i:	
   750                           ; 1 bytes @ 0x4
   751                           
   752  0024                     deviceDataUpdateMouse@device:	
   753                           ; 1 bytes @ 0x4
   754                           
   755                           
   756                           ; 1 bytes @ 0x4
   757  0024                     	ds	1
   758  0025                     ??_calculateBitsFromTable:	
   759  0025                     updatePort@bit_id:	
   760                           ; 1 bytes @ 0x5
   761                           
   762                           
   763                           ; 1 bytes @ 0x5
   764  0025                     	ds	1
   765  0026                     ?_updateKey:	
   766  0026                     updateKey@down:	
   767                           ; 1 bytes @ 0x6
   768                           
   769                           
   770                           ; 1 bytes @ 0x6
   771  0026                     	ds	1
   772  0027                     ??_updateKey:	
   773  0027                     calculateBitsFromTable@keyCode:	
   774                           ; 1 bytes @ 0x7
   775                           
   776                           
   777                           ; 1 bytes @ 0x7
   778  0027                     	ds	1
   779  0028                     calculateBitsFromTable@i:	
   780  0028                     updateKey@localShift:	
   781                           ; 1 bytes @ 0x8
   782                           
   783                           
   784                           ; 1 bytes @ 0x8
   785  0028                     	ds	1
   786  0029                     _updateKey$154:	
   787                           
   788                           ; 1 bytes @ 0x9
   789  0029                     	ds	1
   790  002A                     updateKey@localCtrl:	
   791                           
   792                           ; 1 bytes @ 0xA
   793  002A                     	ds	1
   794  002B                     updateKey@key:	
   795                           
   796                           ; 1 bytes @ 0xB
   797  002B                     	ds	1
   798  002C                     updateKey@code:	
   799                           
   800                           ; 1 bytes @ 0xC
   801  002C                     	ds	1
   802  002D                     ?_processKeyCode:	
   803  002D                     processKeyCode@keyDown:	
   804                           ; 1 bytes @ 0xD
   805                           
   806                           
   807                           ; 1 bytes @ 0xD
   808  002D                     	ds	1
   809  002E                     ??_processKeyCode:	
   810                           
   811                           ; 1 bytes @ 0xE
   812  002E                     	ds	5
   813  0033                     processKeyCode@i_167:	
   814                           
   815                           ; 1 bytes @ 0x13
   816  0033                     	ds	1
   817  0034                     processKeyCode@i:	
   818                           
   819                           ; 1 bytes @ 0x14
   820  0034                     	ds	1
   821  0035                     processKeyCode@keyCode:	
   822                           
   823                           ; 1 bytes @ 0x15
   824  0035                     	ds	1
   825  0036                     ??_deviceDataUpdateKeyboard:	
   826                           
   827                           ; 1 bytes @ 0x16
   828  0036                     	ds	2
   829  0038                     _deviceDataUpdateKeyboard$187:	
   830                           
   831                           ; 2 bytes @ 0x18
   832  0038                     	ds	2
   833  003A                     deviceDataUpdateKeyboard@i:	
   834                           
   835                           ; 1 bytes @ 0x1A
   836  003A                     	ds	1
   837  003B                     deviceDataUpdateKeyboard@code:	
   838                           
   839                           ; 1 bytes @ 0x1B
   840  003B                     	ds	1
   841  003C                     deviceDataUpdateKeyboard@device:	
   842                           
   843                           ; 1 bytes @ 0x1C
   844  003C                     	ds	1
   845  003D                     ??_main:	
   846                           
   847                           ; 1 bytes @ 0x1D
   848  003D                     	ds	2
   849  003F                     main@i:	
   850                           
   851                           ; 1 bytes @ 0x1F
   852  003F                     	ds	1
   853  0040                     main@j:	
   854                           
   855                           ; 1 bytes @ 0x20
   856  0040                     	ds	1
   857  0041                     main@code:	
   858                           
   859                           ; 1 bytes @ 0x21
   860  0041                     	ds	1
   861  0042                     main@i_208:	
   862                           
   863                           ; 1 bytes @ 0x22
   864  0042                     	ds	1
   865  0043                     main@device:	
   866                           
   867                           ; 1 bytes @ 0x23
   868  0043                     	ds	1
   869                           
   870                           	psect	maintext
   871  0034                     __pmaintext:	
   872 ;;
   873 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   874 ;;
   875 ;; *************** function _main *****************
   876 ;; Defined at:
   877 ;;		line 486 in file "main.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;  j               1   32[BANK0 ] unsigned char 
   882 ;;  device          1   35[BANK0 ] PTR struct PS2DeviceData
   883 ;;		 -> devices(26), 
   884 ;;  i               1   34[BANK0 ] unsigned char 
   885 ;;  i               1   31[BANK0 ] char 
   886 ;;  code            1   33[BANK0 ] unsigned char 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : B00/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   896 ;;      Params:         0       0       0       0
   897 ;;      Locals:         0       5       0       0
   898 ;;      Temps:          0       2       0       0
   899 ;;      Totals:         0       7       0       0
   900 ;;Total ram usage:        7 bytes
   901 ;; Hardware stack levels required when called:    6
   902 ;; This function calls:
   903 ;;		___bmul
   904 ;;		_deviceDataInit
   905 ;;		_deviceDataUpdateKeyboard
   906 ;;		_deviceDataUpdateMouse
   907 ;;		_send
   908 ;;		_sendDataToAltera
   909 ;;		_updateKey
   910 ;;		_updatePort
   911 ;; This function is called by:
   912 ;;		Startup code after reset
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _main
   918  0034                     _main:	
   919                           
   920                           ;main.c: 489:     deviceDataInit(&devices[0]);
   921                           
   922                           ;incstack = 0
   923                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   924  0034  30A0               	movlw	(low (_devices| 0))& (0+255)
   925  0035  27D3               	fcall	_deviceDataInit
   926                           
   927                           ;main.c: 490:     deviceDataInit(&devices[1]);
   928  0036  30AD               	movlw	(low ((_devices| 0+13)))& (0+255)
   929  0037  27D3               	fcall	_deviceDataInit
   930                           
   931                           ;main.c: 493:     for(int8_t i=0;i<8;i++) {
   932  0038  1283               	bcf	3,5	;RP0=0, select bank0
   933  0039  1303               	bcf	3,6	;RP1=0, select bank0
   934  003A  01BF               	clrf	main@i
   935  003B  083F               	movf	main@i,w
   936  003C  3A80               	xorlw	128
   937  003D  3E78               	addlw	-136
   938  003E  1803               	btfsc	3,0
   939  003F  284E               	goto	l2086
   940  0040                     l2080:	
   941                           
   942                           ;main.c: 494:         outPorts[i] = 0;
   943  0040  083F               	movf	main@i,w
   944  0041  3E59               	addlw	(low (_outPorts| 0))& (0+255)
   945  0042  0084               	movwf	4
   946  0043  1383               	bcf	3,7	;select IRP bank0
   947  0044  0180               	clrf	0
   948                           
   949                           ;main.c: 495:     }
   950  0045  3001               	movlw	1
   951  0046  00BD               	movwf	??_main
   952  0047  083D               	movf	??_main,w
   953  0048  07BF               	addwf	main@i,f
   954  0049  083F               	movf	main@i,w
   955  004A  3A80               	xorlw	128
   956  004B  3E78               	addlw	-136
   957  004C  1C03               	skipc
   958  004D  2840               	goto	l2080
   959  004E                     l2086:	
   960                           
   961                           ;main.c: 496:     outPorts[8] = 0x07;
   962  004E  3007               	movlw	7
   963  004F  00BD               	movwf	??_main
   964  0050  083D               	movf	??_main,w
   965  0051  00E1               	movwf	_outPorts+8
   966                           
   967                           ;main.c: 497:     outPorts[9] = 0xF5;
   968  0052  30F5               	movlw	245
   969  0053  00BD               	movwf	??_main
   970  0054  083D               	movf	??_main,w
   971  0055  00E2               	movwf	_outPorts+9
   972                           
   973                           ;main.c: 498:     outPorts[10] = 0xDA;
   974  0056  30DA               	movlw	218
   975  0057  00BD               	movwf	??_main
   976  0058  083D               	movf	??_main,w
   977  0059  00E3               	movwf	_outPorts+10
   978                           
   979                           ;main.c: 499:     sendDataToAltera();
   980  005A  2744               	fcall	_sendDataToAltera
   981                           
   982                           ;main.c: 504:     GIE = 1;
   983  005B  178B               	bsf	11,7	;volatile
   984                           
   985                           ;main.c: 505:     PEIE = 0;
   986  005C  130B               	bcf	11,6	;volatile
   987                           
   988                           ;main.c: 506:     T0IE = 1;
   989  005D  168B               	bsf	11,5	;volatile
   990                           
   991                           ;main.c: 507:     INTE = 0;
   992  005E  120B               	bcf	11,4	;volatile
   993                           
   994                           ;main.c: 508:     RBIE = 0;
   995  005F  118B               	bcf	11,3	;volatile
   996                           
   997                           ;main.c: 509:     T0IF = 0;
   998  0060  110B               	bcf	11,2	;volatile
   999                           
  1000                           ;main.c: 510:     INTF = 0;
  1001  0061  108B               	bcf	11,1	;volatile
  1002                           
  1003                           ;main.c: 511:     RBIF = 0;
  1004  0062  100B               	bcf	11,0	;volatile
  1005                           
  1006                           ;main.c: 514:     EEIF = 0;
  1007  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1008  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1009  0065  138C               	bcf	12,7	;volatile
  1010                           
  1011                           ;main.c: 515:     CMIF = 0;
  1012  0066  130C               	bcf	12,6	;volatile
  1013                           
  1014                           ;main.c: 516:     RCIF = 0;
  1015  0067  128C               	bcf	12,5	;volatile
  1016                           
  1017                           ;main.c: 517:     TXIF = 0;
  1018  0068  120C               	bcf	12,4	;volatile
  1019                           
  1020                           ;main.c: 518:     CCP1IF = 0;
  1021  0069  110C               	bcf	12,2	;volatile
  1022                           
  1023                           ;main.c: 519:     TMR2IF = 0;
  1024  006A  108C               	bcf	12,1	;volatile
  1025                           
  1026                           ;main.c: 520:     TMR1IF = 0;
  1027  006B  100C               	bcf	12,0	;volatile
  1028                           
  1029                           ;main.c: 523:     EEIE = 0;
  1030  006C  1683               	bsf	3,5	;RP0=1, select bank1
  1031  006D  1303               	bcf	3,6	;RP1=0, select bank1
  1032  006E  138C               	bcf	12,7	;volatile
  1033                           
  1034                           ;main.c: 524:     CMIE = 0;
  1035  006F  130C               	bcf	12,6	;volatile
  1036                           
  1037                           ;main.c: 525:     RCIE = 0;
  1038  0070  128C               	bcf	12,5	;volatile
  1039                           
  1040                           ;main.c: 526:     TXIE = 0;
  1041  0071  120C               	bcf	12,4	;volatile
  1042                           
  1043                           ;main.c: 527:     CCP1IE = 0;
  1044  0072  110C               	bcf	12,2	;volatile
  1045                           
  1046                           ;main.c: 528:     TMR2IE = 0;
  1047  0073  108C               	bcf	12,1	;volatile
  1048                           
  1049                           ;main.c: 529:     TMR1IE = 0;
  1050  0074  100C               	bcf	12,0	;volatile
  1051                           
  1052                           ;main.c: 532:     nRBPU = 1;
  1053  0075  1781               	bsf	1,7	;volatile
  1054                           
  1055                           ;main.c: 533:     INTEDG = 0;
  1056  0076  1301               	bcf	1,6	;volatile
  1057                           
  1058                           ;main.c: 534:     T0CS = 1;
  1059  0077  1681               	bsf	1,5	;volatile
  1060                           
  1061                           ;main.c: 535:     T0SE = 1;
  1062  0078  1601               	bsf	1,4	;volatile
  1063                           
  1064                           ;main.c: 536:     PSA = 1;
  1065  0079  1581               	bsf	1,3	;volatile
  1066                           
  1067                           ;main.c: 537:     PS2 = 0;
  1068  007A  1101               	bcf	1,2	;volatile
  1069                           
  1070                           ;main.c: 538:     PS1 = 0;
  1071  007B  1081               	bcf	1,1	;volatile
  1072                           
  1073                           ;main.c: 539:     PS0 = 0;
  1074  007C  1001               	bcf	1,0	;volatile
  1075                           
  1076                           ;main.c: 542:     TMR0 = 255;
  1077  007D  30FF               	movlw	255
  1078  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1079  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1080  0080  0081               	movwf	1	;volatile
  1081                           
  1082                           ;main.c: 543:     TMR1L = 0;
  1083  0081  018E               	clrf	14	;volatile
  1084                           
  1085                           ;main.c: 544:     TMR1H = 0;
  1086  0082  018F               	clrf	15	;volatile
  1087                           
  1088                           ;main.c: 545:     TMR2 = 0;
  1089  0083  0191               	clrf	17	;volatile
  1090                           
  1091                           ;main.c: 546:     T1CON = 6;
  1092  0084  3006               	movlw	6
  1093  0085  0090               	movwf	16	;volatile
  1094                           
  1095                           ;main.c: 547:     CCPR1L = 0;
  1096  0086  0195               	clrf	21	;volatile
  1097                           
  1098                           ;main.c: 548:     CCPR1H = 0;
  1099  0087  0196               	clrf	22	;volatile
  1100                           
  1101                           ;main.c: 549:     CCP1CON = 0;
  1102  0088  0197               	clrf	23	;volatile
  1103                           
  1104                           ;main.c: 550:     CMCON = 7;
  1105  0089  3007               	movlw	7
  1106  008A  009F               	movwf	31	;volatile
  1107                           
  1108                           ;main.c: 551:     VRCON = 0;
  1109  008B  1683               	bsf	3,5	;RP0=1, select bank1
  1110  008C  1303               	bcf	3,6	;RP1=0, select bank1
  1111  008D  019F               	clrf	31	;volatile
  1112                           
  1113                           ;main.c: 552:     RCSTA = 0;
  1114  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1115  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1116  0090  0198               	clrf	24	;volatile
  1117                           
  1118                           ;main.c: 553:     TXSTA = 128;
  1119  0091  3080               	movlw	128
  1120  0092  1683               	bsf	3,5	;RP0=1, select bank1
  1121  0093  1303               	bcf	3,6	;RP1=0, select bank1
  1122  0094  0098               	movwf	24	;volatile
  1123                           
  1124                           ;main.c: 554:     SPEN = 0;
  1125  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1126  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0097  1398               	bcf	24,7	;volatile
  1128                           
  1129                           ;main.c: 559:     TRISA = 0b11111001;
  1130  0098  30F9               	movlw	249
  1131  0099  1683               	bsf	3,5	;RP0=1, select bank1
  1132  009A  1303               	bcf	3,6	;RP1=0, select bank1
  1133  009B  0085               	movwf	5	;volatile
  1134                           
  1135                           ;main.c: 560:     PORTA = 0;
  1136  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1137  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1138  009E  0185               	clrf	5	;volatile
  1139                           
  1140                           ;main.c: 563:     TRISB = 0;
  1141  009F  1683               	bsf	3,5	;RP0=1, select bank1
  1142  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  1143  00A1  0186               	clrf	6	;volatile
  1144                           
  1145                           ;main.c: 564:     PORTB = 0xFF;
  1146  00A2  30FF               	movlw	255
  1147  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1148  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1149  00A5  0086               	movwf	6	;volatile
  1150                           
  1151                           ;main.c: 567:     delay = 0;
  1152  00A6  01C8               	clrf	_delay
  1153  00A7  01C9               	clrf	_delay+1
  1154                           
  1155                           ;main.c: 568:     delayedKey = 0;
  1156  00A8  01CC               	clrf	_delayedKey
  1157                           
  1158                           ;main.c: 569:     shift_ctrl_alt = 0;
  1159  00A9  01D7               	clrf	_shift_ctrl_alt
  1160                           
  1161                           ;main.c: 570:     replaced = 0;
  1162  00AA  01CD               	clrf	_replaced
  1163                           
  1164                           ;main.c: 572:     deviceLogicDelay = 0;
  1165  00AB  01CA               	clrf	_deviceLogicDelay
  1166  00AC  01CB               	clrf	_deviceLogicDelay+1
  1167                           
  1168                           ;main.c: 573:     deviceLogicIndex = 0;
  1169  00AD  01D5               	clrf	_deviceLogicIndex
  1170                           
  1171                           ;main.c: 574:     deviceLogicState = 0;
  1172  00AE  01D3               	clrf	_deviceLogicState
  1173                           
  1174                           ;main.c: 575:     deviceLogicDevice = 3;
  1175  00AF  3003               	movlw	3
  1176  00B0  00BD               	movwf	??_main
  1177  00B1  083D               	movf	??_main,w
  1178  00B2  00D2               	movwf	_deviceLogicDevice
  1179                           
  1180                           ;main.c: 577:     kempstonMouseCounterA = 0;
  1181  00B3  01C4               	clrf	_kempstonMouseCounterA
  1182  00B4  01C5               	clrf	_kempstonMouseCounterA+1
  1183                           
  1184                           ;main.c: 578:     kempstonMouseCounterB = 0;
  1185  00B5  01D1               	clrf	_kempstonMouseCounterB
  1186                           
  1187                           ;main.c: 579:     kempstonMouseCounterC = 0;
  1188  00B6  01D0               	clrf	_kempstonMouseCounterC
  1189  00B7                     l2206:	
  1190                           ;main.c: 581:     uint8_t code;;main.c: 583:     while(1)
  1191                           
  1192                           
  1193                           ;main.c: 584:     {;main.c: 585:         needSave = 0;
  1194  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1195  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1196  00B9  01CF               	clrf	_needSave
  1197                           
  1198                           ;main.c: 587:         for(uint8_t i = 0; i < 2; i++) {
  1199  00BA  01C2               	clrf	main@i_208
  1200  00BB  3002               	movlw	2
  1201  00BC  0242               	subwf	main@i_208,w
  1202  00BD  1803               	btfsc	3,0
  1203  00BE  29F5               	goto	l2332
  1204  00BF                     l2214:	
  1205                           
  1206                           ;main.c: 588:             struct PS2DeviceData* device = &devices[i];
  1207  00BF  300D               	movlw	13
  1208  00C0  00BD               	movwf	??_main
  1209  00C1  083D               	movf	??_main,w
  1210  00C2  00A0               	movwf	___bmul@multiplicand
  1211  00C3  0842               	movf	main@i_208,w
  1212  00C4  27EB               	fcall	___bmul
  1213  00C5  3EA0               	addlw	(low (_devices| 0))& (0+255)
  1214  00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1215  00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1216  00C8  00BE               	movwf	??_main+1
  1217  00C9  083E               	movf	??_main+1,w
  1218  00CA  00C3               	movwf	main@device
  1219                           
  1220                           ;main.c: 590:             if ( device->readDataPos != device->inDataPos && device->inDat
      +                          a[device->readDataPos] == 0xaa ) {
  1221  00CB  0843               	movf	main@device,w
  1222  00CC  3E03               	addlw	3
  1223  00CD  0084               	movwf	4
  1224  00CE  1383               	bcf	3,7	;select IRP bank0
  1225  00CF  0800               	movf	0,w
  1226  00D0  00BD               	movwf	??_main
  1227  00D1  0843               	movf	main@device,w
  1228  00D2  3E04               	addlw	4
  1229  00D3  0084               	movwf	4
  1230  00D4  0800               	movf	0,w
  1231  00D5  063D               	xorwf	??_main,w
  1232  00D6  1903               	skipnz
  1233  00D7  28EB               	goto	l2222
  1234  00D8  0843               	movf	main@device,w
  1235  00D9  3E04               	addlw	4
  1236  00DA  0084               	movwf	4
  1237  00DB  0800               	movf	0,w
  1238  00DC  3E05               	addlw	5
  1239  00DD  0743               	addwf	main@device,w
  1240  00DE  00BD               	movwf	??_main
  1241  00DF  083D               	movf	??_main,w
  1242  00E0  0084               	movwf	4
  1243  00E1  30AA               	movlw	170
  1244  00E2  0600               	xorwf	0,w
  1245  00E3  1D03               	btfss	3,2
  1246  00E4  28EB               	goto	l2222
  1247                           
  1248                           ;main.c: 591:                 device->deviceMode = 3;
  1249  00E5  3003               	movlw	3
  1250  00E6  00BD               	movwf	??_main
  1251  00E7  0843               	movf	main@device,w
  1252  00E8  0084               	movwf	4
  1253  00E9  083D               	movf	??_main,w
  1254  00EA  0080               	movwf	0
  1255  00EB                     l2222:	
  1256                           ;main.c: 592:             }
  1257                           
  1258                           
  1259                           ;main.c: 594:             if ( device->deviceMode == 1 ) {
  1260  00EB  0843               	movf	main@device,w
  1261  00EC  0084               	movwf	4
  1262  00ED  0300               	decf	0,w
  1263  00EE  1D03               	btfss	3,2
  1264  00EF  28F3               	goto	l2226
  1265                           
  1266                           ;main.c: 595:                 deviceDataUpdateKeyboard(device);
  1267  00F0  0843               	movf	main@device,w
  1268  00F1  2603               	fcall	_deviceDataUpdateKeyboard
  1269                           
  1270                           ;main.c: 596:             } else if ( device->deviceMode == 2 ) {
  1271  00F2  29EB               	goto	l2328
  1272  00F3                     l2226:	
  1273  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1274  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1275  00F5  0843               	movf	main@device,w
  1276  00F6  0084               	movwf	4
  1277  00F7  3002               	movlw	2
  1278  00F8  1383               	bcf	3,7	;select IRP bank0
  1279  00F9  0600               	xorwf	0,w
  1280  00FA  1D03               	btfss	3,2
  1281  00FB  28FF               	goto	l2230
  1282                           
  1283                           ;main.c: 597:                 deviceDataUpdateMouse(device);
  1284  00FC  0843               	movf	main@device,w
  1285  00FD  2563               	fcall	_deviceDataUpdateMouse
  1286                           
  1287                           ;main.c: 598:             } else if ( device->deviceMode == 3 && (deviceLogicDevice == 3
      +                           || deviceLogicDevice == i) ) {
  1288  00FE  29EB               	goto	l2328
  1289  00FF                     l2230:	
  1290  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1291  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1292  0101  0843               	movf	main@device,w
  1293  0102  0084               	movwf	4
  1294  0103  3003               	movlw	3
  1295  0104  1383               	bcf	3,7	;select IRP bank0
  1296  0105  0600               	xorwf	0,w
  1297  0106  1D03               	btfss	3,2
  1298  0107  29E0               	goto	l2326
  1299  0108  3003               	movlw	3
  1300  0109  0652               	xorwf	_deviceLogicDevice,w
  1301  010A  1903               	btfsc	3,2
  1302  010B  2910               	goto	l2236
  1303  010C  0852               	movf	_deviceLogicDevice,w
  1304  010D  0642               	xorwf	main@i_208,w
  1305  010E  1D03               	skipz
  1306  010F  29E0               	goto	l2326
  1307  0110                     l2236:	
  1308                           
  1309                           ;main.c: 600:                 deviceLogicDelay++;
  1310  0110  3001               	movlw	1
  1311  0111  07CA               	addwf	_deviceLogicDelay,f
  1312  0112  1803               	skipnc
  1313  0113  0ACB               	incf	_deviceLogicDelay+1,f
  1314  0114  3000               	movlw	0
  1315  0115  07CB               	addwf	_deviceLogicDelay+1,f
  1316                           
  1317                           ;main.c: 601:                 if ( deviceLogicDelay > 333 ) {
  1318  0116  3001               	movlw	1
  1319  0117  024B               	subwf	_deviceLogicDelay+1,w
  1320  0118  304E               	movlw	78
  1321  0119  1903               	skipnz
  1322  011A  024A               	subwf	_deviceLogicDelay,w
  1323  011B  1C03               	skipc
  1324  011C  29F5               	goto	l2332
  1325                           
  1326                           ;main.c: 604:                     if ( device->readDataPos != device->inDataPos ) {
  1327  011D  0843               	movf	main@device,w
  1328  011E  3E03               	addlw	3
  1329  011F  0084               	movwf	4
  1330  0120  0800               	movf	0,w
  1331  0121  00BD               	movwf	??_main
  1332  0122  0843               	movf	main@device,w
  1333  0123  3E04               	addlw	4
  1334  0124  0084               	movwf	4
  1335  0125  0800               	movf	0,w
  1336  0126  063D               	xorwf	??_main,w
  1337  0127  1903               	skipnz
  1338  0128  2943               	goto	l2242
  1339                           
  1340                           ;main.c: 605:                         code = device->inData[device->readDataPos];
  1341  0129  0843               	movf	main@device,w
  1342  012A  3E04               	addlw	4
  1343  012B  0084               	movwf	4
  1344  012C  0800               	movf	0,w
  1345  012D  3E05               	addlw	5
  1346  012E  0743               	addwf	main@device,w
  1347  012F  00BD               	movwf	??_main
  1348  0130  083D               	movf	??_main,w
  1349  0131  0084               	movwf	4
  1350  0132  0800               	movf	0,w
  1351  0133  00BE               	movwf	??_main+1
  1352  0134  083E               	movf	??_main+1,w
  1353  0135  00C1               	movwf	main@code
  1354                           
  1355                           ;main.c: 606:                         device->readDataPos = (device->readDataPos + 1) & 
      +                          7;
  1356  0136  0843               	movf	main@device,w
  1357  0137  3E04               	addlw	4
  1358  0138  0084               	movwf	4
  1359  0139  0800               	movf	0,w
  1360  013A  3E01               	addlw	1
  1361  013B  3907               	andlw	7
  1362  013C  00BD               	movwf	??_main
  1363  013D  0843               	movf	main@device,w
  1364  013E  3E04               	addlw	4
  1365  013F  0084               	movwf	4
  1366  0140  083D               	movf	??_main,w
  1367  0141  0080               	movwf	0
  1368                           
  1369                           ;main.c: 607:                     } else code = 0xff;
  1370  0142  2947               	goto	l2244
  1371  0143                     l2242:	
  1372  0143  30FF               	movlw	255
  1373  0144  00BD               	movwf	??_main
  1374  0145  083D               	movf	??_main,w
  1375  0146  00C1               	movwf	main@code
  1376  0147                     l2244:	
  1377                           
  1378                           ;main.c: 610:                     if ( deviceLogicState == 0 ) {
  1379  0147  0853               	movf	_deviceLogicState,w
  1380  0148  1D03               	btfss	3,2
  1381  0149  2954               	goto	l2254
  1382                           
  1383                           ;main.c: 612:                         if ( deviceLogicDevice == 3 ) {
  1384  014A  3003               	movlw	3
  1385  014B  0652               	xorwf	_deviceLogicDevice,w
  1386  014C  1D03               	btfss	3,2
  1387  014D  29DD               	goto	l2322
  1388                           
  1389                           ;main.c: 613:                             deviceLogicDevice = i;
  1390  014E  0842               	movf	main@i_208,w
  1391  014F  00BD               	movwf	??_main
  1392  0150  083D               	movf	??_main,w
  1393  0151  00D2               	movwf	_deviceLogicDevice
  1394                           
  1395                           ;main.c: 614:                             deviceLogicIndex = 0;
  1396  0152  01D5               	clrf	_deviceLogicIndex
  1397  0153  29DB               	goto	l2320
  1398  0154                     l2254:	
  1399                           ;main.c: 618:                     } else if ( deviceLogicState == 1 ) {
  1400                           
  1401                           ;main.c: 616:                         }
  1402                           
  1403                           ;main.c: 615:                             deviceLogicState = 1;
  1404                           
  1405  0154  0353               	decf	_deviceLogicState,w
  1406  0155  1D03               	btfss	3,2
  1407  0156  29A4               	goto	l2290
  1408                           
  1409                           ;main.c: 620:                         deviceLogicCommand = deviceLogic[deviceLogicIndex]
      +                          ;
  1410  0157  0855               	movf	_deviceLogicIndex,w
  1411  0158  3EC7               	addlw	low ((_deviceLogic-__stringbase)| (0+32768))
  1412  0159  0084               	movwf	4
  1413  015A  2300               	fcall	stringdir
  1414  015B  00BD               	movwf	??_main
  1415  015C  083D               	movf	??_main,w
  1416  015D  00D4               	movwf	_deviceLogicCommand
  1417                           
  1418                           ;main.c: 621:                         if (deviceLogicCommand == 0xaa ) {
  1419  015E  30AA               	movlw	170
  1420  015F  0654               	xorwf	_deviceLogicCommand,w
  1421  0160  1D03               	btfss	3,2
  1422  0161  299A               	goto	l2286
  1423                           
  1424                           ;main.c: 622:                             if ( deviceLogicIndex == deviceLogicMax - 1 ) 
      +                          {
  1425  0162  30D8               	movlw	low (_deviceLogicMax-__stringbase)
  1426  0163  0084               	movwf	4
  1427  0164  2300               	fcall	stringdir
  1428  0165  3EFF               	addlw	255
  1429  0166  00BD               	movwf	??_main
  1430  0167  30FF               	movlw	255
  1431  0168  1803               	skipnc
  1432  0169  3000               	movlw	0
  1433  016A  00BE               	movwf	??_main+1
  1434  016B  0855               	movf	_deviceLogicIndex,w
  1435  016C  063D               	xorwf	??_main,w
  1436  016D  043E               	iorwf	??_main+1,w
  1437  016E  1D03               	skipz
  1438  016F  297B               	goto	l2266
  1439                           
  1440                           ;main.c: 623:                                 device->deviceMode = 2;
  1441  0170  3002               	movlw	2
  1442  0171  00BD               	movwf	??_main
  1443  0172  0843               	movf	main@device,w
  1444  0173  0084               	movwf	4
  1445  0174  083D               	movf	??_main,w
  1446  0175  0080               	movwf	0
  1447                           
  1448                           ;main.c: 624:                                 kempstonMouseCounterA = 255;
  1449  0176  30FF               	movlw	255
  1450  0177  00C4               	movwf	_kempstonMouseCounterA
  1451  0178  3000               	movlw	0
  1452  0179  00C5               	movwf	_kempstonMouseCounterA+1
  1453                           
  1454                           ;main.c: 625:                             } else {
  1455  017A  2994               	goto	l2282
  1456  017B                     l2266:	
  1457                           
  1458                           ;main.c: 626:                                 ps2DeviceMain = i;
  1459  017B  0842               	movf	main@i_208,w
  1460  017C  00BD               	movwf	??_main
  1461  017D  083D               	movf	??_main,w
  1462  017E  00E4               	movwf	_ps2DeviceMain
  1463                           
  1464                           ;main.c: 627:                                 device->deviceMode = 1;
  1465  017F  0843               	movf	main@device,w
  1466  0180  0084               	movwf	4
  1467  0181  0180               	clrf	0
  1468  0182  0A80               	incf	0,f
  1469                           
  1470                           ;main.c: 628:                                 for(uint8_t j = 0; j < 8; j++) outPorts[j]
      +                           = 0;
  1471  0183  01C0               	clrf	main@j
  1472  0184  3008               	movlw	8
  1473  0185  0240               	subwf	main@j,w
  1474  0186  1803               	btfsc	3,0
  1475  0187  2994               	goto	l2282
  1476  0188                     l2276:	
  1477  0188  0840               	movf	main@j,w
  1478  0189  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  1479  018A  0084               	movwf	4
  1480  018B  0180               	clrf	0
  1481  018C  3001               	movlw	1
  1482  018D  00BD               	movwf	??_main
  1483  018E  083D               	movf	??_main,w
  1484  018F  07C0               	addwf	main@j,f
  1485  0190  3008               	movlw	8
  1486  0191  0240               	subwf	main@j,w
  1487  0192  1C03               	skipc
  1488  0193  2988               	goto	l2276
  1489  0194                     l2282:	
  1490                           ;main.c: 629:                             }
  1491                           
  1492                           
  1493                           ;main.c: 630:                             deviceLogicState = 0;
  1494  0194  01D3               	clrf	_deviceLogicState
  1495                           
  1496                           ;main.c: 631:                             deviceLogicDevice = 3;
  1497  0195  3003               	movlw	3
  1498  0196  00BD               	movwf	??_main
  1499  0197  083D               	movf	??_main,w
  1500  0198  00D2               	movwf	_deviceLogicDevice
  1501                           
  1502                           ;main.c: 632:                             break;
  1503  0199  29F5               	goto	l2332
  1504  019A                     l2286:	
  1505                           ;main.c: 633:                         }
  1506                           
  1507                           
  1508                           ;main.c: 634:                         send(deviceLogicDevice, deviceLogicCommand);
  1509  019A  0854               	movf	_deviceLogicCommand,w
  1510  019B  00BD               	movwf	??_main
  1511  019C  083D               	movf	??_main,w
  1512  019D  00A0               	movwf	send@byte
  1513  019E  0852               	movf	_deviceLogicDevice,w
  1514  019F  2688               	fcall	_send
  1515                           
  1516                           ;main.c: 635:                         deviceLogicState = 2;
  1517  01A0  3002               	movlw	2
  1518  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1519  01A2  1303               	bcf	3,6	;RP1=0, select bank0
  1520  01A3  29B1               	goto	L1
  1521  01A4                     l2290:	
  1522                           ;main.c: 637:                     } else if ( deviceLogicState == 2 ) {
  1523                           
  1524  01A4  3002               	movlw	2
  1525  01A5  0653               	xorwf	_deviceLogicState,w
  1526  01A6  1D03               	btfss	3,2
  1527  01A7  29B5               	goto	l2298
  1528                           
  1529                           ;main.c: 639:                         if ( code == 0xfe || code == 0xfc ) {
  1530  01A8  30FE               	movlw	254
  1531  01A9  0641               	xorwf	main@code,w
  1532  01AA  1903               	btfsc	3,2
  1533  01AB  29DB               	goto	l2320
  1534  01AC  30FC               	movlw	252
  1535  01AD  0641               	xorwf	main@code,w
  1536  01AE  1903               	btfsc	3,2
  1537  01AF  29DB               	goto	l2320
  1538                           
  1539                           ;main.c: 642:                             deviceLogicState = 3;
  1540                           
  1541                           ;main.c: 641:                         } else {
  1542                           
  1543                           ;main.c: 640:                             deviceLogicState = 1;
  1544  01B0  3003               	movlw	3
  1545  01B1                     L1:	
  1546  01B1  00BD               	movwf	??_main
  1547  01B2  083D               	movf	??_main,w
  1548  01B3  00D3               	movwf	_deviceLogicState
  1549                           
  1550                           ;main.c: 645:                     } else if ( deviceLogicState == 3 ) {
  1551                           
  1552                           ;main.c: 643:                         }
  1553  01B4  29DD               	goto	l2322
  1554  01B5                     l2298:	
  1555  01B5  3003               	movlw	3
  1556  01B6  0653               	xorwf	_deviceLogicState,w
  1557  01B7  1D03               	btfss	3,2
  1558  01B8  29DD               	goto	l2322
  1559                           
  1560                           ;main.c: 649:                         if ( deviceLogicCommand == 0xf2 ) {
  1561  01B9  30F2               	movlw	242
  1562  01BA  0654               	xorwf	_deviceLogicCommand,w
  1563  01BB  1D03               	btfss	3,2
  1564  01BC  29D0               	goto	l2312
  1565                           
  1566                           ;main.c: 650:                             if ( code == 0x83 ) {
  1567  01BD  3083               	movlw	131
  1568  01BE  0641               	xorwf	main@code,w
  1569  01BF  1903               	btfsc	3,2
  1570  01C0  29D7               	goto	l2318
  1571                           
  1572                           ;main.c: 652:                             } else if ( code == 0x00 || code == 0x03 ) {
  1573  01C1  0841               	movf	main@code,w
  1574  01C2  1903               	btfsc	3,2
  1575  01C3  29C8               	goto	l2310
  1576  01C4  3003               	movlw	3
  1577  01C5  0641               	xorwf	main@code,w
  1578  01C6  1D03               	btfss	3,2
  1579  01C7  29D7               	goto	l2318
  1580  01C8                     l2310:	
  1581                           
  1582                           ;main.c: 654:                                 deviceLogicIndex = deviceLogicMouseIndex -
      +                           1;
  1583  01C8  30D9               	movlw	low (_deviceLogicMouseIndex-__stringbase)
  1584  01C9  0084               	movwf	4
  1585  01CA  2300               	fcall	stringdir
  1586  01CB  3EFF               	addlw	255
  1587  01CC  00BD               	movwf	??_main
  1588  01CD  083D               	movf	??_main,w
  1589  01CE  00D5               	movwf	_deviceLogicIndex
  1590                           
  1591                           ;main.c: 656:                         } else if ( deviceLogicCommand == 0xff ) {
  1592                           
  1593                           ;main.c: 655:                             }
  1594  01CF  29D7               	goto	l2318
  1595  01D0                     l2312:	
  1596  01D0  0A54               	incf	_deviceLogicCommand,w
  1597  01D1  1D03               	btfss	3,2
  1598  01D2  29D7               	goto	l2318
  1599                           
  1600                           ;main.c: 657:                             if ( code != 0xaa ) {
  1601  01D3  30AA               	movlw	170
  1602  01D4  0641               	xorwf	main@code,w
  1603  01D5  1D03               	btfss	3,2
  1604  01D6  29F5               	goto	l2332
  1605  01D7                     l2318:	
  1606                           ;main.c: 660:                         }
  1607                           
  1608                           ;main.c: 659:                             }
  1609                           
  1610                           ;main.c: 658:                                 break;
  1611                           
  1612                           
  1613                           ;main.c: 662:                         deviceLogicIndex++;
  1614  01D7  3001               	movlw	1
  1615  01D8  00BD               	movwf	??_main
  1616  01D9  083D               	movf	??_main,w
  1617  01DA  07D5               	addwf	_deviceLogicIndex,f
  1618  01DB                     l2320:	
  1619                           
  1620                           ;main.c: 663:                         deviceLogicState = 1;
  1621  01DB  01D3               	clrf	_deviceLogicState
  1622  01DC  0AD3               	incf	_deviceLogicState,f
  1623  01DD                     l2322:	
  1624                           ;main.c: 664:                     }
  1625                           
  1626                           
  1627                           ;main.c: 666:                     deviceLogicDelay = 0;
  1628  01DD  01CA               	clrf	_deviceLogicDelay
  1629  01DE  01CB               	clrf	_deviceLogicDelay+1
  1630                           
  1631                           ;main.c: 669:                 break;
  1632                           
  1633                           ;main.c: 667:                 }
  1634  01DF  29F5               	goto	l2332
  1635  01E0                     l2326:	
  1636                           ;main.c: 670:             } else {
  1637                           
  1638                           
  1639                           ;main.c: 671:                 device->readDataPos = device->inDataPos;
  1640  01E0  0843               	movf	main@device,w
  1641  01E1  3E03               	addlw	3
  1642  01E2  0084               	movwf	4
  1643  01E3  1383               	bcf	3,7	;select IRP bank0
  1644  01E4  0800               	movf	0,w
  1645  01E5  00BD               	movwf	??_main
  1646  01E6  0843               	movf	main@device,w
  1647  01E7  3E04               	addlw	4
  1648  01E8  0084               	movwf	4
  1649  01E9  083D               	movf	??_main,w
  1650  01EA  0080               	movwf	0
  1651  01EB                     l2328:	
  1652                           ;main.c: 672:             }
  1653                           
  1654                           
  1655                           ;main.c: 673:         }
  1656  01EB  3001               	movlw	1
  1657  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1658  01ED  1303               	bcf	3,6	;RP1=0, select bank0
  1659  01EE  00BD               	movwf	??_main
  1660  01EF  083D               	movf	??_main,w
  1661  01F0  07C2               	addwf	main@i_208,f
  1662  01F1  3002               	movlw	2
  1663  01F2  0242               	subwf	main@i_208,w
  1664  01F3  1C03               	skipc
  1665  01F4  28BF               	goto	l2214
  1666  01F5                     l2332:	
  1667                           
  1668                           ;main.c: 675:         if ( delay != 0 ) {
  1669  01F5  0848               	movf	_delay,w
  1670  01F6  0449               	iorwf	_delay+1,w
  1671  01F7  1903               	btfsc	3,2
  1672  01F8  2A17               	goto	l2350
  1673                           
  1674                           ;main.c: 677:             delay--;
  1675  01F9  3001               	movlw	1
  1676  01FA  02C8               	subwf	_delay,f
  1677  01FB  3000               	movlw	0
  1678  01FC  1C03               	skipc
  1679  01FD  03C9               	decf	_delay+1,f
  1680  01FE  02C9               	subwf	_delay+1,f
  1681                           
  1682                           ;main.c: 678:             if ( delay == 0 ) {
  1683  01FF  0848               	movf	_delay,w
  1684  0200  0449               	iorwf	_delay+1,w
  1685  0201  1D03               	btfss	3,2
  1686  0202  2A09               	goto	l2342
  1687                           
  1688                           ;main.c: 680:                 updatePort(0x00, 0);
  1689  0203  01A0               	clrf	updatePort@set
  1690  0204  3000               	movlw	0
  1691  0205  222E               	fcall	_updatePort
  1692                           
  1693                           ;main.c: 682:                 needSave = 1;
  1694  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1695  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1696  0208  2A15               	goto	l2348
  1697  0209                     l2342:	
  1698                           ;main.c: 683:             } else if ( delay == 200 ) {
  1699                           
  1700  0209  30C8               	movlw	200
  1701  020A  0648               	xorwf	_delay,w
  1702  020B  0449               	iorwf	_delay+1,w
  1703  020C  1D03               	btfss	3,2
  1704  020D  2A17               	goto	l2350
  1705                           
  1706                           ;main.c: 685:                 updateKey(delayedKey, 1 );
  1707  020E  01A6               	clrf	updateKey@down
  1708  020F  0AA6               	incf	updateKey@down,f
  1709  0210  084C               	movf	_delayedKey,w
  1710  0211  26ED               	fcall	_updateKey
  1711                           
  1712                           ;main.c: 686:                 delayedKey = 0;
  1713  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1715  0214  01CC               	clrf	_delayedKey
  1716  0215                     l2348:	
  1717                           
  1718                           ;main.c: 687:                 needSave = 1;
  1719  0215  01CF               	clrf	_needSave
  1720  0216  0ACF               	incf	_needSave,f
  1721  0217                     l2350:	
  1722                           ;main.c: 690:         }
  1723                           
  1724                           ;main.c: 688:             }
  1725                           
  1726                           
  1727                           ;main.c: 692:         kempstonMouseEmulatorDelay++;
  1728  0217  3001               	movlw	1
  1729  0218  07C6               	addwf	_kempstonMouseEmulatorDelay,f
  1730  0219  1803               	skipnc
  1731  021A  0AC7               	incf	_kempstonMouseEmulatorDelay+1,f
  1732  021B  3000               	movlw	0
  1733  021C  07C7               	addwf	_kempstonMouseEmulatorDelay+1,f
  1734                           
  1735                           ;main.c: 693:         if ( kempstonMouseEmulatorDelay > 2000 ) {
  1736  021D  3007               	movlw	7
  1737  021E  0247               	subwf	_kempstonMouseEmulatorDelay+1,w
  1738  021F  30D1               	movlw	209
  1739  0220  1903               	skipnz
  1740  0221  0246               	subwf	_kempstonMouseEmulatorDelay,w
  1741  0222  1C03               	skipc
  1742  0223  2A28               	goto	l2358
  1743                           
  1744                           ;main.c: 703:             kempstonMouseEmulatorDelay = 0;
  1745  0224  01C6               	clrf	_kempstonMouseEmulatorDelay
  1746  0225  01C7               	clrf	_kempstonMouseEmulatorDelay+1
  1747                           
  1748                           ;main.c: 704:             needSave = 1;
  1749  0226  01CF               	clrf	_needSave
  1750  0227  0ACF               	incf	_needSave,f
  1751  0228                     l2358:	
  1752                           ;main.c: 705:         }
  1753                           
  1754                           
  1755                           ;main.c: 707:         if ( needSave) {
  1756  0228  084F               	movf	_needSave,w
  1757  0229  1903               	btfsc	3,2
  1758  022A  2A2C               	goto	l350
  1759                           
  1760                           ;main.c: 708:             sendDataToAltera();
  1761  022B  2744               	fcall	_sendDataToAltera
  1762  022C                     l350:	
  1763                           ;main.c: 709:         }
  1764                           
  1765  022C  0064               	clrwdt	;# 
  1766                           
  1767                           ;main.c: 712:     }
  1768  022D  28B7               	goto	l2206
  1769  022E                     __end_of_main:	
  1770                           
  1771                           	psect	text1
  1772  0744                     __ptext1:	
  1773 ;; *************** function _sendDataToAltera *****************
  1774 ;; Defined at:
  1775 ;;		line 309 in file "main.c"
  1776 ;; Parameters:    Size  Location     Type
  1777 ;;		None
  1778 ;; Auto vars:     Size  Location     Type
  1779 ;;  i               1    4[BANK0 ] char 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  1    wreg      void 
  1782 ;; Registers used:
  1783 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1789 ;;      Params:         0       0       0       0
  1790 ;;      Locals:         0       3       0       0
  1791 ;;      Temps:          0       2       0       0
  1792 ;;      Totals:         0       5       0       0
  1793 ;;Total ram usage:        5 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:    3
  1796 ;; This function calls:
  1797 ;;		_myDelay
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           
  1804                           ;psect for function _sendDataToAltera
  1805  0744                     _sendDataToAltera:	
  1806                           
  1807                           ;main.c: 311:     RA2 = 1;
  1808                           
  1809                           ;incstack = 0
  1810                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1811  0744  1283               	bcf	3,5	;RP0=0, select bank0
  1812  0745  1303               	bcf	3,6	;RP1=0, select bank0
  1813  0746  1505               	bsf	5,2	;volatile
  1814                           
  1815                           ;main.c: 312:     RA1 = 0;
  1816  0747  1085               	bcf	5,1	;volatile
  1817                           
  1818                           ;main.c: 313:     myDelay();
  1819  0748  27FE               	fcall	_myDelay
  1820                           
  1821                           ;main.c: 314:     RA1 = 1;
  1822  0749  1283               	bcf	3,5	;RP0=0, select bank0
  1823  074A  1303               	bcf	3,6	;RP1=0, select bank0
  1824  074B  1485               	bsf	5,1	;volatile
  1825                           
  1826                           ;main.c: 315:     myDelay();
  1827  074C  27FE               	fcall	_myDelay
  1828                           
  1829                           ;main.c: 316:     RA1 = 0;
  1830  074D  1283               	bcf	3,5	;RP0=0, select bank0
  1831  074E  1303               	bcf	3,6	;RP1=0, select bank0
  1832  074F  1085               	bcf	5,1	;volatile
  1833                           
  1834                           ;main.c: 317:     myDelay();
  1835  0750  27FE               	fcall	_myDelay
  1836                           
  1837                           ;main.c: 318:     for(int8_t i=0;i<11;i++) {
  1838  0751  1283               	bcf	3,5	;RP0=0, select bank0
  1839  0752  1303               	bcf	3,6	;RP1=0, select bank0
  1840  0753  01A4               	clrf	sendDataToAltera@i
  1841  0754  0824               	movf	sendDataToAltera@i,w
  1842  0755  3A80               	xorlw	128
  1843  0756  3E75               	addlw	-139
  1844  0757  1803               	btfsc	3,0
  1845  0758  2F8B               	goto	l1878
  1846  0759                     l233:	
  1847                           
  1848                           ;main.c: 319:         RA2 = 1;
  1849  0759  1505               	bsf	5,2	;volatile
  1850                           
  1851                           ;main.c: 320:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1852  075A  0824               	movf	sendDataToAltera@i,w
  1853  075B  3A80               	xorlw	128
  1854  075C  3E78               	addlw	-136
  1855  075D  1C03               	skipc
  1856  075E  2F6A               	goto	l1860
  1857  075F  0824               	movf	sendDataToAltera@i,w
  1858  0760  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  1859  0761  0084               	movwf	4
  1860  0762  1383               	bcf	3,7	;select IRP bank0
  1861  0763  0800               	movf	0,w
  1862  0764  00A0               	movwf	??_sendDataToAltera
  1863  0765  01A1               	clrf	??_sendDataToAltera+1
  1864  0766  0820               	movf	??_sendDataToAltera,w
  1865  0767  00A2               	movwf	_sendDataToAltera$161
  1866  0768  0821               	movf	??_sendDataToAltera+1,w
  1867  0769  2F74               	goto	L2
  1868  076A                     l1860:	
  1869  076A  0824               	movf	sendDataToAltera@i,w
  1870  076B  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  1871  076C  0084               	movwf	4
  1872  076D  1383               	bcf	3,7	;select IRP bank0
  1873  076E  0800               	movf	0,w
  1874  076F  00A0               	movwf	??_sendDataToAltera
  1875  0770  01A1               	clrf	??_sendDataToAltera+1
  1876  0771  0920               	comf	??_sendDataToAltera,w
  1877  0772  00A2               	movwf	_sendDataToAltera$161
  1878  0773  0921               	comf	??_sendDataToAltera+1,w
  1879  0774                     L2:	
  1880  0774  00A3               	movwf	_sendDataToAltera$161+1
  1881  0775  0822               	movf	_sendDataToAltera$161,w
  1882  0776  0086               	movwf	6	;volatile
  1883                           
  1884                           ;main.c: 321:         myDelay();
  1885  0777  27FE               	fcall	_myDelay
  1886                           
  1887                           ;main.c: 322:         RA2 = 0;
  1888  0778  1283               	bcf	3,5	;RP0=0, select bank0
  1889  0779  1303               	bcf	3,6	;RP1=0, select bank0
  1890  077A  1105               	bcf	5,2	;volatile
  1891                           
  1892                           ;main.c: 323:         myDelay();
  1893  077B  27FE               	fcall	_myDelay
  1894                           
  1895                           ;main.c: 324:         RA2 = 1;
  1896  077C  1283               	bcf	3,5	;RP0=0, select bank0
  1897  077D  1303               	bcf	3,6	;RP1=0, select bank0
  1898  077E  1505               	bsf	5,2	;volatile
  1899                           
  1900                           ;main.c: 325:         myDelay();
  1901  077F  27FE               	fcall	_myDelay
  1902                           
  1903                           ;main.c: 326:     }
  1904  0780  3001               	movlw	1
  1905  0781  1283               	bcf	3,5	;RP0=0, select bank0
  1906  0782  1303               	bcf	3,6	;RP1=0, select bank0
  1907  0783  00A0               	movwf	??_sendDataToAltera
  1908  0784  0820               	movf	??_sendDataToAltera,w
  1909  0785  07A4               	addwf	sendDataToAltera@i,f
  1910  0786  0824               	movf	sendDataToAltera@i,w
  1911  0787  3A80               	xorlw	128
  1912  0788  3E75               	addlw	-139
  1913  0789  1C03               	skipc
  1914  078A  2F59               	goto	l233
  1915  078B                     l1878:	
  1916                           
  1917                           ;main.c: 327:     PORTB = 0xFF;
  1918  078B  30FF               	movlw	255
  1919  078C  0086               	movwf	6	;volatile
  1920  078D  0008               	return
  1921  078E                     __end_of_sendDataToAltera:	
  1922                           
  1923                           	psect	text2
  1924  07FE                     __ptext2:	
  1925 ;; *************** function _myDelay *****************
  1926 ;; Defined at:
  1927 ;;		line 304 in file "main.c"
  1928 ;; Parameters:    Size  Location     Type
  1929 ;;		None
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;		None
  1932 ;; Return value:  Size  Location     Type
  1933 ;;                  1    wreg      void 
  1934 ;; Registers used:
  1935 ;;		None
  1936 ;; Tracked objects:
  1937 ;;		On entry : 0/0
  1938 ;;		On exit  : 0/0
  1939 ;;		Unchanged: 0/0
  1940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1941 ;;      Params:         0       0       0       0
  1942 ;;      Locals:         0       0       0       0
  1943 ;;      Temps:          0       0       0       0
  1944 ;;      Totals:         0       0       0       0
  1945 ;;Total ram usage:        0 bytes
  1946 ;; Hardware stack levels used:    1
  1947 ;; Hardware stack levels required when called:    2
  1948 ;; This function calls:
  1949 ;;		Nothing
  1950 ;; This function is called by:
  1951 ;;		_sendDataToAltera
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           
  1956                           ;psect for function _myDelay
  1957  07FE                     _myDelay:	
  1958                           
  1959                           ;incstack = 0
  1960                           ; Regs used in _myDelay: []
  1961  07FE  0008               	return
  1962  07FF                     __end_of_myDelay:	
  1963                           
  1964                           	psect	text3
  1965  0688                     __ptext3:	
  1966 ;; *************** function _send *****************
  1967 ;; Defined at:
  1968 ;;		line 215 in file "main.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;  device          1    wreg     unsigned char 
  1971 ;;  byte            1    0[BANK0 ] unsigned char 
  1972 ;; Auto vars:     Size  Location     Type
  1973 ;;  device          1    2[BANK0 ] unsigned char 
  1974 ;;  j               1    4[BANK0 ] unsigned char 
  1975 ;;  i               1    3[BANK0 ] unsigned char 
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1985 ;;      Params:         0       1       0       0
  1986 ;;      Locals:         0       3       0       0
  1987 ;;      Temps:          0       1       0       0
  1988 ;;      Totals:         0       5       0       0
  1989 ;;Total ram usage:        5 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    2
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_main
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _send
  2001  0688                     _send:	
  2002                           
  2003                           ;incstack = 0
  2004                           ; Regs used in _send: [wreg+status,2+status,0]
  2005                           ;send@device stored from wreg
  2006  0688  1283               	bcf	3,5	;RP0=0, select bank0
  2007  0689  1303               	bcf	3,6	;RP1=0, select bank0
  2008  068A  00A2               	movwf	send@device
  2009                           
  2010                           ;main.c: 215: void send(uint8_t device, uint8_t byte);main.c: 216: {;main.c: 218:     T0
      +                          IE = 0;
  2011  068B  128B               	bcf	11,5	;volatile
  2012                           
  2013                           ;main.c: 221:     ps2Bits = byte;
  2014  068C  0820               	movf	send@byte,w
  2015  068D  00A1               	movwf	??_send
  2016  068E  0821               	movf	??_send,w
  2017  068F  00FC               	movwf	_ps2Bits
  2018                           
  2019                           ;main.c: 223:     ps2Parity = 1;
  2020  0690  01D6               	clrf	_ps2Parity
  2021  0691  0AD6               	incf	_ps2Parity,f
  2022                           
  2023                           ;main.c: 224:     ps2BitsCount = 0;
  2024  0692  01FB               	clrf	_ps2BitsCount
  2025                           
  2026                           ;main.c: 225:     ps2DataState = 2;
  2027  0693  3002               	movlw	2
  2028  0694  00A1               	movwf	??_send
  2029  0695  0821               	movf	??_send,w
  2030  0696  00FD               	movwf	_ps2DataState
  2031                           
  2032                           ;main.c: 230:     RA3 = 1;
  2033  0697  1585               	bsf	5,3	;volatile
  2034                           
  2035                           ;main.c: 231:     TRISA = 0b11100000;
  2036  0698  30E0               	movlw	224
  2037  0699  1683               	bsf	3,5	;RP0=1, select bank1
  2038  069A  1303               	bcf	3,6	;RP1=0, select bank1
  2039  069B  0085               	movwf	5	;volatile
  2040                           
  2041                           ;main.c: 232:     RA0 = device;
  2042  069C  1283               	bcf	3,5	;RP0=0, select bank0
  2043  069D  1303               	bcf	3,6	;RP1=0, select bank0
  2044  069E  1C22               	btfss	send@device,0
  2045  069F  2EA4               	goto	u1740
  2046  06A0  1283               	bcf	3,5	;RP0=0, select bank0
  2047  06A1  1303               	bcf	3,6	;RP1=0, select bank0
  2048  06A2  1405               	bsf	5,0	;volatile
  2049  06A3  2EA7               	goto	l1796
  2050  06A4                     u1740:	
  2051  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2052  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  2053  06A6  1005               	bcf	5,0	;volatile
  2054  06A7                     l1796:	
  2055                           
  2056                           ;main.c: 233:     RA3 = 1;
  2057  06A7  1585               	bsf	5,3	;volatile
  2058                           
  2059                           ;main.c: 234:     RA4 = 0;
  2060  06A8  1205               	bcf	5,4	;volatile
  2061                           
  2062                           ;main.c: 235:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  2063  06A9  3042               	movlw	66
  2064  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  2065  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  2066  06AC  00A1               	movwf	??_send
  2067  06AD                     u2577:	
  2068  06AD  0BA1               	decfsz	??_send,f
  2069  06AE  2EAD               	goto	u2577
  2070                           
  2071                           ;main.c: 236:     RA3 = 0;
  2072  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  2073  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  2074  06B1  1185               	bcf	5,3	;volatile
  2075                           
  2076                           ;main.c: 238:     TRISA = 0b11110000;
  2077  06B2  30F0               	movlw	240
  2078  06B3  1683               	bsf	3,5	;RP0=1, select bank1
  2079  06B4  1303               	bcf	3,6	;RP1=0, select bank1
  2080  06B5  0085               	movwf	5	;volatile
  2081                           
  2082                           ;main.c: 239:     TMR0 = 255;
  2083  06B6  30FF               	movlw	255
  2084  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  2085  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  2086  06B9  0081               	movwf	1	;volatile
  2087                           
  2088                           ;main.c: 240:     T0IF = 0;
  2089  06BA  110B               	bcf	11,2	;volatile
  2090                           
  2091                           ;main.c: 241:     T0IE = 1;
  2092  06BB  168B               	bsf	11,5	;volatile
  2093                           
  2094                           ;main.c: 244:     for(uint8_t i = 0; i < 10;i++ ) {
  2095  06BC  01A3               	clrf	send@i
  2096  06BD  300A               	movlw	10
  2097  06BE  0223               	subwf	send@i,w
  2098  06BF  1803               	btfsc	3,0
  2099  06C0  2EE6               	goto	l1840
  2100  06C1                     l1816:	
  2101                           
  2102                           ;main.c: 245:         for(uint8_t j = 0; j < 10;j++ ) {
  2103  06C1  01A4               	clrf	send@j
  2104  06C2  300A               	movlw	10
  2105  06C3  0224               	subwf	send@j,w
  2106  06C4  1803               	btfsc	3,0
  2107  06C5  2ED9               	goto	l1832
  2108  06C6                     l1822:	
  2109                           
  2110                           ;main.c: 246:             _delay((unsigned long)((10)*(8000000/4000000.0)));
  2111  06C6  3006               	movlw	6
  2112  06C7  1283               	bcf	3,5	;RP0=0, select bank0
  2113  06C8  1303               	bcf	3,6	;RP1=0, select bank0
  2114  06C9  00A1               	movwf	??_send
  2115  06CA                     u2587:	
  2116  06CA  0BA1               	decfsz	??_send,f
  2117  06CB  2ECA               	goto	u2587
  2118                           
  2119                           ;main.c: 247:             if ( ps2DataState == 0 ) break;
  2120  06CC  087D               	movf	_ps2DataState,w
  2121  06CD  1903               	btfsc	3,2
  2122  06CE  2ED9               	goto	l1832
  2123                           
  2124                           ;main.c: 248:         }
  2125  06CF  3001               	movlw	1
  2126  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  2127  06D1  1303               	bcf	3,6	;RP1=0, select bank0
  2128  06D2  00A1               	movwf	??_send
  2129  06D3  0821               	movf	??_send,w
  2130  06D4  07A4               	addwf	send@j,f
  2131  06D5  300A               	movlw	10
  2132  06D6  0224               	subwf	send@j,w
  2133  06D7  1C03               	skipc
  2134  06D8  2EC6               	goto	l1822
  2135  06D9                     l1832:	
  2136                           
  2137                           ;main.c: 249:         if ( ps2DataState == 0 ) break;
  2138  06D9  087D               	movf	_ps2DataState,w
  2139  06DA  1903               	btfsc	3,2
  2140  06DB  2EE6               	goto	l1840
  2141                           
  2142                           ;main.c: 250:     }
  2143  06DC  3001               	movlw	1
  2144  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  2145  06DE  1303               	bcf	3,6	;RP1=0, select bank0
  2146  06DF  00A1               	movwf	??_send
  2147  06E0  0821               	movf	??_send,w
  2148  06E1  07A3               	addwf	send@i,f
  2149  06E2  300A               	movlw	10
  2150  06E3  0223               	subwf	send@i,w
  2151  06E4  1C03               	skipc
  2152  06E5  2EC1               	goto	l1816
  2153  06E6                     l1840:	
  2154                           
  2155                           ;main.c: 252:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  2156  06E6  3006               	movlw	6
  2157  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  2158  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  2159  06E9  00A1               	movwf	??_send
  2160  06EA                     u2597:	
  2161  06EA  0BA1               	decfsz	??_send,f
  2162  06EB  2EEA               	goto	u2597
  2163  06EC  0008               	return
  2164  06ED                     __end_of_send:	
  2165                           
  2166                           	psect	text4
  2167  0563                     __ptext4:	
  2168 ;; *************** function _deviceDataUpdateMouse *****************
  2169 ;; Defined at:
  2170 ;;		line 446 in file "main.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  device          1    wreg     PTR struct PS2DeviceData
  2173 ;;		 -> devices(26), 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  device          1    4[BANK0 ] PTR struct PS2DeviceData
  2176 ;;		 -> devices(26), 
  2177 ;;  j               1    3[BANK0 ] unsigned char 
  2178 ;;  code            1    2[BANK0 ] unsigned char 
  2179 ;; Return value:  Size  Location     Type
  2180 ;;                  1    wreg      void 
  2181 ;; Registers used:
  2182 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2188 ;;      Params:         0       0       0       0
  2189 ;;      Locals:         0       3       0       0
  2190 ;;      Temps:          0       2       0       0
  2191 ;;      Totals:         0       5       0       0
  2192 ;;Total ram usage:        5 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; Hardware stack levels required when called:    2
  2195 ;; This function calls:
  2196 ;;		Nothing
  2197 ;; This function is called by:
  2198 ;;		_main
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           
  2203                           ;psect for function _deviceDataUpdateMouse
  2204  0563                     _deviceDataUpdateMouse:	
  2205                           
  2206                           ;incstack = 0
  2207                           ; Regs used in _deviceDataUpdateMouse: [wreg-fsr0h+status,2+status,0]
  2208                           ;deviceDataUpdateMouse@device stored from wreg
  2209  0563  1283               	bcf	3,5	;RP0=0, select bank0
  2210  0564  1303               	bcf	3,6	;RP1=0, select bank0
  2211  0565  00A4               	movwf	deviceDataUpdateMouse@device
  2212                           
  2213                           ;main.c: 446: void deviceDataUpdateMouse(struct PS2DeviceData* device);main.c: 447: {;ma
      +                          in.c: 448:     if ( device->inDataPos == kempstonMouseCounterB ) {
  2214  0566  0824               	movf	deviceDataUpdateMouse@device,w
  2215  0567  3E03               	addlw	3
  2216  0568  0084               	movwf	4
  2217  0569  1383               	bcf	3,7	;select IRP bank0
  2218  056A  0800               	movf	0,w
  2219  056B  0651               	xorwf	_kempstonMouseCounterB,w
  2220  056C  1D03               	skipz
  2221  056D  2D75               	goto	l1938
  2222                           
  2223                           ;main.c: 449:         kempstonMouseCounterA++;
  2224  056E  3001               	movlw	1
  2225  056F  07C4               	addwf	_kempstonMouseCounterA,f
  2226  0570  1803               	skipnc
  2227  0571  0AC5               	incf	_kempstonMouseCounterA+1,f
  2228  0572  3000               	movlw	0
  2229  0573  07C5               	addwf	_kempstonMouseCounterA+1,f
  2230                           
  2231                           ;main.c: 450:         return;
  2232  0574  0008               	return
  2233  0575                     l1938:	
  2234                           ;main.c: 451:     }
  2235                           
  2236                           
  2237                           ;main.c: 452:     kempstonMouseCounterB = device->inDataPos;
  2238  0575  0824               	movf	deviceDataUpdateMouse@device,w
  2239  0576  3E03               	addlw	3
  2240  0577  0084               	movwf	4
  2241  0578  0800               	movf	0,w
  2242  0579  00A0               	movwf	??_deviceDataUpdateMouse
  2243  057A  0820               	movf	??_deviceDataUpdateMouse,w
  2244  057B  00D1               	movwf	_kempstonMouseCounterB
  2245                           
  2246                           ;main.c: 454:     if ( kempstonMouseCounterA > 10 ) {
  2247  057C  3000               	movlw	0
  2248  057D  0245               	subwf	_kempstonMouseCounterA+1,w
  2249  057E  300B               	movlw	11
  2250  057F  1903               	skipnz
  2251  0580  0244               	subwf	_kempstonMouseCounterA,w
  2252  0581  1C03               	skipc
  2253  0582  2D90               	goto	l1946
  2254                           
  2255                           ;main.c: 455:         device->readDataPos = ( device->inDataPos - 1 ) & 7;
  2256  0583  0824               	movf	deviceDataUpdateMouse@device,w
  2257  0584  3E03               	addlw	3
  2258  0585  0084               	movwf	4
  2259  0586  0800               	movf	0,w
  2260  0587  3EFF               	addlw	255
  2261  0588  3907               	andlw	7
  2262  0589  00A0               	movwf	??_deviceDataUpdateMouse
  2263  058A  0824               	movf	deviceDataUpdateMouse@device,w
  2264  058B  3E04               	addlw	4
  2265  058C  0084               	movwf	4
  2266  058D  0820               	movf	??_deviceDataUpdateMouse,w
  2267  058E  0080               	movwf	0
  2268                           
  2269                           ;main.c: 456:         kempstonMouseCounterC = 0;
  2270  058F  01D0               	clrf	_kempstonMouseCounterC
  2271  0590                     l1946:	
  2272                           ;main.c: 457:     }
  2273                           
  2274                           
  2275                           ;main.c: 458:     kempstonMouseCounterA = 0;
  2276  0590  01C4               	clrf	_kempstonMouseCounterA
  2277  0591  01C5               	clrf	_kempstonMouseCounterA+1
  2278                           
  2279                           ;main.c: 460:     kempstonMouseCounterC++;
  2280  0592  3001               	movlw	1
  2281  0593  00A0               	movwf	??_deviceDataUpdateMouse
  2282  0594  0820               	movf	??_deviceDataUpdateMouse,w
  2283  0595  07D0               	addwf	_kempstonMouseCounterC,f
  2284                           
  2285                           ;main.c: 461:     if ( kempstonMouseCounterC < 3 ) return;
  2286  0596  3003               	movlw	3
  2287  0597  0250               	subwf	_kempstonMouseCounterC,w
  2288  0598  1C03               	btfss	3,0
  2289  0599  0008               	return
  2290                           
  2291                           ;main.c: 463:     uint8_t code = device->inData[device->readDataPos];
  2292  059A  0824               	movf	deviceDataUpdateMouse@device,w
  2293  059B  3E04               	addlw	4
  2294  059C  0084               	movwf	4
  2295  059D  0800               	movf	0,w
  2296  059E  3E05               	addlw	5
  2297  059F  0724               	addwf	deviceDataUpdateMouse@device,w
  2298  05A0  00A0               	movwf	??_deviceDataUpdateMouse
  2299  05A1  0820               	movf	??_deviceDataUpdateMouse,w
  2300  05A2  0084               	movwf	4
  2301  05A3  0800               	movf	0,w
  2302  05A4  00A1               	movwf	??_deviceDataUpdateMouse+1
  2303  05A5  0821               	movf	??_deviceDataUpdateMouse+1,w
  2304  05A6  00A2               	movwf	deviceDataUpdateMouse@code
  2305                           
  2306                           ;main.c: 464:     device->readDataPos = (device->readDataPos + 1) & 7;
  2307  05A7  0824               	movf	deviceDataUpdateMouse@device,w
  2308  05A8  3E04               	addlw	4
  2309  05A9  0084               	movwf	4
  2310  05AA  0800               	movf	0,w
  2311  05AB  3E01               	addlw	1
  2312  05AC  3907               	andlw	7
  2313  05AD  00A0               	movwf	??_deviceDataUpdateMouse
  2314  05AE  0824               	movf	deviceDataUpdateMouse@device,w
  2315  05AF  3E04               	addlw	4
  2316  05B0  0084               	movwf	4
  2317  05B1  0820               	movf	??_deviceDataUpdateMouse,w
  2318  05B2  0080               	movwf	0
  2319                           
  2320                           ;main.c: 466:     if ( (code & 1) > 0 ) {
  2321  05B3  1C22               	btfss	deviceDataUpdateMouse@code,0
  2322  05B4  2DBA               	goto	l294
  2323                           
  2324                           ;main.c: 467:         outPorts[8] &= 254;
  2325  05B5  30FE               	movlw	254
  2326  05B6  00A0               	movwf	??_deviceDataUpdateMouse
  2327  05B7  0820               	movf	??_deviceDataUpdateMouse,w
  2328  05B8  05E1               	andwf	_outPorts+8,f
  2329                           
  2330                           ;main.c: 468:     } else {
  2331  05B9  2DBB               	goto	l1960
  2332  05BA                     l294:	
  2333                           
  2334                           ;main.c: 469:         outPorts[8] |= 1;
  2335  05BA  1461               	bsf	_outPorts+8,0
  2336  05BB                     l1960:	
  2337                           ;main.c: 470:     }
  2338                           
  2339                           
  2340                           ;main.c: 472:     outPorts[9] += device->inData[device->readDataPos];
  2341  05BB  0824               	movf	deviceDataUpdateMouse@device,w
  2342  05BC  3E04               	addlw	4
  2343  05BD  0084               	movwf	4
  2344  05BE  0800               	movf	0,w
  2345  05BF  3E05               	addlw	5
  2346  05C0  0724               	addwf	deviceDataUpdateMouse@device,w
  2347  05C1  00A0               	movwf	??_deviceDataUpdateMouse
  2348  05C2  0820               	movf	??_deviceDataUpdateMouse,w
  2349  05C3  0084               	movwf	4
  2350  05C4  0800               	movf	0,w
  2351  05C5  00A1               	movwf	??_deviceDataUpdateMouse+1
  2352  05C6  0821               	movf	??_deviceDataUpdateMouse+1,w
  2353  05C7  07E2               	addwf	_outPorts+9,f
  2354                           
  2355                           ;main.c: 473:     device->readDataPos = (device->readDataPos + 1) & 7;
  2356  05C8  0824               	movf	deviceDataUpdateMouse@device,w
  2357  05C9  3E04               	addlw	4
  2358  05CA  0084               	movwf	4
  2359  05CB  0800               	movf	0,w
  2360  05CC  3E01               	addlw	1
  2361  05CD  3907               	andlw	7
  2362  05CE  00A0               	movwf	??_deviceDataUpdateMouse
  2363  05CF  0824               	movf	deviceDataUpdateMouse@device,w
  2364  05D0  3E04               	addlw	4
  2365  05D1  0084               	movwf	4
  2366  05D2  0820               	movf	??_deviceDataUpdateMouse,w
  2367  05D3  0080               	movwf	0
  2368                           
  2369                           ;main.c: 475:     outPorts[10] += device->inData[device->readDataPos];
  2370  05D4  0824               	movf	deviceDataUpdateMouse@device,w
  2371  05D5  3E04               	addlw	4
  2372  05D6  0084               	movwf	4
  2373  05D7  0800               	movf	0,w
  2374  05D8  3E05               	addlw	5
  2375  05D9  0724               	addwf	deviceDataUpdateMouse@device,w
  2376  05DA  00A0               	movwf	??_deviceDataUpdateMouse
  2377  05DB  0820               	movf	??_deviceDataUpdateMouse,w
  2378  05DC  0084               	movwf	4
  2379  05DD  0800               	movf	0,w
  2380  05DE  00A1               	movwf	??_deviceDataUpdateMouse+1
  2381  05DF  0821               	movf	??_deviceDataUpdateMouse+1,w
  2382  05E0  07E3               	addwf	_outPorts+10,f
  2383                           
  2384                           ;main.c: 476:     device->readDataPos = (device->readDataPos + 1) & 7;
  2385  05E1  0824               	movf	deviceDataUpdateMouse@device,w
  2386  05E2  3E04               	addlw	4
  2387  05E3  0084               	movwf	4
  2388  05E4  0800               	movf	0,w
  2389  05E5  3E01               	addlw	1
  2390  05E6  3907               	andlw	7
  2391  05E7  00A0               	movwf	??_deviceDataUpdateMouse
  2392  05E8  0824               	movf	deviceDataUpdateMouse@device,w
  2393  05E9  3E04               	addlw	4
  2394  05EA  0084               	movwf	4
  2395  05EB  0820               	movf	??_deviceDataUpdateMouse,w
  2396  05EC  0080               	movwf	0
  2397                           
  2398                           ;main.c: 478:     kempstonMouseCounterC -= 3;
  2399  05ED  3003               	movlw	3
  2400  05EE  02D0               	subwf	_kempstonMouseCounterC,f
  2401                           
  2402                           ;main.c: 479:     for(uint8_t j = 0; j < 8; j++) outPorts[j] = 0;
  2403  05EF  01A3               	clrf	deviceDataUpdateMouse@j
  2404  05F0  3008               	movlw	8
  2405  05F1  0223               	subwf	deviceDataUpdateMouse@j,w
  2406  05F2  1803               	btfsc	3,0
  2407  05F3  2E00               	goto	l297
  2408  05F4                     l1970:	
  2409  05F4  0823               	movf	deviceDataUpdateMouse@j,w
  2410  05F5  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  2411  05F6  0084               	movwf	4
  2412  05F7  0180               	clrf	0
  2413  05F8  3001               	movlw	1
  2414  05F9  00A0               	movwf	??_deviceDataUpdateMouse
  2415  05FA  0820               	movf	??_deviceDataUpdateMouse,w
  2416  05FB  07A3               	addwf	deviceDataUpdateMouse@j,f
  2417  05FC  3008               	movlw	8
  2418  05FD  0223               	subwf	deviceDataUpdateMouse@j,w
  2419  05FE  1C03               	skipc
  2420  05FF  2DF4               	goto	l1970
  2421  0600                     l297:	
  2422                           
  2423                           ;main.c: 480:     needSave = 1;
  2424  0600  01CF               	clrf	_needSave
  2425  0601  0ACF               	incf	_needSave,f
  2426  0602  0008               	return
  2427  0603                     __end_of_deviceDataUpdateMouse:	
  2428                           
  2429                           	psect	text5
  2430  0603                     __ptext5:	
  2431 ;; *************** function _deviceDataUpdateKeyboard *****************
  2432 ;; Defined at:
  2433 ;;		line 417 in file "main.c"
  2434 ;; Parameters:    Size  Location     Type
  2435 ;;  device          1    wreg     PTR struct PS2DeviceData
  2436 ;;		 -> devices(26), 
  2437 ;; Auto vars:     Size  Location     Type
  2438 ;;  device          1   28[BANK0 ] PTR struct PS2DeviceData
  2439 ;;		 -> devices(26), 
  2440 ;;  i               1   26[BANK0 ] char 
  2441 ;;  code            1   27[BANK0 ] unsigned char 
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2451 ;;      Params:         0       0       0       0
  2452 ;;      Locals:         0       5       0       0
  2453 ;;      Temps:          0       2       0       0
  2454 ;;      Totals:         0       7       0       0
  2455 ;;Total ram usage:        7 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    5
  2458 ;; This function calls:
  2459 ;;		_processKeyCode
  2460 ;; This function is called by:
  2461 ;;		_main
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           
  2466                           ;psect for function _deviceDataUpdateKeyboard
  2467  0603                     _deviceDataUpdateKeyboard:	
  2468                           
  2469                           ;incstack = 0
  2470                           ; Regs used in _deviceDataUpdateKeyboard: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2471                           ;deviceDataUpdateKeyboard@device stored from wreg
  2472  0603  1283               	bcf	3,5	;RP0=0, select bank0
  2473  0604  1303               	bcf	3,6	;RP1=0, select bank0
  2474  0605  00BC               	movwf	deviceDataUpdateKeyboard@device
  2475                           
  2476                           ;main.c: 417: void deviceDataUpdateKeyboard(struct PS2DeviceData* device);main.c: 418: {
      +                          ;main.c: 419:     if ( device->readDataPos == device->inDataPos ) return;
  2477  0606  083C               	movf	deviceDataUpdateKeyboard@device,w
  2478  0607  3E03               	addlw	3
  2479  0608  0084               	movwf	4
  2480  0609  1383               	bcf	3,7	;select IRP bank0
  2481  060A  0800               	movf	0,w
  2482  060B  00B6               	movwf	??_deviceDataUpdateKeyboard
  2483  060C  083C               	movf	deviceDataUpdateKeyboard@device,w
  2484  060D  3E04               	addlw	4
  2485  060E  0084               	movwf	4
  2486  060F  0800               	movf	0,w
  2487  0610  0636               	xorwf	??_deviceDataUpdateKeyboard,w
  2488  0611  1903               	btfsc	3,2
  2489  0612  0008               	return
  2490                           
  2491                           ;main.c: 420:     uint8_t code = device->inData[device->readDataPos];
  2492  0613  083C               	movf	deviceDataUpdateKeyboard@device,w
  2493  0614  3E04               	addlw	4
  2494  0615  0084               	movwf	4
  2495  0616  0800               	movf	0,w
  2496  0617  3E05               	addlw	5
  2497  0618  073C               	addwf	deviceDataUpdateKeyboard@device,w
  2498  0619  00B6               	movwf	??_deviceDataUpdateKeyboard
  2499  061A  0836               	movf	??_deviceDataUpdateKeyboard,w
  2500  061B  0084               	movwf	4
  2501  061C  0800               	movf	0,w
  2502  061D  00B7               	movwf	??_deviceDataUpdateKeyboard+1
  2503  061E  0837               	movf	??_deviceDataUpdateKeyboard+1,w
  2504  061F  00BB               	movwf	deviceDataUpdateKeyboard@code
  2505                           
  2506                           ;main.c: 421:     device->readDataPos = (device->readDataPos + 1) & 7;
  2507  0620  083C               	movf	deviceDataUpdateKeyboard@device,w
  2508  0621  3E04               	addlw	4
  2509  0622  0084               	movwf	4
  2510  0623  0800               	movf	0,w
  2511  0624  3E01               	addlw	1
  2512  0625  3907               	andlw	7
  2513  0626  00B6               	movwf	??_deviceDataUpdateKeyboard
  2514  0627  083C               	movf	deviceDataUpdateKeyboard@device,w
  2515  0628  3E04               	addlw	4
  2516  0629  0084               	movwf	4
  2517  062A  0836               	movf	??_deviceDataUpdateKeyboard,w
  2518  062B  0080               	movwf	0
  2519                           
  2520                           ;main.c: 423:     if ( device->ps2NeedEncode ) {
  2521  062C  083C               	movf	deviceDataUpdateKeyboard@device,w
  2522  062D  3E02               	addlw	2
  2523  062E  0084               	movwf	4
  2524  062F  0800               	movf	0,w
  2525  0630  1903               	btfsc	3,2
  2526  0631  2E4A               	goto	l1910
  2527                           
  2528                           ;main.c: 424:         for (int8_t i=0; i < 27; i+=2) {
  2529  0632  01BA               	clrf	deviceDataUpdateKeyboard@i
  2530  0633                     L5:	
  2531  0633  083A               	movf	deviceDataUpdateKeyboard@i,w
  2532  0634  3A80               	xorlw	128
  2533  0635  3E65               	addlw	-155
  2534  0636  1803               	btfsc	3,0
  2535  0637  2E5D               	goto	l1916
  2536                           
  2537                           ;main.c: 425:             if ( code == replaceTwoBytesCodes[i] ) {
  2538  0638  083A               	movf	deviceDataUpdateKeyboard@i,w
  2539  0639  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2540  063A  0084               	movwf	4
  2541  063B  2300               	fcall	stringdir
  2542  063C  063B               	xorwf	deviceDataUpdateKeyboard@code,w
  2543  063D  1D03               	skipz
  2544  063E  2E45               	goto	l1906
  2545                           
  2546                           ;main.c: 426:                 code = replaceTwoBytesCodes[i+1];
  2547  063F  083A               	movf	deviceDataUpdateKeyboard@i,w
  2548  0640  3E01               	addlw	1
  2549  0641  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2550  0642  0084               	movwf	4
  2551  0643  2300               	fcall	stringdir
  2552  0644  2E5A               	goto	L3
  2553  0645                     l1906:	
  2554                           ;main.c: 428:             }
  2555                           
  2556                           ;main.c: 427:                 break;
  2557                           
  2558                           
  2559                           ;main.c: 429:         }
  2560  0645  3002               	movlw	2
  2561  0646  00B6               	movwf	??_deviceDataUpdateKeyboard
  2562  0647  0836               	movf	??_deviceDataUpdateKeyboard,w
  2563  0648  07BA               	addwf	deviceDataUpdateKeyboard@i,f
  2564  0649  2E33               	goto	L5
  2565  064A                     l1910:	
  2566                           ;main.c: 430:     } else {
  2567                           
  2568                           
  2569                           ;main.c: 431:         code = ( code == 131 ) ? 63 : code;
  2570  064A  3083               	movlw	131
  2571  064B  063B               	xorwf	deviceDataUpdateKeyboard@code,w
  2572  064C  1903               	btfsc	3,2
  2573  064D  2E55               	goto	l1914
  2574  064E  083B               	movf	deviceDataUpdateKeyboard@code,w
  2575  064F  00B6               	movwf	??_deviceDataUpdateKeyboard
  2576  0650  01B7               	clrf	??_deviceDataUpdateKeyboard+1
  2577  0651  0836               	movf	??_deviceDataUpdateKeyboard,w
  2578  0652  00B8               	movwf	_deviceDataUpdateKeyboard$187
  2579  0653  0837               	movf	??_deviceDataUpdateKeyboard+1,w
  2580  0654  2E58               	goto	L4
  2581  0655                     l1914:	
  2582  0655  303F               	movlw	63
  2583  0656  00B8               	movwf	_deviceDataUpdateKeyboard$187
  2584  0657  3000               	movlw	0
  2585  0658                     L4:	
  2586  0658  00B9               	movwf	_deviceDataUpdateKeyboard$187+1
  2587  0659  0838               	movf	_deviceDataUpdateKeyboard$187,w
  2588  065A                     L3:	
  2589  065A  00B6               	movwf	??_deviceDataUpdateKeyboard
  2590  065B  0836               	movf	??_deviceDataUpdateKeyboard,w
  2591  065C  00BB               	movwf	deviceDataUpdateKeyboard@code
  2592  065D                     l1916:	
  2593                           ;main.c: 432:     }
  2594                           
  2595                           
  2596                           ;main.c: 433:     if ( code == 0xF0 ) {
  2597  065D  30F0               	movlw	240
  2598  065E  063B               	xorwf	deviceDataUpdateKeyboard@code,w
  2599  065F  1D03               	btfss	3,2
  2600  0660  2E66               	goto	l1920
  2601                           
  2602                           ;main.c: 434:         device->ps2Down = 0;
  2603  0661  0A3C               	incf	deviceDataUpdateKeyboard@device,w
  2604  0662  0084               	movwf	4
  2605  0663  1383               	bcf	3,7	;select IRP bank0
  2606  0664  0180               	clrf	0
  2607                           
  2608                           ;main.c: 435:     } else if ( code == 0xE0 ) {
  2609  0665  0008               	return
  2610  0666                     l1920:	
  2611  0666  30E0               	movlw	224
  2612  0667  063B               	xorwf	deviceDataUpdateKeyboard@code,w
  2613  0668  1D03               	btfss	3,2
  2614  0669  2E71               	goto	l1924
  2615                           
  2616                           ;main.c: 436:         device->ps2NeedEncode = 1;
  2617  066A  083C               	movf	deviceDataUpdateKeyboard@device,w
  2618  066B  3E02               	addlw	2
  2619  066C  0084               	movwf	4
  2620  066D  1383               	bcf	3,7	;select IRP bank0
  2621  066E  0180               	clrf	0
  2622  066F  0A80               	incf	0,f
  2623                           
  2624                           ;main.c: 437:     } else {
  2625  0670  0008               	return
  2626  0671                     l1924:	
  2627                           
  2628                           ;main.c: 438:         processKeyCode(code, device->ps2Down);
  2629  0671  0A3C               	incf	deviceDataUpdateKeyboard@device,w
  2630  0672  0084               	movwf	4
  2631  0673  1383               	bcf	3,7	;select IRP bank0
  2632  0674  0800               	movf	0,w
  2633  0675  00B6               	movwf	??_deviceDataUpdateKeyboard
  2634  0676  0836               	movf	??_deviceDataUpdateKeyboard,w
  2635  0677  00AD               	movwf	processKeyCode@keyDown
  2636  0678  083B               	movf	deviceDataUpdateKeyboard@code,w
  2637  0679  23EB               	fcall	_processKeyCode
  2638                           
  2639                           ;main.c: 439:         needSave = 1;
  2640  067A  1283               	bcf	3,5	;RP0=0, select bank0
  2641  067B  1303               	bcf	3,6	;RP1=0, select bank0
  2642  067C  01CF               	clrf	_needSave
  2643  067D  0ACF               	incf	_needSave,f
  2644                           
  2645                           ;main.c: 440:         device->ps2Down = 1;
  2646  067E  0A3C               	incf	deviceDataUpdateKeyboard@device,w
  2647  067F  0084               	movwf	4
  2648  0680  1383               	bcf	3,7	;select IRP bank0
  2649  0681  0180               	clrf	0
  2650  0682  0A80               	incf	0,f
  2651                           
  2652                           ;main.c: 441:         device->ps2NeedEncode = 0;
  2653  0683  083C               	movf	deviceDataUpdateKeyboard@device,w
  2654  0684  3E02               	addlw	2
  2655  0685  0084               	movwf	4
  2656  0686  0180               	clrf	0
  2657                           
  2658                           ;main.c: 442:     }
  2659  0687  0008               	return
  2660  0688                     __end_of_deviceDataUpdateKeyboard:	
  2661                           
  2662                           	psect	text6
  2663  03EB                     __ptext6:	
  2664 ;; *************** function _processKeyCode *****************
  2665 ;; Defined at:
  2666 ;;		line 330 in file "main.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;  keyCode         1    wreg     unsigned char 
  2669 ;;  keyDown         1   13[BANK0 ] unsigned char 
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  keyCode         1   21[BANK0 ] unsigned char 
  2672 ;;  i               1   19[BANK0 ] char 
  2673 ;;  i               1   20[BANK0 ] char 
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2683 ;;      Params:         0       1       0       0
  2684 ;;      Locals:         0       3       0       0
  2685 ;;      Temps:          0       5       0       0
  2686 ;;      Totals:         0       9       0       0
  2687 ;;Total ram usage:        9 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    4
  2690 ;; This function calls:
  2691 ;;		_calculateBitsFromTable
  2692 ;;		_updateKey
  2693 ;; This function is called by:
  2694 ;;		_deviceDataUpdateKeyboard
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           
  2699                           ;psect for function _processKeyCode
  2700  03EB                     _processKeyCode:	
  2701                           
  2702                           ;incstack = 0
  2703                           ; Regs used in _processKeyCode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2704                           ;processKeyCode@keyCode stored from wreg
  2705  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2706  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2707  03ED  00B5               	movwf	processKeyCode@keyCode
  2708                           
  2709                           ;main.c: 330: void processKeyCode(uint8_t keyCode, uint8_t keyDown);main.c: 331: {;main.
      +                          c: 332:     if ( keyCode > 127 ) return;
  2710  03EE  3080               	movlw	128
  2711  03EF  0235               	subwf	processKeyCode@keyCode,w
  2712  03F0  1803               	btfsc	3,0
  2713  03F1  0008               	return
  2714                           
  2715                           ;main.c: 336:     calculateBitsFromTable(&keyCode, &keyDown, &shift_ctrl_alt, importantK
      +                          eys, 6, 0);
  2716  03F2  302D               	movlw	(low (processKeyCode@keyDown| 0))& (0+255)
  2717  03F3  00AE               	movwf	??_processKeyCode
  2718  03F4  082E               	movf	??_processKeyCode,w
  2719  03F5  00A0               	movwf	calculateBitsFromTable@keyDown
  2720  03F6  3057               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
  2721  03F7  00AF               	movwf	??_processKeyCode+1
  2722  03F8  082F               	movf	??_processKeyCode+1,w
  2723  03F9  00A1               	movwf	calculateBitsFromTable@bits
  2724  03FA  30DA               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
  2725  03FB  00B0               	movwf	??_processKeyCode+2
  2726  03FC  0830               	movf	??_processKeyCode+2,w
  2727  03FD  00A2               	movwf	calculateBitsFromTable@table
  2728  03FE  3006               	movlw	6
  2729  03FF  00B1               	movwf	??_processKeyCode+3
  2730  0400  0831               	movf	??_processKeyCode+3,w
  2731  0401  00A3               	movwf	calculateBitsFromTable@count
  2732  0402  01A4               	clrf	calculateBitsFromTable@clearIfFound
  2733  0403  3035               	movlw	(low (processKeyCode@keyCode| 0))& (0+255)
  2734  0404  278E               	fcall	_calculateBitsFromTable
  2735                           
  2736                           ;main.c: 338:     calculateBitsFromTable(&keyCode, &keyDown, &kempstonMouseEmulatorKeys,
      +                           kempstonMouseKeys, 6, numLock);
  2737  0405  302D               	movlw	(low (processKeyCode@keyDown| 0))& (0+255)
  2738  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2739  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2740  0408  00AE               	movwf	??_processKeyCode
  2741  0409  082E               	movf	??_processKeyCode,w
  2742  040A  00A0               	movwf	calculateBitsFromTable@keyDown
  2743  040B  3058               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
  2744  040C  00AF               	movwf	??_processKeyCode+1
  2745  040D  082F               	movf	??_processKeyCode+1,w
  2746  040E  00A1               	movwf	calculateBitsFromTable@bits
  2747  040F  30E0               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
  2748  0410  00B0               	movwf	??_processKeyCode+2
  2749  0411  0830               	movf	??_processKeyCode+2,w
  2750  0412  00A2               	movwf	calculateBitsFromTable@table
  2751  0413  3006               	movlw	6
  2752  0414  00B1               	movwf	??_processKeyCode+3
  2753  0415  0831               	movf	??_processKeyCode+3,w
  2754  0416  00A3               	movwf	calculateBitsFromTable@count
  2755  0417  084E               	movf	_numLock,w
  2756  0418  00B2               	movwf	??_processKeyCode+4
  2757  0419  0832               	movf	??_processKeyCode+4,w
  2758  041A  00A4               	movwf	calculateBitsFromTable@clearIfFound
  2759  041B  3035               	movlw	(low (processKeyCode@keyCode| 0))& (0+255)
  2760  041C  278E               	fcall	_calculateBitsFromTable
  2761                           
  2762                           ;main.c: 344:     if ( keyCode == 119 && keyDown ) {
  2763  041D  3077               	movlw	119
  2764  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2765  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2766  0420  0635               	xorwf	processKeyCode@keyCode,w
  2767  0421  1D03               	btfss	3,2
  2768  0422  2C2F               	goto	l1708
  2769  0423  082D               	movf	processKeyCode@keyDown,w
  2770  0424  1903               	btfsc	3,2
  2771  0425  2C2F               	goto	l1708
  2772                           
  2773                           ;main.c: 345:         numLock = !numLock;
  2774  0426  084E               	movf	_numLock,w
  2775  0427  1D03               	btfss	3,2
  2776  0428  2C2B               	goto	u1520
  2777  0429  3001               	movlw	1
  2778  042A  2C2C               	goto	u1530
  2779  042B                     u1520:	
  2780  042B  3000               	movlw	0
  2781  042C                     u1530:	
  2782  042C  00AE               	movwf	??_processKeyCode
  2783  042D  082E               	movf	??_processKeyCode,w
  2784  042E  00CE               	movwf	_numLock
  2785  042F                     l1708:	
  2786                           ;main.c: 346:     }
  2787                           
  2788                           
  2789                           ;main.c: 349:     if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 0 && keyCode
      +                           == 31 && keyDown ) {
  2790  042F  0857               	movf	_shift_ctrl_alt,w
  2791  0430  390C               	andlw	12
  2792  0431  1903               	btfsc	3,2
  2793  0432  2C43               	goto	l245
  2794  0433  0857               	movf	_shift_ctrl_alt,w
  2795  0434  3930               	andlw	48
  2796  0435  1903               	btfsc	3,2
  2797  0436  2C43               	goto	l245
  2798  0437  301F               	movlw	31
  2799  0438  0635               	xorwf	processKeyCode@keyCode,w
  2800  0439  1D03               	btfss	3,2
  2801  043A  2C43               	goto	l245
  2802  043B  082D               	movf	processKeyCode@keyDown,w
  2803  043C  1903               	btfsc	3,2
  2804  043D  2C43               	goto	l245
  2805                           
  2806                           ;main.c: 350:         outPorts[8] &= 253;
  2807  043E  30FD               	movlw	253
  2808  043F  00AE               	movwf	??_processKeyCode
  2809  0440  082E               	movf	??_processKeyCode,w
  2810  0441  05E1               	andwf	_outPorts+8,f
  2811                           
  2812                           ;main.c: 351:     } else {
  2813  0442  2C44               	goto	l1718
  2814  0443                     l245:	
  2815                           
  2816                           ;main.c: 352:         outPorts[8] |= 2;
  2817  0443  14E1               	bsf	_outPorts+8,1
  2818  0444                     l1718:	
  2819                           ;main.c: 353:     }
  2820                           
  2821                           
  2822                           ;main.c: 356:     if ( (shift_ctrl_alt & 12) > 0 && keyCode == 126 && keyDown ) {
  2823  0444  0857               	movf	_shift_ctrl_alt,w
  2824  0445  390C               	andlw	12
  2825  0446  1903               	btfsc	3,2
  2826  0447  2C54               	goto	l247
  2827  0448  307E               	movlw	126
  2828  0449  0635               	xorwf	processKeyCode@keyCode,w
  2829  044A  1D03               	btfss	3,2
  2830  044B  2C54               	goto	l247
  2831  044C  082D               	movf	processKeyCode@keyDown,w
  2832  044D  1903               	btfsc	3,2
  2833  044E  2C54               	goto	l247
  2834                           
  2835                           ;main.c: 357:         outPorts[8] &= 251;
  2836  044F  30FB               	movlw	251
  2837  0450  00AE               	movwf	??_processKeyCode
  2838  0451  082E               	movf	??_processKeyCode,w
  2839  0452  05E1               	andwf	_outPorts+8,f
  2840                           
  2841                           ;main.c: 358:     } else {
  2842  0453  2C55               	goto	l1726
  2843  0454                     l247:	
  2844                           
  2845                           ;main.c: 359:         outPorts[8] |= 4;
  2846  0454  1561               	bsf	_outPorts+8,2
  2847  0455                     l1726:	
  2848                           ;main.c: 360:     }
  2849                           
  2850                           
  2851                           ;main.c: 366:     for(int8_t i = 0; i < 41 ;i+=2) {
  2852  0455  01B4               	clrf	processKeyCode@i
  2853  0456  0834               	movf	processKeyCode@i,w
  2854  0457  3A80               	xorlw	128
  2855  0458  3E57               	addlw	-169
  2856  0459  1803               	btfsc	3,0
  2857  045A  2C8D               	goto	l1756
  2858  045B                     l1732:	
  2859                           
  2860                           ;main.c: 367:         if ( keyCode == replaceOnShiftKeyDown[i] ) {
  2861  045B  0834               	movf	processKeyCode@i,w
  2862  045C  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  2863  045D  0084               	movwf	4
  2864  045E  2300               	fcall	stringdir
  2865  045F  0635               	xorwf	processKeyCode@keyCode,w
  2866  0460  1D03               	skipz
  2867  0461  2C84               	goto	l1752
  2868                           
  2869                           ;main.c: 368:             if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0) || replaced
      +                           == keyCode) {
  2870  0462  0857               	movf	_shift_ctrl_alt,w
  2871  0463  3903               	andlw	3
  2872  0464  1903               	btfsc	3,2
  2873  0465  2C69               	goto	l1738
  2874  0466  084D               	movf	_replaced,w
  2875  0467  1903               	btfsc	3,2
  2876  0468  2C6D               	goto	l1740
  2877  0469                     l1738:	
  2878  0469  084D               	movf	_replaced,w
  2879  046A  0635               	xorwf	processKeyCode@keyCode,w
  2880  046B  1D03               	skipz
  2881  046C  2C7F               	goto	l1748
  2882  046D                     l1740:	
  2883                           
  2884                           ;main.c: 369:                 if ( keyDown ) replaced = keyCode;
  2885  046D  082D               	movf	processKeyCode@keyDown,w
  2886  046E  1903               	btfsc	3,2
  2887  046F  2C75               	goto	l1744
  2888  0470  0835               	movf	processKeyCode@keyCode,w
  2889  0471  00AE               	movwf	??_processKeyCode
  2890  0472  082E               	movf	??_processKeyCode,w
  2891  0473  00CD               	movwf	_replaced
  2892  0474  2C76               	goto	l1746
  2893  0475                     l1744:	
  2894                           ;main.c: 370:                 else replaced = 0;
  2895                           
  2896  0475  01CD               	clrf	_replaced
  2897  0476                     l1746:	
  2898                           
  2899                           ;main.c: 371:                 keyCode = replaceOnShiftKeyDown[i+1];
  2900  0476  0834               	movf	processKeyCode@i,w
  2901  0477  3E01               	addlw	1
  2902  0478  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  2903  0479  0084               	movwf	4
  2904  047A  2300               	fcall	stringdir
  2905  047B  00AE               	movwf	??_processKeyCode
  2906  047C  082E               	movf	??_processKeyCode,w
  2907  047D  00B5               	movwf	processKeyCode@keyCode
  2908                           
  2909                           ;main.c: 372:             } else {
  2910  047E  2C8D               	goto	l1756
  2911  047F                     l1748:	
  2912                           
  2913                           ;main.c: 373:                 if ( replaced != 0 ) keyCode = 0;
  2914  047F  084D               	movf	_replaced,w
  2915  0480  1903               	btfsc	3,2
  2916  0481  2C8D               	goto	l1756
  2917  0482  01B5               	clrf	processKeyCode@keyCode
  2918                           
  2919                           ;main.c: 375:             break;
  2920                           
  2921                           ;main.c: 374:             }
  2922  0483  2C8D               	goto	l1756
  2923  0484                     l1752:	
  2924                           ;main.c: 376:         }
  2925                           
  2926                           
  2927                           ;main.c: 377:     }
  2928  0484  3002               	movlw	2
  2929  0485  00AE               	movwf	??_processKeyCode
  2930  0486  082E               	movf	??_processKeyCode,w
  2931  0487  07B4               	addwf	processKeyCode@i,f
  2932  0488  0834               	movf	processKeyCode@i,w
  2933  0489  3A80               	xorlw	128
  2934  048A  3E57               	addlw	-169
  2935  048B  1C03               	skipc
  2936  048C  2C5B               	goto	l1732
  2937  048D                     l1756:	
  2938                           
  2939                           ;main.c: 381:     for(int8_t i = 0; i < 8; i++) {
  2940  048D  01B3               	clrf	processKeyCode@i_167
  2941  048E  0833               	movf	processKeyCode@i_167,w
  2942  048F  3A80               	xorlw	128
  2943  0490  3E78               	addlw	-136
  2944  0491  1803               	btfsc	3,0
  2945  0492  2CB9               	goto	l1778
  2946  0493                     l1762:	
  2947                           
  2948                           ;main.c: 382:         if ( keyCode == replaceOnDelayKeyDown[i] ) {
  2949  0493  0833               	movf	processKeyCode@i_167,w
  2950  0494  3ED0               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
  2951  0495  0084               	movwf	4
  2952  0496  2300               	fcall	stringdir
  2953  0497  0635               	xorwf	processKeyCode@keyCode,w
  2954  0498  1D03               	skipz
  2955  0499  2CB0               	goto	l1774
  2956                           
  2957                           ;main.c: 383:             if ( keyDown ) {
  2958  049A  082D               	movf	processKeyCode@keyDown,w
  2959  049B  1903               	btfsc	3,2
  2960  049C  2CB0               	goto	l1774
  2961                           
  2962                           ;main.c: 384:                 if ( delay == 0 ) {
  2963  049D  0848               	movf	_delay,w
  2964  049E  0449               	iorwf	_delay+1,w
  2965  049F  1D03               	btfss	3,2
  2966  04A0  2CAE               	goto	l1770
  2967                           
  2968                           ;main.c: 385:                     delayedKey = keyCode;
  2969  04A1  0835               	movf	processKeyCode@keyCode,w
  2970  04A2  00AE               	movwf	??_processKeyCode
  2971  04A3  082E               	movf	??_processKeyCode,w
  2972  04A4  00CC               	movwf	_delayedKey
  2973                           
  2974                           ;main.c: 386:                     delay = 400;
  2975  04A5  3090               	movlw	144
  2976  04A6  00C8               	movwf	_delay
  2977  04A7  3001               	movlw	1
  2978  04A8  00C9               	movwf	_delay+1
  2979                           
  2980                           ;main.c: 387:                     keyCode = 111;
  2981  04A9  306F               	movlw	111
  2982  04AA  00AE               	movwf	??_processKeyCode
  2983  04AB  082E               	movf	??_processKeyCode,w
  2984  04AC  00B5               	movwf	processKeyCode@keyCode
  2985                           
  2986                           ;main.c: 388:                 } else {
  2987  04AD  2CB9               	goto	l1778
  2988  04AE                     l1770:	
  2989                           
  2990                           ;main.c: 389:                     keyCode = 0;
  2991  04AE  01B5               	clrf	processKeyCode@keyCode
  2992                           
  2993                           ;main.c: 391:                 break;
  2994                           
  2995                           ;main.c: 390:                 }
  2996  04AF  2CB9               	goto	l1778
  2997  04B0                     l1774:	
  2998                           ;main.c: 395:         }
  2999                           
  3000                           ;main.c: 394:             }
  3001                           
  3002                           ;main.c: 392:             } else {
  3003                           
  3004                           
  3005                           ;main.c: 396:     }
  3006  04B0  3001               	movlw	1
  3007  04B1  00AE               	movwf	??_processKeyCode
  3008  04B2  082E               	movf	??_processKeyCode,w
  3009  04B3  07B3               	addwf	processKeyCode@i_167,f
  3010  04B4  0833               	movf	processKeyCode@i_167,w
  3011  04B5  3A80               	xorlw	128
  3012  04B6  3E78               	addlw	-136
  3013  04B7  1C03               	skipc
  3014  04B8  2C93               	goto	l1762
  3015  04B9                     l1778:	
  3016                           
  3017                           ;main.c: 400:     updateKey(keyCode, keyDown );
  3018  04B9  082D               	movf	processKeyCode@keyDown,w
  3019  04BA  00AE               	movwf	??_processKeyCode
  3020  04BB  082E               	movf	??_processKeyCode,w
  3021  04BC  00A6               	movwf	updateKey@down
  3022  04BD  0835               	movf	processKeyCode@keyCode,w
  3023  04BE  26ED               	fcall	_updateKey
  3024  04BF  0008               	return
  3025  04C0                     __end_of_processKeyCode:	
  3026                           
  3027                           	psect	text7
  3028  06ED                     __ptext7:	
  3029 ;; *************** function _updateKey *****************
  3030 ;; Defined at:
  3031 ;;		line 286 in file "main.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  key             1    wreg     unsigned char 
  3034 ;;  down            1    6[BANK0 ] unsigned char 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;  key             1   11[BANK0 ] unsigned char 
  3037 ;;  code            1   12[BANK0 ] unsigned char 
  3038 ;;  localCtrl       1   10[BANK0 ] unsigned char 
  3039 ;;  localShift      1    8[BANK0 ] unsigned char 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3049 ;;      Params:         0       1       0       0
  3050 ;;      Locals:         0       5       0       0
  3051 ;;      Temps:          0       1       0       0
  3052 ;;      Totals:         0       7       0       0
  3053 ;;Total ram usage:        7 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    3
  3056 ;; This function calls:
  3057 ;;		_updatePort
  3058 ;; This function is called by:
  3059 ;;		_processKeyCode
  3060 ;;		_main
  3061 ;; This function uses a non-reentrant model
  3062 ;;
  3063                           
  3064                           
  3065                           ;psect for function _updateKey
  3066  06ED                     _updateKey:	
  3067                           
  3068                           ;incstack = 0
  3069                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3070                           ;updateKey@key stored from wreg
  3071  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  3072  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  3073  06EF  00AB               	movwf	updateKey@key
  3074                           
  3075                           ;main.c: 286: void updateKey(uint8_t key, uint8_t down);main.c: 287: {;main.c: 288:     
      +                          uint8_t code = 0xFF;
  3076  06F0  30FF               	movlw	255
  3077  06F1  00A7               	movwf	??_updateKey
  3078  06F2  0827               	movf	??_updateKey,w
  3079  06F3  00AC               	movwf	updateKey@code
  3080                           
  3081                           ;main.c: 289:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  3082  06F4  01A9               	clrf	_updateKey$154
  3083  06F5  0857               	movf	_shift_ctrl_alt,w
  3084  06F6  3903               	andlw	3
  3085  06F7  1903               	btfsc	3,2
  3086  06F8  2EFE               	goto	l1676
  3087  06F9  084D               	movf	_replaced,w
  3088  06FA  1D03               	btfss	3,2
  3089  06FB  2EFE               	goto	l1676
  3090  06FC  01A9               	clrf	_updateKey$154
  3091  06FD  0AA9               	incf	_updateKey$154,f
  3092  06FE                     l1676:	
  3093  06FE  0829               	movf	_updateKey$154,w
  3094  06FF  00A7               	movwf	??_updateKey
  3095  0700  0827               	movf	??_updateKey,w
  3096  0701  00A8               	movwf	updateKey@localShift
  3097                           
  3098                           ;main.c: 290:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  3099  0702  0857               	movf	_shift_ctrl_alt,w
  3100  0703  390C               	andlw	12
  3101  0704  1903               	btfsc	3,2
  3102  0705  2F08               	goto	u1400
  3103  0706  3001               	movlw	1
  3104  0707  2F09               	goto	u1410
  3105  0708                     u1400:	
  3106  0708  3000               	movlw	0
  3107  0709                     u1410:	
  3108  0709  00A7               	movwf	??_updateKey
  3109  070A  0827               	movf	??_updateKey,w
  3110  070B  00AA               	movwf	updateKey@localCtrl
  3111                           
  3112                           ;main.c: 291:     if ( key < 128 ) code = codeToMatrix[key];
  3113  070C  3080               	movlw	128
  3114  070D  022B               	subwf	updateKey@key,w
  3115  070E  1803               	skipnc
  3116  070F  2F17               	goto	l1684
  3117  0710  082B               	movf	updateKey@key,w
  3118  0711  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  3119  0712  0084               	movwf	4
  3120  0713  2300               	fcall	stringdir
  3121  0714  00A7               	movwf	??_updateKey
  3122  0715  0827               	movf	??_updateKey,w
  3123  0716  00AC               	movwf	updateKey@code
  3124  0717                     l1684:	
  3125                           
  3126                           ;main.c: 292:     if ( code != 0xFF ) {
  3127  0717  0A2C               	incf	updateKey@code,w
  3128  0718  1903               	btfsc	3,2
  3129  0719  2F32               	goto	l1692
  3130                           
  3131                           ;main.c: 293:         updatePort(code, down);
  3132  071A  0826               	movf	updateKey@down,w
  3133  071B  00A7               	movwf	??_updateKey
  3134  071C  0827               	movf	??_updateKey,w
  3135  071D  00A0               	movwf	updatePort@set
  3136  071E  082C               	movf	updateKey@code,w
  3137  071F  222E               	fcall	_updatePort
  3138                           
  3139                           ;main.c: 294:         localShift |= ((code & 64) > 0);
  3140  0720  1283               	bcf	3,5	;RP0=0, select bank0
  3141  0721  1303               	bcf	3,6	;RP1=0, select bank0
  3142  0722  1F2C               	btfss	updateKey@code,6
  3143  0723  2F26               	goto	u1440
  3144  0724  3001               	movlw	1
  3145  0725  2F27               	goto	u1450
  3146  0726                     u1440:	
  3147  0726  3000               	movlw	0
  3148  0727                     u1450:	
  3149  0727  00A7               	movwf	??_updateKey
  3150  0728  0827               	movf	??_updateKey,w
  3151  0729  04A8               	iorwf	updateKey@localShift,f
  3152                           
  3153                           ;main.c: 295:         localCtrl |= ((code & 128) > 0);
  3154  072A  1FAC               	btfss	updateKey@code,7
  3155  072B  2F2E               	goto	u1460
  3156  072C  3001               	movlw	1
  3157  072D  2F2F               	goto	u1470
  3158  072E                     u1460:	
  3159  072E  3000               	movlw	0
  3160  072F                     u1470:	
  3161  072F  00A7               	movwf	??_updateKey
  3162  0730  0827               	movf	??_updateKey,w
  3163  0731  04AA               	iorwf	updateKey@localCtrl,f
  3164  0732                     l1692:	
  3165                           ;main.c: 296:     }
  3166                           
  3167                           
  3168                           ;main.c: 297:     if ( down ) {
  3169  0732  0826               	movf	updateKey@down,w
  3170  0733  1903               	btfsc	3,2
  3171  0734  0008               	return
  3172                           
  3173                           ;main.c: 298:         updatePort(0x00, localShift );
  3174  0735  0828               	movf	updateKey@localShift,w
  3175  0736  00A7               	movwf	??_updateKey
  3176  0737  0827               	movf	??_updateKey,w
  3177  0738  00A0               	movwf	updatePort@set
  3178  0739  3000               	movlw	0
  3179  073A  222E               	fcall	_updatePort
  3180                           
  3181                           ;main.c: 299:         updatePort(0x0F, localCtrl );
  3182  073B  1283               	bcf	3,5	;RP0=0, select bank0
  3183  073C  1303               	bcf	3,6	;RP1=0, select bank0
  3184  073D  082A               	movf	updateKey@localCtrl,w
  3185  073E  00A7               	movwf	??_updateKey
  3186  073F  0827               	movf	??_updateKey,w
  3187  0740  00A0               	movwf	updatePort@set
  3188  0741  300F               	movlw	15
  3189  0742  222E               	fcall	_updatePort
  3190  0743  0008               	return
  3191  0744                     __end_of_updateKey:	
  3192                           ;main.c: 300:     }
  3193                           
  3194                           
  3195                           	psect	text8
  3196  022E                     __ptext8:	
  3197 ;; *************** function _updatePort *****************
  3198 ;; Defined at:
  3199 ;;		line 260 in file "main.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  bit_id          1    wreg     unsigned char 
  3202 ;;  set             1    0[BANK0 ] unsigned char 
  3203 ;; Auto vars:     Size  Location     Type
  3204 ;;  bit_id          1    5[BANK0 ] unsigned char 
  3205 ;;  a               1    4[BANK0 ] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      void 
  3208 ;; Registers used:
  3209 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3215 ;;      Params:         0       1       0       0
  3216 ;;      Locals:         0       2       0       0
  3217 ;;      Temps:          0       3       0       0
  3218 ;;      Totals:         0       6       0       0
  3219 ;;Total ram usage:        6 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    2
  3222 ;; This function calls:
  3223 ;;		Nothing
  3224 ;; This function is called by:
  3225 ;;		_updateKey
  3226 ;;		_main
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           
  3231                           ;psect for function _updatePort
  3232  022E                     _updatePort:	
  3233                           
  3234                           ;incstack = 0
  3235                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  3236                           ;updatePort@bit_id stored from wreg
  3237  022E  1283               	bcf	3,5	;RP0=0, select bank0
  3238  022F  1303               	bcf	3,6	;RP1=0, select bank0
  3239  0230  00A5               	movwf	updatePort@bit_id
  3240                           
  3241                           ;main.c: 260: void updatePort(uint8_t bit_id, uint8_t set);main.c: 261: {;main.c: 262:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  3242  0231  3001               	movlw	1
  3243  0232  00A1               	movwf	??_updatePort
  3244  0233  0825               	movf	updatePort@bit_id,w
  3245  0234  00A2               	movwf	??_updatePort+1
  3246  0235  3003               	movlw	3
  3247  0236                     u1295:	
  3248  0236  1003               	clrc
  3249  0237  0CA2               	rrf	??_updatePort+1,f
  3250  0238  3EFF               	addlw	-1
  3251  0239  1D03               	skipz
  3252  023A  2A36               	goto	u1295
  3253  023B  0822               	movf	??_updatePort+1,w
  3254  023C  3907               	andlw	7
  3255  023D  3E01               	addlw	1
  3256  023E  2A41               	goto	u1304
  3257  023F                     u1305:	
  3258  023F  1003               	clrc
  3259  0240  0DA1               	rlf	??_updatePort,f
  3260  0241                     u1304:	
  3261  0241  3EFF               	addlw	-1
  3262  0242  1D03               	skipz
  3263  0243  2A3F               	goto	u1305
  3264  0244  0821               	movf	??_updatePort,w
  3265  0245  00A3               	movwf	??_updatePort+2
  3266  0246  0823               	movf	??_updatePort+2,w
  3267  0247  00A4               	movwf	updatePort@a
  3268                           
  3269                           ;main.c: 263:     if ( set ) outPorts[bit_id & 7] |= a;
  3270  0248  0820               	movf	updatePort@set,w
  3271  0249  1903               	btfsc	3,2
  3272  024A  2A55               	goto	l1648
  3273  024B  0824               	movf	updatePort@a,w
  3274  024C  00A1               	movwf	??_updatePort
  3275  024D  0825               	movf	updatePort@bit_id,w
  3276  024E  3907               	andlw	7
  3277  024F  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  3278  0250  0084               	movwf	4
  3279  0251  0821               	movf	??_updatePort,w
  3280  0252  1383               	bcf	3,7	;select IRP bank0
  3281  0253  0480               	iorwf	0,f
  3282  0254  0008               	return
  3283  0255                     l1648:	
  3284                           ;main.c: 264:     else outPorts[bit_id & 7] &= ~a;
  3285                           
  3286  0255  0924               	comf	updatePort@a,w
  3287  0256  00A1               	movwf	??_updatePort
  3288  0257  0825               	movf	updatePort@bit_id,w
  3289  0258  3907               	andlw	7
  3290  0259  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  3291  025A  0084               	movwf	4
  3292  025B  0821               	movf	??_updatePort,w
  3293  025C  1383               	bcf	3,7	;select IRP bank0
  3294  025D  0580               	andwf	0,f
  3295  025E  0008               	return
  3296  025F                     __end_of_updatePort:	
  3297                           
  3298                           	psect	text9
  3299  078E                     __ptext9:	
  3300 ;; *************** function _calculateBitsFromTable *****************
  3301 ;; Defined at:
  3302 ;;		line 268 in file "main.c"
  3303 ;; Parameters:    Size  Location     Type
  3304 ;;  keyCode         1    wreg     PTR unsigned char 
  3305 ;;		 -> processKeyCode@keyCode(1), 
  3306 ;;  keyDown         1    0[BANK0 ] PTR unsigned char 
  3307 ;;		 -> processKeyCode@keyDown(1), 
  3308 ;;  bits            1    1[BANK0 ] PTR unsigned char 
  3309 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  3310 ;;  table           1    2[BANK0 ] PTR unsigned char 
  3311 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  3312 ;;  count           1    3[BANK0 ] unsigned char 
  3313 ;;  clearIfFound    1    4[BANK0 ] unsigned char 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  keyCode         1    7[BANK0 ] PTR unsigned char 
  3316 ;;		 -> processKeyCode@keyCode(1), 
  3317 ;;  i               1    8[BANK0 ] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3327 ;;      Params:         0       5       0       0
  3328 ;;      Locals:         0       2       0       0
  3329 ;;      Temps:          0       2       0       0
  3330 ;;      Totals:         0       9       0       0
  3331 ;;Total ram usage:        9 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    2
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_processKeyCode
  3338 ;; This function uses a non-reentrant model
  3339 ;;
  3340                           
  3341                           
  3342                           ;psect for function _calculateBitsFromTable
  3343  078E                     _calculateBitsFromTable:	
  3344                           
  3345                           ;incstack = 0
  3346                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  3347                           ;calculateBitsFromTable@keyCode stored from wreg
  3348  078E  1283               	bcf	3,5	;RP0=0, select bank0
  3349  078F  1303               	bcf	3,6	;RP1=0, select bank0
  3350  0790  00A7               	movwf	calculateBitsFromTable@keyCode
  3351                           
  3352                           ;main.c: 268: void calculateBitsFromTable(uint8_t* keyCode, uint8_t* keyDown, uint8_t* b
      +                          its, uint8_t table[], uint8_t count, uint8_t clearIfFound);main.c: 269: {;main.c: 270:  
      +                             for(uint8_t i = 0; i < count;i++) {
  3353  0791  01A8               	clrf	calculateBitsFromTable@i
  3354  0792                     l1666:	
  3355  0792  0823               	movf	calculateBitsFromTable@count,w
  3356  0793  0228               	subwf	calculateBitsFromTable@i,w
  3357  0794  1803               	btfsc	3,0
  3358  0795  0008               	return
  3359                           
  3360                           ;main.c: 271:         if ( (*keyCode) == table[i] ) {
  3361  0796  0828               	movf	calculateBitsFromTable@i,w
  3362  0797  0722               	addwf	calculateBitsFromTable@table,w
  3363  0798  0084               	movwf	4
  3364  0799  2300               	fcall	stringdir
  3365  079A  00A5               	movwf	??_calculateBitsFromTable
  3366  079B  0827               	movf	calculateBitsFromTable@keyCode,w
  3367  079C  0084               	movwf	4
  3368  079D  1383               	bcf	3,7	;select IRP bank0
  3369  079E  0800               	movf	0,w
  3370  079F  0625               	xorwf	??_calculateBitsFromTable,w
  3371  07A0  1D03               	skipz
  3372  07A1  2FCE               	goto	l1664
  3373                           
  3374                           ;main.c: 272:             if ( (*keyDown) ) {
  3375  07A2  0820               	movf	calculateBitsFromTable@keyDown,w
  3376  07A3  0084               	movwf	4
  3377  07A4  0800               	movf	0,w
  3378  07A5  1903               	btfsc	3,2
  3379  07A6  2FB7               	goto	l1658
  3380                           
  3381                           ;main.c: 273:                 (*bits) |= (1 << i);
  3382  07A7  3001               	movlw	1
  3383  07A8  00A5               	movwf	??_calculateBitsFromTable
  3384  07A9  0A28               	incf	calculateBitsFromTable@i,w
  3385  07AA  2FAD               	goto	u1344
  3386  07AB                     u1345:	
  3387  07AB  1003               	clrc
  3388  07AC  0DA5               	rlf	??_calculateBitsFromTable,f
  3389  07AD                     u1344:	
  3390  07AD  3EFF               	addlw	-1
  3391  07AE  1D03               	skipz
  3392  07AF  2FAB               	goto	u1345
  3393  07B0  0825               	movf	??_calculateBitsFromTable,w
  3394  07B1  00A6               	movwf	??_calculateBitsFromTable+1
  3395  07B2  0821               	movf	calculateBitsFromTable@bits,w
  3396  07B3  0084               	movwf	4
  3397  07B4  0826               	movf	??_calculateBitsFromTable+1,w
  3398  07B5  0480               	iorwf	0,f
  3399                           
  3400                           ;main.c: 274:             } else {
  3401  07B6  2FC7               	goto	l1660
  3402  07B7                     l1658:	
  3403                           
  3404                           ;main.c: 275:                 (*bits) &= ~(1 << i);
  3405  07B7  3001               	movlw	1
  3406  07B8  00A5               	movwf	??_calculateBitsFromTable
  3407  07B9  0A28               	incf	calculateBitsFromTable@i,w
  3408  07BA  2FBD               	goto	u1354
  3409  07BB                     u1355:	
  3410  07BB  1003               	clrc
  3411  07BC  0DA5               	rlf	??_calculateBitsFromTable,f
  3412  07BD                     u1354:	
  3413  07BD  3EFF               	addlw	-1
  3414  07BE  1D03               	skipz
  3415  07BF  2FBB               	goto	u1355
  3416  07C0  0825               	movf	??_calculateBitsFromTable,w
  3417  07C1  3AFF               	xorlw	255
  3418  07C2  00A6               	movwf	??_calculateBitsFromTable+1
  3419  07C3  0821               	movf	calculateBitsFromTable@bits,w
  3420  07C4  0084               	movwf	4
  3421  07C5  0826               	movf	??_calculateBitsFromTable+1,w
  3422  07C6  0580               	andwf	0,f
  3423  07C7                     l1660:	
  3424                           ;main.c: 276:             }
  3425                           
  3426                           
  3427                           ;main.c: 277:             if ( clearIfFound ) {
  3428  07C7  0824               	movf	calculateBitsFromTable@clearIfFound,w
  3429  07C8  1903               	btfsc	3,2
  3430  07C9  0008               	return
  3431                           
  3432                           ;main.c: 278:                 (*keyCode) = 0;
  3433  07CA  0827               	movf	calculateBitsFromTable@keyCode,w
  3434  07CB  0084               	movwf	4
  3435  07CC  0180               	clrf	0
  3436                           
  3437                           ;main.c: 280:             break;
  3438                           
  3439                           ;main.c: 279:             }
  3440  07CD  0008               	return
  3441  07CE                     l1664:	
  3442                           ;main.c: 281:         }
  3443                           
  3444                           
  3445                           ;main.c: 282:     }
  3446  07CE  3001               	movlw	1
  3447  07CF  00A5               	movwf	??_calculateBitsFromTable
  3448  07D0  0825               	movf	??_calculateBitsFromTable,w
  3449  07D1  07A8               	addwf	calculateBitsFromTable@i,f
  3450  07D2  2F92               	goto	l1666
  3451  07D3                     __end_of_calculateBitsFromTable:	
  3452                           
  3453                           	psect	text10
  3454  07D3                     __ptext10:	
  3455 ;; *************** function _deviceDataInit *****************
  3456 ;; Defined at:
  3457 ;;		line 407 in file "main.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  device          1    wreg     PTR struct PS2DeviceData
  3460 ;;		 -> devices(26), 
  3461 ;; Auto vars:     Size  Location     Type
  3462 ;;  device          1    0[BANK0 ] PTR struct PS2DeviceData
  3463 ;;		 -> devices(26), 
  3464 ;; Return value:  Size  Location     Type
  3465 ;;                  1    wreg      void 
  3466 ;; Registers used:
  3467 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3468 ;; Tracked objects:
  3469 ;;		On entry : 0/0
  3470 ;;		On exit  : 0/0
  3471 ;;		Unchanged: 0/0
  3472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3473 ;;      Params:         0       0       0       0
  3474 ;;      Locals:         0       1       0       0
  3475 ;;      Temps:          0       0       0       0
  3476 ;;      Totals:         0       1       0       0
  3477 ;;Total ram usage:        1 bytes
  3478 ;; Hardware stack levels used:    1
  3479 ;; Hardware stack levels required when called:    2
  3480 ;; This function calls:
  3481 ;;		Nothing
  3482 ;; This function is called by:
  3483 ;;		_main
  3484 ;; This function uses a non-reentrant model
  3485 ;;
  3486                           
  3487                           
  3488                           ;psect for function _deviceDataInit
  3489  07D3                     _deviceDataInit:	
  3490                           
  3491                           ;incstack = 0
  3492                           ; Regs used in _deviceDataInit: [wreg-fsr0h+status,2+status,0]
  3493                           ;deviceDataInit@device stored from wreg
  3494  07D3  1283               	bcf	3,5	;RP0=0, select bank0
  3495  07D4  1303               	bcf	3,6	;RP1=0, select bank0
  3496  07D5  00A0               	movwf	deviceDataInit@device
  3497                           
  3498                           ;main.c: 407: void deviceDataInit(struct PS2DeviceData* device);main.c: 408: {;main.c: 4
      +                          09:     device->ps2Down = 1;
  3499  07D6  0A20               	incf	deviceDataInit@device,w
  3500  07D7  0084               	movwf	4
  3501  07D8  1383               	bcf	3,7	;select IRP bank0
  3502  07D9  0180               	clrf	0
  3503  07DA  0A80               	incf	0,f
  3504                           
  3505                           ;main.c: 410:     device->ps2NeedEncode = 0;
  3506  07DB  0820               	movf	deviceDataInit@device,w
  3507  07DC  3E02               	addlw	2
  3508  07DD  0084               	movwf	4
  3509  07DE  0180               	clrf	0
  3510                           
  3511                           ;main.c: 411:     device->readDataPos = 0;
  3512  07DF  0820               	movf	deviceDataInit@device,w
  3513  07E0  3E04               	addlw	4
  3514  07E1  0084               	movwf	4
  3515  07E2  0180               	clrf	0
  3516                           
  3517                           ;main.c: 412:     device->inDataPos = 0;
  3518  07E3  0820               	movf	deviceDataInit@device,w
  3519  07E4  3E03               	addlw	3
  3520  07E5  0084               	movwf	4
  3521  07E6  0180               	clrf	0
  3522                           
  3523                           ;main.c: 413:     device->deviceMode = 0;
  3524  07E7  0820               	movf	deviceDataInit@device,w
  3525  07E8  0084               	movwf	4
  3526  07E9  0180               	clrf	0
  3527  07EA  0008               	return
  3528  07EB                     __end_of_deviceDataInit:	
  3529                           
  3530                           	psect	text11
  3531  07EB                     __ptext11:	
  3532 ;; *************** function ___bmul *****************
  3533 ;; Defined at:
  3534 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;  multiplier      1    wreg     unsigned char 
  3537 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3540 ;;  product         1    2[BANK0 ] unsigned char 
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg, status,2, status,0
  3545 ;; Tracked objects:
  3546 ;;		On entry : 0/0
  3547 ;;		On exit  : 0/0
  3548 ;;		Unchanged: 0/0
  3549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3550 ;;      Params:         0       1       0       0
  3551 ;;      Locals:         0       2       0       0
  3552 ;;      Temps:          0       1       0       0
  3553 ;;      Totals:         0       4       0       0
  3554 ;;Total ram usage:        4 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    2
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_myIsr
  3561 ;;		_main
  3562 ;; This function uses a non-reentrant model
  3563 ;;
  3564                           
  3565                           
  3566                           ;psect for function ___bmul
  3567  07EB                     ___bmul:	
  3568                           
  3569                           ;incstack = 0
  3570                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3571                           ;___bmul@multiplier stored from wreg
  3572  07EB  1283               	bcf	3,5	;RP0=0, select bank0
  3573  07EC  1303               	bcf	3,6	;RP1=0, select bank0
  3574  07ED  00A3               	movwf	___bmul@multiplier
  3575  07EE  01A2               	clrf	___bmul@product
  3576  07EF                     l1978:	
  3577  07EF  1C23               	btfss	___bmul@multiplier,0
  3578  07F0  2FF5               	goto	l1982
  3579  07F1  0820               	movf	___bmul@multiplicand,w
  3580  07F2  00A1               	movwf	??___bmul
  3581  07F3  0821               	movf	??___bmul,w
  3582  07F4  07A2               	addwf	___bmul@product,f
  3583  07F5                     l1982:	
  3584  07F5  1003               	clrc
  3585  07F6  0DA0               	rlf	___bmul@multiplicand,f
  3586  07F7  1003               	clrc
  3587  07F8  0CA3               	rrf	___bmul@multiplier,f
  3588  07F9  0823               	movf	___bmul@multiplier,w
  3589  07FA  1D03               	btfss	3,2
  3590  07FB  2FEF               	goto	l1978
  3591  07FC  0822               	movf	___bmul@product,w
  3592  07FD  0008               	return
  3593  07FE                     __end_of___bmul:	
  3594                           
  3595                           	psect	text12
  3596  04C0                     __ptext12:	
  3597 ;; *************** function _myIsr *****************
  3598 ;; Defined at:
  3599 ;;		line 154 in file "main.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;		None
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  device          1    9[COMMON] PTR struct PS2DeviceData
  3604 ;;		 -> devices(26), 
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3614 ;;      Params:         0       0       0       0
  3615 ;;      Locals:         1       0       0       0
  3616 ;;      Temps:          5       0       0       0
  3617 ;;      Totals:         6       0       0       0
  3618 ;;Total ram usage:        6 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    1
  3621 ;; This function calls:
  3622 ;;		i1___bmul
  3623 ;; This function is called by:
  3624 ;;		Interrupt level 1
  3625 ;; This function uses a non-reentrant model
  3626 ;;
  3627                           
  3628                           
  3629                           ;psect for function _myIsr
  3630  04C0                     _myIsr:	
  3631                           
  3632                           ;main.c: 156:     if(T0IE && T0IF){
  3633  04C0  1A8B               	btfsc	11,5	;volatile
  3634  04C1  1D0B               	btfss	11,2	;volatile
  3635  04C2  2D5A               	goto	i1l195
  3636                           
  3637                           ;main.c: 157:         if ( ps2DataState == 2 ) {
  3638  04C3  3002               	movlw	2
  3639  04C4  067D               	xorwf	_ps2DataState,w
  3640  04C5  1D03               	btfss	3,2
  3641  04C6  2CF2               	goto	i1l2028
  3642                           
  3643                           ;main.c: 159:             if ( ps2BitsCount < 8 ) {
  3644  04C7  3008               	movlw	8
  3645  04C8  027B               	subwf	_ps2BitsCount,w
  3646  04C9  1803               	skipnc
  3647  04CA  2CDC               	goto	i1l2018
  3648                           
  3649                           ;main.c: 160:                 RA3 = ps2Bits & 1;
  3650  04CB  1C7C               	btfss	_ps2Bits,0
  3651  04CC  2CD1               	goto	u207_20
  3652  04CD  1283               	bcf	3,5	;RP0=0, select bank0
  3653  04CE  1303               	bcf	3,6	;RP1=0, select bank0
  3654  04CF  1585               	bsf	5,3	;volatile
  3655  04D0  2CD4               	goto	i1l2014
  3656  04D1                     u207_20:	
  3657  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  3658  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  3659  04D3  1185               	bcf	5,3	;volatile
  3660  04D4                     i1l2014:	
  3661                           
  3662                           ;main.c: 161:                 ps2Parity ^= ps2Bits & 1;
  3663  04D4  087C               	movf	_ps2Bits,w
  3664  04D5  3901               	andlw	1
  3665  04D6  00F4               	movwf	??_myIsr
  3666  04D7  0874               	movf	??_myIsr,w
  3667  04D8  06D6               	xorwf	_ps2Parity,f
  3668                           
  3669                           ;main.c: 162:                 ps2Bits >>= 1;
  3670  04D9  1003               	clrc
  3671  04DA  0CFC               	rrf	_ps2Bits,f
  3672                           
  3673                           ;main.c: 163:             } else if (ps2BitsCount == 8 ) {
  3674  04DB  2D05               	goto	i1l2042
  3675  04DC                     i1l2018:	
  3676  04DC  3008               	movlw	8
  3677  04DD  067B               	xorwf	_ps2BitsCount,w
  3678  04DE  1D03               	btfss	3,2
  3679  04DF  2CEC               	goto	i1l2022
  3680                           
  3681                           ;main.c: 164:                 RA3 = ps2Parity;
  3682  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  3683  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  3684  04E2  1C56               	btfss	_ps2Parity,0
  3685  04E3  2CE8               	goto	u210_20
  3686  04E4  1283               	bcf	3,5	;RP0=0, select bank0
  3687  04E5  1303               	bcf	3,6	;RP1=0, select bank0
  3688  04E6  1585               	bsf	5,3	;volatile
  3689  04E7  2D05               	goto	i1l2042
  3690  04E8                     u210_20:	
  3691  04E8  1283               	bcf	3,5	;RP0=0, select bank0
  3692  04E9  1303               	bcf	3,6	;RP1=0, select bank0
  3693  04EA  1185               	bcf	5,3	;volatile
  3694                           
  3695                           ;main.c: 165:             } else {
  3696  04EB  2D05               	goto	i1l2042
  3697  04EC                     i1l2022:	
  3698                           
  3699                           ;main.c: 166:                 TRISA = 0b11111001;
  3700  04EC  30F9               	movlw	249
  3701  04ED  1683               	bsf	3,5	;RP0=1, select bank1
  3702  04EE  1303               	bcf	3,6	;RP1=0, select bank1
  3703  04EF  0085               	movwf	5	;volatile
  3704                           
  3705                           ;main.c: 167:                 ps2DataState = 0;
  3706  04F0  01FD               	clrf	_ps2DataState
  3707                           
  3708                           ;main.c: 168:             }
  3709  04F1  2D05               	goto	i1l2042
  3710  04F2                     i1l2028:	
  3711                           ;main.c: 171:         } else if ( ps2DataState == 1 ) {
  3712                           
  3713                           ;main.c: 169:             ps2BitsCount++;
  3714                           
  3715  04F2  037D               	decf	_ps2DataState,w
  3716  04F3  1D03               	btfss	3,2
  3717  04F4  2D38               	goto	i1l2056
  3718                           
  3719                           ;main.c: 176:                 if ( ps2BitsCount < 8 ) {
  3720  04F5  3008               	movlw	8
  3721  04F6  027B               	subwf	_ps2BitsCount,w
  3722  04F7  1803               	skipnc
  3723  04F8  2D01               	goto	i1l2040
  3724                           
  3725                           ;main.c: 177:                     ps2Bits >>= 1;
  3726  04F9  1003               	clrc
  3727  04FA  0CFC               	rrf	_ps2Bits,f
  3728                           
  3729                           ;main.c: 178:                     if ( RA3 ) ps2Bits |= 128;
  3730  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  3731  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  3732  04FD  1D85               	btfss	5,3	;volatile
  3733  04FE  2D05               	goto	i1l2042
  3734  04FF  17FC               	bsf	_ps2Bits,7
  3735  0500  2D05               	goto	i1l2042
  3736  0501                     i1l2040:	
  3737                           ;main.c: 180:                 } else if ( ps2BitsCount == 8 ) {
  3738                           
  3739                           ;main.c: 179:                     ps2BitsCount++;
  3740                           
  3741  0501  3008               	movlw	8
  3742  0502  067B               	xorwf	_ps2BitsCount,w
  3743  0503  1D03               	btfss	3,2
  3744  0504  2D0A               	goto	i1l2044
  3745  0505                     i1l2042:	
  3746                           
  3747                           ;main.c: 181:                     ps2BitsCount++;
  3748  0505  3001               	movlw	1
  3749  0506  00F4               	movwf	??_myIsr
  3750  0507  0874               	movf	??_myIsr,w
  3751  0508  07FB               	addwf	_ps2BitsCount,f
  3752                           
  3753                           ;main.c: 182:                 } else if ( ps2BitsCount == 9 ) {
  3754  0509  2D55               	goto	i1l2070
  3755  050A                     i1l2044:	
  3756  050A  3009               	movlw	9
  3757  050B  067B               	xorwf	_ps2BitsCount,w
  3758  050C  1D03               	btfss	3,2
  3759  050D  2D55               	goto	i1l2070
  3760                           
  3761                           ;main.c: 185:                     struct PS2DeviceData* device = &devices[ps2Device];
  3762  050E  300D               	movlw	13
  3763  050F  00F4               	movwf	??_myIsr
  3764  0510  0874               	movf	??_myIsr,w
  3765  0511  00F0               	movwf	i1___bmul@multiplicand
  3766  0512  087A               	movf	_ps2Device,w
  3767  0513  225F               	fcall	i1___bmul
  3768  0514  3EA0               	addlw	(low (_devices| 0))& (0+255)
  3769  0515  00F5               	movwf	??_myIsr+1
  3770  0516  0875               	movf	??_myIsr+1,w
  3771  0517  00F9               	movwf	myIsr@device
  3772                           
  3773                           ;main.c: 187:                     device->inData[device->inDataPos] = ps2Bits;
  3774  0518  087C               	movf	_ps2Bits,w
  3775  0519  00F4               	movwf	??_myIsr
  3776  051A  0879               	movf	myIsr@device,w
  3777  051B  3E03               	addlw	3
  3778  051C  0084               	movwf	4
  3779  051D  1383               	bcf	3,7	;select IRP bank0
  3780  051E  0800               	movf	0,w
  3781  051F  3E05               	addlw	5
  3782  0520  0779               	addwf	myIsr@device,w
  3783  0521  00F5               	movwf	??_myIsr+1
  3784  0522  0875               	movf	??_myIsr+1,w
  3785  0523  0084               	movwf	4
  3786  0524  0874               	movf	??_myIsr,w
  3787  0525  0080               	movwf	0
  3788                           
  3789                           ;main.c: 188:                     device->inDataPos = (device->inDataPos+1) & 7;
  3790  0526  0879               	movf	myIsr@device,w
  3791  0527  3E03               	addlw	3
  3792  0528  0084               	movwf	4
  3793  0529  0800               	movf	0,w
  3794  052A  3E01               	addlw	1
  3795  052B  3907               	andlw	7
  3796  052C  00F4               	movwf	??_myIsr
  3797  052D  0879               	movf	myIsr@device,w
  3798  052E  3E03               	addlw	3
  3799  052F  0084               	movwf	4
  3800  0530  0874               	movf	??_myIsr,w
  3801  0531  0080               	movwf	0
  3802                           
  3803                           ;main.c: 190:                     ps2DataState = 0;
  3804  0532  01FD               	clrf	_ps2DataState
  3805                           
  3806                           ;main.c: 191:                     TRISA = 0b11111001;
  3807  0533  30F9               	movlw	249
  3808  0534  1683               	bsf	3,5	;RP0=1, select bank1
  3809  0535  1303               	bcf	3,6	;RP1=0, select bank1
  3810  0536  0085               	movwf	5	;volatile
  3811                           
  3812                           ;main.c: 194:         } else if ( ps2DataState == 0 ) {
  3813                           
  3814                           ;main.c: 192:                 }
  3815  0537  2D55               	goto	i1l2070
  3816  0538                     i1l2056:	
  3817  0538  087D               	movf	_ps2DataState,w
  3818  0539  1D03               	btfss	3,2
  3819  053A  2D55               	goto	i1l2070
  3820                           
  3821                           ;main.c: 195:             if ( !RA4 && !RA3 ) {
  3822  053B  1283               	bcf	3,5	;RP0=0, select bank0
  3823  053C  1303               	bcf	3,6	;RP1=0, select bank0
  3824  053D  1E05               	btfss	5,4	;volatile
  3825  053E  1985               	btfsc	5,3	;volatile
  3826  053F  2D55               	goto	i1l2070
  3827                           
  3828                           ;main.c: 196:                 ps2BitsCount = 0;
  3829  0540  01FB               	clrf	_ps2BitsCount
  3830                           
  3831                           ;main.c: 197:                 ps2Bits = 0;
  3832  0541  01FC               	clrf	_ps2Bits
  3833                           
  3834                           ;main.c: 198:                 ps2DataState = 1;
  3835  0542  01FD               	clrf	_ps2DataState
  3836  0543  0AFD               	incf	_ps2DataState,f
  3837                           
  3838                           ;main.c: 199:                 ps2Device = RA0;
  3839  0544  3000               	movlw	0
  3840  0545  1805               	btfsc	5,0	;volatile
  3841  0546  3001               	movlw	1
  3842  0547  00FA               	movwf	_ps2Device
  3843                           
  3844                           ;main.c: 200:                 TRISA = 0b11111000;
  3845  0548  30F8               	movlw	248
  3846  0549  1683               	bsf	3,5	;RP0=1, select bank1
  3847  054A  1303               	bcf	3,6	;RP1=0, select bank1
  3848  054B  0085               	movwf	5	;volatile
  3849                           
  3850                           ;main.c: 201:                 RA0 = ps2Device;
  3851  054C  1C7A               	btfss	_ps2Device,0
  3852  054D  2D52               	goto	u220_20
  3853  054E  1283               	bcf	3,5	;RP0=0, select bank0
  3854  054F  1303               	bcf	3,6	;RP1=0, select bank0
  3855  0550  1405               	bsf	5,0	;volatile
  3856  0551  2D55               	goto	i1l2070
  3857  0552                     u220_20:	
  3858  0552  1283               	bcf	3,5	;RP0=0, select bank0
  3859  0553  1303               	bcf	3,6	;RP1=0, select bank0
  3860  0554  1005               	bcf	5,0	;volatile
  3861  0555                     i1l2070:	
  3862                           ;main.c: 203:         }
  3863                           
  3864                           ;main.c: 202:             }
  3865                           
  3866                           
  3867                           ;main.c: 204:         T0IF=0;
  3868  0555  110B               	bcf	11,2	;volatile
  3869                           
  3870                           ;main.c: 205:         TMR0 = 255;
  3871  0556  30FF               	movlw	255
  3872  0557  1283               	bcf	3,5	;RP0=0, select bank0
  3873  0558  1303               	bcf	3,6	;RP1=0, select bank0
  3874  0559  0081               	movwf	1	;volatile
  3875  055A                     i1l195:	
  3876                           ;main.c: 208:     }
  3877                           
  3878                           ;main.c: 206:     } else {
  3879                           
  3880  055A  0878               	movf	??_myIsr+4,w
  3881  055B  008A               	movwf	10
  3882  055C  0877               	movf	??_myIsr+3,w
  3883  055D  0084               	movwf	4
  3884  055E  0E76               	swapf	(??_myIsr+2)^(0+4294967168),w
  3885  055F  0083               	movwf	3
  3886  0560  0EFE               	swapf	126,f
  3887  0561  0E7E               	swapf	126,w
  3888  0562  0009               	retfie
  3889  0563                     __end_of_myIsr:	
  3890                           
  3891                           	psect	intentry
  3892  0004                     __pintentry:	
  3893                           ;incstack = 0
  3894                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3895                           
  3896  0004                     interrupt_function:	
  3897  007E                     saved_w	set	btemp
  3898  0004  00FE               	movwf	btemp
  3899  0005  0E03               	swapf	3,w
  3900  0006  00F6               	movwf	??_myIsr+2
  3901  0007  0804               	movf	4,w
  3902  0008  00F7               	movwf	??_myIsr+3
  3903  0009  080A               	movf	10,w
  3904  000A  00F8               	movwf	??_myIsr+4
  3905  000B  2CC0               	ljmp	_myIsr
  3906                           
  3907                           	psect	text13
  3908  025F                     __ptext13:	
  3909 ;; *************** function i1___bmul *****************
  3910 ;; Defined at:
  3911 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  multiplier      1    wreg     unsigned char 
  3914 ;;  multiplicand    1    0[COMMON] unsigned char 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  multiplier      1    2[COMMON] unsigned char 
  3917 ;;  __bmul          1    3[COMMON] unsigned char 
  3918 ;; Return value:  Size  Location     Type
  3919 ;;                  1    wreg      unsigned char 
  3920 ;; Registers used:
  3921 ;;		wreg, status,2, status,0
  3922 ;; Tracked objects:
  3923 ;;		On entry : 0/0
  3924 ;;		On exit  : 0/0
  3925 ;;		Unchanged: 0/0
  3926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3927 ;;      Params:         1       0       0       0
  3928 ;;      Locals:         2       0       0       0
  3929 ;;      Temps:          1       0       0       0
  3930 ;;      Totals:         4       0       0       0
  3931 ;;Total ram usage:        4 bytes
  3932 ;; Hardware stack levels used:    1
  3933 ;; This function calls:
  3934 ;;		Nothing
  3935 ;; This function is called by:
  3936 ;;		_myIsr
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940                           
  3941                           ;psect for function i1___bmul
  3942  025F                     i1___bmul:	
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  3946                           ;i1___bmul@multiplier stored from wreg
  3947  025F  00F2               	movwf	i1___bmul@multiplier
  3948  0260  01F3               	clrf	i1___bmul@product
  3949  0261                     i1l1992:	
  3950  0261  1C72               	btfss	i1___bmul@multiplier,0
  3951  0262  2A67               	goto	i1l1996
  3952  0263  0870               	movf	i1___bmul@multiplicand,w
  3953  0264  00F1               	movwf	??i1___bmul
  3954  0265  0871               	movf	??i1___bmul,w
  3955  0266  07F3               	addwf	i1___bmul@product,f
  3956  0267                     i1l1996:	
  3957  0267  1003               	clrc
  3958  0268  0DF0               	rlf	i1___bmul@multiplicand,f
  3959  0269  1003               	clrc
  3960  026A  0CF2               	rrf	i1___bmul@multiplier,f
  3961  026B  0872               	movf	i1___bmul@multiplier,w
  3962  026C  1D03               	btfss	3,2
  3963  026D  2A61               	goto	i1l1992
  3964  026E  0873               	movf	i1___bmul@product,w
  3965  026F  0008               	return
  3966  0270                     __end_ofi1___bmul:	
  3967  007E                     btemp	set	126	;btemp
  3968  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    229
    Data        12
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     36      69
    BANK1            80      0      26
    BANK2            48      0       0

Pointer List with Targets:

    main@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 

    deviceDataUpdateMouse@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 

    deviceDataUpdateKeyboard@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 

    deviceDataInit@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@keyDown	PTR unsigned char  size(1) Largest target is 1
		 -> processKeyCode@keyDown(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 

    calculateBitsFromTable@keyCode	PTR unsigned char  size(1) Largest target is 1
		 -> processKeyCode@keyCode(BANK0[1]), 

    myIsr@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    _myIsr->i1___bmul

Critical Paths under _main in BANK0

    _main->_deviceDataUpdateKeyboard
    _deviceDataUpdateKeyboard->_processKeyCode
    _processKeyCode->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    6405
                                             29 BANK0      7     7      0
                             ___bmul
                     _deviceDataInit
           _deviceDataUpdateKeyboard
              _deviceDataUpdateMouse
                               _send
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              0 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send                                                 5     4      1     212
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _deviceDataUpdateMouse                                5     5      0     476
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _deviceDataUpdateKeyboard                             7     7      0    3159
                                             22 BANK0      7     7      0
                     _processKeyCode
 ---------------------------------------------------------------------------------
 (2) _processKeyCode                                       9     8      1    2613
                                             13 BANK0      9     8      1
             _calculateBitsFromTable
                          _updateKey
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                              6 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) _calculateBitsFromTable                               9     4      5    1092
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (1) _deviceDataInit                                       1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     125
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _myIsr                                                6     6      0     176
                                              4 COMMON     6     6      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (6) i1___bmul                                             4     3      1      87
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   _deviceDataInit
   _deviceDataUpdateKeyboard
     _processKeyCode
       _calculateBitsFromTable
       _updateKey
         _updatePort
   _deviceDataUpdateMouse
   _send
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)
   i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      1A       7       32.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      45       3       86.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6D      10        0.0%
ABS                  0      0      6D       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Wed Nov 28 16:11:45 2018

                                 pc 0002                      ___bmul@product 0022  
                                fsr 0004            ??_calculateBitsFromTable 0025  
                               l233 0759                                 l245 0443  
                               l350 022C                                 l247 0454  
                               l294 05BA                                 l297 0600  
                               _GIE 005F                                 _RA0 0028  
                               _RA1 0029                                 _RA2 002A  
                               _RA3 002B                                 _RA4 002C  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _PSA 040B  
                               fsr0 0004                                 indf 0000  
                              l2310 01C8                                l2230 00FF  
                              l2222 00EB                                l2214 00BF  
                              l2206 00B7                                l2320 01DB  
                              l2312 01D0                                l2080 0040  
                              l2322 01DD                                l2242 0143  
                              l2226 00F3                                l2244 0147  
                              l2236 0110                                l2332 01F5  
                              l2342 0209                                l2350 0217  
                              l2318 01D7                                l2254 0154  
                              l2326 01E0                                l2086 004E  
                              l2328 01EB                                l2282 0194  
                              l2266 017B                                l2290 01A4  
                              l1660 07C7                                l1740 046D  
                              l1732 045B                                l1708 042F  
                              l2348 0215                                l2276 0188  
                              l1726 0455                                l1718 0444  
                              l1910 064A                                l1822 06C6  
                              l2358 0228                                l2286 019A  
                              l1664 07CE                                l1648 0255  
                              l1744 0475                                l1752 0484  
                              l1920 0666                                l1832 06D9  
                              l1840 06E6                                l1816 06C1  
                              l1658 07B7                                l1666 0792  
                              l1770 04AE                                l1762 0493  
                              l1746 0476                                l1738 0469  
                              l1914 0655                                l1906 0645  
                              l2298 01B5                                l1692 0732  
                              l1684 0717                                l1676 06FE  
                              l1748 047F                                l1756 048D  
                              l1924 0671                                l1916 065D  
                              l1860 076A                                l1774 04B0  
                              l1960 05BB                                l1778 04B9  
                              l1970 05F4                                l1946 0590  
                              l1938 0575                                l1796 06A7  
                              l1982 07F5                                l1878 078B  
                              l1978 07EF                                _EEIE 0467  
                              _EEIF 0067                                _CMIE 0466  
                              _CMIF 0066                                _T0IE 005D  
                              _T0IF 005A                                _T0CS 040D  
                              u1304 0241                                u1400 0708  
                              u1305 023F                                u1410 0709  
                              _T0SE 040C                                u1344 07AD  
                              u1440 0726                                u1520 042B  
                              u1345 07AB                                u1354 07BD  
                              u1450 0727                                u1530 042C  
                              u1355 07BB                                u1460 072E  
                              u1470 072F                                u1295 0236  
                              u1740 06A4                                u2577 06AD  
                              u2587 06CA                                _PEIE 005E  
                              u2597 06EA                                _INTE 005C  
                              _INTF 0059                                _RBIE 005B  
                              _RBIF 0058                                _RCIE 0465  
                              _RCIF 0065                                _TMR0 0001  
                              _TMR2 0011                                _SPEN 00C7  
                              _TXIE 0464                                _TXIF 0064  
            ?_deviceDataUpdateMouse 0070                                _main 0034  
                              _send 0688                                btemp 007E  
                              start 000C       __end_of_deviceLogicMouseIndex 03DF  
                 ___bmul@multiplier 0023                               ?_main 0070  
                             ?_send 0020                               _CMCON 001F  
      __end_of_replaceTwoBytesCodes 03CC                               _T1CON 0010  
                             i1l195 055A                               _RCSTA 0018  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
              __end_of_codeToMatrix 0386                               _TRISA 0085  
                             _TRISB 0086                               _VRCON 009F  
                             _TXSTA 0098                               _nRBPU 040F  
                             _delay 0048                     __end_of_myDelay 07FF  
                             _myIsr 04C0                               main@i 003F  
                             main@j 0040                    __end_ofi1___bmul 0270  
                  updatePort@bit_id 0025                               pclath 000A  
                             send@i 0023                               send@j 0024  
                             status 0003                        updateKey@key 002B  
                             wtemp0 007E                    _deviceLogicDelay 004A  
                   __initialization 000D                    _deviceLogicIndex 0055  
                      __end_of_main 022E                    _deviceLogicState 0053  
                      __end_of_send 06ED                              ??_main 003D  
                            ??_send 0021     __size_of_calculateBitsFromTable 0045  
                 sendDataToAltera@i 0024                              _CCP1IE 0462  
                            _CCP1IF 0062                              ?_myIsr 0070  
                            _CCPR1H 0016                              _CCPR1L 0015  
                            i1l2022 04EC                              i1l2014 04D4  
                            i1l2040 0501                              i1l2042 0505  
                            i1l2018 04DC                              i1l2044 050A  
                            i1l2028 04F2                              i1l2070 0555  
                            i1l2056 0538                              u210_20 04E8  
                            i1l1992 0261                              u220_20 0552  
                            i1l1996 0267                              _INTEDG 040E  
                            u207_20 04D1                              _TMR1IE 0460  
                            _TMR1IF 0060                              _TMR2IE 0461  
                            _TMR2IF 0061            __end_of_sendDataToAltera 078E  
             _replaceOnDelayKeyDown 03D5                    ??_processKeyCode 002E  
                            ___bmul 07EB                           ??_myDelay 0020  
                            saved_w 007E                       updateKey@code 002C  
                     updateKey@down 0026             __end_of__initialization 0032  
            _calculateBitsFromTable 078E                _replaceTwoBytesCodes 03B0  
                       myIsr@device 0079                 ___bmul@multiplicand 0020  
                     updatePort@set 0020                   _deviceLogicDevice 0052  
                    __pcstackCOMMON 0070                        __pidataBANK0 0270  
                     __end_of_myIsr 0563                           ?i1___bmul 0070  
              deviceDataInit@device 0020                 updateKey@localShift 0028  
                  i1___bmul@product 0073             ??_deviceDataUpdateMouse 0020  
                           ??_myIsr 0074             __size_of_deviceDataInit 0018  
                      _ps2DataState 007D                          __pbssBANK0 0044  
                        __pbssBANK1 00A0           deviceDataUpdateKeyboard@i 003A  
                      _ps2BitsCount 007B                        _codeToMatrix 0306  
                        _delayedKey 004C                _sendDataToAltera$161 0022  
                        __pmaintext 0034                             ?___bmul 0020  
                        __pintentry 0004                             _CCP1CON 0017  
                        ??i1___bmul 0071          calculateBitsFromTable@bits 0021  
                   processKeyCode@i 0034                  __size_of_updateKey 0057  
          _deviceDataUpdateKeyboard 0603           deviceDataUpdateMouse@code 0022  
                        __stringtab 0300          _kempstonMouseEmulatorDelay 0046  
     __end_of_replaceOnShiftKeyDown 03B0               _deviceLogicMouseIndex 03DE  
                   __size_of___bmul 0013                             _ps2Bits 007C  
                           _devices 00A0                             __ptext1 0744  
                           __ptext2 07FE                             __ptext3 0688  
                           __ptext4 0563                             __ptext5 0603  
                           __ptext6 03EB                             __ptext7 06ED  
                           __ptext8 022E                             __ptext9 078E  
     calculateBitsFromTable@keyCode 0027       calculateBitsFromTable@keyDown 0020  
                           _myDelay 07FE  calculateBitsFromTable@clearIfFound 0024  
                           _numLock 004E                 i1___bmul@multiplier 0072  
                           clrloop0 027D                end_of_initialization 0032  
                     _importantKeys 03DF                      _shift_ctrl_alt 0057  
                 ?_sendDataToAltera 0070                   __end_of_updateKey 0744  
                ??_sendDataToAltera 0020                   _kempstonMouseKeys 03E5  
                        _updatePort 022E                      _deviceDataInit 07D3  
           ?_calculateBitsFromTable 0020                          main@device 0043  
    deviceDataUpdateKeyboard@device 003C                      _deviceLogicMax 03DD  
         __end_of_kempstonMouseKeys 03EB                  _deviceLogicCommand 0054  
                    __end_of___bmul 07FE               processKeyCode@keyCode 0035  
                 __size_ofi1___bmul 0011               processKeyCode@keyDown 002D  
               start_initialization 000D              __end_of_deviceDataInit 07EB  
                       updatePort@a 0024      __end_of_calculateBitsFromTable 07D3  
           calculateBitsFromTable@i 0028                 __end_of_deviceLogic 03D5  
    __size_of_deviceDataUpdateMouse 00A0       __end_of_deviceDataUpdateMouse 0603  
            __end_of_deviceLogicMax 03DE                            ??___bmul 0021  
                       __pdataBANK0 0059          ??_deviceDataUpdateKeyboard 0036  
           __size_of_processKeyCode 00D5                         __pbssCOMMON 007A  
                         ___latbits 0000                     ?_deviceDataInit 0070  
                     __pcstackBANK0 0020                         ?_updatePort 0020  
             _kempstonMouseCounterA 0044               _kempstonMouseCounterB 0051  
             _kempstonMouseCounterC 0050                  updateKey@localCtrl 002A  
                     _ps2DeviceMain 0064                          send@device 0022  
                         _ps2Device 007A                           _ps2Parity 0056  
                         __pstrings 0300         deviceDataUpdateMouse@device 0024  
                       _deviceLogic 03CC                            ?_myDelay 0070  
       calculateBitsFromTable@count 0023                      __size_of_myIsr 00A3  
       calculateBitsFromTable@table 0022                   interrupt_function 0004  
                         clear_ram0 027C               i1___bmul@multiplicand 0070  
               __size_of_updatePort 0031               _replaceOnShiftKeyDown 0386  
                         _updateKey 06ED                            i1___bmul 025F  
                       __stringbase 0305                           main@i_208 0042  
         __size_of_sendDataToAltera 004A    __end_of_deviceDataUpdateKeyboard 0688  
                        ?_updateKey 0026                  __end_of__stringtab 0306  
                    _processKeyCode 03EB                    __size_of_myDelay 0001  
                          __ptext10 07D3                            __ptext11 07EB  
                          __ptext12 04C0                            __ptext13 025F  
                          _needSave 004F                       __size_of_main 01FA  
     __end_of_replaceOnDelayKeyDown 03DD                       __size_of_send 0065  
                          _replaced 004D                            _outPorts 0059  
                          main@code 0041              __end_of_processKeyCode 04C0  
               processKeyCode@i_167 0033                    ??_deviceDataInit 0020  
                      ??_updatePort 0021           _kempstonMouseEmulatorKeys 0058  
                          intlevel1 0000                            send@byte 0020  
             _deviceDataUpdateMouse 0563                           stringcode 0300  
      deviceDataUpdateKeyboard@code 003B                  __end_of_updatePort 025F  
                   ?_processKeyCode 002D                         ??_updateKey 0027  
                  _sendDataToAltera 0744                            stringdir 0300  
                          stringtab 0300               __end_of_importantKeys 03E5  
            deviceDataUpdateMouse@j 0023                       _updateKey$154 0029  
 __size_of_deviceDataUpdateKeyboard 0085           ?_deviceDataUpdateKeyboard 0070  
      _deviceDataUpdateKeyboard$187 0038  
