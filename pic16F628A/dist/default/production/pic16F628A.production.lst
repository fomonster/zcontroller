

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Oct 30 16:38:09 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.00
    24                           ; Generated 27/05/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F628A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001F                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  008C                     	;# 
    85  008E                     	;# 
    86  0092                     	;# 
    87  0098                     	;# 
    88  0099                     	;# 
    89  009A                     	;# 
    90  009B                     	;# 
    91  009C                     	;# 
    92  009D                     	;# 
    93  009F                     	;# 
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0015                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001F                     	;# 
   118  0081                     	;# 
   119  0085                     	;# 
   120  0086                     	;# 
   121  008C                     	;# 
   122  008E                     	;# 
   123  0092                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009F                     	;# 
   131                           
   132                           	psect	idataBANK0
   133  047B                     __pidataBANK0:	
   134                           
   135                           ;initializer for _outPorts
   136  047B  3400               	retlw	0
   137  047C  3400               	retlw	0
   138  047D  3400               	retlw	0
   139  047E  3400               	retlw	0
   140  047F  3400               	retlw	0
   141  0480  3400               	retlw	0
   142  0481  3400               	retlw	0
   143  0482  3400               	retlw	0
   144  0483  3407               	retlw	7
   145  0484  34F5               	retlw	245
   146  0485  34DA               	retlw	218
   147                           
   148                           	psect	strings
   149  0200                     __pstrings:	
   150  0200                     stringtab:	
   151  0200                     __stringtab:	
   152  0200                     stringcode:	
   153                           ;	String table - string pointers are 1 byte each
   154                           
   155  0200                     stringdir:	
   156  0200  3002               	movlw	high stringdir
   157  0201  008A               	movwf	10
   158  0202  0804               	movf	4,w
   159  0203  0A84               	incf	4,f
   160  0204  0782               	addwf	2,f
   161  0205                     __stringbase:	
   162  0205  3400               	retlw	0
   163  0206                     __end_of__stringtab:	
   164  0206                     _codeToMatrix:	
   165  0206  34FF               	retlw	255
   166  0207  34FF               	retlw	255
   167  0208  34FF               	retlw	255
   168  0209  34FF               	retlw	255
   169  020A  34FF               	retlw	255
   170  020B  34FF               	retlw	255
   171  020C  34FF               	retlw	255
   172  020D  34FF               	retlw	255
   173  020E  34FF               	retlw	255
   174  020F  34FF               	retlw	255
   175  0210  34FF               	retlw	255
   176  0211  34FF               	retlw	255
   177  0212  34FF               	retlw	255
   178  0213  34FF               	retlw	255
   179  0214  349C               	retlw	156
   180  0215  34FF               	retlw	255
   181  0216  34FF               	retlw	255
   182  0217  34FF               	retlw	255
   183  0218  34FF               	retlw	255
   184  0219  34FF               	retlw	255
   185  021A  34FF               	retlw	255
   186  021B  3402               	retlw	2
   187  021C  3403               	retlw	3
   188  021D  34FF               	retlw	255
   189  021E  34FF               	retlw	255
   190  021F  34FF               	retlw	255
   191  0220  3408               	retlw	8
   192  0221  3409               	retlw	9
   193  0222  3401               	retlw	1
   194  0223  340A               	retlw	10
   195  0224  340B               	retlw	11
   196  0225  34D6               	retlw	214
   197  0226  34FF               	retlw	255
   198  0227  3418               	retlw	24
   199  0228  3410               	retlw	16
   200  0229  3411               	retlw	17
   201  022A  3412               	retlw	18
   202  022B  341B               	retlw	27
   203  022C  3413               	retlw	19
   204  022D  34FF               	retlw	255
   205  022E  345C               	retlw	92
   206  022F  3407               	retlw	7
   207  0230  3420               	retlw	32
   208  0231  3419               	retlw	25
   209  0232  3422               	retlw	34
   210  0233  341A               	retlw	26
   211  0234  3423               	retlw	35
   212  0235  3463               	retlw	99
   213  0236  3464               	retlw	100
   214  0237  341F               	retlw	31
   215  0238  3427               	retlw	39
   216  0239  3426               	retlw	38
   217  023A  3421               	retlw	33
   218  023B  3425               	retlw	37
   219  023C  3424               	retlw	36
   220  023D  3454               	retlw	84
   221  023E  34A0               	retlw	160
   222  023F  3406               	retlw	6
   223  0240  3417               	retlw	23
   224  0241  341E               	retlw	30
   225  0242  341D               	retlw	29
   226  0243  341C               	retlw	28
   227  0244  3414               	retlw	20
   228  0245  34FF               	retlw	255
   229  0246  34FF               	retlw	255
   230  0247  349F               	retlw	159
   231  0248  3416               	retlw	22
   232  0249  3415               	retlw	21
   233  024A  340D               	retlw	13
   234  024B  3404               	retlw	4
   235  024C  340C               	retlw	12
   236  024D  34FF               	retlw	255
   237  024E  34C1               	retlw	193
   238  024F  3497               	retlw	151
   239  0250  34A0               	retlw	160
   240  0251  340E               	retlw	14
   241  0252  348D               	retlw	141
   242  0253  3405               	retlw	5
   243  0254  349E               	retlw	158
   244  0255  3483               	retlw	131
   245  0256  348B               	retlw	139
   246  0257  3493               	retlw	147
   247  0258  349C               	retlw	156
   248  0259  349B               	retlw	155
   249  025A  34E5               	retlw	229
   250  025B  348E               	retlw	142
   251  025C  34A3               	retlw	163
   252  025D  34A6               	retlw	166
   253  025E  344B               	retlw	75
   254  025F  34FF               	retlw	255
   255  0260  3406               	retlw	6
   256  0261  34DD               	retlw	221
   257  0262  34A4               	retlw	164
   258  0263  34D1               	retlw	209
   259  0264  34A7               	retlw	167
   260  0265  3494               	retlw	148
   261  0266  348C               	retlw	140
   262  0267  3484               	retlw	132
   263  0268  3496               	retlw	150
   264  0269  34C9               	retlw	201
   265  026A  34D9               	retlw	217
   266  026B  34E1               	retlw	225
   267  026C  3444               	retlw	68
   268  026D  3488               	retlw	136
   269  026E  3485               	retlw	133
   270  026F  3403               	retlw	3
   271  0270  349A               	retlw	154
   272  0271  341B               	retlw	27
   273  0272  341C               	retlw	28
   274  0273  34A2               	retlw	162
   275  0274  3498               	retlw	152
   276  0275  34C0               	retlw	192
   277  0276  3404               	retlw	4
   278  0277  3497               	retlw	151
   279  0278  340B               	retlw	11
   280  0279  3423               	retlw	35
   281  027A  3424               	retlw	36
   282  027B  3414               	retlw	20
   283  027C  3443               	retlw	67
   284  027D  34FF               	retlw	255
   285  027E  34FF               	retlw	255
   286  027F  3496               	retlw	150
   287  0280  3413               	retlw	19
   288  0281  349E               	retlw	158
   289  0282  34A7               	retlw	167
   290  0283  340C               	retlw	12
   291  0284  34FF               	retlw	255
   292  0285  34FF               	retlw	255
   293  0286                     __end_of_codeToMatrix:	
   294  0286                     _replaceOnShiftKeyDown:	
   295  0286  3416               	retlw	22
   296  0287  344F               	retlw	79
   297  0288  341E               	retlw	30
   298  0289  3450               	retlw	80
   299  028A  3426               	retlw	38
   300  028B  3451               	retlw	81
   301  028C  3425               	retlw	37
   302  028D  3453               	retlw	83
   303  028E  342E               	retlw	46
   304  028F  3456               	retlw	86
   305  0290  3436               	retlw	54
   306  0291  3457               	retlw	87
   307  0292  343D               	retlw	61
   308  0293  345C               	retlw	92
   309  0294  343E               	retlw	62
   310  0295  345E               	retlw	94
   311  0296  3446               	retlw	70
   312  0297  345F               	retlw	95
   313  0298  3445               	retlw	69
   314  0299  3460               	retlw	96
   315  029A  344E               	retlw	78
   316  029B  3461               	retlw	97
   317  029C  3455               	retlw	85
   318  029D  3462               	retlw	98
   319  029E  345D               	retlw	93
   320  029F  3463               	retlw	99
   321  02A0  344C               	retlw	76
   322  02A1  3467               	retlw	103
   323  02A2  3452               	retlw	82
   324  02A3  3468               	retlw	104
   325  02A4  3441               	retlw	65
   326  02A5  346A               	retlw	106
   327  02A6  3449               	retlw	73
   328  02A7  346D               	retlw	109
   329  02A8  344A               	retlw	74
   330  02A9  346E               	retlw	110
   331  02AA  340E               	retlw	14
   332  02AB  3448               	retlw	72
   333  02AC  3454               	retlw	84
   334  02AD  3464               	retlw	100
   335  02AE  345B               	retlw	91
   336  02AF  3465               	retlw	101
   337  02B0                     __end_of_replaceOnShiftKeyDown:	
   338  02B0                     _replaceTwoBytesCodes:	
   339  02B0  3411               	retlw	17
   340  02B1  3408               	retlw	8
   341  02B2  3414               	retlw	20
   342  02B3  3413               	retlw	19
   343  02B4  3470               	retlw	112
   344  02B5  3417               	retlw	23
   345  02B6  346C               	retlw	108
   346  02B7  3418               	retlw	24
   347  02B8  347D               	retlw	125
   348  02B9  3419               	retlw	25
   349  02BA  3471               	retlw	113
   350  02BB  341F               	retlw	31
   351  02BC  3469               	retlw	105
   352  02BD  3420               	retlw	32
   353  02BE  347A               	retlw	122
   354  02BF  3427               	retlw	39
   355  02C0  3475               	retlw	117
   356  02C1  3428               	retlw	40
   357  02C2  346B               	retlw	107
   358  02C3  342F               	retlw	47
   359  02C4  3472               	retlw	114
   360  02C5  3430               	retlw	48
   361  02C6  3474               	retlw	116
   362  02C7  3437               	retlw	55
   363  02C8  344A               	retlw	74
   364  02C9  3438               	retlw	56
   365  02CA  345A               	retlw	90
   366  02CB  3439               	retlw	57
   367  02CC                     __end_of_replaceTwoBytesCodes:	
   368  02CC                     _replaceOnDelayKeyDown:	
   369  02CC  341F               	retlw	31
   370  02CD  3454               	retlw	84
   371  02CE  345B               	retlw	91
   372  02CF  3463               	retlw	99
   373  02D0  3464               	retlw	100
   374  02D1  3465               	retlw	101
   375  02D2  3448               	retlw	72
   376  02D3  345D               	retlw	93
   377  02D4                     __end_of_replaceOnDelayKeyDown:	
   378  02D4                     _importantKeys:	
   379  02D4  3412               	retlw	18
   380  02D5  3459               	retlw	89
   381  02D6  3414               	retlw	20
   382  02D7  3413               	retlw	19
   383  02D8  3411               	retlw	17
   384  02D9  3408               	retlw	8
   385  02DA                     __end_of_importantKeys:	
   386  02DA                     _kempstonMouseKeys:	
   387  02DA  346B               	retlw	107
   388  02DB  3474               	retlw	116
   389  02DC  3475               	retlw	117
   390  02DD  3472               	retlw	114
   391  02DE  3473               	retlw	115
   392  02DF  3404               	retlw	4
   393  02E0                     __end_of_kempstonMouseKeys:	
   394  0005                     _PORTA	set	5
   395  0018                     _RCSTA	set	24
   396  001F                     _CMCON	set	31
   397  0017                     _CCP1CON	set	23
   398  0016                     _CCPR1H	set	22
   399  0015                     _CCPR1L	set	21
   400  0010                     _T1CON	set	16
   401  0011                     _TMR2	set	17
   402  000F                     _TMR1H	set	15
   403  000E                     _TMR1L	set	14
   404  0006                     _PORTB	set	6
   405  0005                     _PORTAbits	set	5
   406  0001                     _TMR0	set	1
   407  00C7                     _SPEN	set	199
   408  0060                     _TMR1IF	set	96
   409  0061                     _TMR2IF	set	97
   410  0062                     _CCP1IF	set	98
   411  0064                     _TXIF	set	100
   412  0065                     _RCIF	set	101
   413  0066                     _CMIF	set	102
   414  0067                     _EEIF	set	103
   415  0058                     _RBIF	set	88
   416  0059                     _INTF	set	89
   417  005B                     _RBIE	set	91
   418  005C                     _INTE	set	92
   419  005E                     _PEIE	set	94
   420  005F                     _GIE	set	95
   421  0029                     _RA1	set	41
   422  002A                     _RA2	set	42
   423  005A                     _T0IF	set	90
   424  005D                     _T0IE	set	93
   425  0086                     _TRISB	set	134
   426  0098                     _TXSTA	set	152
   427  009F                     _VRCON	set	159
   428  042F                     _TRISA7	set	1071
   429  042E                     _TRISA6	set	1070
   430  042D                     _TRISA5	set	1069
   431  042C                     _TRISA4	set	1068
   432  042B                     _TRISA3	set	1067
   433  042A                     _TRISA2	set	1066
   434  0429                     _TRISA1	set	1065
   435  0428                     _TRISA0	set	1064
   436  0408                     _PS0	set	1032
   437  0409                     _PS1	set	1033
   438  040A                     _PS2	set	1034
   439  040B                     _PSA	set	1035
   440  040C                     _T0SE	set	1036
   441  040D                     _T0CS	set	1037
   442  040E                     _INTEDG	set	1038
   443  040F                     _nRBPU	set	1039
   444  0460                     _TMR1IE	set	1120
   445  0461                     _TMR2IE	set	1121
   446  0462                     _CCP1IE	set	1122
   447  0464                     _TXIE	set	1124
   448  0465                     _RCIE	set	1125
   449  0466                     _CMIE	set	1126
   450  0467                     _EEIE	set	1127
   451                           
   452                           	psect	cinit
   453  0011                     start_initialization:	
   454                           ; #config settings
   455                           
   456  0011                     __initialization:	
   457                           
   458                           ; Initialize objects allocated to BANK0
   459  0011  247B               	fcall	__pidataBANK0	;fetch initializer
   460  0012  00BF               	movwf	__pdataBANK0& (0+127)
   461  0013  247C               	fcall	__pidataBANK0+1	;fetch initializer
   462  0014  00C0               	movwf	(__pdataBANK0+1)& (0+127)
   463  0015  247D               	fcall	__pidataBANK0+2	;fetch initializer
   464  0016  00C1               	movwf	(__pdataBANK0+2)& (0+127)
   465  0017  247E               	fcall	__pidataBANK0+3	;fetch initializer
   466  0018  00C2               	movwf	(__pdataBANK0+3)& (0+127)
   467  0019  247F               	fcall	__pidataBANK0+4	;fetch initializer
   468  001A  00C3               	movwf	(__pdataBANK0+4)& (0+127)
   469  001B  2480               	fcall	__pidataBANK0+5	;fetch initializer
   470  001C  00C4               	movwf	(__pdataBANK0+5)& (0+127)
   471  001D  2481               	fcall	__pidataBANK0+6	;fetch initializer
   472  001E  00C5               	movwf	(__pdataBANK0+6)& (0+127)
   473  001F  2482               	fcall	__pidataBANK0+7	;fetch initializer
   474  0020  00C6               	movwf	(__pdataBANK0+7)& (0+127)
   475  0021  2483               	fcall	__pidataBANK0+8	;fetch initializer
   476  0022  00C7               	movwf	(__pdataBANK0+8)& (0+127)
   477  0023  2484               	fcall	__pidataBANK0+9	;fetch initializer
   478  0024  00C8               	movwf	(__pdataBANK0+9)& (0+127)
   479  0025  2485               	fcall	__pidataBANK0+10	;fetch initializer
   480  0026  00C9               	movwf	(__pdataBANK0+10)& (0+127)
   481                           
   482                           ; Clear objects allocated to BANK0
   483  0027  1383               	bcf	3,7	;select IRP bank0
   484  0028  3033               	movlw	low __pbssBANK0
   485  0029  0084               	movwf	4
   486  002A  303F               	movlw	low (__pbssBANK0+12)
   487  002B  2486               	fcall	clear_ram0
   488                           
   489                           ; Clear objects allocated to COMMON
   490  002C  3079               	movlw	low __pbssCOMMON
   491  002D  0084               	movwf	4
   492  002E  307E               	movlw	low (__pbssCOMMON+5)
   493  002F  2486               	fcall	clear_ram0
   494  0030                     end_of_initialization:	
   495                           ;End of C runtime variable initialization code
   496                           
   497  0030                     __end_of__initialization:	
   498  0030  0183               	clrf	3
   499  0031  2832               	ljmp	_main	;jump to C main() function
   500                           
   501                           	psect	bssCOMMON
   502  0079                     __pbssCOMMON:	
   503  0079                     _ps2NeedEncode:	
   504  0079                     	ds	1
   505  007A                     _ps2Device:	
   506  007A                     	ds	1
   507  007B                     _ps2BitsCount:	
   508  007B                     	ds	1
   509  007C                     _ps2Bits:	
   510  007C                     	ds	1
   511  007D                     _ps2DataState:	
   512  007D                     	ds	1
   513                           
   514                           	psect	bssBANK0
   515  0033                     __pbssBANK0:	
   516  0033                     _kempstonMouseEmulatorDelay:	
   517  0033                     	ds	2
   518  0035                     _delay:	
   519  0035                     	ds	2
   520  0037                     _delayedKey:	
   521  0037                     	ds	1
   522  0038                     _replaced:	
   523  0038                     	ds	1
   524  0039                     _numLock:	
   525  0039                     	ds	1
   526  003A                     _ps2Down:	
   527  003A                     	ds	1
   528  003B                     _ps2WaitCode:	
   529  003B                     	ds	1
   530  003C                     _ps2Data:	
   531  003C                     	ds	1
   532  003D                     _kempstonMouseEmulatorKeys:	
   533  003D                     	ds	1
   534  003E                     _shift_ctrl_alt:	
   535  003E                     	ds	1
   536                           
   537                           	psect	dataBANK0
   538  003F                     __pdataBANK0:	
   539  003F                     _outPorts:	
   540  003F                     	ds	11
   541                           
   542                           	psect	clrtext
   543  0486                     clear_ram0:	
   544                           ;	Called with FSR containing the base address, and
   545                           ;	W with the last address+1
   546                           
   547  0486  0064               	clrwdt	;clear the watchdog before getting into this loop
   548  0487                     clrloop0:	
   549  0487  0180               	clrf	0	;clear RAM location pointed to by FSR
   550  0488  0A84               	incf	4,f	;increment pointer
   551  0489  0604               	xorwf	4,w	;XOR with final address
   552  048A  1903               	btfsc	3,2	;have we reached the end yet?
   553  048B  3400               	retlw	0	;all done for this memory range, return
   554  048C  0604               	xorwf	4,w	;XOR again to restore value
   555  048D  2C87               	goto	clrloop0	;do the next byte
   556                           
   557                           	psect	cstackCOMMON
   558  0070                     __pcstackCOMMON:	
   559  0070                     ?_myIsr:	
   560  0070                     ??_myIsr:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_myDelay:	
   564                           ; 1 bytes @ 0x0
   565                           
   566  0070                     ?_sendDataToAltera:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_main:	
   570                           ; 1 bytes @ 0x0
   571                           
   572                           
   573                           ; 1 bytes @ 0x0
   574  0070                     	ds	6
   575  0076                     _myIsr$135:	
   576                           
   577                           ; 2 bytes @ 0x6
   578  0076                     	ds	2
   579  0078                     myIsr@i:	
   580                           
   581                           ; 1 bytes @ 0x8
   582  0078                     	ds	1
   583                           
   584                           	psect	cstackBANK0
   585  0020                     __pcstackBANK0:	
   586  0020                     ?_updatePort:	
   587  0020                     ??_myDelay:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0020                     ??_sendDataToAltera:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0020                     ?_calculateBitsFromTable:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0020                     updatePort@set:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0020                     calculateBitsFromTable@table:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 1 bytes @ 0x0
   604  0020                     	ds	1
   605  0021                     ??_updatePort:	
   606  0021                     calculateBitsFromTable@count:	
   607                           ; 1 bytes @ 0x1
   608                           
   609                           
   610                           ; 1 bytes @ 0x1
   611  0021                     	ds	1
   612  0022                     calculateBitsFromTable@clearIfFound:	
   613  0022                     _sendDataToAltera$152:	
   614                           ; 1 bytes @ 0x2
   615                           
   616                           
   617                           ; 2 bytes @ 0x2
   618  0022                     	ds	1
   619  0023                     ??_calculateBitsFromTable:	
   620                           
   621                           ; 1 bytes @ 0x3
   622  0023                     	ds	1
   623  0024                     updatePort@a:	
   624  0024                     sendDataToAltera@i:	
   625                           ; 1 bytes @ 0x4
   626                           
   627                           
   628                           ; 1 bytes @ 0x4
   629  0024                     	ds	1
   630  0025                     updatePort@bit_id:	
   631  0025                     calculateBitsFromTable@bits:	
   632                           ; 1 bytes @ 0x5
   633                           
   634                           
   635                           ; 1 bytes @ 0x5
   636  0025                     	ds	1
   637  0026                     ?_updateKey:	
   638  0026                     updateKey@set:	
   639                           ; 1 bytes @ 0x6
   640                           
   641  0026                     calculateBitsFromTable@i:	
   642                           ; 1 bytes @ 0x6
   643                           
   644                           
   645                           ; 1 bytes @ 0x6
   646  0026                     	ds	1
   647  0027                     ??_updateKey:	
   648                           
   649                           ; 1 bytes @ 0x7
   650  0027                     	ds	1
   651  0028                     updateKey@localShift:	
   652                           
   653                           ; 1 bytes @ 0x8
   654  0028                     	ds	1
   655  0029                     _updateKey$145:	
   656                           
   657                           ; 1 bytes @ 0x9
   658  0029                     	ds	1
   659  002A                     updateKey@localCtrl:	
   660                           
   661                           ; 1 bytes @ 0xA
   662  002A                     	ds	1
   663  002B                     updateKey@key:	
   664                           
   665                           ; 1 bytes @ 0xB
   666  002B                     	ds	1
   667  002C                     updateKey@code:	
   668                           
   669                           ; 1 bytes @ 0xC
   670  002C                     	ds	1
   671  002D                     ??_main:	
   672                           
   673                           ; 1 bytes @ 0xD
   674  002D                     	ds	3
   675  0030                     main@i:	
   676                           
   677                           ; 1 bytes @ 0x10
   678  0030                     	ds	1
   679  0031                     main@i_168:	
   680                           
   681                           ; 1 bytes @ 0x11
   682  0031                     	ds	1
   683  0032                     main@i_167:	
   684                           
   685                           ; 1 bytes @ 0x12
   686  0032                     	ds	1
   687                           
   688                           	psect	maintext
   689  0032                     __pmaintext:	
   690 ;;
   691 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   692 ;;
   693 ;; *************** function _main *****************
   694 ;; Defined at:
   695 ;;		line 362 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  i               1   17[BANK0 ] char 
   700 ;;  i               1   18[BANK0 ] char 
   701 ;;  i               1   16[BANK0 ] char 
   702 ;; Return value:  Size  Location     Type
   703 ;;                  1    wreg      void 
   704 ;; Registers used:
   705 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   706 ;; Tracked objects:
   707 ;;		On entry : B00/0
   708 ;;		On exit  : 0/0
   709 ;;		Unchanged: 0/0
   710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   711 ;;      Params:         0       0       0       0
   712 ;;      Locals:         0       3       0       0
   713 ;;      Temps:          0       3       0       0
   714 ;;      Totals:         0       6       0       0
   715 ;;Total ram usage:        6 bytes
   716 ;; Hardware stack levels required when called:    4
   717 ;; This function calls:
   718 ;;		_calculateBitsFromTable
   719 ;;		_sendDataToAltera
   720 ;;		_updateKey
   721 ;;		_updatePort
   722 ;; This function is called by:
   723 ;;		Startup code after reset
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           
   728                           ;psect for function _main
   729  0032                     _main:	
   730                           
   731                           ;main.c: 364:     for(int8_t i=0;i<8;i++) {
   732                           
   733                           ;incstack = 0
   734                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   735  0032  1283               	bcf	3,5	;RP0=0, select bank0
   736  0033  1303               	bcf	3,6	;RP1=0, select bank0
   737  0034  01B0               	clrf	main@i
   738  0035  0830               	movf	main@i,w
   739  0036  3A80               	xorlw	128
   740  0037  3E78               	addlw	-136
   741  0038  1803               	btfsc	3,0
   742  0039  2848               	goto	l1457
   743  003A                     l1451:	
   744                           
   745                           ;main.c: 365:         outPorts[i] = 0;
   746  003A  0830               	movf	main@i,w
   747  003B  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
   748  003C  0084               	movwf	4
   749  003D  1383               	bcf	3,7	;select IRP bank0
   750  003E  0180               	clrf	0
   751                           
   752                           ;main.c: 366:     }
   753  003F  3001               	movlw	1
   754  0040  00AD               	movwf	??_main
   755  0041  082D               	movf	??_main,w
   756  0042  07B0               	addwf	main@i,f
   757  0043  0830               	movf	main@i,w
   758  0044  3A80               	xorlw	128
   759  0045  3E78               	addlw	-136
   760  0046  1C03               	skipc
   761  0047  283A               	goto	l1451
   762  0048                     l1457:	
   763                           
   764                           ;main.c: 367:     outPorts[8] = 0x07;
   765  0048  3007               	movlw	7
   766  0049  00AD               	movwf	??_main
   767  004A  082D               	movf	??_main,w
   768  004B  00C7               	movwf	_outPorts+8
   769                           
   770                           ;main.c: 368:     outPorts[9] = 0xF5;
   771  004C  30F5               	movlw	245
   772  004D  00AD               	movwf	??_main
   773  004E  082D               	movf	??_main,w
   774  004F  00C8               	movwf	_outPorts+9
   775                           
   776                           ;main.c: 369:     outPorts[10] = 0xDA;
   777  0050  30DA               	movlw	218
   778  0051  00AD               	movwf	??_main
   779  0052  082D               	movf	??_main,w
   780  0053  00C9               	movwf	_outPorts+10
   781                           
   782                           ;main.c: 370:     sendDataToAltera();
   783  0054  23C2               	fcall	_sendDataToAltera
   784                           
   785                           ;main.c: 375:     GIE = 1;
   786  0055  178B               	bsf	11,7	;volatile
   787                           
   788                           ;main.c: 376:     PEIE = 0;
   789  0056  130B               	bcf	11,6	;volatile
   790                           
   791                           ;main.c: 377:     T0IE = 1;
   792  0057  168B               	bsf	11,5	;volatile
   793                           
   794                           ;main.c: 378:     INTE = 0;
   795  0058  120B               	bcf	11,4	;volatile
   796                           
   797                           ;main.c: 379:     RBIE = 0;
   798  0059  118B               	bcf	11,3	;volatile
   799                           
   800                           ;main.c: 380:     T0IF = 0;
   801  005A  110B               	bcf	11,2	;volatile
   802                           
   803                           ;main.c: 381:     INTF = 0;
   804  005B  108B               	bcf	11,1	;volatile
   805                           
   806                           ;main.c: 382:     RBIF = 0;
   807  005C  100B               	bcf	11,0	;volatile
   808                           
   809                           ;main.c: 385:     EEIF = 0;
   810  005D  1283               	bcf	3,5	;RP0=0, select bank0
   811  005E  1303               	bcf	3,6	;RP1=0, select bank0
   812  005F  138C               	bcf	12,7	;volatile
   813                           
   814                           ;main.c: 386:     CMIF = 0;
   815  0060  130C               	bcf	12,6	;volatile
   816                           
   817                           ;main.c: 387:     RCIF = 0;
   818  0061  128C               	bcf	12,5	;volatile
   819                           
   820                           ;main.c: 388:     TXIF = 0;
   821  0062  120C               	bcf	12,4	;volatile
   822                           
   823                           ;main.c: 389:     CCP1IF = 0;
   824  0063  110C               	bcf	12,2	;volatile
   825                           
   826                           ;main.c: 390:     TMR2IF = 0;
   827  0064  108C               	bcf	12,1	;volatile
   828                           
   829                           ;main.c: 391:     TMR1IF = 0;
   830  0065  100C               	bcf	12,0	;volatile
   831                           
   832                           ;main.c: 394:     EEIE = 0;
   833  0066  1683               	bsf	3,5	;RP0=1, select bank1
   834  0067  1303               	bcf	3,6	;RP1=0, select bank1
   835  0068  138C               	bcf	12,7	;volatile
   836                           
   837                           ;main.c: 395:     CMIE = 0;
   838  0069  130C               	bcf	12,6	;volatile
   839                           
   840                           ;main.c: 396:     RCIE = 0;
   841  006A  128C               	bcf	12,5	;volatile
   842                           
   843                           ;main.c: 397:     TXIE = 0;
   844  006B  120C               	bcf	12,4	;volatile
   845                           
   846                           ;main.c: 398:     CCP1IE = 0;
   847  006C  110C               	bcf	12,2	;volatile
   848                           
   849                           ;main.c: 399:     TMR2IE = 0;
   850  006D  108C               	bcf	12,1	;volatile
   851                           
   852                           ;main.c: 400:     TMR1IE = 0;
   853  006E  100C               	bcf	12,0	;volatile
   854                           
   855                           ;main.c: 403:     nRBPU = 0;
   856  006F  1381               	bcf	1,7	;volatile
   857                           
   858                           ;main.c: 404:     INTEDG = 0;
   859  0070  1301               	bcf	1,6	;volatile
   860                           
   861                           ;main.c: 405:     T0CS = 1;
   862  0071  1681               	bsf	1,5	;volatile
   863                           
   864                           ;main.c: 406:     T0SE = 1;
   865  0072  1601               	bsf	1,4	;volatile
   866                           
   867                           ;main.c: 407:     PSA = 1;
   868  0073  1581               	bsf	1,3	;volatile
   869                           
   870                           ;main.c: 408:     PS2 = 0;
   871  0074  1101               	bcf	1,2	;volatile
   872                           
   873                           ;main.c: 409:     PS1 = 0;
   874  0075  1081               	bcf	1,1	;volatile
   875                           
   876                           ;main.c: 410:     PS0 = 0;
   877  0076  1001               	bcf	1,0	;volatile
   878                           
   879                           ;main.c: 413:     TMR0 = 255;
   880  0077  30FF               	movlw	255
   881  0078  1283               	bcf	3,5	;RP0=0, select bank0
   882  0079  1303               	bcf	3,6	;RP1=0, select bank0
   883  007A  0081               	movwf	1	;volatile
   884                           
   885                           ;main.c: 414:     TMR1L = 0;
   886  007B  018E               	clrf	14	;volatile
   887                           
   888                           ;main.c: 415:     TMR1H = 0;
   889  007C  018F               	clrf	15	;volatile
   890                           
   891                           ;main.c: 416:     TMR2 = 0;
   892  007D  0191               	clrf	17	;volatile
   893                           
   894                           ;main.c: 417:     T1CON = 6;
   895  007E  3006               	movlw	6
   896  007F  0090               	movwf	16	;volatile
   897                           
   898                           ;main.c: 418:     CCPR1L = 0;
   899  0080  0195               	clrf	21	;volatile
   900                           
   901                           ;main.c: 419:     CCPR1H = 0;
   902  0081  0196               	clrf	22	;volatile
   903                           
   904                           ;main.c: 420:     CCP1CON = 0;
   905  0082  0197               	clrf	23	;volatile
   906                           
   907                           ;main.c: 421:     CMCON = 7;
   908  0083  3007               	movlw	7
   909  0084  009F               	movwf	31	;volatile
   910                           
   911                           ;main.c: 422:     VRCON = 0;
   912  0085  1683               	bsf	3,5	;RP0=1, select bank1
   913  0086  1303               	bcf	3,6	;RP1=0, select bank1
   914  0087  019F               	clrf	31	;volatile
   915                           
   916                           ;main.c: 423:     RCSTA = 0;
   917  0088  1283               	bcf	3,5	;RP0=0, select bank0
   918  0089  1303               	bcf	3,6	;RP1=0, select bank0
   919  008A  0198               	clrf	24	;volatile
   920                           
   921                           ;main.c: 424:     TXSTA = 128;
   922  008B  3080               	movlw	128
   923  008C  1683               	bsf	3,5	;RP0=1, select bank1
   924  008D  1303               	bcf	3,6	;RP1=0, select bank1
   925  008E  0098               	movwf	24	;volatile
   926                           
   927                           ;main.c: 425:     SPEN = 0;
   928  008F  1283               	bcf	3,5	;RP0=0, select bank0
   929  0090  1303               	bcf	3,6	;RP1=0, select bank0
   930  0091  1398               	bcf	24,7	;volatile
   931                           
   932                           ;main.c: 430:     PORTA = 0;
   933  0092  0185               	clrf	5	;volatile
   934                           
   935                           ;main.c: 432:     TRISA0 = 1;
   936  0093  1683               	bsf	3,5	;RP0=1, select bank1
   937  0094  1303               	bcf	3,6	;RP1=0, select bank1
   938  0095  1405               	bsf	5,0	;volatile
   939                           
   940                           ;main.c: 433:     TRISA1 = 0;
   941  0096  1085               	bcf	5,1	;volatile
   942                           
   943                           ;main.c: 434:     TRISA2 = 0;
   944  0097  1105               	bcf	5,2	;volatile
   945                           
   946                           ;main.c: 435:     TRISA3 = 1;
   947  0098  1585               	bsf	5,3	;volatile
   948                           
   949                           ;main.c: 436:     TRISA4 = 1;
   950  0099  1605               	bsf	5,4	;volatile
   951                           
   952                           ;main.c: 437:     TRISA5 = 1;
   953  009A  1685               	bsf	5,5	;volatile
   954                           
   955                           ;main.c: 438:     TRISA6 = 1;
   956  009B  1705               	bsf	5,6	;volatile
   957                           
   958                           ;main.c: 439:     TRISA7 = 1;
   959  009C  1785               	bsf	5,7	;volatile
   960                           
   961                           ;main.c: 442:     TRISB = 0;
   962  009D  0186               	clrf	6	;volatile
   963                           
   964                           ;main.c: 443:     PORTB = 0xFF;
   965  009E  30FF               	movlw	255
   966  009F  1283               	bcf	3,5	;RP0=0, select bank0
   967  00A0  1303               	bcf	3,6	;RP1=0, select bank0
   968  00A1  0086               	movwf	6	;volatile
   969                           
   970                           ;main.c: 446:     ps2Data = 0;
   971  00A2  01BC               	clrf	_ps2Data
   972                           
   973                           ;main.c: 448:     ps2WaitCode = 0;
   974  00A3  01BB               	clrf	_ps2WaitCode
   975                           
   976                           ;main.c: 449:     ps2Down = 1;
   977  00A4  01BA               	clrf	_ps2Down
   978  00A5  0ABA               	incf	_ps2Down,f
   979                           
   980                           ;main.c: 450:     ps2NeedEncode = 0;
   981  00A6  01F9               	clrf	_ps2NeedEncode
   982                           
   983                           ;main.c: 451:     ps2DataState = 0;
   984  00A7  01FD               	clrf	_ps2DataState
   985                           
   986                           ;main.c: 453:     delay = 0;
   987  00A8  01B5               	clrf	_delay
   988  00A9  01B6               	clrf	_delay+1
   989                           
   990                           ;main.c: 454:     delayedKey = 0;
   991  00AA  01B7               	clrf	_delayedKey
   992                           
   993                           ;main.c: 455:     shift_ctrl_alt = 0;
   994  00AB  01BE               	clrf	_shift_ctrl_alt
   995                           
   996                           ;main.c: 456:     replaced = 0;
   997  00AC  01B8               	clrf	_replaced
   998  00AD                     l1587:	
   999                           ;main.c: 458:     while(1)
  1000                           
  1001                           
  1002                           ;main.c: 459:     {;main.c: 466:         if ( ps2DataState == 2 ) {
  1003  00AD  3002               	movlw	2
  1004  00AE  067D               	xorwf	_ps2DataState,w
  1005  00AF  1D03               	btfss	3,2
  1006  00B0  297A               	goto	l1677
  1007                           
  1008                           ;main.c: 474:                 calculateBitsFromTable(&shift_ctrl_alt, importantKeys, 6, 
      +                          0);
  1009  00B1  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
  1010  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1011  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1012  00B4  00AD               	movwf	??_main
  1013  00B5  082D               	movf	??_main,w
  1014  00B6  00A0               	movwf	calculateBitsFromTable@table
  1015  00B7  3006               	movlw	6
  1016  00B8  00AE               	movwf	??_main+1
  1017  00B9  082E               	movf	??_main+1,w
  1018  00BA  00A1               	movwf	calculateBitsFromTable@count
  1019  00BB  01A2               	clrf	calculateBitsFromTable@clearIfFound
  1020  00BC  303E               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
  1021  00BD  240C               	fcall	_calculateBitsFromTable
  1022                           
  1023                           ;main.c: 476:                 calculateBitsFromTable(&kempstonMouseEmulatorKeys, kempsto
      +                          nMouseKeys, 6, numLock);
  1024  00BE  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
  1025  00BF  1283               	bcf	3,5	;RP0=0, select bank0
  1026  00C0  1303               	bcf	3,6	;RP1=0, select bank0
  1027  00C1  00AD               	movwf	??_main
  1028  00C2  082D               	movf	??_main,w
  1029  00C3  00A0               	movwf	calculateBitsFromTable@table
  1030  00C4  3006               	movlw	6
  1031  00C5  00AE               	movwf	??_main+1
  1032  00C6  082E               	movf	??_main+1,w
  1033  00C7  00A1               	movwf	calculateBitsFromTable@count
  1034  00C8  0839               	movf	_numLock,w
  1035  00C9  00AF               	movwf	??_main+2
  1036  00CA  082F               	movf	??_main+2,w
  1037  00CB  00A2               	movwf	calculateBitsFromTable@clearIfFound
  1038  00CC  303D               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
  1039  00CD  240C               	fcall	_calculateBitsFromTable
  1040                           
  1041                           ;main.c: 482:                 if ( ps2Data == 119 && ps2Down ) {
  1042  00CE  3077               	movlw	119
  1043  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  1044  00D0  1303               	bcf	3,6	;RP1=0, select bank0
  1045  00D1  063C               	xorwf	_ps2Data,w
  1046  00D2  1D03               	btfss	3,2
  1047  00D3  28E0               	goto	l1597
  1048  00D4  083A               	movf	_ps2Down,w
  1049  00D5  1903               	btfsc	3,2
  1050  00D6  28E0               	goto	l1597
  1051                           
  1052                           ;main.c: 483:                     numLock = !numLock;
  1053  00D7  0839               	movf	_numLock,w
  1054  00D8  1D03               	btfss	3,2
  1055  00D9  28DC               	goto	u1270
  1056  00DA  3001               	movlw	1
  1057  00DB  28DD               	goto	u1280
  1058  00DC                     u1270:	
  1059  00DC  3000               	movlw	0
  1060  00DD                     u1280:	
  1061  00DD  00AD               	movwf	??_main
  1062  00DE  082D               	movf	??_main,w
  1063  00DF  00B9               	movwf	_numLock
  1064  00E0                     l1597:	
  1065                           ;main.c: 484:                 }
  1066                           
  1067                           
  1068                           ;main.c: 487:                 if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 
      +                          0 && ps2Data == 31 && ps2Down ) {
  1069  00E0  083E               	movf	_shift_ctrl_alt,w
  1070  00E1  390C               	andlw	12
  1071  00E2  1903               	btfsc	3,2
  1072  00E3  28F4               	goto	l235
  1073  00E4  083E               	movf	_shift_ctrl_alt,w
  1074  00E5  3930               	andlw	48
  1075  00E6  1903               	btfsc	3,2
  1076  00E7  28F4               	goto	l235
  1077  00E8  301F               	movlw	31
  1078  00E9  063C               	xorwf	_ps2Data,w
  1079  00EA  1D03               	btfss	3,2
  1080  00EB  28F4               	goto	l235
  1081  00EC  083A               	movf	_ps2Down,w
  1082  00ED  1903               	btfsc	3,2
  1083  00EE  28F4               	goto	l235
  1084                           
  1085                           ;main.c: 488:                     outPorts[8] &= 253;
  1086  00EF  30FD               	movlw	253
  1087  00F0  00AD               	movwf	??_main
  1088  00F1  082D               	movf	??_main,w
  1089  00F2  05C7               	andwf	_outPorts+8,f
  1090                           
  1091                           ;main.c: 489:                 } else {
  1092  00F3  28F5               	goto	l1607
  1093  00F4                     l235:	
  1094                           
  1095                           ;main.c: 490:                     outPorts[8] |= 2;
  1096  00F4  14C7               	bsf	_outPorts+8,1
  1097  00F5                     l1607:	
  1098                           ;main.c: 491:                 }
  1099                           
  1100                           
  1101                           ;main.c: 494:                 if ( (shift_ctrl_alt & 12) > 0 && ps2Data == 126 && ps2Dow
      +                          n ) {
  1102  00F5  083E               	movf	_shift_ctrl_alt,w
  1103  00F6  390C               	andlw	12
  1104  00F7  1903               	btfsc	3,2
  1105  00F8  2905               	goto	l237
  1106  00F9  307E               	movlw	126
  1107  00FA  063C               	xorwf	_ps2Data,w
  1108  00FB  1D03               	btfss	3,2
  1109  00FC  2905               	goto	l237
  1110  00FD  083A               	movf	_ps2Down,w
  1111  00FE  1903               	btfsc	3,2
  1112  00FF  2905               	goto	l237
  1113                           
  1114                           ;main.c: 495:                     outPorts[8] &= 251;
  1115  0100  30FB               	movlw	251
  1116  0101  00AD               	movwf	??_main
  1117  0102  082D               	movf	??_main,w
  1118  0103  05C7               	andwf	_outPorts+8,f
  1119                           
  1120                           ;main.c: 496:                 } else {
  1121  0104  2906               	goto	l1615
  1122  0105                     l237:	
  1123                           
  1124                           ;main.c: 497:                     outPorts[8] |= 4;
  1125  0105  1547               	bsf	_outPorts+8,2
  1126  0106                     l1615:	
  1127                           ;main.c: 498:                 }
  1128                           
  1129                           
  1130                           ;main.c: 505:                 for(int8_t i = 0; i < 41 ;i+=2) {
  1131  0106  01B2               	clrf	main@i_167
  1132  0107  0832               	movf	main@i_167,w
  1133  0108  3A80               	xorlw	128
  1134  0109  3E57               	addlw	-169
  1135  010A  1803               	btfsc	3,0
  1136  010B  293E               	goto	l1645
  1137  010C                     l1621:	
  1138                           
  1139                           ;main.c: 506:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
  1140  010C  0832               	movf	main@i_167,w
  1141  010D  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1142  010E  0084               	movwf	4
  1143  010F  2200               	fcall	stringdir
  1144  0110  063C               	xorwf	_ps2Data,w
  1145  0111  1D03               	skipz
  1146  0112  2935               	goto	l1641
  1147                           
  1148                           ;main.c: 507:                         if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0)
      +                           || replaced == ps2Data) {
  1149  0113  083E               	movf	_shift_ctrl_alt,w
  1150  0114  3903               	andlw	3
  1151  0115  1903               	btfsc	3,2
  1152  0116  291A               	goto	l1627
  1153  0117  0838               	movf	_replaced,w
  1154  0118  1903               	btfsc	3,2
  1155  0119  291E               	goto	l1629
  1156  011A                     l1627:	
  1157  011A  0838               	movf	_replaced,w
  1158  011B  063C               	xorwf	_ps2Data,w
  1159  011C  1D03               	skipz
  1160  011D  2930               	goto	l1637
  1161  011E                     l1629:	
  1162                           
  1163                           ;main.c: 508:                             if ( ps2Down ) replaced = ps2Data;
  1164  011E  083A               	movf	_ps2Down,w
  1165  011F  1903               	btfsc	3,2
  1166  0120  2926               	goto	l1633
  1167  0121  083C               	movf	_ps2Data,w
  1168  0122  00AD               	movwf	??_main
  1169  0123  082D               	movf	??_main,w
  1170  0124  00B8               	movwf	_replaced
  1171  0125  2927               	goto	l1635
  1172  0126                     l1633:	
  1173                           ;main.c: 509:                             else replaced = 0;
  1174                           
  1175  0126  01B8               	clrf	_replaced
  1176  0127                     l1635:	
  1177                           
  1178                           ;main.c: 510:                             ps2Data = replaceOnShiftKeyDown[i+1];
  1179  0127  0832               	movf	main@i_167,w
  1180  0128  3E01               	addlw	1
  1181  0129  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1182  012A  0084               	movwf	4
  1183  012B  2200               	fcall	stringdir
  1184  012C  00AD               	movwf	??_main
  1185  012D  082D               	movf	??_main,w
  1186  012E  00BC               	movwf	_ps2Data
  1187                           
  1188                           ;main.c: 511:                         } else {
  1189  012F  293E               	goto	l1645
  1190  0130                     l1637:	
  1191                           
  1192                           ;main.c: 512:                             if ( replaced != 0 ) ps2Data = 0;
  1193  0130  0838               	movf	_replaced,w
  1194  0131  1903               	btfsc	3,2
  1195  0132  293E               	goto	l1645
  1196  0133  01BC               	clrf	_ps2Data
  1197                           
  1198                           ;main.c: 514:                         break;
  1199                           
  1200                           ;main.c: 513:                         }
  1201  0134  293E               	goto	l1645
  1202  0135                     l1641:	
  1203                           ;main.c: 515:                     }
  1204                           
  1205                           
  1206                           ;main.c: 516:                 }
  1207  0135  3002               	movlw	2
  1208  0136  00AD               	movwf	??_main
  1209  0137  082D               	movf	??_main,w
  1210  0138  07B2               	addwf	main@i_167,f
  1211  0139  0832               	movf	main@i_167,w
  1212  013A  3A80               	xorlw	128
  1213  013B  3E57               	addlw	-169
  1214  013C  1C03               	skipc
  1215  013D  290C               	goto	l1621
  1216  013E                     l1645:	
  1217                           
  1218                           ;main.c: 520:                 for(int8_t i = 0; i < 8; i++) {
  1219  013E  01B1               	clrf	main@i_168
  1220  013F  0831               	movf	main@i_168,w
  1221  0140  3A80               	xorlw	128
  1222  0141  3E78               	addlw	-136
  1223  0142  1803               	btfsc	3,0
  1224  0143  296A               	goto	l1665
  1225  0144                     l1651:	
  1226                           
  1227                           ;main.c: 521:                     if ( ps2Data == replaceOnDelayKeyDown[i] && ps2Down ) 
      +                          {
  1228  0144  0831               	movf	main@i_168,w
  1229  0145  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
  1230  0146  0084               	movwf	4
  1231  0147  2200               	fcall	stringdir
  1232  0148  063C               	xorwf	_ps2Data,w
  1233  0149  1D03               	skipz
  1234  014A  2961               	goto	l1661
  1235  014B  083A               	movf	_ps2Down,w
  1236  014C  1903               	btfsc	3,2
  1237  014D  2961               	goto	l1661
  1238                           
  1239                           ;main.c: 522:                         if ( delay == 0 ) {
  1240  014E  0835               	movf	_delay,w
  1241  014F  0436               	iorwf	_delay+1,w
  1242  0150  1D03               	btfss	3,2
  1243  0151  295F               	goto	l1659
  1244                           
  1245                           ;main.c: 523:                             delayedKey = ps2Data;
  1246  0152  083C               	movf	_ps2Data,w
  1247  0153  00AD               	movwf	??_main
  1248  0154  082D               	movf	??_main,w
  1249  0155  00B7               	movwf	_delayedKey
  1250                           
  1251                           ;main.c: 524:                             delay = 2600;
  1252  0156  3028               	movlw	40
  1253  0157  00B5               	movwf	_delay
  1254  0158  300A               	movlw	10
  1255  0159  00B6               	movwf	_delay+1
  1256                           
  1257                           ;main.c: 525:                             ps2Data = 111;
  1258  015A  306F               	movlw	111
  1259  015B  00AD               	movwf	??_main
  1260  015C  082D               	movf	??_main,w
  1261  015D  00BC               	movwf	_ps2Data
  1262                           
  1263                           ;main.c: 526:                         } else {
  1264  015E  296A               	goto	l1665
  1265  015F                     l1659:	
  1266                           
  1267                           ;main.c: 527:                             ps2Data = 0;
  1268  015F  01BC               	clrf	_ps2Data
  1269                           
  1270                           ;main.c: 529:                         break;
  1271                           
  1272                           ;main.c: 528:                         }
  1273  0160  296A               	goto	l1665
  1274  0161                     l1661:	
  1275                           ;main.c: 530:                     }
  1276                           
  1277                           
  1278                           ;main.c: 531:                 }
  1279  0161  3001               	movlw	1
  1280  0162  00AD               	movwf	??_main
  1281  0163  082D               	movf	??_main,w
  1282  0164  07B1               	addwf	main@i_168,f
  1283  0165  0831               	movf	main@i_168,w
  1284  0166  3A80               	xorlw	128
  1285  0167  3E78               	addlw	-136
  1286  0168  1C03               	skipc
  1287  0169  2944               	goto	l1651
  1288  016A                     l1665:	
  1289                           
  1290                           ;main.c: 537:                 updateKey(ps2Data, ps2Down );
  1291  016A  083A               	movf	_ps2Down,w
  1292  016B  00AD               	movwf	??_main
  1293  016C  082D               	movf	??_main,w
  1294  016D  00A6               	movwf	updateKey@set
  1295  016E  083C               	movf	_ps2Data,w
  1296  016F  236B               	fcall	_updateKey
  1297                           
  1298                           ;main.c: 540:                 sendDataToAltera();
  1299  0170  23C2               	fcall	_sendDataToAltera
  1300                           
  1301                           ;main.c: 549:             ps2Data = 0;
  1302  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1303  0172  1303               	bcf	3,6	;RP1=0, select bank0
  1304  0173  01BC               	clrf	_ps2Data
  1305                           
  1306                           ;main.c: 551:             ps2WaitCode = 0;
  1307  0174  01BB               	clrf	_ps2WaitCode
  1308                           
  1309                           ;main.c: 552:             ps2Down = 1;
  1310  0175  01BA               	clrf	_ps2Down
  1311  0176  0ABA               	incf	_ps2Down,f
  1312                           
  1313                           ;main.c: 553:             ps2NeedEncode = 0;
  1314  0177  01F9               	clrf	_ps2NeedEncode
  1315                           
  1316                           ;main.c: 554:             ps2DataState = 0;
  1317  0178  01FD               	clrf	_ps2DataState
  1318                           
  1319                           ;main.c: 556:         } else if ( delay != 0 ) {
  1320  0179  29D4               	goto	l256
  1321  017A                     l1677:	
  1322  017A  1283               	bcf	3,5	;RP0=0, select bank0
  1323  017B  1303               	bcf	3,6	;RP1=0, select bank0
  1324  017C  0835               	movf	_delay,w
  1325  017D  0436               	iorwf	_delay+1,w
  1326  017E  1903               	btfsc	3,2
  1327  017F  29A1               	goto	l1693
  1328                           
  1329                           ;main.c: 558:             delay--;
  1330  0180  3001               	movlw	1
  1331  0181  02B5               	subwf	_delay,f
  1332  0182  3000               	movlw	0
  1333  0183  1C03               	skipc
  1334  0184  03B6               	decf	_delay+1,f
  1335  0185  02B6               	subwf	_delay+1,f
  1336                           
  1337                           ;main.c: 559:             if ( delay == 0 ) {
  1338  0186  0835               	movf	_delay,w
  1339  0187  0436               	iorwf	_delay+1,w
  1340  0188  1D03               	btfss	3,2
  1341  0189  298F               	goto	l1685
  1342                           
  1343                           ;main.c: 561:                 updatePort(0x00, 0);
  1344  018A  01A0               	clrf	updatePort@set
  1345  018B  3000               	movlw	0
  1346  018C  244A               	fcall	_updatePort
  1347                           
  1348                           ;main.c: 563:                 sendDataToAltera();
  1349  018D  23C2               	fcall	_sendDataToAltera
  1350                           
  1351                           ;main.c: 565:             } else if ( delay == 1300 ) {
  1352  018E  29D4               	goto	l256
  1353  018F                     l1685:	
  1354  018F  3014               	movlw	20
  1355  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1356  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1357  0192  0635               	xorwf	_delay,w
  1358  0193  3005               	movlw	5
  1359  0194  1903               	skipnz
  1360  0195  0636               	xorwf	_delay+1,w
  1361  0196  1D03               	btfss	3,2
  1362  0197  29D4               	goto	l256
  1363                           
  1364                           ;main.c: 567:                 updateKey(delayedKey, 1 );
  1365  0198  01A6               	clrf	updateKey@set
  1366  0199  0AA6               	incf	updateKey@set,f
  1367  019A  0837               	movf	_delayedKey,w
  1368  019B  236B               	fcall	_updateKey
  1369                           
  1370                           ;main.c: 568:                 delayedKey = 0;
  1371  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1372  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1373  019E  01B7               	clrf	_delayedKey
  1374                           
  1375                           ;main.c: 569:                 sendDataToAltera();
  1376  019F  23C2               	fcall	_sendDataToAltera
  1377                           
  1378                           ;main.c: 572:         } else {
  1379                           
  1380                           ;main.c: 570:             }
  1381  01A0  29D4               	goto	l256
  1382  01A1                     l1693:	
  1383                           
  1384                           ;main.c: 575:             kempstonMouseEmulatorDelay++;
  1385  01A1  3001               	movlw	1
  1386  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1387  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1388  01A4  07B3               	addwf	_kempstonMouseEmulatorDelay,f
  1389  01A5  1803               	skipnc
  1390  01A6  0AB4               	incf	_kempstonMouseEmulatorDelay+1,f
  1391  01A7  3000               	movlw	0
  1392  01A8  07B4               	addwf	_kempstonMouseEmulatorDelay+1,f
  1393                           
  1394                           ;main.c: 576:             if ( kempstonMouseEmulatorDelay > 2000 ) {
  1395  01A9  3007               	movlw	7
  1396  01AA  0234               	subwf	_kempstonMouseEmulatorDelay+1,w
  1397  01AB  30D1               	movlw	209
  1398  01AC  1903               	skipnz
  1399  01AD  0233               	subwf	_kempstonMouseEmulatorDelay,w
  1400  01AE  1C03               	skipc
  1401  01AF  29D4               	goto	l256
  1402                           
  1403                           ;main.c: 578:                 if ( numLock ) {
  1404  01B0  0839               	movf	_numLock,w
  1405  01B1  1903               	btfsc	3,2
  1406  01B2  29CF               	goto	l1717
  1407                           
  1408                           ;main.c: 579:                     if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]
      +                          -=2;
  1409  01B3  1C3D               	btfss	_kempstonMouseEmulatorKeys,0
  1410  01B4  29B7               	goto	l1701
  1411  01B5  3002               	movlw	2
  1412  01B6  02C8               	subwf	_outPorts+9,f
  1413  01B7                     l1701:	
  1414                           
  1415                           ;main.c: 580:                     if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]
      +                          +=2;
  1416  01B7  1CBD               	btfss	_kempstonMouseEmulatorKeys,1
  1417  01B8  29BD               	goto	l1705
  1418  01B9  3002               	movlw	2
  1419  01BA  00AD               	movwf	??_main
  1420  01BB  082D               	movf	??_main,w
  1421  01BC  07C8               	addwf	_outPorts+9,f
  1422  01BD                     l1705:	
  1423                           
  1424                           ;main.c: 581:                     if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10
      +                          ]+=2;
  1425  01BD  1D3D               	btfss	_kempstonMouseEmulatorKeys,2
  1426  01BE  29C3               	goto	l1709
  1427  01BF  3002               	movlw	2
  1428  01C0  00AD               	movwf	??_main
  1429  01C1  082D               	movf	??_main,w
  1430  01C2  07C9               	addwf	_outPorts+10,f
  1431  01C3                     l1709:	
  1432                           
  1433                           ;main.c: 582:                     if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10
      +                          ]-=2;
  1434  01C3  1DBD               	btfss	_kempstonMouseEmulatorKeys,3
  1435  01C4  29C7               	goto	l1713
  1436  01C5  3002               	movlw	2
  1437  01C6  02C9               	subwf	_outPorts+10,f
  1438  01C7                     l1713:	
  1439                           
  1440                           ;main.c: 583:                     if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8
      +                          ] &= 254;
  1441  01C7  1E3D               	btfss	_kempstonMouseEmulatorKeys,4
  1442  01C8  29CE               	goto	l268
  1443  01C9  30FE               	movlw	254
  1444  01CA  00AD               	movwf	??_main
  1445  01CB  082D               	movf	??_main,w
  1446  01CC  05C7               	andwf	_outPorts+8,f
  1447  01CD  29CF               	goto	l1717
  1448  01CE                     l268:	
  1449                           ;main.c: 584:                     else outPorts[8] |= 1;
  1450                           
  1451  01CE  1447               	bsf	_outPorts+8,0
  1452  01CF                     l1717:	
  1453                           ;main.c: 585:                 }
  1454                           
  1455                           
  1456                           ;main.c: 587:                 sendDataToAltera();
  1457  01CF  23C2               	fcall	_sendDataToAltera
  1458                           
  1459                           ;main.c: 589:                 kempstonMouseEmulatorDelay = 0;
  1460  01D0  1283               	bcf	3,5	;RP0=0, select bank0
  1461  01D1  1303               	bcf	3,6	;RP1=0, select bank0
  1462  01D2  01B3               	clrf	_kempstonMouseEmulatorDelay
  1463  01D3  01B4               	clrf	_kempstonMouseEmulatorDelay+1
  1464  01D4                     l256:	
  1465                           ;main.c: 592:         }
  1466                           
  1467                           ;main.c: 590:             }
  1468                           
  1469  01D4  0064               	clrwdt	;# 
  1470                           
  1471                           ;main.c: 594:     }
  1472  01D5  28AD               	goto	l1587
  1473  01D6                     __end_of_main:	
  1474                           
  1475                           	psect	text1
  1476  036B                     __ptext1:	
  1477 ;; *************** function _updateKey *****************
  1478 ;; Defined at:
  1479 ;;		line 190 in file "main.c"
  1480 ;; Parameters:    Size  Location     Type
  1481 ;;  key             1    wreg     unsigned char 
  1482 ;;  set             1    6[BANK0 ] unsigned char 
  1483 ;; Auto vars:     Size  Location     Type
  1484 ;;  key             1   11[BANK0 ] unsigned char 
  1485 ;;  code            1   12[BANK0 ] unsigned char 
  1486 ;;  localCtrl       1   10[BANK0 ] unsigned char 
  1487 ;;  localShift      1    8[BANK0 ] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1497 ;;      Params:         0       1       0       0
  1498 ;;      Locals:         0       5       0       0
  1499 ;;      Temps:          0       1       0       0
  1500 ;;      Totals:         0       7       0       0
  1501 ;;Total ram usage:        7 bytes
  1502 ;; Hardware stack levels used:    1
  1503 ;; Hardware stack levels required when called:    3
  1504 ;; This function calls:
  1505 ;;		_updatePort
  1506 ;; This function is called by:
  1507 ;;		_main
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           
  1512                           ;psect for function _updateKey
  1513  036B                     _updateKey:	
  1514                           
  1515                           ;incstack = 0
  1516                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1517                           ;updateKey@key stored from wreg
  1518  036B  1283               	bcf	3,5	;RP0=0, select bank0
  1519  036C  1303               	bcf	3,6	;RP1=0, select bank0
  1520  036D  00AB               	movwf	updateKey@key
  1521                           
  1522                           ;main.c: 190: void updateKey(uint8_t key, uint8_t set);main.c: 191: {;main.c: 192:     u
      +                          int8_t code = 0xFF;
  1523  036E  30FF               	movlw	255
  1524  036F  00A7               	movwf	??_updateKey
  1525  0370  0827               	movf	??_updateKey,w
  1526  0371  00AC               	movwf	updateKey@code
  1527                           
  1528                           ;main.c: 193:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  1529  0372  01A9               	clrf	_updateKey$145
  1530  0373  083E               	movf	_shift_ctrl_alt,w
  1531  0374  3903               	andlw	3
  1532  0375  1903               	btfsc	3,2
  1533  0376  2B7C               	goto	l1297
  1534  0377  0838               	movf	_replaced,w
  1535  0378  1D03               	btfss	3,2
  1536  0379  2B7C               	goto	l1297
  1537  037A  01A9               	clrf	_updateKey$145
  1538  037B  0AA9               	incf	_updateKey$145,f
  1539  037C                     l1297:	
  1540  037C  0829               	movf	_updateKey$145,w
  1541  037D  00A7               	movwf	??_updateKey
  1542  037E  0827               	movf	??_updateKey,w
  1543  037F  00A8               	movwf	updateKey@localShift
  1544                           
  1545                           ;main.c: 194:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  1546  0380  083E               	movf	_shift_ctrl_alt,w
  1547  0381  390C               	andlw	12
  1548  0382  1903               	btfsc	3,2
  1549  0383  2B86               	goto	u850
  1550  0384  3001               	movlw	1
  1551  0385  2B87               	goto	u860
  1552  0386                     u850:	
  1553  0386  3000               	movlw	0
  1554  0387                     u860:	
  1555  0387  00A7               	movwf	??_updateKey
  1556  0388  0827               	movf	??_updateKey,w
  1557  0389  00AA               	movwf	updateKey@localCtrl
  1558                           
  1559                           ;main.c: 195:     if ( key < 128 ) code = codeToMatrix[key];
  1560  038A  3080               	movlw	128
  1561  038B  022B               	subwf	updateKey@key,w
  1562  038C  1803               	skipnc
  1563  038D  2B95               	goto	l1305
  1564  038E  082B               	movf	updateKey@key,w
  1565  038F  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  1566  0390  0084               	movwf	4
  1567  0391  2200               	fcall	stringdir
  1568  0392  00A7               	movwf	??_updateKey
  1569  0393  0827               	movf	??_updateKey,w
  1570  0394  00AC               	movwf	updateKey@code
  1571  0395                     l1305:	
  1572                           
  1573                           ;main.c: 196:     if ( code != 0xFF ) {
  1574  0395  0A2C               	incf	updateKey@code,w
  1575  0396  1903               	btfsc	3,2
  1576  0397  2BB0               	goto	l1313
  1577                           
  1578                           ;main.c: 197:         updatePort(code, set);
  1579  0398  0826               	movf	updateKey@set,w
  1580  0399  00A7               	movwf	??_updateKey
  1581  039A  0827               	movf	??_updateKey,w
  1582  039B  00A0               	movwf	updatePort@set
  1583  039C  082C               	movf	updateKey@code,w
  1584  039D  244A               	fcall	_updatePort
  1585                           
  1586                           ;main.c: 198:         localShift |= ((code & 64) > 0);
  1587  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1588  039F  1303               	bcf	3,6	;RP1=0, select bank0
  1589  03A0  1F2C               	btfss	updateKey@code,6
  1590  03A1  2BA4               	goto	u890
  1591  03A2  3001               	movlw	1
  1592  03A3  2BA5               	goto	u900
  1593  03A4                     u890:	
  1594  03A4  3000               	movlw	0
  1595  03A5                     u900:	
  1596  03A5  00A7               	movwf	??_updateKey
  1597  03A6  0827               	movf	??_updateKey,w
  1598  03A7  04A8               	iorwf	updateKey@localShift,f
  1599                           
  1600                           ;main.c: 199:         localCtrl |= ((code & 128) > 0);
  1601  03A8  1FAC               	btfss	updateKey@code,7
  1602  03A9  2BAC               	goto	u910
  1603  03AA  3001               	movlw	1
  1604  03AB  2BAD               	goto	u920
  1605  03AC                     u910:	
  1606  03AC  3000               	movlw	0
  1607  03AD                     u920:	
  1608  03AD  00A7               	movwf	??_updateKey
  1609  03AE  0827               	movf	??_updateKey,w
  1610  03AF  04AA               	iorwf	updateKey@localCtrl,f
  1611  03B0                     l1313:	
  1612                           ;main.c: 200:     }
  1613                           
  1614                           
  1615                           ;main.c: 201:     if ( set ) {
  1616  03B0  0826               	movf	updateKey@set,w
  1617  03B1  1903               	btfsc	3,2
  1618  03B2  0008               	return
  1619                           
  1620                           ;main.c: 202:         updatePort(0x00, localShift );
  1621  03B3  0828               	movf	updateKey@localShift,w
  1622  03B4  00A7               	movwf	??_updateKey
  1623  03B5  0827               	movf	??_updateKey,w
  1624  03B6  00A0               	movwf	updatePort@set
  1625  03B7  3000               	movlw	0
  1626  03B8  244A               	fcall	_updatePort
  1627                           
  1628                           ;main.c: 203:         updatePort(0x0F, localCtrl );
  1629  03B9  1283               	bcf	3,5	;RP0=0, select bank0
  1630  03BA  1303               	bcf	3,6	;RP1=0, select bank0
  1631  03BB  082A               	movf	updateKey@localCtrl,w
  1632  03BC  00A7               	movwf	??_updateKey
  1633  03BD  0827               	movf	??_updateKey,w
  1634  03BE  00A0               	movwf	updatePort@set
  1635  03BF  300F               	movlw	15
  1636  03C0  244A               	fcall	_updatePort
  1637  03C1  0008               	return
  1638  03C2                     __end_of_updateKey:	
  1639                           ;main.c: 204:     }
  1640                           
  1641                           
  1642                           	psect	text2
  1643  044A                     __ptext2:	
  1644 ;; *************** function _updatePort *****************
  1645 ;; Defined at:
  1646 ;;		line 181 in file "main.c"
  1647 ;; Parameters:    Size  Location     Type
  1648 ;;  bit_id          1    wreg     unsigned char 
  1649 ;;  set             1    0[BANK0 ] unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  bit_id          1    5[BANK0 ] unsigned char 
  1652 ;;  a               1    4[BANK0 ] unsigned char 
  1653 ;; Return value:  Size  Location     Type
  1654 ;;                  1    wreg      void 
  1655 ;; Registers used:
  1656 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1657 ;; Tracked objects:
  1658 ;;		On entry : 0/0
  1659 ;;		On exit  : 0/0
  1660 ;;		Unchanged: 0/0
  1661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1662 ;;      Params:         0       1       0       0
  1663 ;;      Locals:         0       2       0       0
  1664 ;;      Temps:          0       3       0       0
  1665 ;;      Totals:         0       6       0       0
  1666 ;;Total ram usage:        6 bytes
  1667 ;; Hardware stack levels used:    1
  1668 ;; Hardware stack levels required when called:    2
  1669 ;; This function calls:
  1670 ;;		Nothing
  1671 ;; This function is called by:
  1672 ;;		_updateKey
  1673 ;;		_main
  1674 ;; This function uses a non-reentrant model
  1675 ;;
  1676                           
  1677                           
  1678                           ;psect for function _updatePort
  1679  044A                     _updatePort:	
  1680                           
  1681                           ;incstack = 0
  1682                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1683                           ;updatePort@bit_id stored from wreg
  1684  044A  1283               	bcf	3,5	;RP0=0, select bank0
  1685  044B  1303               	bcf	3,6	;RP1=0, select bank0
  1686  044C  00A5               	movwf	updatePort@bit_id
  1687                           
  1688                           ;main.c: 181: void updatePort(uint8_t bit_id, uint8_t set);main.c: 182: {;main.c: 183:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  1689  044D  3001               	movlw	1
  1690  044E  00A1               	movwf	??_updatePort
  1691  044F  0825               	movf	updatePort@bit_id,w
  1692  0450  00A2               	movwf	??_updatePort+1
  1693  0451  3003               	movlw	3
  1694  0452                     u805:	
  1695  0452  1003               	clrc
  1696  0453  0CA2               	rrf	??_updatePort+1,f
  1697  0454  3EFF               	addlw	-1
  1698  0455  1D03               	skipz
  1699  0456  2C52               	goto	u805
  1700  0457  0822               	movf	??_updatePort+1,w
  1701  0458  3907               	andlw	7
  1702  0459  3E01               	addlw	1
  1703  045A  2C5D               	goto	u814
  1704  045B                     u815:	
  1705  045B  1003               	clrc
  1706  045C  0DA1               	rlf	??_updatePort,f
  1707  045D                     u814:	
  1708  045D  3EFF               	addlw	-1
  1709  045E  1D03               	skipz
  1710  045F  2C5B               	goto	u815
  1711  0460  0821               	movf	??_updatePort,w
  1712  0461  00A3               	movwf	??_updatePort+2
  1713  0462  0823               	movf	??_updatePort+2,w
  1714  0463  00A4               	movwf	updatePort@a
  1715                           
  1716                           ;main.c: 184:     if ( set ) outPorts[bit_id & 7] |= a;
  1717  0464  0820               	movf	updatePort@set,w
  1718  0465  1903               	btfsc	3,2
  1719  0466  2C71               	goto	l1287
  1720  0467  0824               	movf	updatePort@a,w
  1721  0468  00A1               	movwf	??_updatePort
  1722  0469  0825               	movf	updatePort@bit_id,w
  1723  046A  3907               	andlw	7
  1724  046B  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
  1725  046C  0084               	movwf	4
  1726  046D  0821               	movf	??_updatePort,w
  1727  046E  1383               	bcf	3,7	;select IRP bank0
  1728  046F  0480               	iorwf	0,f
  1729  0470  0008               	return
  1730  0471                     l1287:	
  1731                           ;main.c: 185:     else outPorts[bit_id & 7] &= ~a;
  1732                           
  1733  0471  0924               	comf	updatePort@a,w
  1734  0472  00A1               	movwf	??_updatePort
  1735  0473  0825               	movf	updatePort@bit_id,w
  1736  0474  3907               	andlw	7
  1737  0475  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
  1738  0476  0084               	movwf	4
  1739  0477  0821               	movf	??_updatePort,w
  1740  0478  1383               	bcf	3,7	;select IRP bank0
  1741  0479  0580               	andwf	0,f
  1742  047A  0008               	return
  1743  047B                     __end_of_updatePort:	
  1744                           
  1745                           	psect	text3
  1746  03C2                     __ptext3:	
  1747 ;; *************** function _sendDataToAltera *****************
  1748 ;; Defined at:
  1749 ;;		line 241 in file "main.c"
  1750 ;; Parameters:    Size  Location     Type
  1751 ;;		None
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  i               1    4[BANK0 ] char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1763 ;;      Params:         0       0       0       0
  1764 ;;      Locals:         0       3       0       0
  1765 ;;      Temps:          0       2       0       0
  1766 ;;      Totals:         0       5       0       0
  1767 ;;Total ram usage:        5 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    3
  1770 ;; This function calls:
  1771 ;;		_myDelay
  1772 ;; This function is called by:
  1773 ;;		_main
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776                           
  1777                           
  1778                           ;psect for function _sendDataToAltera
  1779  03C2                     _sendDataToAltera:	
  1780                           
  1781                           ;main.c: 243:     RA2 = 1;
  1782                           
  1783                           ;incstack = 0
  1784                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1785  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  1786  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  1787  03C4  1505               	bsf	5,2	;volatile
  1788                           
  1789                           ;main.c: 244:     RA1 = 0;
  1790  03C5  1085               	bcf	5,1	;volatile
  1791                           
  1792                           ;main.c: 245:     myDelay();
  1793  03C6  248E               	fcall	_myDelay
  1794                           
  1795                           ;main.c: 246:     RA1 = 1;
  1796  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  1797  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  1798  03C9  1485               	bsf	5,1	;volatile
  1799                           
  1800                           ;main.c: 247:     myDelay();
  1801  03CA  248E               	fcall	_myDelay
  1802                           
  1803                           ;main.c: 248:     RA1 = 0;
  1804  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  1805  03CC  1303               	bcf	3,6	;RP1=0, select bank0
  1806  03CD  1085               	bcf	5,1	;volatile
  1807                           
  1808                           ;main.c: 249:     myDelay();
  1809  03CE  248E               	fcall	_myDelay
  1810                           
  1811                           ;main.c: 250:     for(int8_t i=0;i<11;i++) {
  1812  03CF  1283               	bcf	3,5	;RP0=0, select bank0
  1813  03D0  1303               	bcf	3,6	;RP1=0, select bank0
  1814  03D1  01A4               	clrf	sendDataToAltera@i
  1815  03D2  0824               	movf	sendDataToAltera@i,w
  1816  03D3  3A80               	xorlw	128
  1817  03D4  3E75               	addlw	-139
  1818  03D5  1803               	btfsc	3,0
  1819  03D6  2C09               	goto	l1353
  1820  03D7                     l209:	
  1821                           
  1822                           ;main.c: 251:         RA2 = 1;
  1823  03D7  1505               	bsf	5,2	;volatile
  1824                           
  1825                           ;main.c: 252:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1826  03D8  0824               	movf	sendDataToAltera@i,w
  1827  03D9  3A80               	xorlw	128
  1828  03DA  3E78               	addlw	-136
  1829  03DB  1C03               	skipc
  1830  03DC  2BE8               	goto	l1335
  1831  03DD  0824               	movf	sendDataToAltera@i,w
  1832  03DE  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
  1833  03DF  0084               	movwf	4
  1834  03E0  1383               	bcf	3,7	;select IRP bank0
  1835  03E1  0800               	movf	0,w
  1836  03E2  00A0               	movwf	??_sendDataToAltera
  1837  03E3  01A1               	clrf	??_sendDataToAltera+1
  1838  03E4  0820               	movf	??_sendDataToAltera,w
  1839  03E5  00A2               	movwf	_sendDataToAltera$152
  1840  03E6  0821               	movf	??_sendDataToAltera+1,w
  1841  03E7  2BF2               	goto	L1
  1842  03E8                     l1335:	
  1843  03E8  0824               	movf	sendDataToAltera@i,w
  1844  03E9  3E3F               	addlw	(low (_outPorts| 0))& (0+255)
  1845  03EA  0084               	movwf	4
  1846  03EB  1383               	bcf	3,7	;select IRP bank0
  1847  03EC  0800               	movf	0,w
  1848  03ED  00A0               	movwf	??_sendDataToAltera
  1849  03EE  01A1               	clrf	??_sendDataToAltera+1
  1850  03EF  0920               	comf	??_sendDataToAltera,w
  1851  03F0  00A2               	movwf	_sendDataToAltera$152
  1852  03F1  0921               	comf	??_sendDataToAltera+1,w
  1853  03F2                     L1:	
  1854  03F2  00A3               	movwf	_sendDataToAltera$152+1
  1855  03F3  0822               	movf	_sendDataToAltera$152,w
  1856  03F4  0086               	movwf	6	;volatile
  1857                           
  1858                           ;main.c: 253:         myDelay();
  1859  03F5  248E               	fcall	_myDelay
  1860                           
  1861                           ;main.c: 254:         RA2 = 0;
  1862  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1863  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1864  03F8  1105               	bcf	5,2	;volatile
  1865                           
  1866                           ;main.c: 255:         myDelay();
  1867  03F9  248E               	fcall	_myDelay
  1868                           
  1869                           ;main.c: 256:         RA2 = 1;
  1870  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  1871  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  1872  03FC  1505               	bsf	5,2	;volatile
  1873                           
  1874                           ;main.c: 257:         myDelay();
  1875  03FD  248E               	fcall	_myDelay
  1876                           
  1877                           ;main.c: 258:     }
  1878  03FE  3001               	movlw	1
  1879  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  1880  0400  1303               	bcf	3,6	;RP1=0, select bank0
  1881  0401  00A0               	movwf	??_sendDataToAltera
  1882  0402  0820               	movf	??_sendDataToAltera,w
  1883  0403  07A4               	addwf	sendDataToAltera@i,f
  1884  0404  0824               	movf	sendDataToAltera@i,w
  1885  0405  3A80               	xorlw	128
  1886  0406  3E75               	addlw	-139
  1887  0407  1C03               	skipc
  1888  0408  2BD7               	goto	l209
  1889  0409                     l1353:	
  1890                           
  1891                           ;main.c: 259:     PORTB = 0xFF;
  1892  0409  30FF               	movlw	255
  1893  040A  0086               	movwf	6	;volatile
  1894  040B  0008               	return
  1895  040C                     __end_of_sendDataToAltera:	
  1896                           
  1897                           	psect	text4
  1898  048E                     __ptext4:	
  1899 ;; *************** function _myDelay *****************
  1900 ;; Defined at:
  1901 ;;		line 209 in file "main.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;		None
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;		None
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		None
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1915 ;;      Params:         0       0       0       0
  1916 ;;      Locals:         0       0       0       0
  1917 ;;      Temps:          0       0       0       0
  1918 ;;      Totals:         0       0       0       0
  1919 ;;Total ram usage:        0 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    2
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_sendDataToAltera
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           
  1930                           ;psect for function _myDelay
  1931  048E                     _myDelay:	
  1932                           
  1933                           ;incstack = 0
  1934                           ; Regs used in _myDelay: []
  1935  048E  0008               	return
  1936  048F                     __end_of_myDelay:	
  1937                           
  1938                           	psect	text5
  1939  040C                     __ptext5:	
  1940 ;; *************** function _calculateBitsFromTable *****************
  1941 ;; Defined at:
  1942 ;;		line 312 in file "main.c"
  1943 ;; Parameters:    Size  Location     Type
  1944 ;;  bits            1    wreg     PTR unsigned char 
  1945 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1946 ;;  table           1    0[BANK0 ] PTR unsigned char 
  1947 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  1948 ;;  count           1    1[BANK0 ] unsigned char 
  1949 ;;  clearIfFound    1    2[BANK0 ] unsigned char 
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;  bits            1    5[BANK0 ] PTR unsigned char 
  1952 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1953 ;;  i               1    6[BANK0 ] unsigned char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1963 ;;      Params:         0       3       0       0
  1964 ;;      Locals:         0       2       0       0
  1965 ;;      Temps:          0       2       0       0
  1966 ;;      Totals:         0       7       0       0
  1967 ;;Total ram usage:        7 bytes
  1968 ;; Hardware stack levels used:    2
  1969 ;; Hardware stack levels required when called:    2
  1970 ;; This function calls:
  1971 ;;		Nothing
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976                           
  1977                           
  1978                           ;psect for function _calculateBitsFromTable
  1979  040C                     _calculateBitsFromTable:	
  1980                           
  1981                           ;incstack = 0
  1982                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  1983                           ;calculateBitsFromTable@bits stored from wreg
  1984  040C  1283               	bcf	3,5	;RP0=0, select bank0
  1985  040D  1303               	bcf	3,6	;RP1=0, select bank0
  1986  040E  00A5               	movwf	calculateBitsFromTable@bits
  1987                           
  1988                           ;main.c: 312: void calculateBitsFromTable(uint8_t* bits, uint8_t table[], uint8_t count,
      +                           uint8_t clearIfFound);main.c: 313: {;main.c: 314:     for(uint8_t i = 0; i < count;i++)
      +                           {
  1989  040F  01A6               	clrf	calculateBitsFromTable@i
  1990  0410                     l1371:	
  1991  0410  0821               	movf	calculateBitsFromTable@count,w
  1992  0411  0226               	subwf	calculateBitsFromTable@i,w
  1993  0412  1803               	btfsc	3,0
  1994  0413  0008               	return
  1995                           
  1996                           ;main.c: 315:         if ( ps2Data == table[i] ) {
  1997  0414  0826               	movf	calculateBitsFromTable@i,w
  1998  0415  0720               	addwf	calculateBitsFromTable@table,w
  1999  0416  0084               	movwf	4
  2000  0417  2200               	fcall	stringdir
  2001  0418  063C               	xorwf	_ps2Data,w
  2002  0419  1D03               	skipz
  2003  041A  2C45               	goto	l1369
  2004                           
  2005                           ;main.c: 316:             if ( ps2Down ) {
  2006  041B  083A               	movf	_ps2Down,w
  2007  041C  1903               	btfsc	3,2
  2008  041D  2C2F               	goto	l1363
  2009                           
  2010                           ;main.c: 317:                 (*bits) |= (1 << i);
  2011  041E  3001               	movlw	1
  2012  041F  00A3               	movwf	??_calculateBitsFromTable
  2013  0420  0A26               	incf	calculateBitsFromTable@i,w
  2014  0421  2C24               	goto	u994
  2015  0422                     u995:	
  2016  0422  1003               	clrc
  2017  0423  0DA3               	rlf	??_calculateBitsFromTable,f
  2018  0424                     u994:	
  2019  0424  3EFF               	addlw	-1
  2020  0425  1D03               	skipz
  2021  0426  2C22               	goto	u995
  2022  0427  0823               	movf	??_calculateBitsFromTable,w
  2023  0428  00A4               	movwf	??_calculateBitsFromTable+1
  2024  0429  0825               	movf	calculateBitsFromTable@bits,w
  2025  042A  0084               	movwf	4
  2026  042B  0824               	movf	??_calculateBitsFromTable+1,w
  2027  042C  1383               	bcf	3,7	;select IRP bank0
  2028  042D  0480               	iorwf	0,f
  2029                           
  2030                           ;main.c: 318:             } else {
  2031  042E  2C40               	goto	l1365
  2032  042F                     l1363:	
  2033                           
  2034                           ;main.c: 319:                 (*bits) &= ~(1 << i);
  2035  042F  3001               	movlw	1
  2036  0430  00A3               	movwf	??_calculateBitsFromTable
  2037  0431  0A26               	incf	calculateBitsFromTable@i,w
  2038  0432  2C35               	goto	u1004
  2039  0433                     u1005:	
  2040  0433  1003               	clrc
  2041  0434  0DA3               	rlf	??_calculateBitsFromTable,f
  2042  0435                     u1004:	
  2043  0435  3EFF               	addlw	-1
  2044  0436  1D03               	skipz
  2045  0437  2C33               	goto	u1005
  2046  0438  0823               	movf	??_calculateBitsFromTable,w
  2047  0439  3AFF               	xorlw	255
  2048  043A  00A4               	movwf	??_calculateBitsFromTable+1
  2049  043B  0825               	movf	calculateBitsFromTable@bits,w
  2050  043C  0084               	movwf	4
  2051  043D  0824               	movf	??_calculateBitsFromTable+1,w
  2052  043E  1383               	bcf	3,7	;select IRP bank0
  2053  043F  0580               	andwf	0,f
  2054  0440                     l1365:	
  2055                           ;main.c: 320:             }
  2056                           
  2057                           
  2058                           ;main.c: 321:             if ( clearIfFound ) {
  2059  0440  0822               	movf	calculateBitsFromTable@clearIfFound,w
  2060  0441  1903               	btfsc	3,2
  2061  0442  0008               	return
  2062                           
  2063                           ;main.c: 322:                 ps2Data = 0;
  2064  0443  01BC               	clrf	_ps2Data
  2065                           
  2066                           ;main.c: 324:             break;
  2067                           
  2068                           ;main.c: 323:             }
  2069  0444  0008               	return
  2070  0445                     l1369:	
  2071                           ;main.c: 325:         }
  2072                           
  2073                           
  2074                           ;main.c: 326:     }
  2075  0445  3001               	movlw	1
  2076  0446  00A3               	movwf	??_calculateBitsFromTable
  2077  0447  0823               	movf	??_calculateBitsFromTable,w
  2078  0448  07A6               	addwf	calculateBitsFromTable@i,f
  2079  0449  2C10               	goto	l1371
  2080  044A                     __end_of_calculateBitsFromTable:	
  2081                           
  2082                           	psect	text6
  2083  02E0                     __ptext6:	
  2084 ;; *************** function _myIsr *****************
  2085 ;; Defined at:
  2086 ;;		line 114 in file "main.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;		None
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;  i               1    8[COMMON] char 
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2100 ;;      Params:         0       0       0       0
  2101 ;;      Locals:         3       0       0       0
  2102 ;;      Temps:          6       0       0       0
  2103 ;;      Totals:         9       0       0       0
  2104 ;;Total ram usage:        9 bytes
  2105 ;; Hardware stack levels used:    2
  2106 ;; This function calls:
  2107 ;;		Nothing
  2108 ;; This function is called by:
  2109 ;;		Interrupt level 1
  2110 ;; This function uses a non-reentrant model
  2111 ;;
  2112                           
  2113                           
  2114                           ;psect for function _myIsr
  2115  02E0                     _myIsr:	
  2116                           
  2117                           ;main.c: 116:     if(T0IE && T0IF){
  2118  02E0  1A8B               	btfsc	11,5	;volatile
  2119  02E1  1D0B               	btfss	11,2	;volatile
  2120  02E2  2B60               	goto	i1l190
  2121                           
  2122                           ;main.c: 118:         T0IF=0;
  2123  02E3  110B               	bcf	11,2	;volatile
  2124                           
  2125                           ;main.c: 119:         TMR0 = 255;
  2126  02E4  30FF               	movlw	255
  2127  02E5  0081               	movwf	1	;volatile
  2128                           
  2129                           ;main.c: 123:         if ( ps2DataState == 0 ) {
  2130  02E6  087D               	movf	_ps2DataState,w
  2131  02E7  1D03               	btfss	3,2
  2132  02E8  2AF5               	goto	i1l1393
  2133                           
  2134                           ;main.c: 124:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  2135  02E9  1E05               	btfss	5,4	;volatile
  2136  02EA  1985               	btfsc	5,3	;volatile
  2137  02EB  2B60               	goto	i1l190
  2138                           
  2139                           ;main.c: 125:                 ps2BitsCount = 0;
  2140  02EC  01FB               	clrf	_ps2BitsCount
  2141                           
  2142                           ;main.c: 126:                 ps2Bits = 0;
  2143  02ED  01FC               	clrf	_ps2Bits
  2144                           
  2145                           ;main.c: 127:                 ps2DataState = 1;
  2146  02EE  01FD               	clrf	_ps2DataState
  2147  02EF  0AFD               	incf	_ps2DataState,f
  2148                           
  2149                           ;main.c: 128:                 ps2Device = PORTAbits.RA0;
  2150  02F0  3000               	movlw	0
  2151  02F1  1805               	btfsc	5,0	;volatile
  2152  02F2  3001               	movlw	1
  2153  02F3  00FA               	movwf	_ps2Device
  2154                           
  2155                           ;main.c: 130:         } else if ( ps2DataState == 1 ) {
  2156                           
  2157                           ;main.c: 129:             }
  2158  02F4  2B60               	goto	i1l190
  2159  02F5                     i1l1393:	
  2160  02F5  037D               	decf	_ps2DataState,w
  2161  02F6  1D03               	btfss	3,2
  2162  02F7  2B5C               	goto	i1l1441
  2163                           
  2164                           ;main.c: 131:             if ( ps2BitsCount < 8 ) {
  2165  02F8  087B               	movf	_ps2BitsCount,w
  2166  02F9  3A80               	xorlw	128
  2167  02FA  3E78               	addlw	-136
  2168  02FB  1803               	skipnc
  2169  02FC  2B0D               	goto	i1l1401
  2170                           
  2171                           ;main.c: 132:                 if ( PORTAbits.RA3 ) {
  2172  02FD  1D85               	btfss	5,3	;volatile
  2173  02FE  2B11               	goto	i1l1403
  2174                           
  2175                           ;main.c: 133:                     ps2Bits |= ( 1 << ps2BitsCount );
  2176  02FF  3001               	movlw	1
  2177  0300  00F0               	movwf	??_myIsr
  2178  0301  0A7B               	incf	_ps2BitsCount,w
  2179  0302  2B05               	goto	u111_24
  2180  0303                     u111_25:	
  2181  0303  1003               	clrc
  2182  0304  0DF0               	rlf	??_myIsr,f
  2183  0305                     u111_24:	
  2184  0305  3EFF               	addlw	-1
  2185  0306  1D03               	skipz
  2186  0307  2B03               	goto	u111_25
  2187  0308  0870               	movf	??_myIsr,w
  2188  0309  00F1               	movwf	??_myIsr+1
  2189  030A  0871               	movf	??_myIsr+1,w
  2190  030B  04FC               	iorwf	_ps2Bits,f
  2191                           
  2192                           ;main.c: 134:                 }
  2193  030C  2B11               	goto	i1l1403
  2194  030D                     i1l1401:	
  2195                           ;main.c: 136:             } else if ( ps2BitsCount == 8 ) {
  2196                           
  2197                           ;main.c: 135:                 ps2BitsCount++;
  2198                           
  2199  030D  3008               	movlw	8
  2200  030E  067B               	xorwf	_ps2BitsCount,w
  2201  030F  1D03               	btfss	3,2
  2202  0310  2B16               	goto	i1l1405
  2203  0311                     i1l1403:	
  2204                           
  2205                           ;main.c: 137:                 ps2BitsCount++;
  2206  0311  3001               	movlw	1
  2207  0312  00F0               	movwf	??_myIsr
  2208  0313  0870               	movf	??_myIsr,w
  2209  0314  07FB               	addwf	_ps2BitsCount,f
  2210                           
  2211                           ;main.c: 138:             } else if ( ps2BitsCount == 9 ) {
  2212  0315  2B60               	goto	i1l190
  2213  0316                     i1l1405:	
  2214  0316  3009               	movlw	9
  2215  0317  067B               	xorwf	_ps2BitsCount,w
  2216  0318  1D03               	btfss	3,2
  2217  0319  2B60               	goto	i1l190
  2218                           
  2219                           ;main.c: 140:                 if ( ps2NeedEncode ) {
  2220  031A  0879               	movf	_ps2NeedEncode,w
  2221  031B  1903               	btfsc	3,2
  2222  031C  2B35               	goto	i1l1423
  2223                           
  2224                           ;main.c: 141:                     for (int8_t i=0; i < 27; i+=2) {
  2225  031D  01F8               	clrf	myIsr@i
  2226  031E                     L4:	
  2227  031E  0878               	movf	myIsr@i,w
  2228  031F  3A80               	xorlw	128
  2229  0320  3E65               	addlw	-155
  2230  0321  1803               	btfsc	3,0
  2231  0322  2B48               	goto	i1l1429
  2232                           
  2233                           ;main.c: 142:                         if ( ps2Bits == replaceTwoBytesCodes[i] ) {
  2234  0323  0878               	movf	myIsr@i,w
  2235  0324  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2236  0325  0084               	movwf	4
  2237  0326  2200               	fcall	stringdir
  2238  0327  067C               	xorwf	_ps2Bits,w
  2239  0328  1D03               	skipz
  2240  0329  2B30               	goto	i1l1419
  2241                           
  2242                           ;main.c: 143:                             ps2Data = replaceTwoBytesCodes[i+1];
  2243  032A  0878               	movf	myIsr@i,w
  2244  032B  3E01               	addlw	1
  2245  032C  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2246  032D  0084               	movwf	4
  2247  032E  2200               	fcall	stringdir
  2248  032F  2B45               	goto	L2
  2249  0330                     i1l1419:	
  2250                           ;main.c: 145:                         }
  2251                           
  2252                           ;main.c: 144:                             break;
  2253                           
  2254                           
  2255                           ;main.c: 146:                     }
  2256  0330  3002               	movlw	2
  2257  0331  00F0               	movwf	??_myIsr
  2258  0332  0870               	movf	??_myIsr,w
  2259  0333  07F8               	addwf	myIsr@i,f
  2260  0334  2B1E               	goto	L4
  2261  0335                     i1l1423:	
  2262                           ;main.c: 147:                 } else {
  2263                           
  2264                           
  2265                           ;main.c: 148:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2266  0335  3083               	movlw	131
  2267  0336  067C               	xorwf	_ps2Bits,w
  2268  0337  1903               	btfsc	3,2
  2269  0338  2B40               	goto	i1l1427
  2270  0339  087C               	movf	_ps2Bits,w
  2271  033A  00F0               	movwf	??_myIsr
  2272  033B  01F1               	clrf	??_myIsr+1
  2273  033C  0870               	movf	??_myIsr,w
  2274  033D  00F6               	movwf	_myIsr$135
  2275  033E  0871               	movf	??_myIsr+1,w
  2276  033F  2B43               	goto	L3
  2277  0340                     i1l1427:	
  2278  0340  303F               	movlw	63
  2279  0341  00F6               	movwf	_myIsr$135
  2280  0342  3000               	movlw	0
  2281  0343                     L3:	
  2282  0343  00F7               	movwf	_myIsr$135+1
  2283  0344  0876               	movf	_myIsr$135,w
  2284  0345                     L2:	
  2285  0345  00F0               	movwf	??_myIsr
  2286  0346  0870               	movf	??_myIsr,w
  2287  0347  00BC               	movwf	_ps2Data
  2288  0348                     i1l1429:	
  2289                           ;main.c: 149:                 }
  2290                           
  2291                           
  2292                           ;main.c: 150:                 if ( ps2Bits == 0xF0 ) {
  2293  0348  30F0               	movlw	240
  2294  0349  067C               	xorwf	_ps2Bits,w
  2295  034A  1D03               	btfss	3,2
  2296  034B  2B4F               	goto	i1l1433
  2297                           
  2298                           ;main.c: 151:                     ps2DataState = 0;
  2299  034C  01FD               	clrf	_ps2DataState
  2300                           
  2301                           ;main.c: 152:                     ps2Down = 0;
  2302  034D  01BA               	clrf	_ps2Down
  2303                           
  2304                           ;main.c: 153:                 } else if ( ps2Bits == 0xE0 ) {
  2305  034E  2B60               	goto	i1l190
  2306  034F                     i1l1433:	
  2307  034F  30E0               	movlw	224
  2308  0350  067C               	xorwf	_ps2Bits,w
  2309  0351  1D03               	btfss	3,2
  2310  0352  2B57               	goto	i1l1439
  2311                           
  2312                           ;main.c: 154:                     ps2DataState = 0;
  2313  0353  01FD               	clrf	_ps2DataState
  2314                           
  2315                           ;main.c: 155:                     ps2NeedEncode = 1;
  2316  0354  01F9               	clrf	_ps2NeedEncode
  2317  0355  0AF9               	incf	_ps2NeedEncode,f
  2318                           
  2319                           ;main.c: 164:                 } else {
  2320  0356  2B60               	goto	i1l190
  2321  0357                     i1l1439:	
  2322                           
  2323                           ;main.c: 165:                     ps2DataState = 2;
  2324  0357  3002               	movlw	2
  2325  0358  00F0               	movwf	??_myIsr
  2326  0359  0870               	movf	??_myIsr,w
  2327  035A  00FD               	movwf	_ps2DataState
  2328                           
  2329                           ;main.c: 169:         } else if ( ps2DataState == 4 ) {
  2330                           
  2331                           ;main.c: 168:             }
  2332                           
  2333                           ;main.c: 166:                 }
  2334  035B  2B60               	goto	i1l190
  2335  035C                     i1l1441:	
  2336  035C  3004               	movlw	4
  2337  035D  067D               	xorwf	_ps2DataState,w
  2338  035E  1903               	btfsc	3,2
  2339                           
  2340                           ;main.c: 171:             ps2DataState = 0;
  2341  035F  01FD               	clrf	_ps2DataState
  2342  0360                     i1l190:	
  2343                           ;main.c: 175:     }
  2344                           
  2345                           ;main.c: 173:     } else {
  2346                           
  2347                           ;main.c: 172:         }
  2348                           
  2349  0360  0875               	movf	??_myIsr+5,w
  2350  0361  00FF               	movwf	127
  2351  0362  0874               	movf	??_myIsr+4,w
  2352  0363  008A               	movwf	10
  2353  0364  0873               	movf	??_myIsr+3,w
  2354  0365  0084               	movwf	4
  2355  0366  0E72               	swapf	(??_myIsr+2)^(0+4294967168),w
  2356  0367  0083               	movwf	3
  2357  0368  0EFE               	swapf	126,f
  2358  0369  0E7E               	swapf	126,w
  2359  036A  0009               	retfie
  2360  036B                     __end_of_myIsr:	
  2361  007E                     btemp	set	126	;btemp
  2362  007E                     wtemp0	set	126
  2363                           
  2364                           	psect	intentry
  2365  0004                     __pintentry:	
  2366                           ;incstack = 0
  2367                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath]
  2368                           
  2369  0004                     interrupt_function:	
  2370  007E                     saved_w	set	btemp
  2371  0004  00FE               	movwf	btemp
  2372  0005  0E03               	swapf	3,w
  2373  0006  00F2               	movwf	??_myIsr+2
  2374  0007  0804               	movf	4,w
  2375  0008  00F3               	movwf	??_myIsr+3
  2376  0009  080A               	movf	10,w
  2377  000A  00F4               	movwf	??_myIsr+4
  2378  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2379  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2380  000D  087F               	movf	btemp+1,w
  2381  000E  00F5               	movwf	??_myIsr+5
  2382  000F  2AE0               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     19      42
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    2360
                                             13 BANK0      6     6      0
             _calculateBitsFromTable
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                              6 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              0 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculateBitsFromTable                               7     4      3     722
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                9     9      0     114
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateBitsFromTable
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     13      2A       3       52.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      38      10        0.0%
ABS                  0      0      38       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Oct 30 16:38:09 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0023                                 l209 03D7  
                               l235 00F4                                 l237 0105  
                               l256 01D4                                 l268 01CE  
                               _GIE 005F                                 _RA1 0029  
                               _RA2 002A                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               u900 03A5                                 u805 0452  
                               u814 045D                                 u910 03AC  
                               u815 045B                                 _PSA 040B  
                               u920 03AD                                 u850 0386  
                               u860 0387                                 u890 03A4  
                               u994 0424                                 u995 0422  
                               fsr0 0004                                 indf 0000  
                              l1313 03B0                                l1305 0395  
                              l1335 03E8                                l1353 0409  
                              l1363 042F                                l1371 0410  
                              l1451 003A                                l1365 0440  
                              l1701 01B7                                l1621 010C  
                              l1287 0471                                l1615 0106  
                              l1607 00F5                                l1369 0445  
                              l1297 037C                                l1713 01C7  
                              l1705 01BD                                l1633 0126  
                              l1641 0135                                l1457 0048  
                              l1651 0144                                l1635 0127  
                              l1627 011A                                l1709 01C3  
                              l1717 01CF                                l1661 0161  
                              l1637 0130                                l1629 011E  
                              l1645 013E                                l1665 016A  
                              l1659 015F                                l1587 00AD  
                              l1685 018F                                l1693 01A1  
                              l1597 00E0                                l1677 017A  
                              _EEIE 0467                                _EEIF 0067  
                              _CMIE 0466                                _CMIF 0066  
                              _T0IE 005D                                _T0IF 005A  
                              _T0CS 040D                                u1004 0435  
                              u1005 0433                                _T0SE 040C  
                              u1270 00DC                                u1280 00DD  
                              _PEIE 005E                                _INTE 005C  
                              _INTF 0059                                _RBIE 005B  
                              _RBIF 0058                                _RCIE 0465  
                              _RCIF 0065                                _TMR0 0001  
                              _TMR2 0011                                _SPEN 00C7  
                              _TXIE 0464                                _TXIF 0064  
                              _main 0032                                btemp 007E  
                              start 0010                               ?_main 0070  
                             _CMCON 001F        __end_of_replaceTwoBytesCodes 02CC  
                             _T1CON 0010                               i1l190 0360  
                             _RCSTA 0018                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                __end_of_codeToMatrix 0286  
                             _TRISB 0086                               _VRCON 009F  
                             _TXSTA 0098                               _nRBPU 040F  
                             _delay 0035                     __end_of_myDelay 048F  
                             _myIsr 02E0                               main@i 0030  
                  updatePort@bit_id 0025                               pclath 000A  
                             status 0003                        updateKey@key 002B  
                      updateKey@set 0026                               wtemp0 007E  
                   __initialization 0011                        __end_of_main 01D6  
                            ??_main 002D     __size_of_calculateBitsFromTable 003E  
                 sendDataToAltera@i 0024                              _CCP1IE 0462  
                            _CCP1IF 0062                              ?_myIsr 0070  
                            _CCPR1H 0016                              _CCPR1L 0015  
                            i1l1401 030D                              i1l1403 0311  
                            u111_24 0305                              i1l1405 0316  
                            u111_25 0303                              i1l1423 0335  
                            i1l1433 034F                              i1l1441 035C  
                            i1l1427 0340                              i1l1419 0330  
                            i1l1429 0348                              i1l1439 0357  
                            i1l1393 02F5                              _INTEDG 040E  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _TMR2IE 0461                              _TMR2IF 0061  
                            _TRISA0 0428                              _TRISA1 0429  
                            _TRISA2 042A                              _TRISA3 042B  
                            _TRISA4 042C                              _TRISA5 042D  
                            _TRISA6 042E                              _TRISA7 042F  
          __end_of_sendDataToAltera 040C               _replaceOnDelayKeyDown 02CC  
                         ??_myDelay 0020                              myIsr@i 0078  
                            saved_w 007E                       updateKey@code 002C  
           __end_of__initialization 0030              _calculateBitsFromTable 040C  
              _replaceTwoBytesCodes 02B0                       updatePort@set 0020  
                    __pcstackCOMMON 0070                        __pidataBANK0 047B  
                     __end_of_myIsr 036B                 updateKey@localShift 0028  
                           ??_myIsr 0070                        _ps2DataState 007D  
                        __pbssBANK0 0033                        _ps2BitsCount 007B  
                      _codeToMatrix 0206                          _delayedKey 0037  
              _sendDataToAltera$152 0022                          __pmaintext 0032  
                        __pintentry 0004                             _CCP1CON 0017  
        calculateBitsFromTable@bits 0025                  __size_of_updateKey 0057  
                        __stringtab 0200          _kempstonMouseEmulatorDelay 0033  
     __end_of_replaceOnShiftKeyDown 02B0                             _ps2Data 003C  
                           _ps2Bits 007C                             _ps2Down 003A  
                           __ptext1 036B                             __ptext2 044A  
                           __ptext3 03C2                             __ptext4 048E  
                           __ptext5 040C                             __ptext6 02E0  
                           _myDelay 048E  calculateBitsFromTable@clearIfFound 0022  
                           _numLock 0039                             clrloop0 0487  
              end_of_initialization 0030                       _importantKeys 02D4  
                    _shift_ctrl_alt 003E                   ?_sendDataToAltera 0070  
                 __end_of_updateKey 03C2                  ??_sendDataToAltera 0020  
                 _kempstonMouseKeys 02DA                           _PORTAbits 0005  
                        _updatePort 044A             ?_calculateBitsFromTable 0020  
         __end_of_kempstonMouseKeys 02E0                 start_initialization 0011  
                       updatePort@a 0024      __end_of_calculateBitsFromTable 044A  
           calculateBitsFromTable@i 0026                         __pdataBANK0 003F  
                       __pbssCOMMON 0079                           ___latbits 0000  
                     __pcstackBANK0 0020                         ?_updatePort 0020  
                updateKey@localCtrl 002A                           _ps2Device 007A  
                         __pstrings 0200                       _ps2NeedEncode 0079  
                          ?_myDelay 0070                         _ps2WaitCode 003B  
                         _myIsr$135 0076         calculateBitsFromTable@count 0021  
                    __size_of_myIsr 008B         calculateBitsFromTable@table 0020  
                 interrupt_function 0004                           clear_ram0 0486  
               __size_of_updatePort 0031               _replaceOnShiftKeyDown 0286  
                         _updateKey 036B                         __stringbase 0205  
                         main@i_167 0032                           main@i_168 0031  
         __size_of_sendDataToAltera 004A                          ?_updateKey 0026  
                __end_of__stringtab 0206                    __size_of_myDelay 0001  
                     __size_of_main 01A4       __end_of_replaceOnDelayKeyDown 02D4  
                          _replaced 0038                            _outPorts 003F  
                      ??_updatePort 0021           _kempstonMouseEmulatorKeys 003D  
                          intlevel1 0000                           stringcode 0200  
                __end_of_updatePort 047B                         ??_updateKey 0027  
                  _sendDataToAltera 03C2                            stringdir 0200  
                          stringtab 0200               __end_of_importantKeys 02DA  
                     _updateKey$145 0029  
