

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Nov 30 14:11:59 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	intentry,global,class=CODE,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.00
    32                           ; Generated 27/05/2018 GMT
    33                           ; 
    34                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F628A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  008C                     	;# 
    93  008E                     	;# 
    94  0092                     	;# 
    95  0098                     	;# 
    96  0099                     	;# 
    97  009A                     	;# 
    98  009B                     	;# 
    99  009C                     	;# 
   100  009D                     	;# 
   101  009F                     	;# 
   102  0000                     	;# 
   103  0001                     	;# 
   104  0002                     	;# 
   105  0003                     	;# 
   106  0004                     	;# 
   107  0005                     	;# 
   108  0006                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000E                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0015                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0017                     	;# 
   122  0018                     	;# 
   123  0019                     	;# 
   124  001A                     	;# 
   125  001F                     	;# 
   126  0081                     	;# 
   127  0085                     	;# 
   128  0086                     	;# 
   129  008C                     	;# 
   130  008E                     	;# 
   131  0092                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009F                     	;# 
   139                           
   140                           	psect	idataBANK0
   141  07F3                     __pidataBANK0:	
   142                           
   143                           ;initializer for _outPorts
   144  07F3  3400               	retlw	0
   145  07F4  3400               	retlw	0
   146  07F5  3400               	retlw	0
   147  07F6  3400               	retlw	0
   148  07F7  3400               	retlw	0
   149  07F8  3400               	retlw	0
   150  07F9  3400               	retlw	0
   151  07FA  3400               	retlw	0
   152  07FB  3407               	retlw	7
   153  07FC  34F5               	retlw	245
   154  07FD  34DA               	retlw	218
   155                           
   156                           ;initializer for _ps2DeviceMain
   157  07FE  3403               	retlw	3
   158                           
   159                           	psect	strings
   160  0300                     __pstrings:	
   161  0300                     stringtab:	
   162  0300                     __stringtab:	
   163  0300                     stringcode:	
   164                           ;	String table - string pointers are 1 byte each
   165                           
   166  0300                     stringdir:	
   167  0300  3003               	movlw	high stringdir
   168  0301  008A               	movwf	10
   169  0302  0804               	movf	4,w
   170  0303  0A84               	incf	4,f
   171  0304  0782               	addwf	2,f
   172  0305                     __stringbase:	
   173  0305  3400               	retlw	0
   174  0306                     __end_of__stringtab:	
   175  0306                     _codeToMatrix:	
   176  0306  34FF               	retlw	255
   177  0307  34FF               	retlw	255
   178  0308  34FF               	retlw	255
   179  0309  34FF               	retlw	255
   180  030A  34FF               	retlw	255
   181  030B  34FF               	retlw	255
   182  030C  34FF               	retlw	255
   183  030D  34FF               	retlw	255
   184  030E  34FF               	retlw	255
   185  030F  34FF               	retlw	255
   186  0310  34FF               	retlw	255
   187  0311  34FF               	retlw	255
   188  0312  34FF               	retlw	255
   189  0313  34FF               	retlw	255
   190  0314  349C               	retlw	156
   191  0315  34FF               	retlw	255
   192  0316  34FF               	retlw	255
   193  0317  34FF               	retlw	255
   194  0318  34FF               	retlw	255
   195  0319  34FF               	retlw	255
   196  031A  34FF               	retlw	255
   197  031B  3402               	retlw	2
   198  031C  3403               	retlw	3
   199  031D  34FF               	retlw	255
   200  031E  34FF               	retlw	255
   201  031F  34FF               	retlw	255
   202  0320  3408               	retlw	8
   203  0321  3409               	retlw	9
   204  0322  3401               	retlw	1
   205  0323  340A               	retlw	10
   206  0324  340B               	retlw	11
   207  0325  34D6               	retlw	214
   208  0326  34FF               	retlw	255
   209  0327  3418               	retlw	24
   210  0328  3410               	retlw	16
   211  0329  3411               	retlw	17
   212  032A  3412               	retlw	18
   213  032B  341B               	retlw	27
   214  032C  3413               	retlw	19
   215  032D  34FF               	retlw	255
   216  032E  345C               	retlw	92
   217  032F  3407               	retlw	7
   218  0330  3420               	retlw	32
   219  0331  3419               	retlw	25
   220  0332  3422               	retlw	34
   221  0333  341A               	retlw	26
   222  0334  3423               	retlw	35
   223  0335  3463               	retlw	99
   224  0336  3464               	retlw	100
   225  0337  341F               	retlw	31
   226  0338  3427               	retlw	39
   227  0339  3426               	retlw	38
   228  033A  3421               	retlw	33
   229  033B  3425               	retlw	37
   230  033C  3424               	retlw	36
   231  033D  3454               	retlw	84
   232  033E  34A0               	retlw	160
   233  033F  3406               	retlw	6
   234  0340  3417               	retlw	23
   235  0341  341E               	retlw	30
   236  0342  341D               	retlw	29
   237  0343  341C               	retlw	28
   238  0344  3414               	retlw	20
   239  0345  34FF               	retlw	255
   240  0346  34FF               	retlw	255
   241  0347  349F               	retlw	159
   242  0348  3416               	retlw	22
   243  0349  3415               	retlw	21
   244  034A  340D               	retlw	13
   245  034B  3404               	retlw	4
   246  034C  340C               	retlw	12
   247  034D  34FF               	retlw	255
   248  034E  34C1               	retlw	193
   249  034F  3497               	retlw	151
   250  0350  34A0               	retlw	160
   251  0351  340E               	retlw	14
   252  0352  348D               	retlw	141
   253  0353  3405               	retlw	5
   254  0354  349E               	retlw	158
   255  0355  3483               	retlw	131
   256  0356  348B               	retlw	139
   257  0357  3493               	retlw	147
   258  0358  349C               	retlw	156
   259  0359  349B               	retlw	155
   260  035A  34E5               	retlw	229
   261  035B  348E               	retlw	142
   262  035C  34A3               	retlw	163
   263  035D  34A6               	retlw	166
   264  035E  344B               	retlw	75
   265  035F  34FF               	retlw	255
   266  0360  3406               	retlw	6
   267  0361  34DD               	retlw	221
   268  0362  34A4               	retlw	164
   269  0363  34D1               	retlw	209
   270  0364  34A7               	retlw	167
   271  0365  3494               	retlw	148
   272  0366  348C               	retlw	140
   273  0367  3484               	retlw	132
   274  0368  3496               	retlw	150
   275  0369  34C9               	retlw	201
   276  036A  34D9               	retlw	217
   277  036B  34E1               	retlw	225
   278  036C  3444               	retlw	68
   279  036D  3488               	retlw	136
   280  036E  3485               	retlw	133
   281  036F  3403               	retlw	3
   282  0370  349A               	retlw	154
   283  0371  341B               	retlw	27
   284  0372  341C               	retlw	28
   285  0373  34A2               	retlw	162
   286  0374  3498               	retlw	152
   287  0375  34C0               	retlw	192
   288  0376  3404               	retlw	4
   289  0377  3497               	retlw	151
   290  0378  340B               	retlw	11
   291  0379  3423               	retlw	35
   292  037A  3424               	retlw	36
   293  037B  3414               	retlw	20
   294  037C  3443               	retlw	67
   295  037D  34FF               	retlw	255
   296  037E  34FF               	retlw	255
   297  037F  3496               	retlw	150
   298  0380  3413               	retlw	19
   299  0381  349E               	retlw	158
   300  0382  34A7               	retlw	167
   301  0383  340C               	retlw	12
   302  0384  34FF               	retlw	255
   303  0385  34FF               	retlw	255
   304  0386                     __end_of_codeToMatrix:	
   305  0386                     _replaceOnShiftKeyDown:	
   306  0386  3416               	retlw	22
   307  0387  344F               	retlw	79
   308  0388  341E               	retlw	30
   309  0389  3450               	retlw	80
   310  038A  3426               	retlw	38
   311  038B  3451               	retlw	81
   312  038C  3425               	retlw	37
   313  038D  3453               	retlw	83
   314  038E  342E               	retlw	46
   315  038F  3456               	retlw	86
   316  0390  3436               	retlw	54
   317  0391  3457               	retlw	87
   318  0392  343D               	retlw	61
   319  0393  345C               	retlw	92
   320  0394  343E               	retlw	62
   321  0395  345E               	retlw	94
   322  0396  3446               	retlw	70
   323  0397  345F               	retlw	95
   324  0398  3445               	retlw	69
   325  0399  3460               	retlw	96
   326  039A  344E               	retlw	78
   327  039B  3461               	retlw	97
   328  039C  3455               	retlw	85
   329  039D  3462               	retlw	98
   330  039E  345D               	retlw	93
   331  039F  3463               	retlw	99
   332  03A0  344C               	retlw	76
   333  03A1  3467               	retlw	103
   334  03A2  3452               	retlw	82
   335  03A3  3468               	retlw	104
   336  03A4  3441               	retlw	65
   337  03A5  346A               	retlw	106
   338  03A6  3449               	retlw	73
   339  03A7  346D               	retlw	109
   340  03A8  344A               	retlw	74
   341  03A9  346E               	retlw	110
   342  03AA  340E               	retlw	14
   343  03AB  3448               	retlw	72
   344  03AC  3454               	retlw	84
   345  03AD  3464               	retlw	100
   346  03AE  345B               	retlw	91
   347  03AF  3465               	retlw	101
   348  03B0                     __end_of_replaceOnShiftKeyDown:	
   349  03B0                     _replaceTwoBytesCodes:	
   350  03B0  3411               	retlw	17
   351  03B1  3408               	retlw	8
   352  03B2  3414               	retlw	20
   353  03B3  3413               	retlw	19
   354  03B4  3470               	retlw	112
   355  03B5  3417               	retlw	23
   356  03B6  346C               	retlw	108
   357  03B7  3418               	retlw	24
   358  03B8  347D               	retlw	125
   359  03B9  3419               	retlw	25
   360  03BA  3471               	retlw	113
   361  03BB  341F               	retlw	31
   362  03BC  3469               	retlw	105
   363  03BD  3420               	retlw	32
   364  03BE  347A               	retlw	122
   365  03BF  3427               	retlw	39
   366  03C0  3475               	retlw	117
   367  03C1  3428               	retlw	40
   368  03C2  346B               	retlw	107
   369  03C3  342F               	retlw	47
   370  03C4  3472               	retlw	114
   371  03C5  3430               	retlw	48
   372  03C6  3474               	retlw	116
   373  03C7  3437               	retlw	55
   374  03C8  344A               	retlw	74
   375  03C9  3438               	retlw	56
   376  03CA  345A               	retlw	90
   377  03CB  3439               	retlw	57
   378  03CC                     __end_of_replaceTwoBytesCodes:	
   379  03CC                     _deviceLogic:	
   380  03CC  34F2               	retlw	242
   381  03CD  34FF               	retlw	255
   382  03CE  34AA               	retlw	170
   383  03CF  34F4               	retlw	244
   384  03D0  34E8               	retlw	232
   385  03D1  34F3               	retlw	243
   386  03D2  343C               	retlw	60
   387  03D3  3400               	retlw	0
   388  03D4  34AA               	retlw	170
   389  03D5                     __end_of_deviceLogic:	
   390  03D5                     _replaceOnDelayKeyDown:	
   391  03D5  341F               	retlw	31
   392  03D6  3454               	retlw	84
   393  03D7  345B               	retlw	91
   394  03D8  3463               	retlw	99
   395  03D9  3464               	retlw	100
   396  03DA  3465               	retlw	101
   397  03DB  3448               	retlw	72
   398  03DC  345D               	retlw	93
   399  03DD                     __end_of_replaceOnDelayKeyDown:	
   400  03DD                     _deviceLogicMax:	
   401  03DD  3409               	retlw	9
   402  03DE                     __end_of_deviceLogicMax:	
   403  03DE                     _deviceLogicMouseIndex:	
   404  03DE  3403               	retlw	3
   405  03DF                     __end_of_deviceLogicMouseIndex:	
   406  03DF                     _importantKeys:	
   407  03DF  3412               	retlw	18
   408  03E0  3459               	retlw	89
   409  03E1  3414               	retlw	20
   410  03E2  3413               	retlw	19
   411  03E3  3411               	retlw	17
   412  03E4  3408               	retlw	8
   413  03E5                     __end_of_importantKeys:	
   414  03E5                     _kempstonMouseKeys:	
   415  03E5  346B               	retlw	107
   416  03E6  3474               	retlw	116
   417  03E7  3475               	retlw	117
   418  03E8  3472               	retlw	114
   419  03E9  3473               	retlw	115
   420  03EA  3404               	retlw	4
   421  03EB                     __end_of_kempstonMouseKeys:	
   422  0005                     _PORTA	set	5
   423  0018                     _RCSTA	set	24
   424  001F                     _CMCON	set	31
   425  0017                     _CCP1CON	set	23
   426  0016                     _CCPR1H	set	22
   427  0015                     _CCPR1L	set	21
   428  0010                     _T1CON	set	16
   429  0011                     _TMR2	set	17
   430  000F                     _TMR1H	set	15
   431  000E                     _TMR1L	set	14
   432  0006                     _PORTB	set	6
   433  0001                     _TMR0	set	1
   434  00C7                     _SPEN	set	199
   435  0060                     _TMR1IF	set	96
   436  0061                     _TMR2IF	set	97
   437  0062                     _CCP1IF	set	98
   438  0064                     _TXIF	set	100
   439  0065                     _RCIF	set	101
   440  0066                     _CMIF	set	102
   441  0067                     _EEIF	set	103
   442  0058                     _RBIF	set	88
   443  0059                     _INTF	set	89
   444  005B                     _RBIE	set	91
   445  005C                     _INTE	set	92
   446  005E                     _PEIE	set	94
   447  005F                     _GIE	set	95
   448  0029                     _RA1	set	41
   449  002A                     _RA2	set	42
   450  0028                     _RA0	set	40
   451  002C                     _RA4	set	44
   452  002B                     _RA3	set	43
   453  005A                     _T0IF	set	90
   454  005D                     _T0IE	set	93
   455  0086                     _TRISB	set	134
   456  0098                     _TXSTA	set	152
   457  009F                     _VRCON	set	159
   458  0085                     _TRISA	set	133
   459  0408                     _PS0	set	1032
   460  0409                     _PS1	set	1033
   461  040A                     _PS2	set	1034
   462  040B                     _PSA	set	1035
   463  040C                     _T0SE	set	1036
   464  040D                     _T0CS	set	1037
   465  040E                     _INTEDG	set	1038
   466  040F                     _nRBPU	set	1039
   467  0460                     _TMR1IE	set	1120
   468  0461                     _TMR2IE	set	1121
   469  0462                     _CCP1IE	set	1122
   470  0464                     _TXIE	set	1124
   471  0465                     _RCIE	set	1125
   472  0466                     _CMIE	set	1126
   473  0467                     _EEIE	set	1127
   474                           
   475                           	psect	cinit
   476  000D                     start_initialization:	
   477                           ; #config settings
   478                           
   479  000D                     __initialization:	
   480                           
   481                           ; Initialize objects allocated to BANK0
   482  000D  27F3               	fcall	__pidataBANK0	;fetch initializer
   483  000E  00D9               	movwf	__pdataBANK0& (0+127)
   484  000F  27F4               	fcall	__pidataBANK0+1	;fetch initializer
   485  0010  00DA               	movwf	(__pdataBANK0+1)& (0+127)
   486  0011  27F5               	fcall	__pidataBANK0+2	;fetch initializer
   487  0012  00DB               	movwf	(__pdataBANK0+2)& (0+127)
   488  0013  27F6               	fcall	__pidataBANK0+3	;fetch initializer
   489  0014  00DC               	movwf	(__pdataBANK0+3)& (0+127)
   490  0015  27F7               	fcall	__pidataBANK0+4	;fetch initializer
   491  0016  00DD               	movwf	(__pdataBANK0+4)& (0+127)
   492  0017  27F8               	fcall	__pidataBANK0+5	;fetch initializer
   493  0018  00DE               	movwf	(__pdataBANK0+5)& (0+127)
   494  0019  27F9               	fcall	__pidataBANK0+6	;fetch initializer
   495  001A  00DF               	movwf	(__pdataBANK0+6)& (0+127)
   496  001B  27FA               	fcall	__pidataBANK0+7	;fetch initializer
   497  001C  00E0               	movwf	(__pdataBANK0+7)& (0+127)
   498  001D  27FB               	fcall	__pidataBANK0+8	;fetch initializer
   499  001E  00E1               	movwf	(__pdataBANK0+8)& (0+127)
   500  001F  27FC               	fcall	__pidataBANK0+9	;fetch initializer
   501  0020  00E2               	movwf	(__pdataBANK0+9)& (0+127)
   502  0021  27FD               	fcall	__pidataBANK0+10	;fetch initializer
   503  0022  00E3               	movwf	(__pdataBANK0+10)& (0+127)
   504  0023  27FE               	fcall	__pidataBANK0+11	;fetch initializer
   505  0024  00E4               	movwf	(__pdataBANK0+11)& (0+127)
   506                           
   507                           ; Clear objects allocated to BANK1
   508  0025  1383               	bcf	3,7	;select IRP bank0
   509  0026  30A0               	movlw	low __pbssBANK1
   510  0027  0084               	movwf	4
   511  0028  30BA               	movlw	low (__pbssBANK1+26)
   512  0029  22A3               	fcall	clear_ram0
   513                           
   514                           ; Clear objects allocated to BANK0
   515  002A  3044               	movlw	low __pbssBANK0
   516  002B  0084               	movwf	4
   517  002C  3059               	movlw	low (__pbssBANK0+21)
   518  002D  22A3               	fcall	clear_ram0
   519                           
   520                           ; Clear objects allocated to COMMON
   521  002E  307A               	movlw	low __pbssCOMMON
   522  002F  0084               	movwf	4
   523  0030  307E               	movlw	low (__pbssCOMMON+4)
   524  0031  22A3               	fcall	clear_ram0
   525  0032                     end_of_initialization:	
   526                           ;End of C runtime variable initialization code
   527                           
   528  0032                     __end_of__initialization:	
   529  0032  0183               	clrf	3
   530  0033  2834               	ljmp	_main	;jump to C main() function
   531                           
   532                           	psect	bssCOMMON
   533  007A                     __pbssCOMMON:	
   534  007A                     _ps2Device:	
   535  007A                     	ds	1
   536  007B                     _ps2BitsCount:	
   537  007B                     	ds	1
   538  007C                     _ps2Bits:	
   539  007C                     	ds	1
   540  007D                     _ps2DataState:	
   541  007D                     	ds	1
   542                           
   543                           	psect	bssBANK0
   544  0044                     __pbssBANK0:	
   545  0044                     _kempstonMouseCounterA:	
   546  0044                     	ds	2
   547  0046                     _kempstonMouseEmulatorDelay:	
   548  0046                     	ds	2
   549  0048                     _delay:	
   550  0048                     	ds	2
   551  004A                     _deviceLogicDelay:	
   552  004A                     	ds	2
   553  004C                     _delayedKey:	
   554  004C                     	ds	1
   555  004D                     _replaced:	
   556  004D                     	ds	1
   557  004E                     _numLock:	
   558  004E                     	ds	1
   559  004F                     _needSave:	
   560  004F                     	ds	1
   561  0050                     _kempstonMouseCounterC:	
   562  0050                     	ds	1
   563  0051                     _kempstonMouseCounterB:	
   564  0051                     	ds	1
   565  0052                     _deviceLogicDevice:	
   566  0052                     	ds	1
   567  0053                     _deviceLogicState:	
   568  0053                     	ds	1
   569  0054                     _deviceLogicCommand:	
   570  0054                     	ds	1
   571  0055                     _deviceLogicIndex:	
   572  0055                     	ds	1
   573  0056                     _ps2Parity:	
   574  0056                     	ds	1
   575  0057                     _shift_ctrl_alt:	
   576  0057                     	ds	1
   577  0058                     _kempstonMouseEmulatorKeys:	
   578  0058                     	ds	1
   579                           
   580                           	psect	dataBANK0
   581  0059                     __pdataBANK0:	
   582  0059                     _outPorts:	
   583  0059                     	ds	11
   584  0064                     _ps2DeviceMain:	
   585  0064                     	ds	1
   586                           
   587                           	psect	bssBANK1
   588  00A0                     __pbssBANK1:	
   589  00A0                     _devices:	
   590  00A0                     	ds	26
   591                           
   592                           	psect	clrtext
   593  02A3                     clear_ram0:	
   594                           ;	Called with FSR containing the base address, and
   595                           ;	W with the last address+1
   596                           
   597  02A3  0064               	clrwdt	;clear the watchdog before getting into this loop
   598  02A4                     clrloop0:	
   599  02A4  0180               	clrf	0	;clear RAM location pointed to by FSR
   600  02A5  0A84               	incf	4,f	;increment pointer
   601  02A6  0604               	xorwf	4,w	;XOR with final address
   602  02A7  1903               	btfsc	3,2	;have we reached the end yet?
   603  02A8  3400               	retlw	0	;all done for this memory range, return
   604  02A9  0604               	xorwf	4,w	;XOR again to restore value
   605  02AA  2AA4               	goto	clrloop0	;do the next byte
   606                           
   607                           	psect	cstackCOMMON
   608  0070                     __pcstackCOMMON:	
   609  0070                     ?_myIsr:	
   610  0070                     ?_myDelay:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_sendDataToAltera:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_deviceDataInit:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_deviceDataUpdateKeyboard:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_deviceDataUpdateMouse:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_main:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?i1___bmul:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     i1___bmul@multiplicand:	
   632                           ; 1 bytes @ 0x0
   633                           
   634                           
   635                           ; 1 bytes @ 0x0
   636  0070                     	ds	1
   637  0071                     ??i1___bmul:	
   638                           
   639                           ; 1 bytes @ 0x1
   640  0071                     	ds	1
   641  0072                     i1___bmul@multiplier:	
   642                           
   643                           ; 1 bytes @ 0x2
   644  0072                     	ds	1
   645  0073                     i1___bmul@product:	
   646                           
   647                           ; 1 bytes @ 0x3
   648  0073                     	ds	1
   649  0074                     ??_myIsr:	
   650                           
   651                           ; 1 bytes @ 0x4
   652  0074                     	ds	5
   653  0079                     myIsr@device:	
   654                           
   655                           ; 1 bytes @ 0x9
   656  0079                     	ds	1
   657                           
   658                           	psect	cstackBANK0
   659  0020                     __pcstackBANK0:	
   660  0020                     ?_send:	
   661  0020                     ?_updatePort:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0020                     ?_calculateBitsFromTable:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0020                     ??_myDelay:	
   668                           ; 1 bytes @ 0x0
   669                           
   670  0020                     ??_sendDataToAltera:	
   671                           ; 1 bytes @ 0x0
   672                           
   673  0020                     ??_deviceDataInit:	
   674                           ; 1 bytes @ 0x0
   675                           
   676  0020                     ??_deviceDataUpdateMouse:	
   677                           ; 1 bytes @ 0x0
   678                           
   679  0020                     ?___bmul:	
   680                           ; 1 bytes @ 0x0
   681                           
   682  0020                     send@byte:	
   683                           ; 1 bytes @ 0x0
   684                           
   685  0020                     updatePort@set:	
   686                           ; 1 bytes @ 0x0
   687                           
   688  0020                     calculateBitsFromTable@keyDown:	
   689                           ; 1 bytes @ 0x0
   690                           
   691  0020                     deviceDataInit@device:	
   692                           ; 1 bytes @ 0x0
   693                           
   694  0020                     ___bmul@multiplicand:	
   695                           ; 1 bytes @ 0x0
   696                           
   697                           
   698                           ; 1 bytes @ 0x0
   699  0020                     	ds	1
   700  0021                     ??_send:	
   701  0021                     ??_updatePort:	
   702                           ; 1 bytes @ 0x1
   703                           
   704  0021                     ??___bmul:	
   705                           ; 1 bytes @ 0x1
   706                           
   707  0021                     calculateBitsFromTable@bits:	
   708                           ; 1 bytes @ 0x1
   709                           
   710                           
   711                           ; 1 bytes @ 0x1
   712  0021                     	ds	1
   713  0022                     send@device:	
   714  0022                     calculateBitsFromTable@table:	
   715                           ; 1 bytes @ 0x2
   716                           
   717  0022                     deviceDataUpdateMouse@code:	
   718                           ; 1 bytes @ 0x2
   719                           
   720  0022                     ___bmul@product:	
   721                           ; 1 bytes @ 0x2
   722                           
   723  0022                     _sendDataToAltera$161:	
   724                           ; 1 bytes @ 0x2
   725                           
   726                           
   727                           ; 2 bytes @ 0x2
   728  0022                     	ds	1
   729  0023                     send@i:	
   730  0023                     calculateBitsFromTable@count:	
   731                           ; 1 bytes @ 0x3
   732                           
   733  0023                     deviceDataUpdateMouse@j:	
   734                           ; 1 bytes @ 0x3
   735                           
   736  0023                     ___bmul@multiplier:	
   737                           ; 1 bytes @ 0x3
   738                           
   739                           
   740                           ; 1 bytes @ 0x3
   741  0023                     	ds	1
   742  0024                     send@j:	
   743  0024                     updatePort@a:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  0024                     calculateBitsFromTable@clearIfFound:	
   747                           ; 1 bytes @ 0x4
   748                           
   749  0024                     sendDataToAltera@i:	
   750                           ; 1 bytes @ 0x4
   751                           
   752  0024                     deviceDataUpdateMouse@device:	
   753                           ; 1 bytes @ 0x4
   754                           
   755                           
   756                           ; 1 bytes @ 0x4
   757  0024                     	ds	1
   758  0025                     ??_calculateBitsFromTable:	
   759  0025                     updatePort@bit_id:	
   760                           ; 1 bytes @ 0x5
   761                           
   762                           
   763                           ; 1 bytes @ 0x5
   764  0025                     	ds	1
   765  0026                     ?_updateKey:	
   766  0026                     updateKey@down:	
   767                           ; 1 bytes @ 0x6
   768                           
   769                           
   770                           ; 1 bytes @ 0x6
   771  0026                     	ds	1
   772  0027                     ??_updateKey:	
   773  0027                     calculateBitsFromTable@keyCode:	
   774                           ; 1 bytes @ 0x7
   775                           
   776                           
   777                           ; 1 bytes @ 0x7
   778  0027                     	ds	1
   779  0028                     calculateBitsFromTable@i:	
   780  0028                     updateKey@localShift:	
   781                           ; 1 bytes @ 0x8
   782                           
   783                           
   784                           ; 1 bytes @ 0x8
   785  0028                     	ds	1
   786  0029                     _updateKey$154:	
   787                           
   788                           ; 1 bytes @ 0x9
   789  0029                     	ds	1
   790  002A                     updateKey@localCtrl:	
   791                           
   792                           ; 1 bytes @ 0xA
   793  002A                     	ds	1
   794  002B                     updateKey@key:	
   795                           
   796                           ; 1 bytes @ 0xB
   797  002B                     	ds	1
   798  002C                     updateKey@code:	
   799                           
   800                           ; 1 bytes @ 0xC
   801  002C                     	ds	1
   802  002D                     ?_processKeyCode:	
   803  002D                     processKeyCode@keyDown:	
   804                           ; 1 bytes @ 0xD
   805                           
   806                           
   807                           ; 1 bytes @ 0xD
   808  002D                     	ds	1
   809  002E                     ??_processKeyCode:	
   810                           
   811                           ; 1 bytes @ 0xE
   812  002E                     	ds	5
   813  0033                     processKeyCode@i_167:	
   814                           
   815                           ; 1 bytes @ 0x13
   816  0033                     	ds	1
   817  0034                     processKeyCode@i:	
   818                           
   819                           ; 1 bytes @ 0x14
   820  0034                     	ds	1
   821  0035                     processKeyCode@keyCode:	
   822                           
   823                           ; 1 bytes @ 0x15
   824  0035                     	ds	1
   825  0036                     ??_deviceDataUpdateKeyboard:	
   826                           
   827                           ; 1 bytes @ 0x16
   828  0036                     	ds	2
   829  0038                     _deviceDataUpdateKeyboard$187:	
   830                           
   831                           ; 2 bytes @ 0x18
   832  0038                     	ds	2
   833  003A                     deviceDataUpdateKeyboard@i:	
   834                           
   835                           ; 1 bytes @ 0x1A
   836  003A                     	ds	1
   837  003B                     deviceDataUpdateKeyboard@code:	
   838                           
   839                           ; 1 bytes @ 0x1B
   840  003B                     	ds	1
   841  003C                     deviceDataUpdateKeyboard@device:	
   842                           
   843                           ; 1 bytes @ 0x1C
   844  003C                     	ds	1
   845  003D                     ??_main:	
   846                           
   847                           ; 1 bytes @ 0x1D
   848  003D                     	ds	2
   849  003F                     main@i:	
   850                           
   851                           ; 1 bytes @ 0x1F
   852  003F                     	ds	1
   853  0040                     main@j:	
   854                           
   855                           ; 1 bytes @ 0x20
   856  0040                     	ds	1
   857  0041                     main@code:	
   858                           
   859                           ; 1 bytes @ 0x21
   860  0041                     	ds	1
   861  0042                     main@i_208:	
   862                           
   863                           ; 1 bytes @ 0x22
   864  0042                     	ds	1
   865  0043                     main@device:	
   866                           
   867                           ; 1 bytes @ 0x23
   868  0043                     	ds	1
   869                           
   870                           	psect	maintext
   871  0034                     __pmaintext:	
   872 ;;
   873 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   874 ;;
   875 ;; *************** function _main *****************
   876 ;; Defined at:
   877 ;;		line 492 in file "main.c"
   878 ;; Parameters:    Size  Location     Type
   879 ;;		None
   880 ;; Auto vars:     Size  Location     Type
   881 ;;  j               1   32[BANK0 ] unsigned char 
   882 ;;  device          1   35[BANK0 ] PTR struct PS2DeviceData
   883 ;;		 -> devices(26), 
   884 ;;  i               1   34[BANK0 ] unsigned char 
   885 ;;  i               1   31[BANK0 ] char 
   886 ;;  code            1   33[BANK0 ] unsigned char 
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   891 ;; Tracked objects:
   892 ;;		On entry : B00/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   896 ;;      Params:         0       0       0       0
   897 ;;      Locals:         0       5       0       0
   898 ;;      Temps:          0       2       0       0
   899 ;;      Totals:         0       7       0       0
   900 ;;Total ram usage:        7 bytes
   901 ;; Hardware stack levels required when called:    6
   902 ;; This function calls:
   903 ;;		___bmul
   904 ;;		_deviceDataInit
   905 ;;		_deviceDataUpdateKeyboard
   906 ;;		_deviceDataUpdateMouse
   907 ;;		_send
   908 ;;		_sendDataToAltera
   909 ;;		_updateKey
   910 ;;		_updatePort
   911 ;; This function is called by:
   912 ;;		Startup code after reset
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _main
   918  0034                     _main:	
   919                           
   920                           ;main.c: 495:     deviceDataInit(&devices[0]);
   921                           
   922                           ;incstack = 0
   923                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   924  0034  30A0               	movlw	(low (_devices| 0))& (0+255)
   925  0035  27DB               	fcall	_deviceDataInit
   926                           
   927                           ;main.c: 496:     deviceDataInit(&devices[1]);
   928  0036  30AD               	movlw	(low ((_devices| 0+13)))& (0+255)
   929  0037  27DB               	fcall	_deviceDataInit
   930                           
   931                           ;main.c: 499:     for(int8_t i=0;i<8;i++) {
   932  0038  1283               	bcf	3,5	;RP0=0, select bank0
   933  0039  1303               	bcf	3,6	;RP1=0, select bank0
   934  003A  01BF               	clrf	main@i
   935  003B  083F               	movf	main@i,w
   936  003C  3A80               	xorlw	128
   937  003D  3E78               	addlw	-136
   938  003E  1803               	btfsc	3,0
   939  003F  284E               	goto	l2120
   940  0040                     l2114:	
   941                           
   942                           ;main.c: 500:         outPorts[i] = 0;
   943  0040  083F               	movf	main@i,w
   944  0041  3E59               	addlw	(low (_outPorts| 0))& (0+255)
   945  0042  0084               	movwf	4
   946  0043  1383               	bcf	3,7	;select IRP bank0
   947  0044  0180               	clrf	0
   948                           
   949                           ;main.c: 501:     }
   950  0045  3001               	movlw	1
   951  0046  00BD               	movwf	??_main
   952  0047  083D               	movf	??_main,w
   953  0048  07BF               	addwf	main@i,f
   954  0049  083F               	movf	main@i,w
   955  004A  3A80               	xorlw	128
   956  004B  3E78               	addlw	-136
   957  004C  1C03               	skipc
   958  004D  2840               	goto	l2114
   959  004E                     l2120:	
   960                           
   961                           ;main.c: 502:     outPorts[8] = 0xFF;
   962  004E  30FF               	movlw	255
   963  004F  00BD               	movwf	??_main
   964  0050  083D               	movf	??_main,w
   965  0051  00E1               	movwf	_outPorts+8
   966                           
   967                           ;main.c: 503:     outPorts[9] = 0xF5;
   968  0052  30F5               	movlw	245
   969  0053  00BD               	movwf	??_main
   970  0054  083D               	movf	??_main,w
   971  0055  00E2               	movwf	_outPorts+9
   972                           
   973                           ;main.c: 504:     outPorts[10] = 0xDA;
   974  0056  30DA               	movlw	218
   975  0057  00BD               	movwf	??_main
   976  0058  083D               	movf	??_main,w
   977  0059  00E3               	movwf	_outPorts+10
   978                           
   979                           ;main.c: 505:     sendDataToAltera();
   980  005A  274C               	fcall	_sendDataToAltera
   981                           
   982                           ;main.c: 510:     GIE = 1;
   983  005B  178B               	bsf	11,7	;volatile
   984                           
   985                           ;main.c: 511:     PEIE = 0;
   986  005C  130B               	bcf	11,6	;volatile
   987                           
   988                           ;main.c: 512:     T0IE = 1;
   989  005D  168B               	bsf	11,5	;volatile
   990                           
   991                           ;main.c: 513:     INTE = 0;
   992  005E  120B               	bcf	11,4	;volatile
   993                           
   994                           ;main.c: 514:     RBIE = 0;
   995  005F  118B               	bcf	11,3	;volatile
   996                           
   997                           ;main.c: 515:     T0IF = 0;
   998  0060  110B               	bcf	11,2	;volatile
   999                           
  1000                           ;main.c: 516:     INTF = 0;
  1001  0061  108B               	bcf	11,1	;volatile
  1002                           
  1003                           ;main.c: 517:     RBIF = 0;
  1004  0062  100B               	bcf	11,0	;volatile
  1005                           
  1006                           ;main.c: 520:     EEIF = 0;
  1007  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1008  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1009  0065  138C               	bcf	12,7	;volatile
  1010                           
  1011                           ;main.c: 521:     CMIF = 0;
  1012  0066  130C               	bcf	12,6	;volatile
  1013                           
  1014                           ;main.c: 522:     RCIF = 0;
  1015  0067  128C               	bcf	12,5	;volatile
  1016                           
  1017                           ;main.c: 523:     TXIF = 0;
  1018  0068  120C               	bcf	12,4	;volatile
  1019                           
  1020                           ;main.c: 524:     CCP1IF = 0;
  1021  0069  110C               	bcf	12,2	;volatile
  1022                           
  1023                           ;main.c: 525:     TMR2IF = 0;
  1024  006A  108C               	bcf	12,1	;volatile
  1025                           
  1026                           ;main.c: 526:     TMR1IF = 0;
  1027  006B  100C               	bcf	12,0	;volatile
  1028                           
  1029                           ;main.c: 529:     EEIE = 0;
  1030  006C  1683               	bsf	3,5	;RP0=1, select bank1
  1031  006D  1303               	bcf	3,6	;RP1=0, select bank1
  1032  006E  138C               	bcf	12,7	;volatile
  1033                           
  1034                           ;main.c: 530:     CMIE = 0;
  1035  006F  130C               	bcf	12,6	;volatile
  1036                           
  1037                           ;main.c: 531:     RCIE = 0;
  1038  0070  128C               	bcf	12,5	;volatile
  1039                           
  1040                           ;main.c: 532:     TXIE = 0;
  1041  0071  120C               	bcf	12,4	;volatile
  1042                           
  1043                           ;main.c: 533:     CCP1IE = 0;
  1044  0072  110C               	bcf	12,2	;volatile
  1045                           
  1046                           ;main.c: 534:     TMR2IE = 0;
  1047  0073  108C               	bcf	12,1	;volatile
  1048                           
  1049                           ;main.c: 535:     TMR1IE = 0;
  1050  0074  100C               	bcf	12,0	;volatile
  1051                           
  1052                           ;main.c: 538:     nRBPU = 1;
  1053  0075  1781               	bsf	1,7	;volatile
  1054                           
  1055                           ;main.c: 539:     INTEDG = 0;
  1056  0076  1301               	bcf	1,6	;volatile
  1057                           
  1058                           ;main.c: 540:     T0CS = 1;
  1059  0077  1681               	bsf	1,5	;volatile
  1060                           
  1061                           ;main.c: 541:     T0SE = 1;
  1062  0078  1601               	bsf	1,4	;volatile
  1063                           
  1064                           ;main.c: 542:     PSA = 1;
  1065  0079  1581               	bsf	1,3	;volatile
  1066                           
  1067                           ;main.c: 543:     PS2 = 0;
  1068  007A  1101               	bcf	1,2	;volatile
  1069                           
  1070                           ;main.c: 544:     PS1 = 0;
  1071  007B  1081               	bcf	1,1	;volatile
  1072                           
  1073                           ;main.c: 545:     PS0 = 0;
  1074  007C  1001               	bcf	1,0	;volatile
  1075                           
  1076                           ;main.c: 548:     TMR0 = 255;
  1077  007D  30FF               	movlw	255
  1078  007E  1283               	bcf	3,5	;RP0=0, select bank0
  1079  007F  1303               	bcf	3,6	;RP1=0, select bank0
  1080  0080  0081               	movwf	1	;volatile
  1081                           
  1082                           ;main.c: 549:     TMR1L = 0;
  1083  0081  018E               	clrf	14	;volatile
  1084                           
  1085                           ;main.c: 550:     TMR1H = 0;
  1086  0082  018F               	clrf	15	;volatile
  1087                           
  1088                           ;main.c: 551:     TMR2 = 0;
  1089  0083  0191               	clrf	17	;volatile
  1090                           
  1091                           ;main.c: 552:     T1CON = 6;
  1092  0084  3006               	movlw	6
  1093  0085  0090               	movwf	16	;volatile
  1094                           
  1095                           ;main.c: 553:     CCPR1L = 0;
  1096  0086  0195               	clrf	21	;volatile
  1097                           
  1098                           ;main.c: 554:     CCPR1H = 0;
  1099  0087  0196               	clrf	22	;volatile
  1100                           
  1101                           ;main.c: 555:     CCP1CON = 0;
  1102  0088  0197               	clrf	23	;volatile
  1103                           
  1104                           ;main.c: 556:     CMCON = 7;
  1105  0089  3007               	movlw	7
  1106  008A  009F               	movwf	31	;volatile
  1107                           
  1108                           ;main.c: 557:     VRCON = 0;
  1109  008B  1683               	bsf	3,5	;RP0=1, select bank1
  1110  008C  1303               	bcf	3,6	;RP1=0, select bank1
  1111  008D  019F               	clrf	31	;volatile
  1112                           
  1113                           ;main.c: 558:     RCSTA = 0;
  1114  008E  1283               	bcf	3,5	;RP0=0, select bank0
  1115  008F  1303               	bcf	3,6	;RP1=0, select bank0
  1116  0090  0198               	clrf	24	;volatile
  1117                           
  1118                           ;main.c: 559:     TXSTA = 128;
  1119  0091  3080               	movlw	128
  1120  0092  1683               	bsf	3,5	;RP0=1, select bank1
  1121  0093  1303               	bcf	3,6	;RP1=0, select bank1
  1122  0094  0098               	movwf	24	;volatile
  1123                           
  1124                           ;main.c: 560:     SPEN = 0;
  1125  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1126  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1127  0097  1398               	bcf	24,7	;volatile
  1128                           
  1129                           ;main.c: 565:     TRISA = 0b11111001;
  1130  0098  30F9               	movlw	249
  1131  0099  1683               	bsf	3,5	;RP0=1, select bank1
  1132  009A  1303               	bcf	3,6	;RP1=0, select bank1
  1133  009B  0085               	movwf	5	;volatile
  1134                           
  1135                           ;main.c: 566:     PORTA = 0;
  1136  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1137  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1138  009E  0185               	clrf	5	;volatile
  1139                           
  1140                           ;main.c: 569:     TRISB = 0;
  1141  009F  1683               	bsf	3,5	;RP0=1, select bank1
  1142  00A0  1303               	bcf	3,6	;RP1=0, select bank1
  1143  00A1  0186               	clrf	6	;volatile
  1144                           
  1145                           ;main.c: 570:     PORTB = 0xFF;
  1146  00A2  30FF               	movlw	255
  1147  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1148  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1149  00A5  0086               	movwf	6	;volatile
  1150                           
  1151                           ;main.c: 573:     delay = 0;
  1152  00A6  01C8               	clrf	_delay
  1153  00A7  01C9               	clrf	_delay+1
  1154                           
  1155                           ;main.c: 574:     delayedKey = 0;
  1156  00A8  01CC               	clrf	_delayedKey
  1157                           
  1158                           ;main.c: 575:     shift_ctrl_alt = 0;
  1159  00A9  01D7               	clrf	_shift_ctrl_alt
  1160                           
  1161                           ;main.c: 576:     replaced = 0;
  1162  00AA  01CD               	clrf	_replaced
  1163                           
  1164                           ;main.c: 578:     deviceLogicDelay = 0;
  1165  00AB  01CA               	clrf	_deviceLogicDelay
  1166  00AC  01CB               	clrf	_deviceLogicDelay+1
  1167                           
  1168                           ;main.c: 579:     deviceLogicIndex = 0;
  1169  00AD  01D5               	clrf	_deviceLogicIndex
  1170                           
  1171                           ;main.c: 580:     deviceLogicState = 0;
  1172  00AE  01D3               	clrf	_deviceLogicState
  1173                           
  1174                           ;main.c: 581:     deviceLogicDevice = 3;
  1175  00AF  3003               	movlw	3
  1176  00B0  00BD               	movwf	??_main
  1177  00B1  083D               	movf	??_main,w
  1178  00B2  00D2               	movwf	_deviceLogicDevice
  1179                           
  1180                           ;main.c: 583:     kempstonMouseCounterA = 0;
  1181  00B3  01C4               	clrf	_kempstonMouseCounterA
  1182  00B4  01C5               	clrf	_kempstonMouseCounterA+1
  1183                           
  1184                           ;main.c: 584:     kempstonMouseCounterB = 0;
  1185  00B5  01D1               	clrf	_kempstonMouseCounterB
  1186                           
  1187                           ;main.c: 585:     kempstonMouseCounterC = 0;
  1188  00B6  01D0               	clrf	_kempstonMouseCounterC
  1189                           
  1190                           ;main.c: 587:     uint8_t code;;main.c: 589:     sendDataToAltera();
  1191  00B7  274C               	fcall	_sendDataToAltera
  1192  00B8                     l2240:	
  1193                           ;main.c: 591:     while(1)
  1194                           
  1195                           
  1196                           ;main.c: 592:     {;main.c: 593:         needSave = 0;
  1197  00B8  1283               	bcf	3,5	;RP0=0, select bank0
  1198  00B9  1303               	bcf	3,6	;RP1=0, select bank0
  1199  00BA  01CF               	clrf	_needSave
  1200                           
  1201                           ;main.c: 595:         for(uint8_t i = 0; i < 2; i++) {
  1202  00BB  01C2               	clrf	main@i_208
  1203  00BC  3002               	movlw	2
  1204  00BD  0242               	subwf	main@i_208,w
  1205  00BE  1803               	btfsc	3,0
  1206  00BF  29F6               	goto	l2366
  1207  00C0                     l2248:	
  1208                           
  1209                           ;main.c: 596:             struct PS2DeviceData* device = &devices[i];
  1210  00C0  300D               	movlw	13
  1211  00C1  00BD               	movwf	??_main
  1212  00C2  083D               	movf	??_main,w
  1213  00C3  00A0               	movwf	___bmul@multiplicand
  1214  00C4  0842               	movf	main@i_208,w
  1215  00C5  227F               	fcall	___bmul
  1216  00C6  3EA0               	addlw	(low (_devices| 0))& (0+255)
  1217  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1218  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1219  00C9  00BE               	movwf	??_main+1
  1220  00CA  083E               	movf	??_main+1,w
  1221  00CB  00C3               	movwf	main@device
  1222                           
  1223                           ;main.c: 598:             if ( device->readDataPos != device->inDataPos && device->inDat
      +                          a[device->readDataPos] == 0xaa ) {
  1224  00CC  0843               	movf	main@device,w
  1225  00CD  3E03               	addlw	3
  1226  00CE  0084               	movwf	4
  1227  00CF  1383               	bcf	3,7	;select IRP bank0
  1228  00D0  0800               	movf	0,w
  1229  00D1  00BD               	movwf	??_main
  1230  00D2  0843               	movf	main@device,w
  1231  00D3  3E04               	addlw	4
  1232  00D4  0084               	movwf	4
  1233  00D5  0800               	movf	0,w
  1234  00D6  063D               	xorwf	??_main,w
  1235  00D7  1903               	skipnz
  1236  00D8  28EC               	goto	l2256
  1237  00D9  0843               	movf	main@device,w
  1238  00DA  3E04               	addlw	4
  1239  00DB  0084               	movwf	4
  1240  00DC  0800               	movf	0,w
  1241  00DD  3E05               	addlw	5
  1242  00DE  0743               	addwf	main@device,w
  1243  00DF  00BD               	movwf	??_main
  1244  00E0  083D               	movf	??_main,w
  1245  00E1  0084               	movwf	4
  1246  00E2  30AA               	movlw	170
  1247  00E3  0600               	xorwf	0,w
  1248  00E4  1D03               	btfss	3,2
  1249  00E5  28EC               	goto	l2256
  1250                           
  1251                           ;main.c: 599:                 device->deviceMode = 3;
  1252  00E6  3003               	movlw	3
  1253  00E7  00BD               	movwf	??_main
  1254  00E8  0843               	movf	main@device,w
  1255  00E9  0084               	movwf	4
  1256  00EA  083D               	movf	??_main,w
  1257  00EB  0080               	movwf	0
  1258  00EC                     l2256:	
  1259                           ;main.c: 600:             }
  1260                           
  1261                           
  1262                           ;main.c: 602:             if ( device->deviceMode == 1 ) {
  1263  00EC  0843               	movf	main@device,w
  1264  00ED  0084               	movwf	4
  1265  00EE  0300               	decf	0,w
  1266  00EF  1D03               	btfss	3,2
  1267  00F0  28F4               	goto	l2260
  1268                           
  1269                           ;main.c: 603:                 deviceDataUpdateKeyboard(device);
  1270  00F1  0843               	movf	main@device,w
  1271  00F2  260B               	fcall	_deviceDataUpdateKeyboard
  1272                           
  1273                           ;main.c: 604:             } else if ( device->deviceMode == 2 ) {
  1274  00F3  29EC               	goto	l2362
  1275  00F4                     l2260:	
  1276  00F4  1283               	bcf	3,5	;RP0=0, select bank0
  1277  00F5  1303               	bcf	3,6	;RP1=0, select bank0
  1278  00F6  0843               	movf	main@device,w
  1279  00F7  0084               	movwf	4
  1280  00F8  3002               	movlw	2
  1281  00F9  1383               	bcf	3,7	;select IRP bank0
  1282  00FA  0600               	xorwf	0,w
  1283  00FB  1D03               	btfss	3,2
  1284  00FC  2900               	goto	l2264
  1285                           
  1286                           ;main.c: 605:                 deviceDataUpdateMouse(device);
  1287  00FD  0843               	movf	main@device,w
  1288  00FE  24C0               	fcall	_deviceDataUpdateMouse
  1289                           
  1290                           ;main.c: 606:             } else if ( device->deviceMode == 3 && (deviceLogicDevice == 3
      +                           || deviceLogicDevice == i) ) {
  1291  00FF  29EC               	goto	l2362
  1292  0100                     l2264:	
  1293  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1294  0101  1303               	bcf	3,6	;RP1=0, select bank0
  1295  0102  0843               	movf	main@device,w
  1296  0103  0084               	movwf	4
  1297  0104  3003               	movlw	3
  1298  0105  1383               	bcf	3,7	;select IRP bank0
  1299  0106  0600               	xorwf	0,w
  1300  0107  1D03               	btfss	3,2
  1301  0108  29E1               	goto	l2360
  1302  0109  3003               	movlw	3
  1303  010A  0652               	xorwf	_deviceLogicDevice,w
  1304  010B  1903               	btfsc	3,2
  1305  010C  2911               	goto	l2270
  1306  010D  0852               	movf	_deviceLogicDevice,w
  1307  010E  0642               	xorwf	main@i_208,w
  1308  010F  1D03               	skipz
  1309  0110  29E1               	goto	l2360
  1310  0111                     l2270:	
  1311                           
  1312                           ;main.c: 608:                 deviceLogicDelay++;
  1313  0111  3001               	movlw	1
  1314  0112  07CA               	addwf	_deviceLogicDelay,f
  1315  0113  1803               	skipnc
  1316  0114  0ACB               	incf	_deviceLogicDelay+1,f
  1317  0115  3000               	movlw	0
  1318  0116  07CB               	addwf	_deviceLogicDelay+1,f
  1319                           
  1320                           ;main.c: 609:                 if ( deviceLogicDelay > 333 ) {
  1321  0117  3001               	movlw	1
  1322  0118  024B               	subwf	_deviceLogicDelay+1,w
  1323  0119  304E               	movlw	78
  1324  011A  1903               	skipnz
  1325  011B  024A               	subwf	_deviceLogicDelay,w
  1326  011C  1C03               	skipc
  1327  011D  29F6               	goto	l2366
  1328                           
  1329                           ;main.c: 612:                     if ( device->readDataPos != device->inDataPos ) {
  1330  011E  0843               	movf	main@device,w
  1331  011F  3E03               	addlw	3
  1332  0120  0084               	movwf	4
  1333  0121  0800               	movf	0,w
  1334  0122  00BD               	movwf	??_main
  1335  0123  0843               	movf	main@device,w
  1336  0124  3E04               	addlw	4
  1337  0125  0084               	movwf	4
  1338  0126  0800               	movf	0,w
  1339  0127  063D               	xorwf	??_main,w
  1340  0128  1903               	skipnz
  1341  0129  2944               	goto	l2276
  1342                           
  1343                           ;main.c: 613:                         code = device->inData[device->readDataPos];
  1344  012A  0843               	movf	main@device,w
  1345  012B  3E04               	addlw	4
  1346  012C  0084               	movwf	4
  1347  012D  0800               	movf	0,w
  1348  012E  3E05               	addlw	5
  1349  012F  0743               	addwf	main@device,w
  1350  0130  00BD               	movwf	??_main
  1351  0131  083D               	movf	??_main,w
  1352  0132  0084               	movwf	4
  1353  0133  0800               	movf	0,w
  1354  0134  00BE               	movwf	??_main+1
  1355  0135  083E               	movf	??_main+1,w
  1356  0136  00C1               	movwf	main@code
  1357                           
  1358                           ;main.c: 614:                         device->readDataPos = (device->readDataPos + 1) & 
      +                          7;
  1359  0137  0843               	movf	main@device,w
  1360  0138  3E04               	addlw	4
  1361  0139  0084               	movwf	4
  1362  013A  0800               	movf	0,w
  1363  013B  3E01               	addlw	1
  1364  013C  3907               	andlw	7
  1365  013D  00BD               	movwf	??_main
  1366  013E  0843               	movf	main@device,w
  1367  013F  3E04               	addlw	4
  1368  0140  0084               	movwf	4
  1369  0141  083D               	movf	??_main,w
  1370  0142  0080               	movwf	0
  1371                           
  1372                           ;main.c: 615:                     } else code = 0xff;
  1373  0143  2948               	goto	l2278
  1374  0144                     l2276:	
  1375  0144  30FF               	movlw	255
  1376  0145  00BD               	movwf	??_main
  1377  0146  083D               	movf	??_main,w
  1378  0147  00C1               	movwf	main@code
  1379  0148                     l2278:	
  1380                           
  1381                           ;main.c: 618:                     if ( deviceLogicState == 0 ) {
  1382  0148  0853               	movf	_deviceLogicState,w
  1383  0149  1D03               	btfss	3,2
  1384  014A  2955               	goto	l2288
  1385                           
  1386                           ;main.c: 620:                         if ( deviceLogicDevice == 3 ) {
  1387  014B  3003               	movlw	3
  1388  014C  0652               	xorwf	_deviceLogicDevice,w
  1389  014D  1D03               	btfss	3,2
  1390  014E  29DE               	goto	l2356
  1391                           
  1392                           ;main.c: 621:                             deviceLogicDevice = i;
  1393  014F  0842               	movf	main@i_208,w
  1394  0150  00BD               	movwf	??_main
  1395  0151  083D               	movf	??_main,w
  1396  0152  00D2               	movwf	_deviceLogicDevice
  1397                           
  1398                           ;main.c: 622:                             deviceLogicIndex = 0;
  1399  0153  01D5               	clrf	_deviceLogicIndex
  1400  0154  29DC               	goto	l2354
  1401  0155                     l2288:	
  1402                           ;main.c: 626:                     } else if ( deviceLogicState == 1 ) {
  1403                           
  1404                           ;main.c: 624:                         }
  1405                           
  1406                           ;main.c: 623:                             deviceLogicState = 1;
  1407                           
  1408  0155  0353               	decf	_deviceLogicState,w
  1409  0156  1D03               	btfss	3,2
  1410  0157  29A5               	goto	l2324
  1411                           
  1412                           ;main.c: 628:                         deviceLogicCommand = deviceLogic[deviceLogicIndex]
      +                          ;
  1413  0158  0855               	movf	_deviceLogicIndex,w
  1414  0159  3EC7               	addlw	low ((_deviceLogic-__stringbase)| (0+32768))
  1415  015A  0084               	movwf	4
  1416  015B  2300               	fcall	stringdir
  1417  015C  00BD               	movwf	??_main
  1418  015D  083D               	movf	??_main,w
  1419  015E  00D4               	movwf	_deviceLogicCommand
  1420                           
  1421                           ;main.c: 629:                         if (deviceLogicCommand == 0xaa ) {
  1422  015F  30AA               	movlw	170
  1423  0160  0654               	xorwf	_deviceLogicCommand,w
  1424  0161  1D03               	btfss	3,2
  1425  0162  299B               	goto	l2320
  1426                           
  1427                           ;main.c: 630:                             if ( deviceLogicIndex == deviceLogicMax - 1 ) 
      +                          {
  1428  0163  30D8               	movlw	low (_deviceLogicMax-__stringbase)
  1429  0164  0084               	movwf	4
  1430  0165  2300               	fcall	stringdir
  1431  0166  3EFF               	addlw	255
  1432  0167  00BD               	movwf	??_main
  1433  0168  30FF               	movlw	255
  1434  0169  1803               	skipnc
  1435  016A  3000               	movlw	0
  1436  016B  00BE               	movwf	??_main+1
  1437  016C  0855               	movf	_deviceLogicIndex,w
  1438  016D  063D               	xorwf	??_main,w
  1439  016E  043E               	iorwf	??_main+1,w
  1440  016F  1D03               	skipz
  1441  0170  297C               	goto	l2300
  1442                           
  1443                           ;main.c: 631:                                 device->deviceMode = 2;
  1444  0171  3002               	movlw	2
  1445  0172  00BD               	movwf	??_main
  1446  0173  0843               	movf	main@device,w
  1447  0174  0084               	movwf	4
  1448  0175  083D               	movf	??_main,w
  1449  0176  0080               	movwf	0
  1450                           
  1451                           ;main.c: 632:                                 kempstonMouseCounterA = 255;
  1452  0177  30FF               	movlw	255
  1453  0178  00C4               	movwf	_kempstonMouseCounterA
  1454  0179  3000               	movlw	0
  1455  017A  00C5               	movwf	_kempstonMouseCounterA+1
  1456                           
  1457                           ;main.c: 633:                             } else {
  1458  017B  2995               	goto	l2316
  1459  017C                     l2300:	
  1460                           
  1461                           ;main.c: 634:                                 ps2DeviceMain = i;
  1462  017C  0842               	movf	main@i_208,w
  1463  017D  00BD               	movwf	??_main
  1464  017E  083D               	movf	??_main,w
  1465  017F  00E4               	movwf	_ps2DeviceMain
  1466                           
  1467                           ;main.c: 635:                                 device->deviceMode = 1;
  1468  0180  0843               	movf	main@device,w
  1469  0181  0084               	movwf	4
  1470  0182  0180               	clrf	0
  1471  0183  0A80               	incf	0,f
  1472                           
  1473                           ;main.c: 636:                                 for(uint8_t j = 0; j < 8; j++) outPorts[j]
      +                           = 0;
  1474  0184  01C0               	clrf	main@j
  1475  0185  3008               	movlw	8
  1476  0186  0240               	subwf	main@j,w
  1477  0187  1803               	btfsc	3,0
  1478  0188  2995               	goto	l2316
  1479  0189                     l2310:	
  1480  0189  0840               	movf	main@j,w
  1481  018A  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  1482  018B  0084               	movwf	4
  1483  018C  0180               	clrf	0
  1484  018D  3001               	movlw	1
  1485  018E  00BD               	movwf	??_main
  1486  018F  083D               	movf	??_main,w
  1487  0190  07C0               	addwf	main@j,f
  1488  0191  3008               	movlw	8
  1489  0192  0240               	subwf	main@j,w
  1490  0193  1C03               	skipc
  1491  0194  2989               	goto	l2310
  1492  0195                     l2316:	
  1493                           ;main.c: 637:                             }
  1494                           
  1495                           
  1496                           ;main.c: 638:                             deviceLogicState = 0;
  1497  0195  01D3               	clrf	_deviceLogicState
  1498                           
  1499                           ;main.c: 639:                             deviceLogicDevice = 3;
  1500  0196  3003               	movlw	3
  1501  0197  00BD               	movwf	??_main
  1502  0198  083D               	movf	??_main,w
  1503  0199  00D2               	movwf	_deviceLogicDevice
  1504                           
  1505                           ;main.c: 640:                             break;
  1506  019A  29F6               	goto	l2366
  1507  019B                     l2320:	
  1508                           ;main.c: 641:                         }
  1509                           
  1510                           
  1511                           ;main.c: 642:                         send(deviceLogicDevice, deviceLogicCommand);
  1512  019B  0854               	movf	_deviceLogicCommand,w
  1513  019C  00BD               	movwf	??_main
  1514  019D  083D               	movf	??_main,w
  1515  019E  00A0               	movwf	send@byte
  1516  019F  0852               	movf	_deviceLogicDevice,w
  1517  01A0  2690               	fcall	_send
  1518                           
  1519                           ;main.c: 643:                         deviceLogicState = 2;
  1520  01A1  3002               	movlw	2
  1521  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1522  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1523  01A4  29B2               	goto	L1
  1524  01A5                     l2324:	
  1525                           ;main.c: 645:                     } else if ( deviceLogicState == 2 ) {
  1526                           
  1527  01A5  3002               	movlw	2
  1528  01A6  0653               	xorwf	_deviceLogicState,w
  1529  01A7  1D03               	btfss	3,2
  1530  01A8  29B6               	goto	l2332
  1531                           
  1532                           ;main.c: 647:                         if ( code == 0xfe || code == 0xfc ) {
  1533  01A9  30FE               	movlw	254
  1534  01AA  0641               	xorwf	main@code,w
  1535  01AB  1903               	btfsc	3,2
  1536  01AC  29DC               	goto	l2354
  1537  01AD  30FC               	movlw	252
  1538  01AE  0641               	xorwf	main@code,w
  1539  01AF  1903               	btfsc	3,2
  1540  01B0  29DC               	goto	l2354
  1541                           
  1542                           ;main.c: 650:                             deviceLogicState = 3;
  1543                           
  1544                           ;main.c: 649:                         } else {
  1545                           
  1546                           ;main.c: 648:                             deviceLogicState = 1;
  1547  01B1  3003               	movlw	3
  1548  01B2                     L1:	
  1549  01B2  00BD               	movwf	??_main
  1550  01B3  083D               	movf	??_main,w
  1551  01B4  00D3               	movwf	_deviceLogicState
  1552                           
  1553                           ;main.c: 653:                     } else if ( deviceLogicState == 3 ) {
  1554                           
  1555                           ;main.c: 651:                         }
  1556  01B5  29DE               	goto	l2356
  1557  01B6                     l2332:	
  1558  01B6  3003               	movlw	3
  1559  01B7  0653               	xorwf	_deviceLogicState,w
  1560  01B8  1D03               	btfss	3,2
  1561  01B9  29DE               	goto	l2356
  1562                           
  1563                           ;main.c: 657:                         if ( deviceLogicCommand == 0xf2 ) {
  1564  01BA  30F2               	movlw	242
  1565  01BB  0654               	xorwf	_deviceLogicCommand,w
  1566  01BC  1D03               	btfss	3,2
  1567  01BD  29D1               	goto	l2346
  1568                           
  1569                           ;main.c: 658:                             if ( code == 0x83 ) {
  1570  01BE  3083               	movlw	131
  1571  01BF  0641               	xorwf	main@code,w
  1572  01C0  1903               	btfsc	3,2
  1573  01C1  29D8               	goto	l2352
  1574                           
  1575                           ;main.c: 660:                             } else if ( code == 0x00 || code == 0x03 ) {
  1576  01C2  0841               	movf	main@code,w
  1577  01C3  1903               	btfsc	3,2
  1578  01C4  29C9               	goto	l2344
  1579  01C5  3003               	movlw	3
  1580  01C6  0641               	xorwf	main@code,w
  1581  01C7  1D03               	btfss	3,2
  1582  01C8  29D8               	goto	l2352
  1583  01C9                     l2344:	
  1584                           
  1585                           ;main.c: 662:                                 deviceLogicIndex = deviceLogicMouseIndex -
      +                           1;
  1586  01C9  30D9               	movlw	low (_deviceLogicMouseIndex-__stringbase)
  1587  01CA  0084               	movwf	4
  1588  01CB  2300               	fcall	stringdir
  1589  01CC  3EFF               	addlw	255
  1590  01CD  00BD               	movwf	??_main
  1591  01CE  083D               	movf	??_main,w
  1592  01CF  00D5               	movwf	_deviceLogicIndex
  1593                           
  1594                           ;main.c: 664:                         } else if ( deviceLogicCommand == 0xff ) {
  1595                           
  1596                           ;main.c: 663:                             }
  1597  01D0  29D8               	goto	l2352
  1598  01D1                     l2346:	
  1599  01D1  0A54               	incf	_deviceLogicCommand,w
  1600  01D2  1D03               	btfss	3,2
  1601  01D3  29D8               	goto	l2352
  1602                           
  1603                           ;main.c: 665:                             if ( code != 0xaa ) {
  1604  01D4  30AA               	movlw	170
  1605  01D5  0641               	xorwf	main@code,w
  1606  01D6  1D03               	btfss	3,2
  1607  01D7  29F6               	goto	l2366
  1608  01D8                     l2352:	
  1609                           ;main.c: 668:                         }
  1610                           
  1611                           ;main.c: 667:                             }
  1612                           
  1613                           ;main.c: 666:                                 break;
  1614                           
  1615                           
  1616                           ;main.c: 670:                         deviceLogicIndex++;
  1617  01D8  3001               	movlw	1
  1618  01D9  00BD               	movwf	??_main
  1619  01DA  083D               	movf	??_main,w
  1620  01DB  07D5               	addwf	_deviceLogicIndex,f
  1621  01DC                     l2354:	
  1622                           
  1623                           ;main.c: 671:                         deviceLogicState = 1;
  1624  01DC  01D3               	clrf	_deviceLogicState
  1625  01DD  0AD3               	incf	_deviceLogicState,f
  1626  01DE                     l2356:	
  1627                           ;main.c: 672:                     }
  1628                           
  1629                           
  1630                           ;main.c: 674:                     deviceLogicDelay = 0;
  1631  01DE  01CA               	clrf	_deviceLogicDelay
  1632  01DF  01CB               	clrf	_deviceLogicDelay+1
  1633                           
  1634                           ;main.c: 677:                 break;
  1635                           
  1636                           ;main.c: 675:                 }
  1637  01E0  29F6               	goto	l2366
  1638  01E1                     l2360:	
  1639                           ;main.c: 678:             } else {
  1640                           
  1641                           
  1642                           ;main.c: 679:                 device->readDataPos = device->inDataPos;
  1643  01E1  0843               	movf	main@device,w
  1644  01E2  3E03               	addlw	3
  1645  01E3  0084               	movwf	4
  1646  01E4  1383               	bcf	3,7	;select IRP bank0
  1647  01E5  0800               	movf	0,w
  1648  01E6  00BD               	movwf	??_main
  1649  01E7  0843               	movf	main@device,w
  1650  01E8  3E04               	addlw	4
  1651  01E9  0084               	movwf	4
  1652  01EA  083D               	movf	??_main,w
  1653  01EB  0080               	movwf	0
  1654  01EC                     l2362:	
  1655                           ;main.c: 680:             }
  1656                           
  1657                           
  1658                           ;main.c: 681:         }
  1659  01EC  3001               	movlw	1
  1660  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1661  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1662  01EF  00BD               	movwf	??_main
  1663  01F0  083D               	movf	??_main,w
  1664  01F1  07C2               	addwf	main@i_208,f
  1665  01F2  3002               	movlw	2
  1666  01F3  0242               	subwf	main@i_208,w
  1667  01F4  1C03               	skipc
  1668  01F5  28C0               	goto	l2248
  1669  01F6                     l2366:	
  1670                           
  1671                           ;main.c: 683:         if ( delay != 0 ) {
  1672  01F6  0848               	movf	_delay,w
  1673  01F7  0449               	iorwf	_delay+1,w
  1674  01F8  1903               	btfsc	3,2
  1675  01F9  2A18               	goto	l2384
  1676                           
  1677                           ;main.c: 685:             delay--;
  1678  01FA  3001               	movlw	1
  1679  01FB  02C8               	subwf	_delay,f
  1680  01FC  3000               	movlw	0
  1681  01FD  1C03               	skipc
  1682  01FE  03C9               	decf	_delay+1,f
  1683  01FF  02C9               	subwf	_delay+1,f
  1684                           
  1685                           ;main.c: 686:             if ( delay == 0 ) {
  1686  0200  0848               	movf	_delay,w
  1687  0201  0449               	iorwf	_delay+1,w
  1688  0202  1D03               	btfss	3,2
  1689  0203  2A0A               	goto	l2376
  1690                           
  1691                           ;main.c: 688:                 updatePort(0x00, 0);
  1692  0204  01A0               	clrf	updatePort@set
  1693  0205  3000               	movlw	0
  1694  0206  224E               	fcall	_updatePort
  1695                           
  1696                           ;main.c: 690:                 needSave = 1;
  1697  0207  1283               	bcf	3,5	;RP0=0, select bank0
  1698  0208  1303               	bcf	3,6	;RP1=0, select bank0
  1699  0209  2A16               	goto	l2382
  1700  020A                     l2376:	
  1701                           ;main.c: 691:             } else if ( delay == 200 ) {
  1702                           
  1703  020A  30C8               	movlw	200
  1704  020B  0648               	xorwf	_delay,w
  1705  020C  0449               	iorwf	_delay+1,w
  1706  020D  1D03               	btfss	3,2
  1707  020E  2A18               	goto	l2384
  1708                           
  1709                           ;main.c: 693:                 updateKey(delayedKey, 1 );
  1710  020F  01A6               	clrf	updateKey@down
  1711  0210  0AA6               	incf	updateKey@down,f
  1712  0211  084C               	movf	_delayedKey,w
  1713  0212  26F5               	fcall	_updateKey
  1714                           
  1715                           ;main.c: 694:                 delayedKey = 0;
  1716  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1717  0214  1303               	bcf	3,6	;RP1=0, select bank0
  1718  0215  01CC               	clrf	_delayedKey
  1719  0216                     l2382:	
  1720                           
  1721                           ;main.c: 695:                 needSave = 1;
  1722  0216  01CF               	clrf	_needSave
  1723  0217  0ACF               	incf	_needSave,f
  1724  0218                     l2384:	
  1725                           ;main.c: 699:         }
  1726                           
  1727                           ;main.c: 697:             }
  1728                           
  1729                           
  1730                           ;main.c: 701:         kempstonMouseEmulatorDelay++;
  1731  0218  3001               	movlw	1
  1732  0219  07C6               	addwf	_kempstonMouseEmulatorDelay,f
  1733  021A  1803               	skipnc
  1734  021B  0AC7               	incf	_kempstonMouseEmulatorDelay+1,f
  1735  021C  3000               	movlw	0
  1736  021D  07C7               	addwf	_kempstonMouseEmulatorDelay+1,f
  1737                           
  1738                           ;main.c: 702:         if ( kempstonMouseEmulatorDelay > 333 && numLock ) {
  1739  021E  3001               	movlw	1
  1740  021F  0247               	subwf	_kempstonMouseEmulatorDelay+1,w
  1741  0220  304E               	movlw	78
  1742  0221  1903               	skipnz
  1743  0222  0246               	subwf	_kempstonMouseEmulatorDelay,w
  1744  0223  1C03               	skipc
  1745  0224  2A48               	goto	l2414
  1746  0225  084E               	movf	_numLock,w
  1747  0226  1903               	btfsc	3,2
  1748  0227  2A48               	goto	l2414
  1749                           
  1750                           ;main.c: 704:             if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]-=1;
  1751  0228  1C58               	btfss	_kempstonMouseEmulatorKeys,0
  1752  0229  2A2C               	goto	l2394
  1753  022A  3001               	movlw	1
  1754  022B  02E2               	subwf	_outPorts+9,f
  1755  022C                     l2394:	
  1756                           
  1757                           ;main.c: 705:             if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]+=1;
  1758  022C  1CD8               	btfss	_kempstonMouseEmulatorKeys,1
  1759  022D  2A32               	goto	l2398
  1760  022E  3001               	movlw	1
  1761  022F  00BD               	movwf	??_main
  1762  0230  083D               	movf	??_main,w
  1763  0231  07E2               	addwf	_outPorts+9,f
  1764  0232                     l2398:	
  1765                           
  1766                           ;main.c: 706:             if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10]+=1;
  1767  0232  1D58               	btfss	_kempstonMouseEmulatorKeys,2
  1768  0233  2A38               	goto	l2402
  1769  0234  3001               	movlw	1
  1770  0235  00BD               	movwf	??_main
  1771  0236  083D               	movf	??_main,w
  1772  0237  07E3               	addwf	_outPorts+10,f
  1773  0238                     l2402:	
  1774                           
  1775                           ;main.c: 707:             if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10]-=1;
  1776  0238  1DD8               	btfss	_kempstonMouseEmulatorKeys,3
  1777  0239  2A3C               	goto	l2406
  1778  023A  3001               	movlw	1
  1779  023B  02E3               	subwf	_outPorts+10,f
  1780  023C                     l2406:	
  1781                           
  1782                           ;main.c: 708:             if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8] &= 254
      +                          ;
  1783  023C  1E58               	btfss	_kempstonMouseEmulatorKeys,4
  1784  023D  2A43               	goto	l356
  1785  023E  30FE               	movlw	254
  1786  023F  00BD               	movwf	??_main
  1787  0240  083D               	movf	??_main,w
  1788  0241  05E1               	andwf	_outPorts+8,f
  1789  0242  2A44               	goto	l2410
  1790  0243                     l356:	
  1791                           ;main.c: 709:             else outPorts[8] |= 1;
  1792                           
  1793  0243  1461               	bsf	_outPorts+8,0
  1794  0244                     l2410:	
  1795                           
  1796                           ;main.c: 711:             kempstonMouseEmulatorDelay = 0;
  1797  0244  01C6               	clrf	_kempstonMouseEmulatorDelay
  1798  0245  01C7               	clrf	_kempstonMouseEmulatorDelay+1
  1799                           
  1800                           ;main.c: 712:             needSave = 1;
  1801  0246  01CF               	clrf	_needSave
  1802  0247  0ACF               	incf	_needSave,f
  1803  0248                     l2414:	
  1804                           ;main.c: 713:         }
  1805                           
  1806                           
  1807                           ;main.c: 715:         if ( needSave) {
  1808  0248  084F               	movf	_needSave,w
  1809  0249  1903               	btfsc	3,2
  1810  024A  2A4C               	goto	l358
  1811                           
  1812                           ;main.c: 716:             sendDataToAltera();
  1813  024B  274C               	fcall	_sendDataToAltera
  1814  024C                     l358:	
  1815                           ;main.c: 717:         }
  1816                           
  1817  024C  0064               	clrwdt	;# 
  1818                           
  1819                           ;main.c: 720:     }
  1820  024D  28B8               	goto	l2240
  1821  024E                     __end_of_main:	
  1822                           
  1823                           	psect	text1
  1824  074C                     __ptext1:	
  1825 ;; *************** function _sendDataToAltera *****************
  1826 ;; Defined at:
  1827 ;;		line 309 in file "main.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;  i               1    4[BANK0 ] char 
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1841 ;;      Params:         0       0       0       0
  1842 ;;      Locals:         0       3       0       0
  1843 ;;      Temps:          0       2       0       0
  1844 ;;      Totals:         0       5       0       0
  1845 ;;Total ram usage:        5 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    3
  1848 ;; This function calls:
  1849 ;;		_myDelay
  1850 ;; This function is called by:
  1851 ;;		_main
  1852 ;; This function uses a non-reentrant model
  1853 ;;
  1854                           
  1855                           
  1856                           ;psect for function _sendDataToAltera
  1857  074C                     _sendDataToAltera:	
  1858                           
  1859                           ;main.c: 311:     RA2 = 1;
  1860                           
  1861                           ;incstack = 0
  1862                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1863  074C  1283               	bcf	3,5	;RP0=0, select bank0
  1864  074D  1303               	bcf	3,6	;RP1=0, select bank0
  1865  074E  1505               	bsf	5,2	;volatile
  1866                           
  1867                           ;main.c: 312:     RA1 = 0;
  1868  074F  1085               	bcf	5,1	;volatile
  1869                           
  1870                           ;main.c: 313:     myDelay();
  1871  0750  27FF               	fcall	_myDelay
  1872                           
  1873                           ;main.c: 314:     RA1 = 1;
  1874  0751  1283               	bcf	3,5	;RP0=0, select bank0
  1875  0752  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0753  1485               	bsf	5,1	;volatile
  1877                           
  1878                           ;main.c: 315:     myDelay();
  1879  0754  27FF               	fcall	_myDelay
  1880                           
  1881                           ;main.c: 316:     RA1 = 0;
  1882  0755  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0756  1303               	bcf	3,6	;RP1=0, select bank0
  1884  0757  1085               	bcf	5,1	;volatile
  1885                           
  1886                           ;main.c: 317:     myDelay();
  1887  0758  27FF               	fcall	_myDelay
  1888                           
  1889                           ;main.c: 318:     for(int8_t i=0;i<11;i++) {
  1890  0759  1283               	bcf	3,5	;RP0=0, select bank0
  1891  075A  1303               	bcf	3,6	;RP1=0, select bank0
  1892  075B  01A4               	clrf	sendDataToAltera@i
  1893  075C  0824               	movf	sendDataToAltera@i,w
  1894  075D  3A80               	xorlw	128
  1895  075E  3E75               	addlw	-139
  1896  075F  1803               	btfsc	3,0
  1897  0760  2F93               	goto	l1910
  1898  0761                     l233:	
  1899                           
  1900                           ;main.c: 319:         RA2 = 1;
  1901  0761  1505               	bsf	5,2	;volatile
  1902                           
  1903                           ;main.c: 320:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1904  0762  0824               	movf	sendDataToAltera@i,w
  1905  0763  3A80               	xorlw	128
  1906  0764  3E78               	addlw	-136
  1907  0765  1C03               	skipc
  1908  0766  2F72               	goto	l1892
  1909  0767  0824               	movf	sendDataToAltera@i,w
  1910  0768  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  1911  0769  0084               	movwf	4
  1912  076A  1383               	bcf	3,7	;select IRP bank0
  1913  076B  0800               	movf	0,w
  1914  076C  00A0               	movwf	??_sendDataToAltera
  1915  076D  01A1               	clrf	??_sendDataToAltera+1
  1916  076E  0820               	movf	??_sendDataToAltera,w
  1917  076F  00A2               	movwf	_sendDataToAltera$161
  1918  0770  0821               	movf	??_sendDataToAltera+1,w
  1919  0771  2F7C               	goto	L2
  1920  0772                     l1892:	
  1921  0772  0824               	movf	sendDataToAltera@i,w
  1922  0773  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  1923  0774  0084               	movwf	4
  1924  0775  1383               	bcf	3,7	;select IRP bank0
  1925  0776  0800               	movf	0,w
  1926  0777  00A0               	movwf	??_sendDataToAltera
  1927  0778  01A1               	clrf	??_sendDataToAltera+1
  1928  0779  0920               	comf	??_sendDataToAltera,w
  1929  077A  00A2               	movwf	_sendDataToAltera$161
  1930  077B  0921               	comf	??_sendDataToAltera+1,w
  1931  077C                     L2:	
  1932  077C  00A3               	movwf	_sendDataToAltera$161+1
  1933  077D  0822               	movf	_sendDataToAltera$161,w
  1934  077E  0086               	movwf	6	;volatile
  1935                           
  1936                           ;main.c: 321:         myDelay();
  1937  077F  27FF               	fcall	_myDelay
  1938                           
  1939                           ;main.c: 322:         RA2 = 0;
  1940  0780  1283               	bcf	3,5	;RP0=0, select bank0
  1941  0781  1303               	bcf	3,6	;RP1=0, select bank0
  1942  0782  1105               	bcf	5,2	;volatile
  1943                           
  1944                           ;main.c: 323:         myDelay();
  1945  0783  27FF               	fcall	_myDelay
  1946                           
  1947                           ;main.c: 324:         RA2 = 1;
  1948  0784  1283               	bcf	3,5	;RP0=0, select bank0
  1949  0785  1303               	bcf	3,6	;RP1=0, select bank0
  1950  0786  1505               	bsf	5,2	;volatile
  1951                           
  1952                           ;main.c: 325:         myDelay();
  1953  0787  27FF               	fcall	_myDelay
  1954                           
  1955                           ;main.c: 326:     }
  1956  0788  3001               	movlw	1
  1957  0789  1283               	bcf	3,5	;RP0=0, select bank0
  1958  078A  1303               	bcf	3,6	;RP1=0, select bank0
  1959  078B  00A0               	movwf	??_sendDataToAltera
  1960  078C  0820               	movf	??_sendDataToAltera,w
  1961  078D  07A4               	addwf	sendDataToAltera@i,f
  1962  078E  0824               	movf	sendDataToAltera@i,w
  1963  078F  3A80               	xorlw	128
  1964  0790  3E75               	addlw	-139
  1965  0791  1C03               	skipc
  1966  0792  2F61               	goto	l233
  1967  0793                     l1910:	
  1968                           
  1969                           ;main.c: 327:     PORTB = 0xFF;
  1970  0793  30FF               	movlw	255
  1971  0794  0086               	movwf	6	;volatile
  1972  0795  0008               	return
  1973  0796                     __end_of_sendDataToAltera:	
  1974                           
  1975                           	psect	text2
  1976  07FF                     __ptext2:	
  1977 ;; *************** function _myDelay *****************
  1978 ;; Defined at:
  1979 ;;		line 304 in file "main.c"
  1980 ;; Parameters:    Size  Location     Type
  1981 ;;		None
  1982 ;; Auto vars:     Size  Location     Type
  1983 ;;		None
  1984 ;; Return value:  Size  Location     Type
  1985 ;;                  1    wreg      void 
  1986 ;; Registers used:
  1987 ;;		None
  1988 ;; Tracked objects:
  1989 ;;		On entry : 0/0
  1990 ;;		On exit  : 0/0
  1991 ;;		Unchanged: 0/0
  1992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1993 ;;      Params:         0       0       0       0
  1994 ;;      Locals:         0       0       0       0
  1995 ;;      Temps:          0       0       0       0
  1996 ;;      Totals:         0       0       0       0
  1997 ;;Total ram usage:        0 bytes
  1998 ;; Hardware stack levels used:    1
  1999 ;; Hardware stack levels required when called:    2
  2000 ;; This function calls:
  2001 ;;		Nothing
  2002 ;; This function is called by:
  2003 ;;		_sendDataToAltera
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           
  2008                           ;psect for function _myDelay
  2009  07FF                     _myDelay:	
  2010                           
  2011                           ;incstack = 0
  2012                           ; Regs used in _myDelay: []
  2013  07FF  0008               	return
  2014  0800                     __end_of_myDelay:	
  2015                           
  2016                           	psect	text3
  2017  0690                     __ptext3:	
  2018 ;; *************** function _send *****************
  2019 ;; Defined at:
  2020 ;;		line 215 in file "main.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  device          1    wreg     unsigned char 
  2023 ;;  byte            1    0[BANK0 ] unsigned char 
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;  device          1    2[BANK0 ] unsigned char 
  2026 ;;  j               1    4[BANK0 ] unsigned char 
  2027 ;;  i               1    3[BANK0 ] unsigned char 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, status,2, status,0
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2037 ;;      Params:         0       1       0       0
  2038 ;;      Locals:         0       3       0       0
  2039 ;;      Temps:          0       1       0       0
  2040 ;;      Totals:         0       5       0       0
  2041 ;;Total ram usage:        5 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    2
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_main
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           
  2052                           ;psect for function _send
  2053  0690                     _send:	
  2054                           
  2055                           ;incstack = 0
  2056                           ; Regs used in _send: [wreg+status,2+status,0]
  2057                           ;send@device stored from wreg
  2058  0690  1283               	bcf	3,5	;RP0=0, select bank0
  2059  0691  1303               	bcf	3,6	;RP1=0, select bank0
  2060  0692  00A2               	movwf	send@device
  2061                           
  2062                           ;main.c: 215: void send(uint8_t device, uint8_t byte);main.c: 216: {;main.c: 218:     T0
      +                          IE = 0;
  2063  0693  128B               	bcf	11,5	;volatile
  2064                           
  2065                           ;main.c: 221:     ps2Bits = byte;
  2066  0694  0820               	movf	send@byte,w
  2067  0695  00A1               	movwf	??_send
  2068  0696  0821               	movf	??_send,w
  2069  0697  00FC               	movwf	_ps2Bits
  2070                           
  2071                           ;main.c: 223:     ps2Parity = 1;
  2072  0698  01D6               	clrf	_ps2Parity
  2073  0699  0AD6               	incf	_ps2Parity,f
  2074                           
  2075                           ;main.c: 224:     ps2BitsCount = 0;
  2076  069A  01FB               	clrf	_ps2BitsCount
  2077                           
  2078                           ;main.c: 225:     ps2DataState = 2;
  2079  069B  3002               	movlw	2
  2080  069C  00A1               	movwf	??_send
  2081  069D  0821               	movf	??_send,w
  2082  069E  00FD               	movwf	_ps2DataState
  2083                           
  2084                           ;main.c: 230:     RA3 = 1;
  2085  069F  1585               	bsf	5,3	;volatile
  2086                           
  2087                           ;main.c: 231:     TRISA = 0b11100000;
  2088  06A0  30E0               	movlw	224
  2089  06A1  1683               	bsf	3,5	;RP0=1, select bank1
  2090  06A2  1303               	bcf	3,6	;RP1=0, select bank1
  2091  06A3  0085               	movwf	5	;volatile
  2092                           
  2093                           ;main.c: 232:     RA0 = device;
  2094  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  2095  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  2096  06A6  1C22               	btfss	send@device,0
  2097  06A7  2EAC               	goto	u1810
  2098  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  2099  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  2100  06AA  1405               	bsf	5,0	;volatile
  2101  06AB  2EAF               	goto	l1828
  2102  06AC                     u1810:	
  2103  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  2104  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  2105  06AE  1005               	bcf	5,0	;volatile
  2106  06AF                     l1828:	
  2107                           
  2108                           ;main.c: 233:     RA3 = 1;
  2109  06AF  1585               	bsf	5,3	;volatile
  2110                           
  2111                           ;main.c: 234:     RA4 = 0;
  2112  06B0  1205               	bcf	5,4	;volatile
  2113                           
  2114                           ;main.c: 235:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  2115  06B1  3042               	movlw	66
  2116  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  2117  06B3  1303               	bcf	3,6	;RP1=0, select bank0
  2118  06B4  00A1               	movwf	??_send
  2119  06B5                     u2717:	
  2120  06B5  0BA1               	decfsz	??_send,f
  2121  06B6  2EB5               	goto	u2717
  2122                           
  2123                           ;main.c: 236:     RA3 = 0;
  2124  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  2125  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  2126  06B9  1185               	bcf	5,3	;volatile
  2127                           
  2128                           ;main.c: 238:     TRISA = 0b11110000;
  2129  06BA  30F0               	movlw	240
  2130  06BB  1683               	bsf	3,5	;RP0=1, select bank1
  2131  06BC  1303               	bcf	3,6	;RP1=0, select bank1
  2132  06BD  0085               	movwf	5	;volatile
  2133                           
  2134                           ;main.c: 239:     TMR0 = 255;
  2135  06BE  30FF               	movlw	255
  2136  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  2137  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  2138  06C1  0081               	movwf	1	;volatile
  2139                           
  2140                           ;main.c: 240:     T0IF = 0;
  2141  06C2  110B               	bcf	11,2	;volatile
  2142                           
  2143                           ;main.c: 241:     T0IE = 1;
  2144  06C3  168B               	bsf	11,5	;volatile
  2145                           
  2146                           ;main.c: 244:     for(uint8_t i = 0; i < 10;i++ ) {
  2147  06C4  01A3               	clrf	send@i
  2148  06C5  300A               	movlw	10
  2149  06C6  0223               	subwf	send@i,w
  2150  06C7  1803               	btfsc	3,0
  2151  06C8  2EEE               	goto	l1872
  2152  06C9                     l1848:	
  2153                           
  2154                           ;main.c: 245:         for(uint8_t j = 0; j < 10;j++ ) {
  2155  06C9  01A4               	clrf	send@j
  2156  06CA  300A               	movlw	10
  2157  06CB  0224               	subwf	send@j,w
  2158  06CC  1803               	btfsc	3,0
  2159  06CD  2EE1               	goto	l1864
  2160  06CE                     l1854:	
  2161                           
  2162                           ;main.c: 246:             _delay((unsigned long)((10)*(8000000/4000000.0)));
  2163  06CE  3006               	movlw	6
  2164  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  2165  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  2166  06D1  00A1               	movwf	??_send
  2167  06D2                     u2727:	
  2168  06D2  0BA1               	decfsz	??_send,f
  2169  06D3  2ED2               	goto	u2727
  2170                           
  2171                           ;main.c: 247:             if ( ps2DataState == 0 ) break;
  2172  06D4  087D               	movf	_ps2DataState,w
  2173  06D5  1903               	btfsc	3,2
  2174  06D6  2EE1               	goto	l1864
  2175                           
  2176                           ;main.c: 248:         }
  2177  06D7  3001               	movlw	1
  2178  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  2179  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  2180  06DA  00A1               	movwf	??_send
  2181  06DB  0821               	movf	??_send,w
  2182  06DC  07A4               	addwf	send@j,f
  2183  06DD  300A               	movlw	10
  2184  06DE  0224               	subwf	send@j,w
  2185  06DF  1C03               	skipc
  2186  06E0  2ECE               	goto	l1854
  2187  06E1                     l1864:	
  2188                           
  2189                           ;main.c: 249:         if ( ps2DataState == 0 ) break;
  2190  06E1  087D               	movf	_ps2DataState,w
  2191  06E2  1903               	btfsc	3,2
  2192  06E3  2EEE               	goto	l1872
  2193                           
  2194                           ;main.c: 250:     }
  2195  06E4  3001               	movlw	1
  2196  06E5  1283               	bcf	3,5	;RP0=0, select bank0
  2197  06E6  1303               	bcf	3,6	;RP1=0, select bank0
  2198  06E7  00A1               	movwf	??_send
  2199  06E8  0821               	movf	??_send,w
  2200  06E9  07A3               	addwf	send@i,f
  2201  06EA  300A               	movlw	10
  2202  06EB  0223               	subwf	send@i,w
  2203  06EC  1C03               	skipc
  2204  06ED  2EC9               	goto	l1848
  2205  06EE                     l1872:	
  2206                           
  2207                           ;main.c: 252:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  2208  06EE  3006               	movlw	6
  2209  06EF  1283               	bcf	3,5	;RP0=0, select bank0
  2210  06F0  1303               	bcf	3,6	;RP1=0, select bank0
  2211  06F1  00A1               	movwf	??_send
  2212  06F2                     u2737:	
  2213  06F2  0BA1               	decfsz	??_send,f
  2214  06F3  2EF2               	goto	u2737
  2215  06F4  0008               	return
  2216  06F5                     __end_of_send:	
  2217                           
  2218                           	psect	text4
  2219  04C0                     __ptext4:	
  2220 ;; *************** function _deviceDataUpdateMouse *****************
  2221 ;; Defined at:
  2222 ;;		line 446 in file "main.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;  device          1    wreg     PTR struct PS2DeviceData
  2225 ;;		 -> devices(26), 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  device          1    4[BANK0 ] PTR struct PS2DeviceData
  2228 ;;		 -> devices(26), 
  2229 ;;  j               1    3[BANK0 ] unsigned char 
  2230 ;;  code            1    2[BANK0 ] unsigned char 
  2231 ;; Return value:  Size  Location     Type
  2232 ;;                  1    wreg      void 
  2233 ;; Registers used:
  2234 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2235 ;; Tracked objects:
  2236 ;;		On entry : 0/0
  2237 ;;		On exit  : 0/0
  2238 ;;		Unchanged: 0/0
  2239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2240 ;;      Params:         0       0       0       0
  2241 ;;      Locals:         0       3       0       0
  2242 ;;      Temps:          0       2       0       0
  2243 ;;      Totals:         0       5       0       0
  2244 ;;Total ram usage:        5 bytes
  2245 ;; Hardware stack levels used:    1
  2246 ;; Hardware stack levels required when called:    2
  2247 ;; This function calls:
  2248 ;;		Nothing
  2249 ;; This function is called by:
  2250 ;;		_main
  2251 ;; This function uses a non-reentrant model
  2252 ;;
  2253                           
  2254                           
  2255                           ;psect for function _deviceDataUpdateMouse
  2256  04C0                     _deviceDataUpdateMouse:	
  2257                           
  2258                           ;incstack = 0
  2259                           ; Regs used in _deviceDataUpdateMouse: [wreg-fsr0h+status,2+status,0]
  2260                           ;deviceDataUpdateMouse@device stored from wreg
  2261  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  2262  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  2263  04C2  00A4               	movwf	deviceDataUpdateMouse@device
  2264                           
  2265                           ;main.c: 446: void deviceDataUpdateMouse(struct PS2DeviceData* device);main.c: 447: {;ma
      +                          in.c: 448:     if ( device->inDataPos == kempstonMouseCounterB ) {
  2266  04C3  0824               	movf	deviceDataUpdateMouse@device,w
  2267  04C4  3E03               	addlw	3
  2268  04C5  0084               	movwf	4
  2269  04C6  1383               	bcf	3,7	;select IRP bank0
  2270  04C7  0800               	movf	0,w
  2271  04C8  0651               	xorwf	_kempstonMouseCounterB,w
  2272  04C9  1D03               	skipz
  2273  04CA  2CD2               	goto	l1970
  2274                           
  2275                           ;main.c: 449:         kempstonMouseCounterA++;
  2276  04CB  3001               	movlw	1
  2277  04CC  07C4               	addwf	_kempstonMouseCounterA,f
  2278  04CD  1803               	skipnc
  2279  04CE  0AC5               	incf	_kempstonMouseCounterA+1,f
  2280  04CF  3000               	movlw	0
  2281  04D0  07C5               	addwf	_kempstonMouseCounterA+1,f
  2282                           
  2283                           ;main.c: 450:         return;
  2284  04D1  0008               	return
  2285  04D2                     l1970:	
  2286                           ;main.c: 451:     }
  2287                           
  2288                           
  2289                           ;main.c: 452:     kempstonMouseCounterB = device->inDataPos;
  2290  04D2  0824               	movf	deviceDataUpdateMouse@device,w
  2291  04D3  3E03               	addlw	3
  2292  04D4  0084               	movwf	4
  2293  04D5  0800               	movf	0,w
  2294  04D6  00A0               	movwf	??_deviceDataUpdateMouse
  2295  04D7  0820               	movf	??_deviceDataUpdateMouse,w
  2296  04D8  00D1               	movwf	_kempstonMouseCounterB
  2297                           
  2298                           ;main.c: 454:     if ( kempstonMouseCounterA > 10 ) {
  2299  04D9  3000               	movlw	0
  2300  04DA  0245               	subwf	_kempstonMouseCounterA+1,w
  2301  04DB  300B               	movlw	11
  2302  04DC  1903               	skipnz
  2303  04DD  0244               	subwf	_kempstonMouseCounterA,w
  2304  04DE  1C03               	skipc
  2305  04DF  2CED               	goto	l1978
  2306                           
  2307                           ;main.c: 455:         device->readDataPos = ( device->inDataPos - 1 ) & 7;
  2308  04E0  0824               	movf	deviceDataUpdateMouse@device,w
  2309  04E1  3E03               	addlw	3
  2310  04E2  0084               	movwf	4
  2311  04E3  0800               	movf	0,w
  2312  04E4  3EFF               	addlw	255
  2313  04E5  3907               	andlw	7
  2314  04E6  00A0               	movwf	??_deviceDataUpdateMouse
  2315  04E7  0824               	movf	deviceDataUpdateMouse@device,w
  2316  04E8  3E04               	addlw	4
  2317  04E9  0084               	movwf	4
  2318  04EA  0820               	movf	??_deviceDataUpdateMouse,w
  2319  04EB  0080               	movwf	0
  2320                           
  2321                           ;main.c: 456:         kempstonMouseCounterC = 0;
  2322  04EC  01D0               	clrf	_kempstonMouseCounterC
  2323  04ED                     l1978:	
  2324                           ;main.c: 457:     }
  2325                           
  2326                           
  2327                           ;main.c: 458:     kempstonMouseCounterA = 0;
  2328  04ED  01C4               	clrf	_kempstonMouseCounterA
  2329  04EE  01C5               	clrf	_kempstonMouseCounterA+1
  2330                           
  2331                           ;main.c: 460:     kempstonMouseCounterC++;
  2332  04EF  3001               	movlw	1
  2333  04F0  00A0               	movwf	??_deviceDataUpdateMouse
  2334  04F1  0820               	movf	??_deviceDataUpdateMouse,w
  2335  04F2  07D0               	addwf	_kempstonMouseCounterC,f
  2336                           
  2337                           ;main.c: 461:     if ( kempstonMouseCounterC < 3 ) return;
  2338  04F3  3003               	movlw	3
  2339  04F4  0250               	subwf	_kempstonMouseCounterC,w
  2340  04F5  1C03               	btfss	3,0
  2341  04F6  0008               	return
  2342                           
  2343                           ;main.c: 463:     uint8_t code = device->inData[device->readDataPos];
  2344  04F7  0824               	movf	deviceDataUpdateMouse@device,w
  2345  04F8  3E04               	addlw	4
  2346  04F9  0084               	movwf	4
  2347  04FA  0800               	movf	0,w
  2348  04FB  3E05               	addlw	5
  2349  04FC  0724               	addwf	deviceDataUpdateMouse@device,w
  2350  04FD  00A0               	movwf	??_deviceDataUpdateMouse
  2351  04FE  0820               	movf	??_deviceDataUpdateMouse,w
  2352  04FF  0084               	movwf	4
  2353  0500  0800               	movf	0,w
  2354  0501  00A1               	movwf	??_deviceDataUpdateMouse+1
  2355  0502  0821               	movf	??_deviceDataUpdateMouse+1,w
  2356  0503  00A2               	movwf	deviceDataUpdateMouse@code
  2357                           
  2358                           ;main.c: 464:     device->readDataPos = (device->readDataPos + 1) & 7;
  2359  0504  0824               	movf	deviceDataUpdateMouse@device,w
  2360  0505  3E04               	addlw	4
  2361  0506  0084               	movwf	4
  2362  0507  0800               	movf	0,w
  2363  0508  3E01               	addlw	1
  2364  0509  3907               	andlw	7
  2365  050A  00A0               	movwf	??_deviceDataUpdateMouse
  2366  050B  0824               	movf	deviceDataUpdateMouse@device,w
  2367  050C  3E04               	addlw	4
  2368  050D  0084               	movwf	4
  2369  050E  0820               	movf	??_deviceDataUpdateMouse,w
  2370  050F  0080               	movwf	0
  2371                           
  2372                           ;main.c: 466:     if ( (code & 1) > 0 ) {
  2373  0510  1C22               	btfss	deviceDataUpdateMouse@code,0
  2374  0511  2D17               	goto	l294
  2375                           
  2376                           ;main.c: 467:         outPorts[8] &= 254;
  2377  0512  30FE               	movlw	254
  2378  0513  00A0               	movwf	??_deviceDataUpdateMouse
  2379  0514  0820               	movf	??_deviceDataUpdateMouse,w
  2380  0515  05E1               	andwf	_outPorts+8,f
  2381                           
  2382                           ;main.c: 468:     } else {
  2383  0516  2D18               	goto	l295
  2384  0517                     l294:	
  2385                           
  2386                           ;main.c: 469:         outPorts[8] |= 1;
  2387  0517  1461               	bsf	_outPorts+8,0
  2388  0518                     l295:	
  2389                           ;main.c: 470:     }
  2390                           
  2391                           
  2392                           ;main.c: 472:     if ( (code & 2) > 0 ) {
  2393  0518  1CA2               	btfss	deviceDataUpdateMouse@code,1
  2394  0519  2D1F               	goto	l296
  2395                           
  2396                           ;main.c: 473:         outPorts[8] &= 253;
  2397  051A  30FD               	movlw	253
  2398  051B  00A0               	movwf	??_deviceDataUpdateMouse
  2399  051C  0820               	movf	??_deviceDataUpdateMouse,w
  2400  051D  05E1               	andwf	_outPorts+8,f
  2401                           
  2402                           ;main.c: 474:     } else {
  2403  051E  2D20               	goto	l1994
  2404  051F                     l296:	
  2405                           
  2406                           ;main.c: 475:         outPorts[8] |= 2;
  2407  051F  14E1               	bsf	_outPorts+8,1
  2408  0520                     l1994:	
  2409                           ;main.c: 476:     }
  2410                           
  2411                           
  2412                           ;main.c: 478:     outPorts[9] += device->inData[device->readDataPos];
  2413  0520  0824               	movf	deviceDataUpdateMouse@device,w
  2414  0521  3E04               	addlw	4
  2415  0522  0084               	movwf	4
  2416  0523  0800               	movf	0,w
  2417  0524  3E05               	addlw	5
  2418  0525  0724               	addwf	deviceDataUpdateMouse@device,w
  2419  0526  00A0               	movwf	??_deviceDataUpdateMouse
  2420  0527  0820               	movf	??_deviceDataUpdateMouse,w
  2421  0528  0084               	movwf	4
  2422  0529  0800               	movf	0,w
  2423  052A  00A1               	movwf	??_deviceDataUpdateMouse+1
  2424  052B  0821               	movf	??_deviceDataUpdateMouse+1,w
  2425  052C  07E2               	addwf	_outPorts+9,f
  2426                           
  2427                           ;main.c: 479:     device->readDataPos = (device->readDataPos + 1) & 7;
  2428  052D  0824               	movf	deviceDataUpdateMouse@device,w
  2429  052E  3E04               	addlw	4
  2430  052F  0084               	movwf	4
  2431  0530  0800               	movf	0,w
  2432  0531  3E01               	addlw	1
  2433  0532  3907               	andlw	7
  2434  0533  00A0               	movwf	??_deviceDataUpdateMouse
  2435  0534  0824               	movf	deviceDataUpdateMouse@device,w
  2436  0535  3E04               	addlw	4
  2437  0536  0084               	movwf	4
  2438  0537  0820               	movf	??_deviceDataUpdateMouse,w
  2439  0538  0080               	movwf	0
  2440                           
  2441                           ;main.c: 481:     outPorts[10] += device->inData[device->readDataPos];
  2442  0539  0824               	movf	deviceDataUpdateMouse@device,w
  2443  053A  3E04               	addlw	4
  2444  053B  0084               	movwf	4
  2445  053C  0800               	movf	0,w
  2446  053D  3E05               	addlw	5
  2447  053E  0724               	addwf	deviceDataUpdateMouse@device,w
  2448  053F  00A0               	movwf	??_deviceDataUpdateMouse
  2449  0540  0820               	movf	??_deviceDataUpdateMouse,w
  2450  0541  0084               	movwf	4
  2451  0542  0800               	movf	0,w
  2452  0543  00A1               	movwf	??_deviceDataUpdateMouse+1
  2453  0544  0821               	movf	??_deviceDataUpdateMouse+1,w
  2454  0545  07E3               	addwf	_outPorts+10,f
  2455                           
  2456                           ;main.c: 482:     device->readDataPos = (device->readDataPos + 1) & 7;
  2457  0546  0824               	movf	deviceDataUpdateMouse@device,w
  2458  0547  3E04               	addlw	4
  2459  0548  0084               	movwf	4
  2460  0549  0800               	movf	0,w
  2461  054A  3E01               	addlw	1
  2462  054B  3907               	andlw	7
  2463  054C  00A0               	movwf	??_deviceDataUpdateMouse
  2464  054D  0824               	movf	deviceDataUpdateMouse@device,w
  2465  054E  3E04               	addlw	4
  2466  054F  0084               	movwf	4
  2467  0550  0820               	movf	??_deviceDataUpdateMouse,w
  2468  0551  0080               	movwf	0
  2469                           
  2470                           ;main.c: 484:     kempstonMouseCounterC -= 3;
  2471  0552  3003               	movlw	3
  2472  0553  02D0               	subwf	_kempstonMouseCounterC,f
  2473                           
  2474                           ;main.c: 485:     for(uint8_t j = 0; j < 8; j++) outPorts[j] = 0;
  2475  0554  01A3               	clrf	deviceDataUpdateMouse@j
  2476  0555  3008               	movlw	8
  2477  0556  0223               	subwf	deviceDataUpdateMouse@j,w
  2478  0557  1803               	btfsc	3,0
  2479  0558  2D65               	goto	l299
  2480  0559                     l2004:	
  2481  0559  0823               	movf	deviceDataUpdateMouse@j,w
  2482  055A  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  2483  055B  0084               	movwf	4
  2484  055C  0180               	clrf	0
  2485  055D  3001               	movlw	1
  2486  055E  00A0               	movwf	??_deviceDataUpdateMouse
  2487  055F  0820               	movf	??_deviceDataUpdateMouse,w
  2488  0560  07A3               	addwf	deviceDataUpdateMouse@j,f
  2489  0561  3008               	movlw	8
  2490  0562  0223               	subwf	deviceDataUpdateMouse@j,w
  2491  0563  1C03               	skipc
  2492  0564  2D59               	goto	l2004
  2493  0565                     l299:	
  2494                           
  2495                           ;main.c: 486:     needSave = 1;
  2496  0565  01CF               	clrf	_needSave
  2497  0566  0ACF               	incf	_needSave,f
  2498  0567  0008               	return
  2499  0568                     __end_of_deviceDataUpdateMouse:	
  2500                           
  2501                           	psect	text5
  2502  060B                     __ptext5:	
  2503 ;; *************** function _deviceDataUpdateKeyboard *****************
  2504 ;; Defined at:
  2505 ;;		line 417 in file "main.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  device          1    wreg     PTR struct PS2DeviceData
  2508 ;;		 -> devices(26), 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  device          1   28[BANK0 ] PTR struct PS2DeviceData
  2511 ;;		 -> devices(26), 
  2512 ;;  i               1   26[BANK0 ] char 
  2513 ;;  code            1   27[BANK0 ] unsigned char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2523 ;;      Params:         0       0       0       0
  2524 ;;      Locals:         0       5       0       0
  2525 ;;      Temps:          0       2       0       0
  2526 ;;      Totals:         0       7       0       0
  2527 ;;Total ram usage:        7 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    5
  2530 ;; This function calls:
  2531 ;;		_processKeyCode
  2532 ;; This function is called by:
  2533 ;;		_main
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           
  2538                           ;psect for function _deviceDataUpdateKeyboard
  2539  060B                     _deviceDataUpdateKeyboard:	
  2540                           
  2541                           ;incstack = 0
  2542                           ; Regs used in _deviceDataUpdateKeyboard: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2543                           ;deviceDataUpdateKeyboard@device stored from wreg
  2544  060B  1283               	bcf	3,5	;RP0=0, select bank0
  2545  060C  1303               	bcf	3,6	;RP1=0, select bank0
  2546  060D  00BC               	movwf	deviceDataUpdateKeyboard@device
  2547                           
  2548                           ;main.c: 417: void deviceDataUpdateKeyboard(struct PS2DeviceData* device);main.c: 418: {
      +                          ;main.c: 419:     if ( device->readDataPos == device->inDataPos ) return;
  2549  060E  083C               	movf	deviceDataUpdateKeyboard@device,w
  2550  060F  3E03               	addlw	3
  2551  0610  0084               	movwf	4
  2552  0611  1383               	bcf	3,7	;select IRP bank0
  2553  0612  0800               	movf	0,w
  2554  0613  00B6               	movwf	??_deviceDataUpdateKeyboard
  2555  0614  083C               	movf	deviceDataUpdateKeyboard@device,w
  2556  0615  3E04               	addlw	4
  2557  0616  0084               	movwf	4
  2558  0617  0800               	movf	0,w
  2559  0618  0636               	xorwf	??_deviceDataUpdateKeyboard,w
  2560  0619  1903               	btfsc	3,2
  2561  061A  0008               	return
  2562                           
  2563                           ;main.c: 420:     uint8_t code = device->inData[device->readDataPos];
  2564  061B  083C               	movf	deviceDataUpdateKeyboard@device,w
  2565  061C  3E04               	addlw	4
  2566  061D  0084               	movwf	4
  2567  061E  0800               	movf	0,w
  2568  061F  3E05               	addlw	5
  2569  0620  073C               	addwf	deviceDataUpdateKeyboard@device,w
  2570  0621  00B6               	movwf	??_deviceDataUpdateKeyboard
  2571  0622  0836               	movf	??_deviceDataUpdateKeyboard,w
  2572  0623  0084               	movwf	4
  2573  0624  0800               	movf	0,w
  2574  0625  00B7               	movwf	??_deviceDataUpdateKeyboard+1
  2575  0626  0837               	movf	??_deviceDataUpdateKeyboard+1,w
  2576  0627  00BB               	movwf	deviceDataUpdateKeyboard@code
  2577                           
  2578                           ;main.c: 421:     device->readDataPos = (device->readDataPos + 1) & 7;
  2579  0628  083C               	movf	deviceDataUpdateKeyboard@device,w
  2580  0629  3E04               	addlw	4
  2581  062A  0084               	movwf	4
  2582  062B  0800               	movf	0,w
  2583  062C  3E01               	addlw	1
  2584  062D  3907               	andlw	7
  2585  062E  00B6               	movwf	??_deviceDataUpdateKeyboard
  2586  062F  083C               	movf	deviceDataUpdateKeyboard@device,w
  2587  0630  3E04               	addlw	4
  2588  0631  0084               	movwf	4
  2589  0632  0836               	movf	??_deviceDataUpdateKeyboard,w
  2590  0633  0080               	movwf	0
  2591                           
  2592                           ;main.c: 423:     if ( device->ps2NeedEncode ) {
  2593  0634  083C               	movf	deviceDataUpdateKeyboard@device,w
  2594  0635  3E02               	addlw	2
  2595  0636  0084               	movwf	4
  2596  0637  0800               	movf	0,w
  2597  0638  1903               	btfsc	3,2
  2598  0639  2E52               	goto	l1942
  2599                           
  2600                           ;main.c: 424:         for (int8_t i=0; i < 27; i+=2) {
  2601  063A  01BA               	clrf	deviceDataUpdateKeyboard@i
  2602  063B                     L5:	
  2603  063B  083A               	movf	deviceDataUpdateKeyboard@i,w
  2604  063C  3A80               	xorlw	128
  2605  063D  3E65               	addlw	-155
  2606  063E  1803               	btfsc	3,0
  2607  063F  2E65               	goto	l1948
  2608                           
  2609                           ;main.c: 425:             if ( code == replaceTwoBytesCodes[i] ) {
  2610  0640  083A               	movf	deviceDataUpdateKeyboard@i,w
  2611  0641  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2612  0642  0084               	movwf	4
  2613  0643  2300               	fcall	stringdir
  2614  0644  063B               	xorwf	deviceDataUpdateKeyboard@code,w
  2615  0645  1D03               	skipz
  2616  0646  2E4D               	goto	l1938
  2617                           
  2618                           ;main.c: 426:                 code = replaceTwoBytesCodes[i+1];
  2619  0647  083A               	movf	deviceDataUpdateKeyboard@i,w
  2620  0648  3E01               	addlw	1
  2621  0649  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2622  064A  0084               	movwf	4
  2623  064B  2300               	fcall	stringdir
  2624  064C  2E62               	goto	L3
  2625  064D                     l1938:	
  2626                           ;main.c: 428:             }
  2627                           
  2628                           ;main.c: 427:                 break;
  2629                           
  2630                           
  2631                           ;main.c: 429:         }
  2632  064D  3002               	movlw	2
  2633  064E  00B6               	movwf	??_deviceDataUpdateKeyboard
  2634  064F  0836               	movf	??_deviceDataUpdateKeyboard,w
  2635  0650  07BA               	addwf	deviceDataUpdateKeyboard@i,f
  2636  0651  2E3B               	goto	L5
  2637  0652                     l1942:	
  2638                           ;main.c: 430:     } else {
  2639                           
  2640                           
  2641                           ;main.c: 431:         code = ( code == 131 ) ? 63 : code;
  2642  0652  3083               	movlw	131
  2643  0653  063B               	xorwf	deviceDataUpdateKeyboard@code,w
  2644  0654  1903               	btfsc	3,2
  2645  0655  2E5D               	goto	l1946
  2646  0656  083B               	movf	deviceDataUpdateKeyboard@code,w
  2647  0657  00B6               	movwf	??_deviceDataUpdateKeyboard
  2648  0658  01B7               	clrf	??_deviceDataUpdateKeyboard+1
  2649  0659  0836               	movf	??_deviceDataUpdateKeyboard,w
  2650  065A  00B8               	movwf	_deviceDataUpdateKeyboard$187
  2651  065B  0837               	movf	??_deviceDataUpdateKeyboard+1,w
  2652  065C  2E60               	goto	L4
  2653  065D                     l1946:	
  2654  065D  303F               	movlw	63
  2655  065E  00B8               	movwf	_deviceDataUpdateKeyboard$187
  2656  065F  3000               	movlw	0
  2657  0660                     L4:	
  2658  0660  00B9               	movwf	_deviceDataUpdateKeyboard$187+1
  2659  0661  0838               	movf	_deviceDataUpdateKeyboard$187,w
  2660  0662                     L3:	
  2661  0662  00B6               	movwf	??_deviceDataUpdateKeyboard
  2662  0663  0836               	movf	??_deviceDataUpdateKeyboard,w
  2663  0664  00BB               	movwf	deviceDataUpdateKeyboard@code
  2664  0665                     l1948:	
  2665                           ;main.c: 432:     }
  2666                           
  2667                           
  2668                           ;main.c: 433:     if ( code == 0xF0 ) {
  2669  0665  30F0               	movlw	240
  2670  0666  063B               	xorwf	deviceDataUpdateKeyboard@code,w
  2671  0667  1D03               	btfss	3,2
  2672  0668  2E6E               	goto	l1952
  2673                           
  2674                           ;main.c: 434:         device->ps2Down = 0;
  2675  0669  0A3C               	incf	deviceDataUpdateKeyboard@device,w
  2676  066A  0084               	movwf	4
  2677  066B  1383               	bcf	3,7	;select IRP bank0
  2678  066C  0180               	clrf	0
  2679                           
  2680                           ;main.c: 435:     } else if ( code == 0xE0 ) {
  2681  066D  0008               	return
  2682  066E                     l1952:	
  2683  066E  30E0               	movlw	224
  2684  066F  063B               	xorwf	deviceDataUpdateKeyboard@code,w
  2685  0670  1D03               	btfss	3,2
  2686  0671  2E79               	goto	l1956
  2687                           
  2688                           ;main.c: 436:         device->ps2NeedEncode = 1;
  2689  0672  083C               	movf	deviceDataUpdateKeyboard@device,w
  2690  0673  3E02               	addlw	2
  2691  0674  0084               	movwf	4
  2692  0675  1383               	bcf	3,7	;select IRP bank0
  2693  0676  0180               	clrf	0
  2694  0677  0A80               	incf	0,f
  2695                           
  2696                           ;main.c: 437:     } else {
  2697  0678  0008               	return
  2698  0679                     l1956:	
  2699                           
  2700                           ;main.c: 438:         processKeyCode(code, device->ps2Down);
  2701  0679  0A3C               	incf	deviceDataUpdateKeyboard@device,w
  2702  067A  0084               	movwf	4
  2703  067B  1383               	bcf	3,7	;select IRP bank0
  2704  067C  0800               	movf	0,w
  2705  067D  00B6               	movwf	??_deviceDataUpdateKeyboard
  2706  067E  0836               	movf	??_deviceDataUpdateKeyboard,w
  2707  067F  00AD               	movwf	processKeyCode@keyDown
  2708  0680  083B               	movf	deviceDataUpdateKeyboard@code,w
  2709  0681  23EB               	fcall	_processKeyCode
  2710                           
  2711                           ;main.c: 439:         needSave = 1;
  2712  0682  1283               	bcf	3,5	;RP0=0, select bank0
  2713  0683  1303               	bcf	3,6	;RP1=0, select bank0
  2714  0684  01CF               	clrf	_needSave
  2715  0685  0ACF               	incf	_needSave,f
  2716                           
  2717                           ;main.c: 440:         device->ps2Down = 1;
  2718  0686  0A3C               	incf	deviceDataUpdateKeyboard@device,w
  2719  0687  0084               	movwf	4
  2720  0688  1383               	bcf	3,7	;select IRP bank0
  2721  0689  0180               	clrf	0
  2722  068A  0A80               	incf	0,f
  2723                           
  2724                           ;main.c: 441:         device->ps2NeedEncode = 0;
  2725  068B  083C               	movf	deviceDataUpdateKeyboard@device,w
  2726  068C  3E02               	addlw	2
  2727  068D  0084               	movwf	4
  2728  068E  0180               	clrf	0
  2729                           
  2730                           ;main.c: 442:     }
  2731  068F  0008               	return
  2732  0690                     __end_of_deviceDataUpdateKeyboard:	
  2733                           
  2734                           	psect	text6
  2735  03EB                     __ptext6:	
  2736 ;; *************** function _processKeyCode *****************
  2737 ;; Defined at:
  2738 ;;		line 330 in file "main.c"
  2739 ;; Parameters:    Size  Location     Type
  2740 ;;  keyCode         1    wreg     unsigned char 
  2741 ;;  keyDown         1   13[BANK0 ] unsigned char 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;  keyCode         1   21[BANK0 ] unsigned char 
  2744 ;;  i               1   19[BANK0 ] char 
  2745 ;;  i               1   20[BANK0 ] char 
  2746 ;; Return value:  Size  Location     Type
  2747 ;;                  1    wreg      void 
  2748 ;; Registers used:
  2749 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2750 ;; Tracked objects:
  2751 ;;		On entry : 0/0
  2752 ;;		On exit  : 0/0
  2753 ;;		Unchanged: 0/0
  2754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2755 ;;      Params:         0       1       0       0
  2756 ;;      Locals:         0       3       0       0
  2757 ;;      Temps:          0       5       0       0
  2758 ;;      Totals:         0       9       0       0
  2759 ;;Total ram usage:        9 bytes
  2760 ;; Hardware stack levels used:    1
  2761 ;; Hardware stack levels required when called:    4
  2762 ;; This function calls:
  2763 ;;		_calculateBitsFromTable
  2764 ;;		_updateKey
  2765 ;; This function is called by:
  2766 ;;		_deviceDataUpdateKeyboard
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           
  2771                           ;psect for function _processKeyCode
  2772  03EB                     _processKeyCode:	
  2773                           
  2774                           ;incstack = 0
  2775                           ; Regs used in _processKeyCode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2776                           ;processKeyCode@keyCode stored from wreg
  2777  03EB  1283               	bcf	3,5	;RP0=0, select bank0
  2778  03EC  1303               	bcf	3,6	;RP1=0, select bank0
  2779  03ED  00B5               	movwf	processKeyCode@keyCode
  2780                           
  2781                           ;main.c: 330: void processKeyCode(uint8_t keyCode, uint8_t keyDown);main.c: 331: {;main.
      +                          c: 332:     if ( keyCode > 127 ) return;
  2782  03EE  3080               	movlw	128
  2783  03EF  0235               	subwf	processKeyCode@keyCode,w
  2784  03F0  1803               	btfsc	3,0
  2785  03F1  0008               	return
  2786                           
  2787                           ;main.c: 336:     calculateBitsFromTable(&keyCode, &keyDown, &shift_ctrl_alt, importantK
      +                          eys, 6, 0);
  2788  03F2  302D               	movlw	(low (processKeyCode@keyDown| 0))& (0+255)
  2789  03F3  00AE               	movwf	??_processKeyCode
  2790  03F4  082E               	movf	??_processKeyCode,w
  2791  03F5  00A0               	movwf	calculateBitsFromTable@keyDown
  2792  03F6  3057               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
  2793  03F7  00AF               	movwf	??_processKeyCode+1
  2794  03F8  082F               	movf	??_processKeyCode+1,w
  2795  03F9  00A1               	movwf	calculateBitsFromTable@bits
  2796  03FA  30DA               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
  2797  03FB  00B0               	movwf	??_processKeyCode+2
  2798  03FC  0830               	movf	??_processKeyCode+2,w
  2799  03FD  00A2               	movwf	calculateBitsFromTable@table
  2800  03FE  3006               	movlw	6
  2801  03FF  00B1               	movwf	??_processKeyCode+3
  2802  0400  0831               	movf	??_processKeyCode+3,w
  2803  0401  00A3               	movwf	calculateBitsFromTable@count
  2804  0402  01A4               	clrf	calculateBitsFromTable@clearIfFound
  2805  0403  3035               	movlw	(low (processKeyCode@keyCode| 0))& (0+255)
  2806  0404  2796               	fcall	_calculateBitsFromTable
  2807                           
  2808                           ;main.c: 338:     calculateBitsFromTable(&keyCode, &keyDown, &kempstonMouseEmulatorKeys,
      +                           kempstonMouseKeys, 6, numLock);
  2809  0405  302D               	movlw	(low (processKeyCode@keyDown| 0))& (0+255)
  2810  0406  1283               	bcf	3,5	;RP0=0, select bank0
  2811  0407  1303               	bcf	3,6	;RP1=0, select bank0
  2812  0408  00AE               	movwf	??_processKeyCode
  2813  0409  082E               	movf	??_processKeyCode,w
  2814  040A  00A0               	movwf	calculateBitsFromTable@keyDown
  2815  040B  3058               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
  2816  040C  00AF               	movwf	??_processKeyCode+1
  2817  040D  082F               	movf	??_processKeyCode+1,w
  2818  040E  00A1               	movwf	calculateBitsFromTable@bits
  2819  040F  30E0               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
  2820  0410  00B0               	movwf	??_processKeyCode+2
  2821  0411  0830               	movf	??_processKeyCode+2,w
  2822  0412  00A2               	movwf	calculateBitsFromTable@table
  2823  0413  3006               	movlw	6
  2824  0414  00B1               	movwf	??_processKeyCode+3
  2825  0415  0831               	movf	??_processKeyCode+3,w
  2826  0416  00A3               	movwf	calculateBitsFromTable@count
  2827  0417  084E               	movf	_numLock,w
  2828  0418  00B2               	movwf	??_processKeyCode+4
  2829  0419  0832               	movf	??_processKeyCode+4,w
  2830  041A  00A4               	movwf	calculateBitsFromTable@clearIfFound
  2831  041B  3035               	movlw	(low (processKeyCode@keyCode| 0))& (0+255)
  2832  041C  2796               	fcall	_calculateBitsFromTable
  2833                           
  2834                           ;main.c: 344:     if ( keyCode == 119 && keyDown ) {
  2835  041D  3077               	movlw	119
  2836  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2837  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2838  0420  0635               	xorwf	processKeyCode@keyCode,w
  2839  0421  1D03               	btfss	3,2
  2840  0422  2C2F               	goto	l1740
  2841  0423  082D               	movf	processKeyCode@keyDown,w
  2842  0424  1903               	btfsc	3,2
  2843  0425  2C2F               	goto	l1740
  2844                           
  2845                           ;main.c: 345:         numLock = !numLock;
  2846  0426  084E               	movf	_numLock,w
  2847  0427  1D03               	btfss	3,2
  2848  0428  2C2B               	goto	u1590
  2849  0429  3001               	movlw	1
  2850  042A  2C2C               	goto	u1600
  2851  042B                     u1590:	
  2852  042B  3000               	movlw	0
  2853  042C                     u1600:	
  2854  042C  00AE               	movwf	??_processKeyCode
  2855  042D  082E               	movf	??_processKeyCode,w
  2856  042E  00CE               	movwf	_numLock
  2857  042F                     l1740:	
  2858                           ;main.c: 346:     }
  2859                           
  2860                           
  2861                           ;main.c: 349:     if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 0 && keyCode
      +                           == 31 && keyDown ) {
  2862  042F  0857               	movf	_shift_ctrl_alt,w
  2863  0430  390C               	andlw	12
  2864  0431  1903               	btfsc	3,2
  2865  0432  2C43               	goto	l245
  2866  0433  0857               	movf	_shift_ctrl_alt,w
  2867  0434  3930               	andlw	48
  2868  0435  1903               	btfsc	3,2
  2869  0436  2C43               	goto	l245
  2870  0437  301F               	movlw	31
  2871  0438  0635               	xorwf	processKeyCode@keyCode,w
  2872  0439  1D03               	btfss	3,2
  2873  043A  2C43               	goto	l245
  2874  043B  082D               	movf	processKeyCode@keyDown,w
  2875  043C  1903               	btfsc	3,2
  2876  043D  2C43               	goto	l245
  2877                           
  2878                           ;main.c: 350:         outPorts[8] &= 251;
  2879  043E  30FB               	movlw	251
  2880  043F  00AE               	movwf	??_processKeyCode
  2881  0440  082E               	movf	??_processKeyCode,w
  2882  0441  05E1               	andwf	_outPorts+8,f
  2883                           
  2884                           ;main.c: 351:     } else {
  2885  0442  2C44               	goto	l1750
  2886  0443                     l245:	
  2887                           
  2888                           ;main.c: 352:         outPorts[8] |= 4;
  2889  0443  1561               	bsf	_outPorts+8,2
  2890  0444                     l1750:	
  2891                           ;main.c: 353:     }
  2892                           
  2893                           
  2894                           ;main.c: 356:     if ( (shift_ctrl_alt & 12) > 0 && keyCode == 126 && keyDown ) {
  2895  0444  0857               	movf	_shift_ctrl_alt,w
  2896  0445  390C               	andlw	12
  2897  0446  1903               	btfsc	3,2
  2898  0447  2C54               	goto	l247
  2899  0448  307E               	movlw	126
  2900  0449  0635               	xorwf	processKeyCode@keyCode,w
  2901  044A  1D03               	btfss	3,2
  2902  044B  2C54               	goto	l247
  2903  044C  082D               	movf	processKeyCode@keyDown,w
  2904  044D  1903               	btfsc	3,2
  2905  044E  2C54               	goto	l247
  2906                           
  2907                           ;main.c: 357:         outPorts[8] &= 247;
  2908  044F  30F7               	movlw	247
  2909  0450  00AE               	movwf	??_processKeyCode
  2910  0451  082E               	movf	??_processKeyCode,w
  2911  0452  05E1               	andwf	_outPorts+8,f
  2912                           
  2913                           ;main.c: 358:     } else {
  2914  0453  2C55               	goto	l1758
  2915  0454                     l247:	
  2916                           
  2917                           ;main.c: 359:         outPorts[8] |= 8;
  2918  0454  15E1               	bsf	_outPorts+8,3
  2919  0455                     l1758:	
  2920                           ;main.c: 360:     }
  2921                           
  2922                           
  2923                           ;main.c: 366:     for(int8_t i = 0; i < 41 ;i+=2) {
  2924  0455  01B4               	clrf	processKeyCode@i
  2925  0456  0834               	movf	processKeyCode@i,w
  2926  0457  3A80               	xorlw	128
  2927  0458  3E57               	addlw	-169
  2928  0459  1803               	btfsc	3,0
  2929  045A  2C8D               	goto	l1788
  2930  045B                     l1764:	
  2931                           
  2932                           ;main.c: 367:         if ( keyCode == replaceOnShiftKeyDown[i] ) {
  2933  045B  0834               	movf	processKeyCode@i,w
  2934  045C  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  2935  045D  0084               	movwf	4
  2936  045E  2300               	fcall	stringdir
  2937  045F  0635               	xorwf	processKeyCode@keyCode,w
  2938  0460  1D03               	skipz
  2939  0461  2C84               	goto	l1784
  2940                           
  2941                           ;main.c: 368:             if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0) || replaced
      +                           == keyCode) {
  2942  0462  0857               	movf	_shift_ctrl_alt,w
  2943  0463  3903               	andlw	3
  2944  0464  1903               	btfsc	3,2
  2945  0465  2C69               	goto	l1770
  2946  0466  084D               	movf	_replaced,w
  2947  0467  1903               	btfsc	3,2
  2948  0468  2C6D               	goto	l1772
  2949  0469                     l1770:	
  2950  0469  084D               	movf	_replaced,w
  2951  046A  0635               	xorwf	processKeyCode@keyCode,w
  2952  046B  1D03               	skipz
  2953  046C  2C7F               	goto	l1780
  2954  046D                     l1772:	
  2955                           
  2956                           ;main.c: 369:                 if ( keyDown ) replaced = keyCode;
  2957  046D  082D               	movf	processKeyCode@keyDown,w
  2958  046E  1903               	btfsc	3,2
  2959  046F  2C75               	goto	l1776
  2960  0470  0835               	movf	processKeyCode@keyCode,w
  2961  0471  00AE               	movwf	??_processKeyCode
  2962  0472  082E               	movf	??_processKeyCode,w
  2963  0473  00CD               	movwf	_replaced
  2964  0474  2C76               	goto	l1778
  2965  0475                     l1776:	
  2966                           ;main.c: 370:                 else replaced = 0;
  2967                           
  2968  0475  01CD               	clrf	_replaced
  2969  0476                     l1778:	
  2970                           
  2971                           ;main.c: 371:                 keyCode = replaceOnShiftKeyDown[i+1];
  2972  0476  0834               	movf	processKeyCode@i,w
  2973  0477  3E01               	addlw	1
  2974  0478  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  2975  0479  0084               	movwf	4
  2976  047A  2300               	fcall	stringdir
  2977  047B  00AE               	movwf	??_processKeyCode
  2978  047C  082E               	movf	??_processKeyCode,w
  2979  047D  00B5               	movwf	processKeyCode@keyCode
  2980                           
  2981                           ;main.c: 372:             } else {
  2982  047E  2C8D               	goto	l1788
  2983  047F                     l1780:	
  2984                           
  2985                           ;main.c: 373:                 if ( replaced != 0 ) keyCode = 0;
  2986  047F  084D               	movf	_replaced,w
  2987  0480  1903               	btfsc	3,2
  2988  0481  2C8D               	goto	l1788
  2989  0482  01B5               	clrf	processKeyCode@keyCode
  2990                           
  2991                           ;main.c: 375:             break;
  2992                           
  2993                           ;main.c: 374:             }
  2994  0483  2C8D               	goto	l1788
  2995  0484                     l1784:	
  2996                           ;main.c: 376:         }
  2997                           
  2998                           
  2999                           ;main.c: 377:     }
  3000  0484  3002               	movlw	2
  3001  0485  00AE               	movwf	??_processKeyCode
  3002  0486  082E               	movf	??_processKeyCode,w
  3003  0487  07B4               	addwf	processKeyCode@i,f
  3004  0488  0834               	movf	processKeyCode@i,w
  3005  0489  3A80               	xorlw	128
  3006  048A  3E57               	addlw	-169
  3007  048B  1C03               	skipc
  3008  048C  2C5B               	goto	l1764
  3009  048D                     l1788:	
  3010                           
  3011                           ;main.c: 381:     for(int8_t i = 0; i < 8; i++) {
  3012  048D  01B3               	clrf	processKeyCode@i_167
  3013  048E  0833               	movf	processKeyCode@i_167,w
  3014  048F  3A80               	xorlw	128
  3015  0490  3E78               	addlw	-136
  3016  0491  1803               	btfsc	3,0
  3017  0492  2CB9               	goto	l1810
  3018  0493                     l1794:	
  3019                           
  3020                           ;main.c: 382:         if ( keyCode == replaceOnDelayKeyDown[i] ) {
  3021  0493  0833               	movf	processKeyCode@i_167,w
  3022  0494  3ED0               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
  3023  0495  0084               	movwf	4
  3024  0496  2300               	fcall	stringdir
  3025  0497  0635               	xorwf	processKeyCode@keyCode,w
  3026  0498  1D03               	skipz
  3027  0499  2CB0               	goto	l1806
  3028                           
  3029                           ;main.c: 383:             if ( keyDown ) {
  3030  049A  082D               	movf	processKeyCode@keyDown,w
  3031  049B  1903               	btfsc	3,2
  3032  049C  2CB0               	goto	l1806
  3033                           
  3034                           ;main.c: 384:                 if ( delay == 0 ) {
  3035  049D  0848               	movf	_delay,w
  3036  049E  0449               	iorwf	_delay+1,w
  3037  049F  1D03               	btfss	3,2
  3038  04A0  2CAE               	goto	l1802
  3039                           
  3040                           ;main.c: 385:                     delayedKey = keyCode;
  3041  04A1  0835               	movf	processKeyCode@keyCode,w
  3042  04A2  00AE               	movwf	??_processKeyCode
  3043  04A3  082E               	movf	??_processKeyCode,w
  3044  04A4  00CC               	movwf	_delayedKey
  3045                           
  3046                           ;main.c: 386:                     delay = 400;
  3047  04A5  3090               	movlw	144
  3048  04A6  00C8               	movwf	_delay
  3049  04A7  3001               	movlw	1
  3050  04A8  00C9               	movwf	_delay+1
  3051                           
  3052                           ;main.c: 387:                     keyCode = 111;
  3053  04A9  306F               	movlw	111
  3054  04AA  00AE               	movwf	??_processKeyCode
  3055  04AB  082E               	movf	??_processKeyCode,w
  3056  04AC  00B5               	movwf	processKeyCode@keyCode
  3057                           
  3058                           ;main.c: 388:                 } else {
  3059  04AD  2CB9               	goto	l1810
  3060  04AE                     l1802:	
  3061                           
  3062                           ;main.c: 389:                     keyCode = 0;
  3063  04AE  01B5               	clrf	processKeyCode@keyCode
  3064                           
  3065                           ;main.c: 391:                 break;
  3066                           
  3067                           ;main.c: 390:                 }
  3068  04AF  2CB9               	goto	l1810
  3069  04B0                     l1806:	
  3070                           ;main.c: 395:         }
  3071                           
  3072                           ;main.c: 394:             }
  3073                           
  3074                           ;main.c: 392:             } else {
  3075                           
  3076                           
  3077                           ;main.c: 396:     }
  3078  04B0  3001               	movlw	1
  3079  04B1  00AE               	movwf	??_processKeyCode
  3080  04B2  082E               	movf	??_processKeyCode,w
  3081  04B3  07B3               	addwf	processKeyCode@i_167,f
  3082  04B4  0833               	movf	processKeyCode@i_167,w
  3083  04B5  3A80               	xorlw	128
  3084  04B6  3E78               	addlw	-136
  3085  04B7  1C03               	skipc
  3086  04B8  2C93               	goto	l1794
  3087  04B9                     l1810:	
  3088                           
  3089                           ;main.c: 400:     updateKey(keyCode, keyDown );
  3090  04B9  082D               	movf	processKeyCode@keyDown,w
  3091  04BA  00AE               	movwf	??_processKeyCode
  3092  04BB  082E               	movf	??_processKeyCode,w
  3093  04BC  00A6               	movwf	updateKey@down
  3094  04BD  0835               	movf	processKeyCode@keyCode,w
  3095  04BE  26F5               	fcall	_updateKey
  3096  04BF  0008               	return
  3097  04C0                     __end_of_processKeyCode:	
  3098                           
  3099                           	psect	text7
  3100  06F5                     __ptext7:	
  3101 ;; *************** function _updateKey *****************
  3102 ;; Defined at:
  3103 ;;		line 286 in file "main.c"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;  key             1    wreg     unsigned char 
  3106 ;;  down            1    6[BANK0 ] unsigned char 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  key             1   11[BANK0 ] unsigned char 
  3109 ;;  code            1   12[BANK0 ] unsigned char 
  3110 ;;  localCtrl       1   10[BANK0 ] unsigned char 
  3111 ;;  localShift      1    8[BANK0 ] unsigned char 
  3112 ;; Return value:  Size  Location     Type
  3113 ;;                  1    wreg      void 
  3114 ;; Registers used:
  3115 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3116 ;; Tracked objects:
  3117 ;;		On entry : 0/0
  3118 ;;		On exit  : 0/0
  3119 ;;		Unchanged: 0/0
  3120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3121 ;;      Params:         0       1       0       0
  3122 ;;      Locals:         0       5       0       0
  3123 ;;      Temps:          0       1       0       0
  3124 ;;      Totals:         0       7       0       0
  3125 ;;Total ram usage:        7 bytes
  3126 ;; Hardware stack levels used:    1
  3127 ;; Hardware stack levels required when called:    3
  3128 ;; This function calls:
  3129 ;;		_updatePort
  3130 ;; This function is called by:
  3131 ;;		_processKeyCode
  3132 ;;		_main
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           
  3137                           ;psect for function _updateKey
  3138  06F5                     _updateKey:	
  3139                           
  3140                           ;incstack = 0
  3141                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3142                           ;updateKey@key stored from wreg
  3143  06F5  1283               	bcf	3,5	;RP0=0, select bank0
  3144  06F6  1303               	bcf	3,6	;RP1=0, select bank0
  3145  06F7  00AB               	movwf	updateKey@key
  3146                           
  3147                           ;main.c: 286: void updateKey(uint8_t key, uint8_t down);main.c: 287: {;main.c: 288:     
      +                          uint8_t code = 0xFF;
  3148  06F8  30FF               	movlw	255
  3149  06F9  00A7               	movwf	??_updateKey
  3150  06FA  0827               	movf	??_updateKey,w
  3151  06FB  00AC               	movwf	updateKey@code
  3152                           
  3153                           ;main.c: 289:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  3154  06FC  01A9               	clrf	_updateKey$154
  3155  06FD  0857               	movf	_shift_ctrl_alt,w
  3156  06FE  3903               	andlw	3
  3157  06FF  1903               	btfsc	3,2
  3158  0700  2F06               	goto	l1708
  3159  0701  084D               	movf	_replaced,w
  3160  0702  1D03               	btfss	3,2
  3161  0703  2F06               	goto	l1708
  3162  0704  01A9               	clrf	_updateKey$154
  3163  0705  0AA9               	incf	_updateKey$154,f
  3164  0706                     l1708:	
  3165  0706  0829               	movf	_updateKey$154,w
  3166  0707  00A7               	movwf	??_updateKey
  3167  0708  0827               	movf	??_updateKey,w
  3168  0709  00A8               	movwf	updateKey@localShift
  3169                           
  3170                           ;main.c: 290:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  3171  070A  0857               	movf	_shift_ctrl_alt,w
  3172  070B  390C               	andlw	12
  3173  070C  1903               	btfsc	3,2
  3174  070D  2F10               	goto	u1470
  3175  070E  3001               	movlw	1
  3176  070F  2F11               	goto	u1480
  3177  0710                     u1470:	
  3178  0710  3000               	movlw	0
  3179  0711                     u1480:	
  3180  0711  00A7               	movwf	??_updateKey
  3181  0712  0827               	movf	??_updateKey,w
  3182  0713  00AA               	movwf	updateKey@localCtrl
  3183                           
  3184                           ;main.c: 291:     if ( key < 128 ) code = codeToMatrix[key];
  3185  0714  3080               	movlw	128
  3186  0715  022B               	subwf	updateKey@key,w
  3187  0716  1803               	skipnc
  3188  0717  2F1F               	goto	l1716
  3189  0718  082B               	movf	updateKey@key,w
  3190  0719  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  3191  071A  0084               	movwf	4
  3192  071B  2300               	fcall	stringdir
  3193  071C  00A7               	movwf	??_updateKey
  3194  071D  0827               	movf	??_updateKey,w
  3195  071E  00AC               	movwf	updateKey@code
  3196  071F                     l1716:	
  3197                           
  3198                           ;main.c: 292:     if ( code != 0xFF ) {
  3199  071F  0A2C               	incf	updateKey@code,w
  3200  0720  1903               	btfsc	3,2
  3201  0721  2F3A               	goto	l1724
  3202                           
  3203                           ;main.c: 293:         updatePort(code, down);
  3204  0722  0826               	movf	updateKey@down,w
  3205  0723  00A7               	movwf	??_updateKey
  3206  0724  0827               	movf	??_updateKey,w
  3207  0725  00A0               	movwf	updatePort@set
  3208  0726  082C               	movf	updateKey@code,w
  3209  0727  224E               	fcall	_updatePort
  3210                           
  3211                           ;main.c: 294:         localShift |= ((code & 64) > 0);
  3212  0728  1283               	bcf	3,5	;RP0=0, select bank0
  3213  0729  1303               	bcf	3,6	;RP1=0, select bank0
  3214  072A  1F2C               	btfss	updateKey@code,6
  3215  072B  2F2E               	goto	u1510
  3216  072C  3001               	movlw	1
  3217  072D  2F2F               	goto	u1520
  3218  072E                     u1510:	
  3219  072E  3000               	movlw	0
  3220  072F                     u1520:	
  3221  072F  00A7               	movwf	??_updateKey
  3222  0730  0827               	movf	??_updateKey,w
  3223  0731  04A8               	iorwf	updateKey@localShift,f
  3224                           
  3225                           ;main.c: 295:         localCtrl |= ((code & 128) > 0);
  3226  0732  1FAC               	btfss	updateKey@code,7
  3227  0733  2F36               	goto	u1530
  3228  0734  3001               	movlw	1
  3229  0735  2F37               	goto	u1540
  3230  0736                     u1530:	
  3231  0736  3000               	movlw	0
  3232  0737                     u1540:	
  3233  0737  00A7               	movwf	??_updateKey
  3234  0738  0827               	movf	??_updateKey,w
  3235  0739  04AA               	iorwf	updateKey@localCtrl,f
  3236  073A                     l1724:	
  3237                           ;main.c: 296:     }
  3238                           
  3239                           
  3240                           ;main.c: 297:     if ( down ) {
  3241  073A  0826               	movf	updateKey@down,w
  3242  073B  1903               	btfsc	3,2
  3243  073C  0008               	return
  3244                           
  3245                           ;main.c: 298:         updatePort(0x00, localShift );
  3246  073D  0828               	movf	updateKey@localShift,w
  3247  073E  00A7               	movwf	??_updateKey
  3248  073F  0827               	movf	??_updateKey,w
  3249  0740  00A0               	movwf	updatePort@set
  3250  0741  3000               	movlw	0
  3251  0742  224E               	fcall	_updatePort
  3252                           
  3253                           ;main.c: 299:         updatePort(0x0F, localCtrl );
  3254  0743  1283               	bcf	3,5	;RP0=0, select bank0
  3255  0744  1303               	bcf	3,6	;RP1=0, select bank0
  3256  0745  082A               	movf	updateKey@localCtrl,w
  3257  0746  00A7               	movwf	??_updateKey
  3258  0747  0827               	movf	??_updateKey,w
  3259  0748  00A0               	movwf	updatePort@set
  3260  0749  300F               	movlw	15
  3261  074A  224E               	fcall	_updatePort
  3262  074B  0008               	return
  3263  074C                     __end_of_updateKey:	
  3264                           ;main.c: 300:     }
  3265                           
  3266                           
  3267                           	psect	text8
  3268  024E                     __ptext8:	
  3269 ;; *************** function _updatePort *****************
  3270 ;; Defined at:
  3271 ;;		line 260 in file "main.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  bit_id          1    wreg     unsigned char 
  3274 ;;  set             1    0[BANK0 ] unsigned char 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  bit_id          1    5[BANK0 ] unsigned char 
  3277 ;;  a               1    4[BANK0 ] unsigned char 
  3278 ;; Return value:  Size  Location     Type
  3279 ;;                  1    wreg      void 
  3280 ;; Registers used:
  3281 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3282 ;; Tracked objects:
  3283 ;;		On entry : 0/0
  3284 ;;		On exit  : 0/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3287 ;;      Params:         0       1       0       0
  3288 ;;      Locals:         0       2       0       0
  3289 ;;      Temps:          0       3       0       0
  3290 ;;      Totals:         0       6       0       0
  3291 ;;Total ram usage:        6 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    2
  3294 ;; This function calls:
  3295 ;;		Nothing
  3296 ;; This function is called by:
  3297 ;;		_updateKey
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           
  3303                           ;psect for function _updatePort
  3304  024E                     _updatePort:	
  3305                           
  3306                           ;incstack = 0
  3307                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  3308                           ;updatePort@bit_id stored from wreg
  3309  024E  1283               	bcf	3,5	;RP0=0, select bank0
  3310  024F  1303               	bcf	3,6	;RP1=0, select bank0
  3311  0250  00A5               	movwf	updatePort@bit_id
  3312                           
  3313                           ;main.c: 260: void updatePort(uint8_t bit_id, uint8_t set);main.c: 261: {;main.c: 262:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  3314  0251  3001               	movlw	1
  3315  0252  00A1               	movwf	??_updatePort
  3316  0253  0825               	movf	updatePort@bit_id,w
  3317  0254  00A2               	movwf	??_updatePort+1
  3318  0255  3003               	movlw	3
  3319  0256                     u1365:	
  3320  0256  1003               	clrc
  3321  0257  0CA2               	rrf	??_updatePort+1,f
  3322  0258  3EFF               	addlw	-1
  3323  0259  1D03               	skipz
  3324  025A  2A56               	goto	u1365
  3325  025B  0822               	movf	??_updatePort+1,w
  3326  025C  3907               	andlw	7
  3327  025D  3E01               	addlw	1
  3328  025E  2A61               	goto	u1374
  3329  025F                     u1375:	
  3330  025F  1003               	clrc
  3331  0260  0DA1               	rlf	??_updatePort,f
  3332  0261                     u1374:	
  3333  0261  3EFF               	addlw	-1
  3334  0262  1D03               	skipz
  3335  0263  2A5F               	goto	u1375
  3336  0264  0821               	movf	??_updatePort,w
  3337  0265  00A3               	movwf	??_updatePort+2
  3338  0266  0823               	movf	??_updatePort+2,w
  3339  0267  00A4               	movwf	updatePort@a
  3340                           
  3341                           ;main.c: 263:     if ( set ) outPorts[bit_id & 7] |= a;
  3342  0268  0820               	movf	updatePort@set,w
  3343  0269  1903               	btfsc	3,2
  3344  026A  2A75               	goto	l1680
  3345  026B  0824               	movf	updatePort@a,w
  3346  026C  00A1               	movwf	??_updatePort
  3347  026D  0825               	movf	updatePort@bit_id,w
  3348  026E  3907               	andlw	7
  3349  026F  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  3350  0270  0084               	movwf	4
  3351  0271  0821               	movf	??_updatePort,w
  3352  0272  1383               	bcf	3,7	;select IRP bank0
  3353  0273  0480               	iorwf	0,f
  3354  0274  0008               	return
  3355  0275                     l1680:	
  3356                           ;main.c: 264:     else outPorts[bit_id & 7] &= ~a;
  3357                           
  3358  0275  0924               	comf	updatePort@a,w
  3359  0276  00A1               	movwf	??_updatePort
  3360  0277  0825               	movf	updatePort@bit_id,w
  3361  0278  3907               	andlw	7
  3362  0279  3E59               	addlw	(low (_outPorts| 0))& (0+255)
  3363  027A  0084               	movwf	4
  3364  027B  0821               	movf	??_updatePort,w
  3365  027C  1383               	bcf	3,7	;select IRP bank0
  3366  027D  0580               	andwf	0,f
  3367  027E  0008               	return
  3368  027F                     __end_of_updatePort:	
  3369                           
  3370                           	psect	text9
  3371  0796                     __ptext9:	
  3372 ;; *************** function _calculateBitsFromTable *****************
  3373 ;; Defined at:
  3374 ;;		line 268 in file "main.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;  keyCode         1    wreg     PTR unsigned char 
  3377 ;;		 -> processKeyCode@keyCode(1), 
  3378 ;;  keyDown         1    0[BANK0 ] PTR unsigned char 
  3379 ;;		 -> processKeyCode@keyDown(1), 
  3380 ;;  bits            1    1[BANK0 ] PTR unsigned char 
  3381 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  3382 ;;  table           1    2[BANK0 ] PTR unsigned char 
  3383 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  3384 ;;  count           1    3[BANK0 ] unsigned char 
  3385 ;;  clearIfFound    1    4[BANK0 ] unsigned char 
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  keyCode         1    7[BANK0 ] PTR unsigned char 
  3388 ;;		 -> processKeyCode@keyCode(1), 
  3389 ;;  i               1    8[BANK0 ] unsigned char 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      void 
  3392 ;; Registers used:
  3393 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3399 ;;      Params:         0       5       0       0
  3400 ;;      Locals:         0       2       0       0
  3401 ;;      Temps:          0       2       0       0
  3402 ;;      Totals:         0       9       0       0
  3403 ;;Total ram usage:        9 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; Hardware stack levels required when called:    2
  3406 ;; This function calls:
  3407 ;;		Nothing
  3408 ;; This function is called by:
  3409 ;;		_processKeyCode
  3410 ;; This function uses a non-reentrant model
  3411 ;;
  3412                           
  3413                           
  3414                           ;psect for function _calculateBitsFromTable
  3415  0796                     _calculateBitsFromTable:	
  3416                           
  3417                           ;incstack = 0
  3418                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  3419                           ;calculateBitsFromTable@keyCode stored from wreg
  3420  0796  1283               	bcf	3,5	;RP0=0, select bank0
  3421  0797  1303               	bcf	3,6	;RP1=0, select bank0
  3422  0798  00A7               	movwf	calculateBitsFromTable@keyCode
  3423                           
  3424                           ;main.c: 268: void calculateBitsFromTable(uint8_t* keyCode, uint8_t* keyDown, uint8_t* b
      +                          its, uint8_t table[], uint8_t count, uint8_t clearIfFound);main.c: 269: {;main.c: 270:  
      +                             for(uint8_t i = 0; i < count;i++) {
  3425  0799  01A8               	clrf	calculateBitsFromTable@i
  3426  079A                     l1698:	
  3427  079A  0823               	movf	calculateBitsFromTable@count,w
  3428  079B  0228               	subwf	calculateBitsFromTable@i,w
  3429  079C  1803               	btfsc	3,0
  3430  079D  0008               	return
  3431                           
  3432                           ;main.c: 271:         if ( (*keyCode) == table[i] ) {
  3433  079E  0828               	movf	calculateBitsFromTable@i,w
  3434  079F  0722               	addwf	calculateBitsFromTable@table,w
  3435  07A0  0084               	movwf	4
  3436  07A1  2300               	fcall	stringdir
  3437  07A2  00A5               	movwf	??_calculateBitsFromTable
  3438  07A3  0827               	movf	calculateBitsFromTable@keyCode,w
  3439  07A4  0084               	movwf	4
  3440  07A5  1383               	bcf	3,7	;select IRP bank0
  3441  07A6  0800               	movf	0,w
  3442  07A7  0625               	xorwf	??_calculateBitsFromTable,w
  3443  07A8  1D03               	skipz
  3444  07A9  2FD6               	goto	l1696
  3445                           
  3446                           ;main.c: 272:             if ( (*keyDown) ) {
  3447  07AA  0820               	movf	calculateBitsFromTable@keyDown,w
  3448  07AB  0084               	movwf	4
  3449  07AC  0800               	movf	0,w
  3450  07AD  1903               	btfsc	3,2
  3451  07AE  2FBF               	goto	l1690
  3452                           
  3453                           ;main.c: 273:                 (*bits) |= (1 << i);
  3454  07AF  3001               	movlw	1
  3455  07B0  00A5               	movwf	??_calculateBitsFromTable
  3456  07B1  0A28               	incf	calculateBitsFromTable@i,w
  3457  07B2  2FB5               	goto	u1414
  3458  07B3                     u1415:	
  3459  07B3  1003               	clrc
  3460  07B4  0DA5               	rlf	??_calculateBitsFromTable,f
  3461  07B5                     u1414:	
  3462  07B5  3EFF               	addlw	-1
  3463  07B6  1D03               	skipz
  3464  07B7  2FB3               	goto	u1415
  3465  07B8  0825               	movf	??_calculateBitsFromTable,w
  3466  07B9  00A6               	movwf	??_calculateBitsFromTable+1
  3467  07BA  0821               	movf	calculateBitsFromTable@bits,w
  3468  07BB  0084               	movwf	4
  3469  07BC  0826               	movf	??_calculateBitsFromTable+1,w
  3470  07BD  0480               	iorwf	0,f
  3471                           
  3472                           ;main.c: 274:             } else {
  3473  07BE  2FCF               	goto	l1692
  3474  07BF                     l1690:	
  3475                           
  3476                           ;main.c: 275:                 (*bits) &= ~(1 << i);
  3477  07BF  3001               	movlw	1
  3478  07C0  00A5               	movwf	??_calculateBitsFromTable
  3479  07C1  0A28               	incf	calculateBitsFromTable@i,w
  3480  07C2  2FC5               	goto	u1424
  3481  07C3                     u1425:	
  3482  07C3  1003               	clrc
  3483  07C4  0DA5               	rlf	??_calculateBitsFromTable,f
  3484  07C5                     u1424:	
  3485  07C5  3EFF               	addlw	-1
  3486  07C6  1D03               	skipz
  3487  07C7  2FC3               	goto	u1425
  3488  07C8  0825               	movf	??_calculateBitsFromTable,w
  3489  07C9  3AFF               	xorlw	255
  3490  07CA  00A6               	movwf	??_calculateBitsFromTable+1
  3491  07CB  0821               	movf	calculateBitsFromTable@bits,w
  3492  07CC  0084               	movwf	4
  3493  07CD  0826               	movf	??_calculateBitsFromTable+1,w
  3494  07CE  0580               	andwf	0,f
  3495  07CF                     l1692:	
  3496                           ;main.c: 276:             }
  3497                           
  3498                           
  3499                           ;main.c: 277:             if ( clearIfFound ) {
  3500  07CF  0824               	movf	calculateBitsFromTable@clearIfFound,w
  3501  07D0  1903               	btfsc	3,2
  3502  07D1  0008               	return
  3503                           
  3504                           ;main.c: 278:                 (*keyCode) = 0;
  3505  07D2  0827               	movf	calculateBitsFromTable@keyCode,w
  3506  07D3  0084               	movwf	4
  3507  07D4  0180               	clrf	0
  3508                           
  3509                           ;main.c: 280:             break;
  3510                           
  3511                           ;main.c: 279:             }
  3512  07D5  0008               	return
  3513  07D6                     l1696:	
  3514                           ;main.c: 281:         }
  3515                           
  3516                           
  3517                           ;main.c: 282:     }
  3518  07D6  3001               	movlw	1
  3519  07D7  00A5               	movwf	??_calculateBitsFromTable
  3520  07D8  0825               	movf	??_calculateBitsFromTable,w
  3521  07D9  07A8               	addwf	calculateBitsFromTable@i,f
  3522  07DA  2F9A               	goto	l1698
  3523  07DB                     __end_of_calculateBitsFromTable:	
  3524                           
  3525                           	psect	text10
  3526  07DB                     __ptext10:	
  3527 ;; *************** function _deviceDataInit *****************
  3528 ;; Defined at:
  3529 ;;		line 407 in file "main.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;  device          1    wreg     PTR struct PS2DeviceData
  3532 ;;		 -> devices(26), 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  device          1    0[BANK0 ] PTR struct PS2DeviceData
  3535 ;;		 -> devices(26), 
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3545 ;;      Params:         0       0       0       0
  3546 ;;      Locals:         0       1       0       0
  3547 ;;      Temps:          0       0       0       0
  3548 ;;      Totals:         0       1       0       0
  3549 ;;Total ram usage:        1 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:    2
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_main
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           
  3560                           ;psect for function _deviceDataInit
  3561  07DB                     _deviceDataInit:	
  3562                           
  3563                           ;incstack = 0
  3564                           ; Regs used in _deviceDataInit: [wreg-fsr0h+status,2+status,0]
  3565                           ;deviceDataInit@device stored from wreg
  3566  07DB  1283               	bcf	3,5	;RP0=0, select bank0
  3567  07DC  1303               	bcf	3,6	;RP1=0, select bank0
  3568  07DD  00A0               	movwf	deviceDataInit@device
  3569                           
  3570                           ;main.c: 407: void deviceDataInit(struct PS2DeviceData* device);main.c: 408: {;main.c: 4
      +                          09:     device->ps2Down = 1;
  3571  07DE  0A20               	incf	deviceDataInit@device,w
  3572  07DF  0084               	movwf	4
  3573  07E0  1383               	bcf	3,7	;select IRP bank0
  3574  07E1  0180               	clrf	0
  3575  07E2  0A80               	incf	0,f
  3576                           
  3577                           ;main.c: 410:     device->ps2NeedEncode = 0;
  3578  07E3  0820               	movf	deviceDataInit@device,w
  3579  07E4  3E02               	addlw	2
  3580  07E5  0084               	movwf	4
  3581  07E6  0180               	clrf	0
  3582                           
  3583                           ;main.c: 411:     device->readDataPos = 0;
  3584  07E7  0820               	movf	deviceDataInit@device,w
  3585  07E8  3E04               	addlw	4
  3586  07E9  0084               	movwf	4
  3587  07EA  0180               	clrf	0
  3588                           
  3589                           ;main.c: 412:     device->inDataPos = 0;
  3590  07EB  0820               	movf	deviceDataInit@device,w
  3591  07EC  3E03               	addlw	3
  3592  07ED  0084               	movwf	4
  3593  07EE  0180               	clrf	0
  3594                           
  3595                           ;main.c: 413:     device->deviceMode = 0;
  3596  07EF  0820               	movf	deviceDataInit@device,w
  3597  07F0  0084               	movwf	4
  3598  07F1  0180               	clrf	0
  3599  07F2  0008               	return
  3600  07F3                     __end_of_deviceDataInit:	
  3601                           
  3602                           	psect	text11
  3603  027F                     __ptext11:	
  3604 ;; *************** function ___bmul *****************
  3605 ;; Defined at:
  3606 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;  multiplier      1    wreg     unsigned char 
  3609 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  3610 ;; Auto vars:     Size  Location     Type
  3611 ;;  multiplier      1    3[BANK0 ] unsigned char 
  3612 ;;  product         1    2[BANK0 ] unsigned char 
  3613 ;; Return value:  Size  Location     Type
  3614 ;;                  1    wreg      unsigned char 
  3615 ;; Registers used:
  3616 ;;		wreg, status,2, status,0
  3617 ;; Tracked objects:
  3618 ;;		On entry : 0/0
  3619 ;;		On exit  : 0/0
  3620 ;;		Unchanged: 0/0
  3621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3622 ;;      Params:         0       1       0       0
  3623 ;;      Locals:         0       2       0       0
  3624 ;;      Temps:          0       1       0       0
  3625 ;;      Totals:         0       4       0       0
  3626 ;;Total ram usage:        4 bytes
  3627 ;; Hardware stack levels used:    1
  3628 ;; Hardware stack levels required when called:    2
  3629 ;; This function calls:
  3630 ;;		Nothing
  3631 ;; This function is called by:
  3632 ;;		_myIsr
  3633 ;;		_main
  3634 ;; This function uses a non-reentrant model
  3635 ;;
  3636                           
  3637                           
  3638                           ;psect for function ___bmul
  3639  027F                     ___bmul:	
  3640                           
  3641                           ;incstack = 0
  3642                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  3643                           ;___bmul@multiplier stored from wreg
  3644  027F  1283               	bcf	3,5	;RP0=0, select bank0
  3645  0280  1303               	bcf	3,6	;RP1=0, select bank0
  3646  0281  00A3               	movwf	___bmul@multiplier
  3647  0282  01A2               	clrf	___bmul@product
  3648  0283                     l2012:	
  3649  0283  1C23               	btfss	___bmul@multiplier,0
  3650  0284  2A89               	goto	l2016
  3651  0285  0820               	movf	___bmul@multiplicand,w
  3652  0286  00A1               	movwf	??___bmul
  3653  0287  0821               	movf	??___bmul,w
  3654  0288  07A2               	addwf	___bmul@product,f
  3655  0289                     l2016:	
  3656  0289  1003               	clrc
  3657  028A  0DA0               	rlf	___bmul@multiplicand,f
  3658  028B  1003               	clrc
  3659  028C  0CA3               	rrf	___bmul@multiplier,f
  3660  028D  0823               	movf	___bmul@multiplier,w
  3661  028E  1D03               	btfss	3,2
  3662  028F  2A83               	goto	l2012
  3663  0290  0822               	movf	___bmul@product,w
  3664  0291  0008               	return
  3665  0292                     __end_of___bmul:	
  3666                           
  3667                           	psect	text12
  3668  0568                     __ptext12:	
  3669 ;; *************** function _myIsr *****************
  3670 ;; Defined at:
  3671 ;;		line 154 in file "main.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  device          1    9[COMMON] PTR struct PS2DeviceData
  3676 ;;		 -> devices(26), 
  3677 ;; Return value:  Size  Location     Type
  3678 ;;                  1    wreg      void 
  3679 ;; Registers used:
  3680 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3681 ;; Tracked objects:
  3682 ;;		On entry : 0/0
  3683 ;;		On exit  : 0/0
  3684 ;;		Unchanged: 0/0
  3685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3686 ;;      Params:         0       0       0       0
  3687 ;;      Locals:         1       0       0       0
  3688 ;;      Temps:          5       0       0       0
  3689 ;;      Totals:         6       0       0       0
  3690 ;;Total ram usage:        6 bytes
  3691 ;; Hardware stack levels used:    1
  3692 ;; Hardware stack levels required when called:    1
  3693 ;; This function calls:
  3694 ;;		i1___bmul
  3695 ;; This function is called by:
  3696 ;;		Interrupt level 1
  3697 ;; This function uses a non-reentrant model
  3698 ;;
  3699                           
  3700                           
  3701                           ;psect for function _myIsr
  3702  0568                     _myIsr:	
  3703                           
  3704                           ;main.c: 156:     if(T0IE && T0IF){
  3705  0568  1A8B               	btfsc	11,5	;volatile
  3706  0569  1D0B               	btfss	11,2	;volatile
  3707  056A  2E02               	goto	i1l195
  3708                           
  3709                           ;main.c: 157:         if ( ps2DataState == 2 ) {
  3710  056B  3002               	movlw	2
  3711  056C  067D               	xorwf	_ps2DataState,w
  3712  056D  1D03               	btfss	3,2
  3713  056E  2D9A               	goto	i1l2062
  3714                           
  3715                           ;main.c: 159:             if ( ps2BitsCount < 8 ) {
  3716  056F  3008               	movlw	8
  3717  0570  027B               	subwf	_ps2BitsCount,w
  3718  0571  1803               	skipnc
  3719  0572  2D84               	goto	i1l2052
  3720                           
  3721                           ;main.c: 160:                 RA3 = ps2Bits & 1;
  3722  0573  1C7C               	btfss	_ps2Bits,0
  3723  0574  2D79               	goto	u215_20
  3724  0575  1283               	bcf	3,5	;RP0=0, select bank0
  3725  0576  1303               	bcf	3,6	;RP1=0, select bank0
  3726  0577  1585               	bsf	5,3	;volatile
  3727  0578  2D7C               	goto	i1l2048
  3728  0579                     u215_20:	
  3729  0579  1283               	bcf	3,5	;RP0=0, select bank0
  3730  057A  1303               	bcf	3,6	;RP1=0, select bank0
  3731  057B  1185               	bcf	5,3	;volatile
  3732  057C                     i1l2048:	
  3733                           
  3734                           ;main.c: 161:                 ps2Parity ^= ps2Bits & 1;
  3735  057C  087C               	movf	_ps2Bits,w
  3736  057D  3901               	andlw	1
  3737  057E  00F4               	movwf	??_myIsr
  3738  057F  0874               	movf	??_myIsr,w
  3739  0580  06D6               	xorwf	_ps2Parity,f
  3740                           
  3741                           ;main.c: 162:                 ps2Bits >>= 1;
  3742  0581  1003               	clrc
  3743  0582  0CFC               	rrf	_ps2Bits,f
  3744                           
  3745                           ;main.c: 163:             } else if (ps2BitsCount == 8 ) {
  3746  0583  2DAD               	goto	i1l2076
  3747  0584                     i1l2052:	
  3748  0584  3008               	movlw	8
  3749  0585  067B               	xorwf	_ps2BitsCount,w
  3750  0586  1D03               	btfss	3,2
  3751  0587  2D94               	goto	i1l2056
  3752                           
  3753                           ;main.c: 164:                 RA3 = ps2Parity;
  3754  0588  1283               	bcf	3,5	;RP0=0, select bank0
  3755  0589  1303               	bcf	3,6	;RP1=0, select bank0
  3756  058A  1C56               	btfss	_ps2Parity,0
  3757  058B  2D90               	goto	u218_20
  3758  058C  1283               	bcf	3,5	;RP0=0, select bank0
  3759  058D  1303               	bcf	3,6	;RP1=0, select bank0
  3760  058E  1585               	bsf	5,3	;volatile
  3761  058F  2DAD               	goto	i1l2076
  3762  0590                     u218_20:	
  3763  0590  1283               	bcf	3,5	;RP0=0, select bank0
  3764  0591  1303               	bcf	3,6	;RP1=0, select bank0
  3765  0592  1185               	bcf	5,3	;volatile
  3766                           
  3767                           ;main.c: 165:             } else {
  3768  0593  2DAD               	goto	i1l2076
  3769  0594                     i1l2056:	
  3770                           
  3771                           ;main.c: 166:                 TRISA = 0b11111001;
  3772  0594  30F9               	movlw	249
  3773  0595  1683               	bsf	3,5	;RP0=1, select bank1
  3774  0596  1303               	bcf	3,6	;RP1=0, select bank1
  3775  0597  0085               	movwf	5	;volatile
  3776                           
  3777                           ;main.c: 167:                 ps2DataState = 0;
  3778  0598  01FD               	clrf	_ps2DataState
  3779                           
  3780                           ;main.c: 168:             }
  3781  0599  2DAD               	goto	i1l2076
  3782  059A                     i1l2062:	
  3783                           ;main.c: 171:         } else if ( ps2DataState == 1 ) {
  3784                           
  3785                           ;main.c: 169:             ps2BitsCount++;
  3786                           
  3787  059A  037D               	decf	_ps2DataState,w
  3788  059B  1D03               	btfss	3,2
  3789  059C  2DE0               	goto	i1l2090
  3790                           
  3791                           ;main.c: 176:                 if ( ps2BitsCount < 8 ) {
  3792  059D  3008               	movlw	8
  3793  059E  027B               	subwf	_ps2BitsCount,w
  3794  059F  1803               	skipnc
  3795  05A0  2DA9               	goto	i1l2074
  3796                           
  3797                           ;main.c: 177:                     ps2Bits >>= 1;
  3798  05A1  1003               	clrc
  3799  05A2  0CFC               	rrf	_ps2Bits,f
  3800                           
  3801                           ;main.c: 178:                     if ( RA3 ) ps2Bits |= 128;
  3802  05A3  1283               	bcf	3,5	;RP0=0, select bank0
  3803  05A4  1303               	bcf	3,6	;RP1=0, select bank0
  3804  05A5  1D85               	btfss	5,3	;volatile
  3805  05A6  2DAD               	goto	i1l2076
  3806  05A7  17FC               	bsf	_ps2Bits,7
  3807  05A8  2DAD               	goto	i1l2076
  3808  05A9                     i1l2074:	
  3809                           ;main.c: 180:                 } else if ( ps2BitsCount == 8 ) {
  3810                           
  3811                           ;main.c: 179:                     ps2BitsCount++;
  3812                           
  3813  05A9  3008               	movlw	8
  3814  05AA  067B               	xorwf	_ps2BitsCount,w
  3815  05AB  1D03               	btfss	3,2
  3816  05AC  2DB2               	goto	i1l2078
  3817  05AD                     i1l2076:	
  3818                           
  3819                           ;main.c: 181:                     ps2BitsCount++;
  3820  05AD  3001               	movlw	1
  3821  05AE  00F4               	movwf	??_myIsr
  3822  05AF  0874               	movf	??_myIsr,w
  3823  05B0  07FB               	addwf	_ps2BitsCount,f
  3824                           
  3825                           ;main.c: 182:                 } else if ( ps2BitsCount == 9 ) {
  3826  05B1  2DFD               	goto	i1l2104
  3827  05B2                     i1l2078:	
  3828  05B2  3009               	movlw	9
  3829  05B3  067B               	xorwf	_ps2BitsCount,w
  3830  05B4  1D03               	btfss	3,2
  3831  05B5  2DFD               	goto	i1l2104
  3832                           
  3833                           ;main.c: 185:                     struct PS2DeviceData* device = &devices[ps2Device];
  3834  05B6  300D               	movlw	13
  3835  05B7  00F4               	movwf	??_myIsr
  3836  05B8  0874               	movf	??_myIsr,w
  3837  05B9  00F0               	movwf	i1___bmul@multiplicand
  3838  05BA  087A               	movf	_ps2Device,w
  3839  05BB  2292               	fcall	i1___bmul
  3840  05BC  3EA0               	addlw	(low (_devices| 0))& (0+255)
  3841  05BD  00F5               	movwf	??_myIsr+1
  3842  05BE  0875               	movf	??_myIsr+1,w
  3843  05BF  00F9               	movwf	myIsr@device
  3844                           
  3845                           ;main.c: 187:                     device->inData[device->inDataPos] = ps2Bits;
  3846  05C0  087C               	movf	_ps2Bits,w
  3847  05C1  00F4               	movwf	??_myIsr
  3848  05C2  0879               	movf	myIsr@device,w
  3849  05C3  3E03               	addlw	3
  3850  05C4  0084               	movwf	4
  3851  05C5  1383               	bcf	3,7	;select IRP bank0
  3852  05C6  0800               	movf	0,w
  3853  05C7  3E05               	addlw	5
  3854  05C8  0779               	addwf	myIsr@device,w
  3855  05C9  00F5               	movwf	??_myIsr+1
  3856  05CA  0875               	movf	??_myIsr+1,w
  3857  05CB  0084               	movwf	4
  3858  05CC  0874               	movf	??_myIsr,w
  3859  05CD  0080               	movwf	0
  3860                           
  3861                           ;main.c: 188:                     device->inDataPos = (device->inDataPos+1) & 7;
  3862  05CE  0879               	movf	myIsr@device,w
  3863  05CF  3E03               	addlw	3
  3864  05D0  0084               	movwf	4
  3865  05D1  0800               	movf	0,w
  3866  05D2  3E01               	addlw	1
  3867  05D3  3907               	andlw	7
  3868  05D4  00F4               	movwf	??_myIsr
  3869  05D5  0879               	movf	myIsr@device,w
  3870  05D6  3E03               	addlw	3
  3871  05D7  0084               	movwf	4
  3872  05D8  0874               	movf	??_myIsr,w
  3873  05D9  0080               	movwf	0
  3874                           
  3875                           ;main.c: 190:                     ps2DataState = 0;
  3876  05DA  01FD               	clrf	_ps2DataState
  3877                           
  3878                           ;main.c: 191:                     TRISA = 0b11111001;
  3879  05DB  30F9               	movlw	249
  3880  05DC  1683               	bsf	3,5	;RP0=1, select bank1
  3881  05DD  1303               	bcf	3,6	;RP1=0, select bank1
  3882  05DE  0085               	movwf	5	;volatile
  3883                           
  3884                           ;main.c: 194:         } else if ( ps2DataState == 0 ) {
  3885                           
  3886                           ;main.c: 192:                 }
  3887  05DF  2DFD               	goto	i1l2104
  3888  05E0                     i1l2090:	
  3889  05E0  087D               	movf	_ps2DataState,w
  3890  05E1  1D03               	btfss	3,2
  3891  05E2  2DFD               	goto	i1l2104
  3892                           
  3893                           ;main.c: 195:             if ( !RA4 && !RA3 ) {
  3894  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  3895  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  3896  05E5  1E05               	btfss	5,4	;volatile
  3897  05E6  1985               	btfsc	5,3	;volatile
  3898  05E7  2DFD               	goto	i1l2104
  3899                           
  3900                           ;main.c: 196:                 ps2BitsCount = 0;
  3901  05E8  01FB               	clrf	_ps2BitsCount
  3902                           
  3903                           ;main.c: 197:                 ps2Bits = 0;
  3904  05E9  01FC               	clrf	_ps2Bits
  3905                           
  3906                           ;main.c: 198:                 ps2DataState = 1;
  3907  05EA  01FD               	clrf	_ps2DataState
  3908  05EB  0AFD               	incf	_ps2DataState,f
  3909                           
  3910                           ;main.c: 199:                 ps2Device = RA0;
  3911  05EC  3000               	movlw	0
  3912  05ED  1805               	btfsc	5,0	;volatile
  3913  05EE  3001               	movlw	1
  3914  05EF  00FA               	movwf	_ps2Device
  3915                           
  3916                           ;main.c: 200:                 TRISA = 0b11111000;
  3917  05F0  30F8               	movlw	248
  3918  05F1  1683               	bsf	3,5	;RP0=1, select bank1
  3919  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  3920  05F3  0085               	movwf	5	;volatile
  3921                           
  3922                           ;main.c: 201:                 RA0 = ps2Device;
  3923  05F4  1C7A               	btfss	_ps2Device,0
  3924  05F5  2DFA               	goto	u228_20
  3925  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  3926  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  3927  05F8  1405               	bsf	5,0	;volatile
  3928  05F9  2DFD               	goto	i1l2104
  3929  05FA                     u228_20:	
  3930  05FA  1283               	bcf	3,5	;RP0=0, select bank0
  3931  05FB  1303               	bcf	3,6	;RP1=0, select bank0
  3932  05FC  1005               	bcf	5,0	;volatile
  3933  05FD                     i1l2104:	
  3934                           ;main.c: 203:         }
  3935                           
  3936                           ;main.c: 202:             }
  3937                           
  3938                           
  3939                           ;main.c: 204:         T0IF=0;
  3940  05FD  110B               	bcf	11,2	;volatile
  3941                           
  3942                           ;main.c: 205:         TMR0 = 255;
  3943  05FE  30FF               	movlw	255
  3944  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  3945  0600  1303               	bcf	3,6	;RP1=0, select bank0
  3946  0601  0081               	movwf	1	;volatile
  3947  0602                     i1l195:	
  3948                           ;main.c: 208:     }
  3949                           
  3950                           ;main.c: 206:     } else {
  3951                           
  3952  0602  0878               	movf	??_myIsr+4,w
  3953  0603  008A               	movwf	10
  3954  0604  0877               	movf	??_myIsr+3,w
  3955  0605  0084               	movwf	4
  3956  0606  0E76               	swapf	(??_myIsr+2)^(0+4294967168),w
  3957  0607  0083               	movwf	3
  3958  0608  0EFE               	swapf	126,f
  3959  0609  0E7E               	swapf	126,w
  3960  060A  0009               	retfie
  3961  060B                     __end_of_myIsr:	
  3962                           
  3963                           	psect	intentry
  3964  0004                     __pintentry:	
  3965                           ;incstack = 0
  3966                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3967                           
  3968  0004                     interrupt_function:	
  3969  007E                     saved_w	set	btemp
  3970  0004  00FE               	movwf	btemp
  3971  0005  0E03               	swapf	3,w
  3972  0006  00F6               	movwf	??_myIsr+2
  3973  0007  0804               	movf	4,w
  3974  0008  00F7               	movwf	??_myIsr+3
  3975  0009  080A               	movf	10,w
  3976  000A  00F8               	movwf	??_myIsr+4
  3977  000B  2D68               	ljmp	_myIsr
  3978                           
  3979                           	psect	text13
  3980  0292                     __ptext13:	
  3981 ;; *************** function i1___bmul *****************
  3982 ;; Defined at:
  3983 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c90\common\Umul8.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  multiplier      1    wreg     unsigned char 
  3986 ;;  multiplicand    1    0[COMMON] unsigned char 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;  multiplier      1    2[COMMON] unsigned char 
  3989 ;;  __bmul          1    3[COMMON] unsigned char 
  3990 ;; Return value:  Size  Location     Type
  3991 ;;                  1    wreg      unsigned char 
  3992 ;; Registers used:
  3993 ;;		wreg, status,2, status,0
  3994 ;; Tracked objects:
  3995 ;;		On entry : 0/0
  3996 ;;		On exit  : 0/0
  3997 ;;		Unchanged: 0/0
  3998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3999 ;;      Params:         1       0       0       0
  4000 ;;      Locals:         2       0       0       0
  4001 ;;      Temps:          1       0       0       0
  4002 ;;      Totals:         4       0       0       0
  4003 ;;Total ram usage:        4 bytes
  4004 ;; Hardware stack levels used:    1
  4005 ;; This function calls:
  4006 ;;		Nothing
  4007 ;; This function is called by:
  4008 ;;		_myIsr
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           
  4013                           ;psect for function i1___bmul
  4014  0292                     i1___bmul:	
  4015                           
  4016                           ;incstack = 0
  4017                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  4018                           ;i1___bmul@multiplier stored from wreg
  4019  0292  00F2               	movwf	i1___bmul@multiplier
  4020  0293  01F3               	clrf	i1___bmul@product
  4021  0294                     i1l2026:	
  4022  0294  1C72               	btfss	i1___bmul@multiplier,0
  4023  0295  2A9A               	goto	i1l2030
  4024  0296  0870               	movf	i1___bmul@multiplicand,w
  4025  0297  00F1               	movwf	??i1___bmul
  4026  0298  0871               	movf	??i1___bmul,w
  4027  0299  07F3               	addwf	i1___bmul@product,f
  4028  029A                     i1l2030:	
  4029  029A  1003               	clrc
  4030  029B  0DF0               	rlf	i1___bmul@multiplicand,f
  4031  029C  1003               	clrc
  4032  029D  0CF2               	rrf	i1___bmul@multiplier,f
  4033  029E  0872               	movf	i1___bmul@multiplier,w
  4034  029F  1D03               	btfss	3,2
  4035  02A0  2A94               	goto	i1l2026
  4036  02A1  0873               	movf	i1___bmul@product,w
  4037  02A2  0008               	return
  4038  02A3                     __end_ofi1___bmul:	
  4039  007E                     btemp	set	126	;btemp
  4040  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    229
    Data        12
    BSS         51
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     36      69
    BANK1            80      0      26
    BANK2            48      0       0

Pointer List with Targets:

    main@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 

    deviceDataUpdateMouse@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 

    deviceDataUpdateKeyboard@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 

    deviceDataInit@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@keyDown	PTR unsigned char  size(1) Largest target is 1
		 -> processKeyCode@keyDown(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 

    calculateBitsFromTable@keyCode	PTR unsigned char  size(1) Largest target is 1
		 -> processKeyCode@keyCode(BANK0[1]), 

    myIsr@device	PTR struct PS2DeviceData size(1) Largest target is 26
		 -> devices(BANK1[26]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    _myIsr->i1___bmul

Critical Paths under _main in BANK0

    _main->_deviceDataUpdateKeyboard
    _deviceDataUpdateKeyboard->_processKeyCode
    _processKeyCode->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    6427
                                             29 BANK0      7     7      0
                             ___bmul
                     _deviceDataInit
           _deviceDataUpdateKeyboard
              _deviceDataUpdateMouse
                               _send
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              0 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send                                                 5     4      1     212
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _deviceDataUpdateMouse                                5     5      0     498
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _deviceDataUpdateKeyboard                             7     7      0    3159
                                             22 BANK0      7     7      0
                     _processKeyCode
 ---------------------------------------------------------------------------------
 (2) _processKeyCode                                       9     8      1    2613
                                             13 BANK0      9     8      1
             _calculateBitsFromTable
                          _updateKey
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                              6 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) _calculateBitsFromTable                               9     4      5    1092
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (1) _deviceDataInit                                       1     1      0     176
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               4     3      1     125
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _myIsr                                                6     6      0     176
                                              4 COMMON     6     6      0
                           i1___bmul
 ---------------------------------------------------------------------------------
 (6) i1___bmul                                             4     3      1      87
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___bmul
   _deviceDataInit
   _deviceDataUpdateKeyboard
     _processKeyCode
       _calculateBitsFromTable
       _updateKey
         _updatePort
   _deviceDataUpdateMouse
   _send
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)
   i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      1A       7       32.5%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      45       3       86.3%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      6D      10        0.0%
ABS                  0      0      6D       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Nov 30 14:11:59 2018

                                 pc 0002                      ___bmul@product 0022  
                                fsr 0004            ??_calculateBitsFromTable 0025  
                               l233 0761                                 l245 0443  
                               l247 0454                                 l356 0243  
                               l294 0517                                 l358 024C  
                               l295 0518                                 l296 051F  
                               l299 0565                                 _GIE 005F  
                               _RA0 0028                                 _RA1 0029  
                               _RA2 002A                                 _RA3 002B  
                               _RA4 002C                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _PSA 040B                                 fsr0 0004  
                               indf 0000                                l2012 0283  
                              l2004 0559                                l2016 0289  
                              l2120 004E                                l2114 0040  
                              l2300 017C                                l2310 0189  
                              l2320 019B                                l2240 00B8  
                              l2410 0244                                l2402 0238  
                              l2332 01B6                                l2316 0195  
                              l2324 01A5                                l2260 00F4  
                              l2406 023C                                l2414 0248  
                              l2270 0111                                l2344 01C9  
                              l2352 01D8                                l2360 01E1  
                              l2264 0100                                l2256 00EC  
                              l2248 00C0                                l1802 04AE  
                              l1810 04B9                                l2354 01DC  
                              l2346 01D1                                l2362 01EC  
                              l1724 073A                                l1716 071F  
                              l1708 0706                                l1740 042F  
                              l2356 01DE                                l2276 0144  
                              l1806 04B0                                l1750 0444  
                              l1910 0793                                l2382 0216  
                              l2278 0148                                l2366 01F6  
                              l1680 0275                                l2376 020A  
                              l2384 0218                                l2288 0155  
                              l1690 07BF                                l1770 0469  
                              l2394 022C                                l1692 07CF  
                              l1780 047F                                l1772 046D  
                              l1764 045B                                l1828 06AF  
                              l1758 0455                                l1942 0652  
                              l1854 06CE                                l2398 0232  
                              l1696 07D6                                l1776 0475  
                              l1784 0484                                l1952 066E  
                              l1864 06E1                                l1872 06EE  
                              l1848 06C9                                l1698 079A  
                              l1794 0493                                l1778 0476  
                              l1946 065D                                l1938 064D  
                              l1970 04D2                                l1788 048D  
                              l1956 0679                                l1948 0665  
                              l1892 0772                                l1994 0520  
                              l1978 04ED                                _EEIE 0467  
                              _EEIF 0067                                _CMIE 0466  
                              _CMIF 0066                                _T0IE 005D  
                              _T0IF 005A                                _T0CS 040D  
                              _T0SE 040C                                u1414 07B5  
                              u1510 072E                                u1415 07B3  
                              u1424 07C5                                u1520 072F  
                              u1600 042C                                u1425 07C3  
                              u1530 0736                                u1540 0737  
                              u1365 0256                                u1374 0261  
                              u1470 0710                                u1375 025F  
                              u1480 0711                                u1810 06AC  
                              u1590 042B                                u2717 06B5  
                              u2727 06D2                                u2737 06F2  
                              _PEIE 005E                                _INTE 005C  
                              _INTF 0059                                _RBIE 005B  
                              _RBIF 0058                                _RCIE 0465  
                              _RCIF 0065                                _TMR0 0001  
                              _TMR2 0011                                _SPEN 00C7  
                              _TXIE 0464                                _TXIF 0064  
            ?_deviceDataUpdateMouse 0070                                _main 0034  
                              _send 0690                                btemp 007E  
                              start 000C       __end_of_deviceLogicMouseIndex 03DF  
                 ___bmul@multiplier 0023                               ?_main 0070  
                             ?_send 0020                               _CMCON 001F  
      __end_of_replaceTwoBytesCodes 03CC                               _T1CON 0010  
                             i1l195 0602                               _RCSTA 0018  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
              __end_of_codeToMatrix 0386                               _TRISA 0085  
                             _TRISB 0086                               _VRCON 009F  
                             _TXSTA 0098                               _nRBPU 040F  
                             _delay 0048                     __end_of_myDelay 0800  
                             _myIsr 0568                               main@i 003F  
                             main@j 0040                    __end_ofi1___bmul 02A3  
                  updatePort@bit_id 0025                               pclath 000A  
                             send@i 0023                               send@j 0024  
                             status 0003                        updateKey@key 002B  
                             wtemp0 007E                    _deviceLogicDelay 004A  
                   __initialization 000D                    _deviceLogicIndex 0055  
                      __end_of_main 024E                    _deviceLogicState 0053  
                      __end_of_send 06F5                              ??_main 003D  
                            ??_send 0021     __size_of_calculateBitsFromTable 0045  
                 sendDataToAltera@i 0024                              _CCP1IE 0462  
                            _CCP1IF 0062                              ?_myIsr 0070  
                            _CCPR1H 0016                              _CCPR1L 0015  
                            i1l2030 029A                              i1l2104 05FD  
                            i1l2026 0294                              i1l2052 0584  
                            i1l2062 059A                              i1l2056 0594  
                            i1l2048 057C                              i1l2074 05A9  
                            i1l2090 05E0                              i1l2076 05AD  
                            i1l2078 05B2                              _INTEDG 040E  
                            u215_20 0579                              u218_20 0590  
                            u228_20 05FA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _TMR2IE 0461  
                            _TMR2IF 0061            __end_of_sendDataToAltera 0796  
             _replaceOnDelayKeyDown 03D5                    ??_processKeyCode 002E  
                            ___bmul 027F                           ??_myDelay 0020  
                            saved_w 007E                       updateKey@code 002C  
                     updateKey@down 0026             __end_of__initialization 0032  
            _calculateBitsFromTable 0796                _replaceTwoBytesCodes 03B0  
                       myIsr@device 0079                 ___bmul@multiplicand 0020  
                     updatePort@set 0020                   _deviceLogicDevice 0052  
                    __pcstackCOMMON 0070                        __pidataBANK0 07F3  
                     __end_of_myIsr 060B                           ?i1___bmul 0070  
              deviceDataInit@device 0020                 updateKey@localShift 0028  
                  i1___bmul@product 0073             ??_deviceDataUpdateMouse 0020  
                           ??_myIsr 0074             __size_of_deviceDataInit 0018  
                      _ps2DataState 007D                          __pbssBANK0 0044  
                        __pbssBANK1 00A0           deviceDataUpdateKeyboard@i 003A  
                      _ps2BitsCount 007B                        _codeToMatrix 0306  
                        _delayedKey 004C                _sendDataToAltera$161 0022  
                        __pmaintext 0034                             ?___bmul 0020  
                        __pintentry 0004                             _CCP1CON 0017  
                        ??i1___bmul 0071          calculateBitsFromTable@bits 0021  
                   processKeyCode@i 0034                  __size_of_updateKey 0057  
          _deviceDataUpdateKeyboard 060B           deviceDataUpdateMouse@code 0022  
                        __stringtab 0300          _kempstonMouseEmulatorDelay 0046  
     __end_of_replaceOnShiftKeyDown 03B0               _deviceLogicMouseIndex 03DE  
                   __size_of___bmul 0013                             _ps2Bits 007C  
                           _devices 00A0                             __ptext1 074C  
                           __ptext2 07FF                             __ptext3 0690  
                           __ptext4 04C0                             __ptext5 060B  
                           __ptext6 03EB                             __ptext7 06F5  
                           __ptext8 024E                             __ptext9 0796  
     calculateBitsFromTable@keyCode 0027       calculateBitsFromTable@keyDown 0020  
                           _myDelay 07FF  calculateBitsFromTable@clearIfFound 0024  
                           _numLock 004E                 i1___bmul@multiplier 0072  
                           clrloop0 02A4                end_of_initialization 0032  
                     _importantKeys 03DF                      _shift_ctrl_alt 0057  
                 ?_sendDataToAltera 0070                   __end_of_updateKey 074C  
                ??_sendDataToAltera 0020                   _kempstonMouseKeys 03E5  
                        _updatePort 024E                      _deviceDataInit 07DB  
           ?_calculateBitsFromTable 0020                          main@device 0043  
    deviceDataUpdateKeyboard@device 003C                      _deviceLogicMax 03DD  
         __end_of_kempstonMouseKeys 03EB                  _deviceLogicCommand 0054  
                    __end_of___bmul 0292               processKeyCode@keyCode 0035  
                 __size_ofi1___bmul 0011               processKeyCode@keyDown 002D  
               start_initialization 000D              __end_of_deviceDataInit 07F3  
                       updatePort@a 0024      __end_of_calculateBitsFromTable 07DB  
           calculateBitsFromTable@i 0028                 __end_of_deviceLogic 03D5  
    __size_of_deviceDataUpdateMouse 00A8       __end_of_deviceDataUpdateMouse 0568  
            __end_of_deviceLogicMax 03DE                            ??___bmul 0021  
                       __pdataBANK0 0059          ??_deviceDataUpdateKeyboard 0036  
           __size_of_processKeyCode 00D5                         __pbssCOMMON 007A  
                         ___latbits 0000                     ?_deviceDataInit 0070  
                     __pcstackBANK0 0020                         ?_updatePort 0020  
             _kempstonMouseCounterA 0044               _kempstonMouseCounterB 0051  
             _kempstonMouseCounterC 0050                  updateKey@localCtrl 002A  
                     _ps2DeviceMain 0064                          send@device 0022  
                         _ps2Device 007A                           _ps2Parity 0056  
                         __pstrings 0300         deviceDataUpdateMouse@device 0024  
                       _deviceLogic 03CC                            ?_myDelay 0070  
       calculateBitsFromTable@count 0023                      __size_of_myIsr 00A3  
       calculateBitsFromTable@table 0022                   interrupt_function 0004  
                         clear_ram0 02A3               i1___bmul@multiplicand 0070  
               __size_of_updatePort 0031               _replaceOnShiftKeyDown 0386  
                         _updateKey 06F5                            i1___bmul 0292  
                       __stringbase 0305                           main@i_208 0042  
         __size_of_sendDataToAltera 004A    __end_of_deviceDataUpdateKeyboard 0690  
                        ?_updateKey 0026                  __end_of__stringtab 0306  
                    _processKeyCode 03EB                    __size_of_myDelay 0001  
                          __ptext10 07DB                            __ptext11 027F  
                          __ptext12 0568                            __ptext13 0292  
                          _needSave 004F                       __size_of_main 021A  
     __end_of_replaceOnDelayKeyDown 03DD                       __size_of_send 0065  
                          _replaced 004D                            _outPorts 0059  
                          main@code 0041              __end_of_processKeyCode 04C0  
               processKeyCode@i_167 0033                    ??_deviceDataInit 0020  
                      ??_updatePort 0021           _kempstonMouseEmulatorKeys 0058  
                          intlevel1 0000                            send@byte 0020  
             _deviceDataUpdateMouse 04C0                           stringcode 0300  
      deviceDataUpdateKeyboard@code 003B                  __end_of_updatePort 027F  
                   ?_processKeyCode 002D                         ??_updateKey 0027  
                  _sendDataToAltera 074C                            stringdir 0300  
                          stringtab 0300               __end_of_importantKeys 03E5  
            deviceDataUpdateMouse@j 0023                       _updateKey$154 0029  
 __size_of_deviceDataUpdateKeyboard 0085           ?_deviceDataUpdateKeyboard 0070  
      _deviceDataUpdateKeyboard$187 0038  
