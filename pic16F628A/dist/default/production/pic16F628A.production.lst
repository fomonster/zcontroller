

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sun Nov 11 02:47:35 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.00
    25                           ; Generated 27/05/2018 GMT
    26                           ; 
    27                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F628A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  008C                     	;# 
    86  008E                     	;# 
    87  0092                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009F                     	;# 
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  000A                     	;# 
   103  000B                     	;# 
   104  000C                     	;# 
   105  000E                     	;# 
   106  000E                     	;# 
   107  000F                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  008C                     	;# 
   123  008E                     	;# 
   124  0092                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009F                     	;# 
   132                           
   133                           	psect	idataBANK0
   134  0551                     __pidataBANK0:	
   135                           
   136                           ;initializer for _outPorts
   137  0551  3400               	retlw	0
   138  0552  3400               	retlw	0
   139  0553  3400               	retlw	0
   140  0554  3400               	retlw	0
   141  0555  3400               	retlw	0
   142  0556  3400               	retlw	0
   143  0557  3400               	retlw	0
   144  0558  3400               	retlw	0
   145  0559  3407               	retlw	7
   146  055A  34F5               	retlw	245
   147  055B  34DA               	retlw	218
   148                           
   149                           ;initializer for _ps2DownB
   150  055C  3401               	retlw	1
   151                           
   152                           ;initializer for _ps2DownA
   153  055D  3401               	retlw	1
   154                           
   155                           	psect	strings
   156  0200                     __pstrings:	
   157  0200                     stringtab:	
   158  0200                     __stringtab:	
   159  0200                     stringcode:	
   160                           ;	String table - string pointers are 1 byte each
   161                           
   162  0200                     stringdir:	
   163  0200  3002               	movlw	high stringdir
   164  0201  008A               	movwf	10
   165  0202  0804               	movf	4,w
   166  0203  0A84               	incf	4,f
   167  0204  0782               	addwf	2,f
   168  0205                     __stringbase:	
   169  0205  3400               	retlw	0
   170  0206                     __end_of__stringtab:	
   171  0206                     _codeToMatrix:	
   172  0206  34FF               	retlw	255
   173  0207  34FF               	retlw	255
   174  0208  34FF               	retlw	255
   175  0209  34FF               	retlw	255
   176  020A  34FF               	retlw	255
   177  020B  34FF               	retlw	255
   178  020C  34FF               	retlw	255
   179  020D  34FF               	retlw	255
   180  020E  34FF               	retlw	255
   181  020F  34FF               	retlw	255
   182  0210  34FF               	retlw	255
   183  0211  34FF               	retlw	255
   184  0212  34FF               	retlw	255
   185  0213  34FF               	retlw	255
   186  0214  349C               	retlw	156
   187  0215  34FF               	retlw	255
   188  0216  34FF               	retlw	255
   189  0217  34FF               	retlw	255
   190  0218  34FF               	retlw	255
   191  0219  34FF               	retlw	255
   192  021A  34FF               	retlw	255
   193  021B  3402               	retlw	2
   194  021C  3403               	retlw	3
   195  021D  34FF               	retlw	255
   196  021E  34FF               	retlw	255
   197  021F  34FF               	retlw	255
   198  0220  3408               	retlw	8
   199  0221  3409               	retlw	9
   200  0222  3401               	retlw	1
   201  0223  340A               	retlw	10
   202  0224  340B               	retlw	11
   203  0225  34D6               	retlw	214
   204  0226  34FF               	retlw	255
   205  0227  3418               	retlw	24
   206  0228  3410               	retlw	16
   207  0229  3411               	retlw	17
   208  022A  3412               	retlw	18
   209  022B  341B               	retlw	27
   210  022C  3413               	retlw	19
   211  022D  34FF               	retlw	255
   212  022E  345C               	retlw	92
   213  022F  3407               	retlw	7
   214  0230  3420               	retlw	32
   215  0231  3419               	retlw	25
   216  0232  3422               	retlw	34
   217  0233  341A               	retlw	26
   218  0234  3423               	retlw	35
   219  0235  3463               	retlw	99
   220  0236  3464               	retlw	100
   221  0237  341F               	retlw	31
   222  0238  3427               	retlw	39
   223  0239  3426               	retlw	38
   224  023A  3421               	retlw	33
   225  023B  3425               	retlw	37
   226  023C  3424               	retlw	36
   227  023D  3454               	retlw	84
   228  023E  34A0               	retlw	160
   229  023F  3406               	retlw	6
   230  0240  3417               	retlw	23
   231  0241  341E               	retlw	30
   232  0242  341D               	retlw	29
   233  0243  341C               	retlw	28
   234  0244  3414               	retlw	20
   235  0245  34FF               	retlw	255
   236  0246  34FF               	retlw	255
   237  0247  349F               	retlw	159
   238  0248  3416               	retlw	22
   239  0249  3415               	retlw	21
   240  024A  340D               	retlw	13
   241  024B  3404               	retlw	4
   242  024C  340C               	retlw	12
   243  024D  34FF               	retlw	255
   244  024E  34C1               	retlw	193
   245  024F  3497               	retlw	151
   246  0250  34A0               	retlw	160
   247  0251  340E               	retlw	14
   248  0252  348D               	retlw	141
   249  0253  3405               	retlw	5
   250  0254  349E               	retlw	158
   251  0255  3483               	retlw	131
   252  0256  348B               	retlw	139
   253  0257  3493               	retlw	147
   254  0258  349C               	retlw	156
   255  0259  349B               	retlw	155
   256  025A  34E5               	retlw	229
   257  025B  348E               	retlw	142
   258  025C  34A3               	retlw	163
   259  025D  34A6               	retlw	166
   260  025E  344B               	retlw	75
   261  025F  34FF               	retlw	255
   262  0260  3406               	retlw	6
   263  0261  34DD               	retlw	221
   264  0262  34A4               	retlw	164
   265  0263  34D1               	retlw	209
   266  0264  34A7               	retlw	167
   267  0265  3494               	retlw	148
   268  0266  348C               	retlw	140
   269  0267  3484               	retlw	132
   270  0268  3496               	retlw	150
   271  0269  34C9               	retlw	201
   272  026A  34D9               	retlw	217
   273  026B  34E1               	retlw	225
   274  026C  3444               	retlw	68
   275  026D  3488               	retlw	136
   276  026E  3485               	retlw	133
   277  026F  3403               	retlw	3
   278  0270  349A               	retlw	154
   279  0271  341B               	retlw	27
   280  0272  341C               	retlw	28
   281  0273  34A2               	retlw	162
   282  0274  3498               	retlw	152
   283  0275  34C0               	retlw	192
   284  0276  3404               	retlw	4
   285  0277  3497               	retlw	151
   286  0278  340B               	retlw	11
   287  0279  3423               	retlw	35
   288  027A  3424               	retlw	36
   289  027B  3414               	retlw	20
   290  027C  3443               	retlw	67
   291  027D  34FF               	retlw	255
   292  027E  34FF               	retlw	255
   293  027F  3496               	retlw	150
   294  0280  3413               	retlw	19
   295  0281  349E               	retlw	158
   296  0282  34A7               	retlw	167
   297  0283  340C               	retlw	12
   298  0284  34FF               	retlw	255
   299  0285  34FF               	retlw	255
   300  0286                     __end_of_codeToMatrix:	
   301  0286                     _replaceOnShiftKeyDown:	
   302  0286  3416               	retlw	22
   303  0287  344F               	retlw	79
   304  0288  341E               	retlw	30
   305  0289  3450               	retlw	80
   306  028A  3426               	retlw	38
   307  028B  3451               	retlw	81
   308  028C  3425               	retlw	37
   309  028D  3453               	retlw	83
   310  028E  342E               	retlw	46
   311  028F  3456               	retlw	86
   312  0290  3436               	retlw	54
   313  0291  3457               	retlw	87
   314  0292  343D               	retlw	61
   315  0293  345C               	retlw	92
   316  0294  343E               	retlw	62
   317  0295  345E               	retlw	94
   318  0296  3446               	retlw	70
   319  0297  345F               	retlw	95
   320  0298  3445               	retlw	69
   321  0299  3460               	retlw	96
   322  029A  344E               	retlw	78
   323  029B  3461               	retlw	97
   324  029C  3455               	retlw	85
   325  029D  3462               	retlw	98
   326  029E  345D               	retlw	93
   327  029F  3463               	retlw	99
   328  02A0  344C               	retlw	76
   329  02A1  3467               	retlw	103
   330  02A2  3452               	retlw	82
   331  02A3  3468               	retlw	104
   332  02A4  3441               	retlw	65
   333  02A5  346A               	retlw	106
   334  02A6  3449               	retlw	73
   335  02A7  346D               	retlw	109
   336  02A8  344A               	retlw	74
   337  02A9  346E               	retlw	110
   338  02AA  340E               	retlw	14
   339  02AB  3448               	retlw	72
   340  02AC  3454               	retlw	84
   341  02AD  3464               	retlw	100
   342  02AE  345B               	retlw	91
   343  02AF  3465               	retlw	101
   344  02B0                     __end_of_replaceOnShiftKeyDown:	
   345  02B0                     _replaceTwoBytesCodes:	
   346  02B0  3411               	retlw	17
   347  02B1  3408               	retlw	8
   348  02B2  3414               	retlw	20
   349  02B3  3413               	retlw	19
   350  02B4  3470               	retlw	112
   351  02B5  3417               	retlw	23
   352  02B6  346C               	retlw	108
   353  02B7  3418               	retlw	24
   354  02B8  347D               	retlw	125
   355  02B9  3419               	retlw	25
   356  02BA  3471               	retlw	113
   357  02BB  341F               	retlw	31
   358  02BC  3469               	retlw	105
   359  02BD  3420               	retlw	32
   360  02BE  347A               	retlw	122
   361  02BF  3427               	retlw	39
   362  02C0  3475               	retlw	117
   363  02C1  3428               	retlw	40
   364  02C2  346B               	retlw	107
   365  02C3  342F               	retlw	47
   366  02C4  3472               	retlw	114
   367  02C5  3430               	retlw	48
   368  02C6  3474               	retlw	116
   369  02C7  3437               	retlw	55
   370  02C8  344A               	retlw	74
   371  02C9  3438               	retlw	56
   372  02CA  345A               	retlw	90
   373  02CB  3439               	retlw	57
   374  02CC                     __end_of_replaceTwoBytesCodes:	
   375  02CC                     _replaceOnDelayKeyDown:	
   376  02CC  341F               	retlw	31
   377  02CD  3454               	retlw	84
   378  02CE  345B               	retlw	91
   379  02CF  3463               	retlw	99
   380  02D0  3464               	retlw	100
   381  02D1  3465               	retlw	101
   382  02D2  3448               	retlw	72
   383  02D3  345D               	retlw	93
   384  02D4                     __end_of_replaceOnDelayKeyDown:	
   385  02D4                     _importantKeys:	
   386  02D4  3412               	retlw	18
   387  02D5  3459               	retlw	89
   388  02D6  3414               	retlw	20
   389  02D7  3413               	retlw	19
   390  02D8  3411               	retlw	17
   391  02D9  3408               	retlw	8
   392  02DA                     __end_of_importantKeys:	
   393  02DA                     _kempstonMouseKeys:	
   394  02DA  346B               	retlw	107
   395  02DB  3474               	retlw	116
   396  02DC  3475               	retlw	117
   397  02DD  3472               	retlw	114
   398  02DE  3473               	retlw	115
   399  02DF  3404               	retlw	4
   400  02E0                     __end_of_kempstonMouseKeys:	
   401  0005                     _PORTA	set	5
   402  0018                     _RCSTA	set	24
   403  001F                     _CMCON	set	31
   404  0017                     _CCP1CON	set	23
   405  0016                     _CCPR1H	set	22
   406  0015                     _CCPR1L	set	21
   407  0010                     _T1CON	set	16
   408  0011                     _TMR2	set	17
   409  000F                     _TMR1H	set	15
   410  000E                     _TMR1L	set	14
   411  0006                     _PORTB	set	6
   412  0001                     _TMR0	set	1
   413  00C7                     _SPEN	set	199
   414  0060                     _TMR1IF	set	96
   415  0061                     _TMR2IF	set	97
   416  0062                     _CCP1IF	set	98
   417  0064                     _TXIF	set	100
   418  0065                     _RCIF	set	101
   419  0066                     _CMIF	set	102
   420  0067                     _EEIF	set	103
   421  0058                     _RBIF	set	88
   422  0059                     _INTF	set	89
   423  005B                     _RBIE	set	91
   424  005C                     _INTE	set	92
   425  005E                     _PEIE	set	94
   426  005F                     _GIE	set	95
   427  0029                     _RA1	set	41
   428  002A                     _RA2	set	42
   429  0028                     _RA0	set	40
   430  002C                     _RA4	set	44
   431  002B                     _RA3	set	43
   432  005A                     _T0IF	set	90
   433  005D                     _T0IE	set	93
   434  0086                     _TRISB	set	134
   435  0098                     _TXSTA	set	152
   436  009F                     _VRCON	set	159
   437  0085                     _TRISA	set	133
   438  0408                     _PS0	set	1032
   439  0409                     _PS1	set	1033
   440  040A                     _PS2	set	1034
   441  040B                     _PSA	set	1035
   442  040C                     _T0SE	set	1036
   443  040D                     _T0CS	set	1037
   444  040E                     _INTEDG	set	1038
   445  040F                     _nRBPU	set	1039
   446  0460                     _TMR1IE	set	1120
   447  0461                     _TMR2IE	set	1121
   448  0462                     _CCP1IE	set	1122
   449  0464                     _TXIE	set	1124
   450  0465                     _RCIE	set	1125
   451  0466                     _CMIE	set	1126
   452  0467                     _EEIE	set	1127
   453                           
   454                           	psect	cinit
   455  000D                     start_initialization:	
   456                           ; #config settings
   457                           
   458  000D                     __initialization:	
   459                           
   460                           ; Initialize objects allocated to BANK0
   461  000D  2551               	fcall	__pidataBANK0	;fetch initializer
   462  000E  00E1               	movwf	__pdataBANK0& (0+127)
   463  000F  2552               	fcall	__pidataBANK0+1	;fetch initializer
   464  0010  00E2               	movwf	(__pdataBANK0+1)& (0+127)
   465  0011  2553               	fcall	__pidataBANK0+2	;fetch initializer
   466  0012  00E3               	movwf	(__pdataBANK0+2)& (0+127)
   467  0013  2554               	fcall	__pidataBANK0+3	;fetch initializer
   468  0014  00E4               	movwf	(__pdataBANK0+3)& (0+127)
   469  0015  2555               	fcall	__pidataBANK0+4	;fetch initializer
   470  0016  00E5               	movwf	(__pdataBANK0+4)& (0+127)
   471  0017  2556               	fcall	__pidataBANK0+5	;fetch initializer
   472  0018  00E6               	movwf	(__pdataBANK0+5)& (0+127)
   473  0019  2557               	fcall	__pidataBANK0+6	;fetch initializer
   474  001A  00E7               	movwf	(__pdataBANK0+6)& (0+127)
   475  001B  2558               	fcall	__pidataBANK0+7	;fetch initializer
   476  001C  00E8               	movwf	(__pdataBANK0+7)& (0+127)
   477  001D  2559               	fcall	__pidataBANK0+8	;fetch initializer
   478  001E  00E9               	movwf	(__pdataBANK0+8)& (0+127)
   479  001F  255A               	fcall	__pidataBANK0+9	;fetch initializer
   480  0020  00EA               	movwf	(__pdataBANK0+9)& (0+127)
   481  0021  255B               	fcall	__pidataBANK0+10	;fetch initializer
   482  0022  00EB               	movwf	(__pdataBANK0+10)& (0+127)
   483  0023  255C               	fcall	__pidataBANK0+11	;fetch initializer
   484  0024  00EC               	movwf	(__pdataBANK0+11)& (0+127)
   485  0025  255D               	fcall	__pidataBANK0+12	;fetch initializer
   486  0026  00ED               	movwf	(__pdataBANK0+12)& (0+127)
   487                           
   488                           ; Clear objects allocated to BANK0
   489  0027  1383               	bcf	3,7	;select IRP bank0
   490  0028  3020               	movlw	low __pbssBANK0
   491  0029  0084               	movwf	4
   492  002A  3042               	movlw	low (__pbssBANK0+34)
   493  002B  255E               	fcall	clear_ram0
   494                           
   495                           ; Clear objects allocated to COMMON
   496  002C  3076               	movlw	low __pbssCOMMON
   497  002D  0084               	movwf	4
   498  002E  307A               	movlw	low (__pbssCOMMON+4)
   499  002F  255E               	fcall	clear_ram0
   500  0030                     end_of_initialization:	
   501                           ;End of C runtime variable initialization code
   502                           
   503  0030                     __end_of__initialization:	
   504  0030  0183               	clrf	3
   505  0031  2832               	ljmp	_main	;jump to C main() function
   506                           
   507                           	psect	bssCOMMON
   508  0076                     __pbssCOMMON:	
   509  0076                     _ps2BitsCount:	
   510  0076                     	ds	1
   511  0077                     _ps2Parity:	
   512  0077                     	ds	1
   513  0078                     _ps2Bits:	
   514  0078                     	ds	1
   515  0079                     _ps2DataState:	
   516  0079                     	ds	1
   517                           
   518                           	psect	bssBANK0
   519  0020                     __pbssBANK0:	
   520  0020                     _inDataB:	
   521  0020                     	ds	8
   522  0028                     _inDataA:	
   523  0028                     	ds	8
   524  0030                     _kempstonMouseEmulatorDelay:	
   525  0030                     	ds	2
   526  0032                     _delay:	
   527  0032                     	ds	2
   528  0034                     _delayedKey:	
   529  0034                     	ds	1
   530  0035                     _replaced:	
   531  0035                     	ds	1
   532  0036                     _numLock:	
   533  0036                     	ds	1
   534  0037                     _readDataBPos:	
   535  0037                     	ds	1
   536  0038                     _inDataBPos:	
   537  0038                     	ds	1
   538  0039                     _readDataAPos:	
   539  0039                     	ds	1
   540  003A                     _inDataAPos:	
   541  003A                     	ds	1
   542  003B                     _ps2NeedEncodeB:	
   543  003B                     	ds	1
   544  003C                     _ps2NeedEncodeA:	
   545  003C                     	ds	1
   546  003D                     _ps2Device:	
   547  003D                     	ds	1
   548  003E                     _ps2DeviceBMode:	
   549  003E                     	ds	1
   550  003F                     _ps2DeviceAMode:	
   551  003F                     	ds	1
   552  0040                     _shift_ctrl_alt:	
   553  0040                     	ds	1
   554  0041                     _kempstonMouseEmulatorKeys:	
   555  0041                     	ds	1
   556                           
   557                           	psect	dataBANK0
   558  0061                     __pdataBANK0:	
   559  0061                     _outPorts:	
   560  0061                     	ds	11
   561  006C                     _ps2DownB:	
   562  006C                     	ds	1
   563  006D                     _ps2DownA:	
   564  006D                     	ds	1
   565                           
   566                           	psect	clrtext
   567  055E                     clear_ram0:	
   568                           ;	Called with FSR containing the base address, and
   569                           ;	W with the last address+1
   570                           
   571  055E  0064               	clrwdt	;clear the watchdog before getting into this loop
   572  055F                     clrloop0:	
   573  055F  0180               	clrf	0	;clear RAM location pointed to by FSR
   574  0560  0A84               	incf	4,f	;increment pointer
   575  0561  0604               	xorwf	4,w	;XOR with final address
   576  0562  1903               	btfsc	3,2	;have we reached the end yet?
   577  0563  3400               	retlw	0	;all done for this memory range, return
   578  0564  0604               	xorwf	4,w	;XOR again to restore value
   579  0565  2D5F               	goto	clrloop0	;do the next byte
   580                           
   581                           	psect	cstackCOMMON
   582  0070                     __pcstackCOMMON:	
   583  0070                     ?_myIsr:	
   584  0070                     ??_myIsr:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_myDelay:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_sendDataToAltera:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_main:	
   594                           ; 1 bytes @ 0x0
   595                           
   596                           
   597                           ; 1 bytes @ 0x0
   598  0070                     	ds	4
   599  0074                     ?_updatePort:	
   600  0074                     ??_calculateBitsFromTable:	
   601                           ; 1 bytes @ 0x4
   602                           
   603  0074                     ??_myDelay:	
   604                           ; 1 bytes @ 0x4
   605                           
   606  0074                     ??_sendDataToAltera:	
   607                           ; 1 bytes @ 0x4
   608                           
   609  0074                     updatePort@set:	
   610                           ; 1 bytes @ 0x4
   611                           
   612                           
   613                           ; 1 bytes @ 0x4
   614  0074                     	ds	1
   615  0075                     ??_updateKey:	
   616                           
   617                           ; 1 bytes @ 0x5
   618  0075                     	ds	1
   619                           
   620                           	psect	cstackBANK0
   621  0042                     __pcstackBANK0:	
   622  0042                     ??_updatePort:	
   623  0042                     ?_calculateBitsFromTable:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0042                     calculateBitsFromTable@keyDown:	
   627                           ; 1 bytes @ 0x0
   628                           
   629  0042                     _sendDataToAltera$147:	
   630                           ; 1 bytes @ 0x0
   631                           
   632                           
   633                           ; 2 bytes @ 0x0
   634  0042                     	ds	1
   635  0043                     calculateBitsFromTable@bits:	
   636                           
   637                           ; 1 bytes @ 0x1
   638  0043                     	ds	1
   639  0044                     calculateBitsFromTable@table:	
   640  0044                     sendDataToAltera@i:	
   641                           ; 1 bytes @ 0x2
   642                           
   643                           
   644                           ; 1 bytes @ 0x2
   645  0044                     	ds	1
   646  0045                     updatePort@a:	
   647  0045                     calculateBitsFromTable@count:	
   648                           ; 1 bytes @ 0x3
   649                           
   650                           
   651                           ; 1 bytes @ 0x3
   652  0045                     	ds	1
   653  0046                     updatePort@bit_id:	
   654  0046                     calculateBitsFromTable@clearIfFound:	
   655                           ; 1 bytes @ 0x4
   656                           
   657                           
   658                           ; 1 bytes @ 0x4
   659  0046                     	ds	1
   660  0047                     ?_updateKey:	
   661  0047                     calculateBitsFromTable@keyCode:	
   662                           ; 1 bytes @ 0x5
   663                           
   664  0047                     updateKey@down:	
   665                           ; 1 bytes @ 0x5
   666                           
   667                           
   668                           ; 1 bytes @ 0x5
   669  0047                     	ds	1
   670  0048                     calculateBitsFromTable@i:	
   671  0048                     updateKey@key:	
   672                           ; 1 bytes @ 0x6
   673                           
   674                           
   675                           ; 1 bytes @ 0x6
   676  0048                     	ds	1
   677  0049                     updateKey@localShift:	
   678                           
   679                           ; 1 bytes @ 0x7
   680  0049                     	ds	1
   681  004A                     _updateKey$140:	
   682                           
   683                           ; 1 bytes @ 0x8
   684  004A                     	ds	1
   685  004B                     updateKey@localCtrl:	
   686                           
   687                           ; 1 bytes @ 0x9
   688  004B                     	ds	1
   689  004C                     updateKey@code:	
   690                           
   691                           ; 1 bytes @ 0xA
   692  004C                     	ds	1
   693  004D                     ?_processKeyCode:	
   694  004D                     processKeyCode@keyDown:	
   695                           ; 1 bytes @ 0xB
   696                           
   697                           
   698                           ; 1 bytes @ 0xB
   699  004D                     	ds	1
   700  004E                     ??_processKeyCode:	
   701                           
   702                           ; 1 bytes @ 0xC
   703  004E                     	ds	5
   704  0053                     processKeyCode@i_153:	
   705                           
   706                           ; 1 bytes @ 0x11
   707  0053                     	ds	1
   708  0054                     processKeyCode@i:	
   709                           
   710                           ; 1 bytes @ 0x12
   711  0054                     	ds	1
   712  0055                     processKeyCode@keyCode:	
   713                           
   714                           ; 1 bytes @ 0x13
   715  0055                     	ds	1
   716  0056                     ??_main:	
   717                           
   718                           ; 1 bytes @ 0x14
   719  0056                     	ds	2
   720  0058                     _main$165:	
   721                           
   722                           ; 2 bytes @ 0x16
   723  0058                     	ds	2
   724  005A                     _main$168:	
   725                           
   726                           ; 2 bytes @ 0x18
   727  005A                     	ds	2
   728  005C                     main@needSave:	
   729                           
   730                           ; 1 bytes @ 0x1A
   731  005C                     	ds	1
   732  005D                     main@i:	
   733                           
   734                           ; 1 bytes @ 0x1B
   735  005D                     	ds	1
   736  005E                     main@i_164:	
   737                           
   738                           ; 1 bytes @ 0x1C
   739  005E                     	ds	1
   740  005F                     main@i_167:	
   741                           
   742                           ; 1 bytes @ 0x1D
   743  005F                     	ds	1
   744  0060                     main@code:	
   745                           
   746                           ; 1 bytes @ 0x1E
   747  0060                     	ds	1
   748                           
   749                           	psect	maintext
   750  0032                     __pmaintext:	
   751 ;;
   752 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   753 ;;
   754 ;; *************** function _main *****************
   755 ;; Defined at:
   756 ;;		line 396 in file "main.c"
   757 ;; Parameters:    Size  Location     Type
   758 ;;		None
   759 ;; Auto vars:     Size  Location     Type
   760 ;;  i               1   29[BANK0 ] char 
   761 ;;  i               1   28[BANK0 ] char 
   762 ;;  code            1   30[BANK0 ] unsigned char 
   763 ;;  needSave        1   26[BANK0 ] unsigned char 
   764 ;;  i               1   27[BANK0 ] char 
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      void 
   767 ;; Registers used:
   768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   769 ;; Tracked objects:
   770 ;;		On entry : B00/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   774 ;;      Params:         0       0       0       0
   775 ;;      Locals:         0       9       0       0
   776 ;;      Temps:          0       2       0       0
   777 ;;      Totals:         0      11       0       0
   778 ;;Total ram usage:       11 bytes
   779 ;; Hardware stack levels required when called:    4
   780 ;; This function calls:
   781 ;;		_processKeyCode
   782 ;;		_sendDataToAltera
   783 ;; This function is called by:
   784 ;;		Startup code after reset
   785 ;; This function uses a non-reentrant model
   786 ;;
   787                           
   788                           
   789                           ;psect for function _main
   790  0032                     _main:	
   791                           
   792                           ;main.c: 402:     ps2DownA = 1;
   793                           
   794                           ;incstack = 0
   795                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   796  0032  1283               	bcf	3,5	;RP0=0, select bank0
   797  0033  1303               	bcf	3,6	;RP1=0, select bank0
   798  0034  01ED               	clrf	_ps2DownA
   799  0035  0AED               	incf	_ps2DownA,f
   800                           
   801                           ;main.c: 403:     ps2NeedEncodeA = 0;
   802  0036  01BC               	clrf	_ps2NeedEncodeA
   803                           
   804                           ;main.c: 404:     ps2DownB = 1;
   805  0037  01EC               	clrf	_ps2DownB
   806  0038  0AEC               	incf	_ps2DownB,f
   807                           
   808                           ;main.c: 405:     ps2NeedEncodeB = 0;
   809  0039  01BB               	clrf	_ps2NeedEncodeB
   810                           
   811                           ;main.c: 407:     readDataAPos = 0;
   812  003A  01B9               	clrf	_readDataAPos
   813                           
   814                           ;main.c: 408:     inDataAPos = 0;
   815  003B  01BA               	clrf	_inDataAPos
   816                           
   817                           ;main.c: 409:     readDataBPos = 0;
   818  003C  01B7               	clrf	_readDataBPos
   819                           
   820                           ;main.c: 410:     inDataBPos = 0;
   821  003D  01B8               	clrf	_inDataBPos
   822                           
   823                           ;main.c: 411:     ps2DeviceAMode = 0;
   824  003E  01BF               	clrf	_ps2DeviceAMode
   825                           
   826                           ;main.c: 412:     ps2DeviceBMode = 0;
   827  003F  01BE               	clrf	_ps2DeviceBMode
   828                           
   829                           ;main.c: 413:     ps2DataState = 0;
   830  0040  01F9               	clrf	_ps2DataState
   831                           
   832                           ;main.c: 416:     for(int8_t i=0;i<8;i++) {
   833  0041  01DD               	clrf	main@i
   834  0042  085D               	movf	main@i,w
   835  0043  3A80               	xorlw	128
   836  0044  3E78               	addlw	-136
   837  0045  1803               	btfsc	3,0
   838  0046  2855               	goto	l2094
   839  0047                     l2088:	
   840                           
   841                           ;main.c: 417:         outPorts[i] = 0;
   842  0047  085D               	movf	main@i,w
   843  0048  3E61               	addlw	(low (_outPorts| 0))& (0+255)
   844  0049  0084               	movwf	4
   845  004A  1383               	bcf	3,7	;select IRP bank0
   846  004B  0180               	clrf	0
   847                           
   848                           ;main.c: 418:     }
   849  004C  3001               	movlw	1
   850  004D  00D6               	movwf	??_main
   851  004E  0856               	movf	??_main,w
   852  004F  07DD               	addwf	main@i,f
   853  0050  085D               	movf	main@i,w
   854  0051  3A80               	xorlw	128
   855  0052  3E78               	addlw	-136
   856  0053  1C03               	skipc
   857  0054  2847               	goto	l2088
   858  0055                     l2094:	
   859                           
   860                           ;main.c: 419:     outPorts[8] = 0x07;
   861  0055  3007               	movlw	7
   862  0056  00D6               	movwf	??_main
   863  0057  0856               	movf	??_main,w
   864  0058  00E9               	movwf	_outPorts+8
   865                           
   866                           ;main.c: 420:     outPorts[9] = 0xF5;
   867  0059  30F5               	movlw	245
   868  005A  00D6               	movwf	??_main
   869  005B  0856               	movf	??_main,w
   870  005C  00EA               	movwf	_outPorts+9
   871                           
   872                           ;main.c: 421:     outPorts[10] = 0xDA;
   873  005D  30DA               	movlw	218
   874  005E  00D6               	movwf	??_main
   875  005F  0856               	movf	??_main,w
   876  0060  00EB               	movwf	_outPorts+10
   877                           
   878                           ;main.c: 422:     sendDataToAltera();
   879  0061  2491               	fcall	_sendDataToAltera
   880                           
   881                           ;main.c: 427:     GIE = 1;
   882  0062  178B               	bsf	11,7	;volatile
   883                           
   884                           ;main.c: 428:     PEIE = 0;
   885  0063  130B               	bcf	11,6	;volatile
   886                           
   887                           ;main.c: 429:     T0IE = 1;
   888  0064  168B               	bsf	11,5	;volatile
   889                           
   890                           ;main.c: 430:     INTE = 0;
   891  0065  120B               	bcf	11,4	;volatile
   892                           
   893                           ;main.c: 431:     RBIE = 0;
   894  0066  118B               	bcf	11,3	;volatile
   895                           
   896                           ;main.c: 432:     T0IF = 0;
   897  0067  110B               	bcf	11,2	;volatile
   898                           
   899                           ;main.c: 433:     INTF = 0;
   900  0068  108B               	bcf	11,1	;volatile
   901                           
   902                           ;main.c: 434:     RBIF = 0;
   903  0069  100B               	bcf	11,0	;volatile
   904                           
   905                           ;main.c: 437:     EEIF = 0;
   906  006A  1283               	bcf	3,5	;RP0=0, select bank0
   907  006B  1303               	bcf	3,6	;RP1=0, select bank0
   908  006C  138C               	bcf	12,7	;volatile
   909                           
   910                           ;main.c: 438:     CMIF = 0;
   911  006D  130C               	bcf	12,6	;volatile
   912                           
   913                           ;main.c: 439:     RCIF = 0;
   914  006E  128C               	bcf	12,5	;volatile
   915                           
   916                           ;main.c: 440:     TXIF = 0;
   917  006F  120C               	bcf	12,4	;volatile
   918                           
   919                           ;main.c: 441:     CCP1IF = 0;
   920  0070  110C               	bcf	12,2	;volatile
   921                           
   922                           ;main.c: 442:     TMR2IF = 0;
   923  0071  108C               	bcf	12,1	;volatile
   924                           
   925                           ;main.c: 443:     TMR1IF = 0;
   926  0072  100C               	bcf	12,0	;volatile
   927                           
   928                           ;main.c: 446:     EEIE = 0;
   929  0073  1683               	bsf	3,5	;RP0=1, select bank1
   930  0074  1303               	bcf	3,6	;RP1=0, select bank1
   931  0075  138C               	bcf	12,7	;volatile
   932                           
   933                           ;main.c: 447:     CMIE = 0;
   934  0076  130C               	bcf	12,6	;volatile
   935                           
   936                           ;main.c: 448:     RCIE = 0;
   937  0077  128C               	bcf	12,5	;volatile
   938                           
   939                           ;main.c: 449:     TXIE = 0;
   940  0078  120C               	bcf	12,4	;volatile
   941                           
   942                           ;main.c: 450:     CCP1IE = 0;
   943  0079  110C               	bcf	12,2	;volatile
   944                           
   945                           ;main.c: 451:     TMR2IE = 0;
   946  007A  108C               	bcf	12,1	;volatile
   947                           
   948                           ;main.c: 452:     TMR1IE = 0;
   949  007B  100C               	bcf	12,0	;volatile
   950                           
   951                           ;main.c: 455:     nRBPU = 1;
   952  007C  1781               	bsf	1,7	;volatile
   953                           
   954                           ;main.c: 456:     INTEDG = 0;
   955  007D  1301               	bcf	1,6	;volatile
   956                           
   957                           ;main.c: 457:     T0CS = 1;
   958  007E  1681               	bsf	1,5	;volatile
   959                           
   960                           ;main.c: 458:     T0SE = 1;
   961  007F  1601               	bsf	1,4	;volatile
   962                           
   963                           ;main.c: 459:     PSA = 1;
   964  0080  1581               	bsf	1,3	;volatile
   965                           
   966                           ;main.c: 460:     PS2 = 0;
   967  0081  1101               	bcf	1,2	;volatile
   968                           
   969                           ;main.c: 461:     PS1 = 0;
   970  0082  1081               	bcf	1,1	;volatile
   971                           
   972                           ;main.c: 462:     PS0 = 0;
   973  0083  1001               	bcf	1,0	;volatile
   974                           
   975                           ;main.c: 465:     TMR0 = 255;
   976  0084  30FF               	movlw	255
   977  0085  1283               	bcf	3,5	;RP0=0, select bank0
   978  0086  1303               	bcf	3,6	;RP1=0, select bank0
   979  0087  0081               	movwf	1	;volatile
   980                           
   981                           ;main.c: 466:     TMR1L = 0;
   982  0088  018E               	clrf	14	;volatile
   983                           
   984                           ;main.c: 467:     TMR1H = 0;
   985  0089  018F               	clrf	15	;volatile
   986                           
   987                           ;main.c: 468:     TMR2 = 0;
   988  008A  0191               	clrf	17	;volatile
   989                           
   990                           ;main.c: 469:     T1CON = 6;
   991  008B  3006               	movlw	6
   992  008C  0090               	movwf	16	;volatile
   993                           
   994                           ;main.c: 470:     CCPR1L = 0;
   995  008D  0195               	clrf	21	;volatile
   996                           
   997                           ;main.c: 471:     CCPR1H = 0;
   998  008E  0196               	clrf	22	;volatile
   999                           
  1000                           ;main.c: 472:     CCP1CON = 0;
  1001  008F  0197               	clrf	23	;volatile
  1002                           
  1003                           ;main.c: 473:     CMCON = 7;
  1004  0090  3007               	movlw	7
  1005  0091  009F               	movwf	31	;volatile
  1006                           
  1007                           ;main.c: 474:     VRCON = 0;
  1008  0092  1683               	bsf	3,5	;RP0=1, select bank1
  1009  0093  1303               	bcf	3,6	;RP1=0, select bank1
  1010  0094  019F               	clrf	31	;volatile
  1011                           
  1012                           ;main.c: 475:     RCSTA = 0;
  1013  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1014  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1015  0097  0198               	clrf	24	;volatile
  1016                           
  1017                           ;main.c: 476:     TXSTA = 128;
  1018  0098  3080               	movlw	128
  1019  0099  1683               	bsf	3,5	;RP0=1, select bank1
  1020  009A  1303               	bcf	3,6	;RP1=0, select bank1
  1021  009B  0098               	movwf	24	;volatile
  1022                           
  1023                           ;main.c: 477:     SPEN = 0;
  1024  009C  1283               	bcf	3,5	;RP0=0, select bank0
  1025  009D  1303               	bcf	3,6	;RP1=0, select bank0
  1026  009E  1398               	bcf	24,7	;volatile
  1027                           
  1028                           ;main.c: 482:     TRISA = 0b11111001;
  1029  009F  30F9               	movlw	249
  1030  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  1031  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  1032  00A2  0085               	movwf	5	;volatile
  1033                           
  1034                           ;main.c: 483:     PORTA = 0;
  1035  00A3  1283               	bcf	3,5	;RP0=0, select bank0
  1036  00A4  1303               	bcf	3,6	;RP1=0, select bank0
  1037  00A5  0185               	clrf	5	;volatile
  1038                           
  1039                           ;main.c: 486:     TRISB = 0;
  1040  00A6  1683               	bsf	3,5	;RP0=1, select bank1
  1041  00A7  1303               	bcf	3,6	;RP1=0, select bank1
  1042  00A8  0186               	clrf	6	;volatile
  1043                           
  1044                           ;main.c: 487:     PORTB = 0xFF;
  1045  00A9  30FF               	movlw	255
  1046  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1047  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1048  00AC  0086               	movwf	6	;volatile
  1049                           
  1050                           ;main.c: 490:     delay = 0;
  1051  00AD  01B2               	clrf	_delay
  1052  00AE  01B3               	clrf	_delay+1
  1053                           
  1054                           ;main.c: 491:     delayedKey = 0;
  1055  00AF  01B4               	clrf	_delayedKey
  1056                           
  1057                           ;main.c: 492:     shift_ctrl_alt = 0;
  1058  00B0  01C0               	clrf	_shift_ctrl_alt
  1059                           
  1060                           ;main.c: 493:     replaced = 0;
  1061  00B1  01B5               	clrf	_replaced
  1062  00B2                     l2200:	
  1063                           ;main.c: 547:     while(1)
  1064                           
  1065                           
  1066                           ;main.c: 548:     {;main.c: 549:         uint8_t needSave = 0;
  1067  00B2  1283               	bcf	3,5	;RP0=0, select bank0
  1068  00B3  1303               	bcf	3,6	;RP1=0, select bank0
  1069  00B4  01DC               	clrf	main@needSave
  1070                           
  1071                           ;main.c: 550:         uint8_t code;;main.c: 553:         if ( readDataAPos != inDataAPos
      +                           && ps2DeviceAMode == 0 ) {
  1072  00B5  0839               	movf	_readDataAPos,w
  1073  00B6  063A               	xorwf	_inDataAPos,w
  1074  00B7  1903               	skipnz
  1075  00B8  2913               	goto	l2248
  1076  00B9  083F               	movf	_ps2DeviceAMode,w
  1077  00BA  1D03               	btfss	3,2
  1078  00BB  2913               	goto	l2248
  1079                           
  1080                           ;main.c: 555:             code = inDataA[readDataAPos];
  1081  00BC  0839               	movf	_readDataAPos,w
  1082  00BD  3E28               	addlw	(low (_inDataA| 0))& (0+255)
  1083  00BE  0084               	movwf	4
  1084  00BF  1383               	bcf	3,7	;select IRP bank0
  1085  00C0  0800               	movf	0,w
  1086  00C1  00D6               	movwf	??_main
  1087  00C2  0856               	movf	??_main,w
  1088  00C3  00E0               	movwf	main@code
  1089                           
  1090                           ;main.c: 556:             readDataAPos = (readDataAPos + 1) & 7;
  1091  00C4  0839               	movf	_readDataAPos,w
  1092  00C5  3E01               	addlw	1
  1093  00C6  3907               	andlw	7
  1094  00C7  00D6               	movwf	??_main
  1095  00C8  0856               	movf	??_main,w
  1096  00C9  00B9               	movwf	_readDataAPos
  1097                           
  1098                           ;main.c: 558:             if ( ps2NeedEncodeA ) {
  1099  00CA  083C               	movf	_ps2NeedEncodeA,w
  1100  00CB  1903               	btfsc	3,2
  1101  00CC  28E5               	goto	l2226
  1102                           
  1103                           ;main.c: 559:                 for (int8_t i=0; i < 27; i+=2) {
  1104  00CD  01DE               	clrf	main@i_164
  1105  00CE                     L5:	
  1106  00CE  085E               	movf	main@i_164,w
  1107  00CF  3A80               	xorlw	128
  1108  00D0  3E65               	addlw	-155
  1109  00D1  1803               	btfsc	3,0
  1110  00D2  28F8               	goto	l2232
  1111                           
  1112                           ;main.c: 560:                     if ( code == replaceTwoBytesCodes[i] ) {
  1113  00D3  085E               	movf	main@i_164,w
  1114  00D4  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1115  00D5  0084               	movwf	4
  1116  00D6  2200               	fcall	stringdir
  1117  00D7  0660               	xorwf	main@code,w
  1118  00D8  1D03               	skipz
  1119  00D9  28E0               	goto	l2222
  1120                           
  1121                           ;main.c: 561:                         code = replaceTwoBytesCodes[i+1];
  1122  00DA  085E               	movf	main@i_164,w
  1123  00DB  3E01               	addlw	1
  1124  00DC  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1125  00DD  0084               	movwf	4
  1126  00DE  2200               	fcall	stringdir
  1127  00DF  28F5               	goto	L1
  1128  00E0                     l2222:	
  1129                           ;main.c: 563:                     }
  1130                           
  1131                           ;main.c: 562:                         break;
  1132                           
  1133                           
  1134                           ;main.c: 564:                 }
  1135  00E0  3002               	movlw	2
  1136  00E1  00D6               	movwf	??_main
  1137  00E2  0856               	movf	??_main,w
  1138  00E3  07DE               	addwf	main@i_164,f
  1139  00E4  28CE               	goto	L5
  1140  00E5                     l2226:	
  1141                           ;main.c: 565:             } else {
  1142                           
  1143                           
  1144                           ;main.c: 566:                 code = ( code == 131 ) ? 63 : code;
  1145  00E5  3083               	movlw	131
  1146  00E6  0660               	xorwf	main@code,w
  1147  00E7  1903               	btfsc	3,2
  1148  00E8  28F0               	goto	l2230
  1149  00E9  0860               	movf	main@code,w
  1150  00EA  00D6               	movwf	??_main
  1151  00EB  01D7               	clrf	??_main+1
  1152  00EC  0856               	movf	??_main,w
  1153  00ED  00D8               	movwf	_main$165
  1154  00EE  0857               	movf	??_main+1,w
  1155  00EF  28F3               	goto	L2
  1156  00F0                     l2230:	
  1157  00F0  303F               	movlw	63
  1158  00F1  00D8               	movwf	_main$165
  1159  00F2  3000               	movlw	0
  1160  00F3                     L2:	
  1161  00F3  00D9               	movwf	_main$165+1
  1162  00F4  0858               	movf	_main$165,w
  1163  00F5                     L1:	
  1164  00F5  00D6               	movwf	??_main
  1165  00F6  0856               	movf	??_main,w
  1166  00F7  00E0               	movwf	main@code
  1167  00F8                     l2232:	
  1168                           ;main.c: 567:             }
  1169                           
  1170                           
  1171                           ;main.c: 568:             if ( code == 0xF0 ) {
  1172  00F8  30F0               	movlw	240
  1173  00F9  0660               	xorwf	main@code,w
  1174  00FA  1D03               	btfss	3,2
  1175  00FB  28FE               	goto	l2236
  1176                           
  1177                           ;main.c: 569:                 ps2DownA = 0;
  1178  00FC  01ED               	clrf	_ps2DownA
  1179                           
  1180                           ;main.c: 570:             } else if ( code == 0xE0 ) {
  1181  00FD  2970               	goto	l2294
  1182  00FE                     l2236:	
  1183  00FE  30E0               	movlw	224
  1184  00FF  0660               	xorwf	main@code,w
  1185  0100  1D03               	btfss	3,2
  1186  0101  2905               	goto	l2240
  1187                           
  1188                           ;main.c: 571:                 ps2NeedEncodeA = 1;
  1189  0102  01BC               	clrf	_ps2NeedEncodeA
  1190  0103  0ABC               	incf	_ps2NeedEncodeA,f
  1191                           
  1192                           ;main.c: 572:             } else {
  1193  0104  2970               	goto	l2294
  1194  0105                     l2240:	
  1195                           
  1196                           ;main.c: 573:                 processKeyCode(code, ps2DownA);
  1197  0105  086D               	movf	_ps2DownA,w
  1198  0106  00D6               	movwf	??_main
  1199  0107  0856               	movf	??_main,w
  1200  0108  00CD               	movwf	processKeyCode@keyDown
  1201  0109  0860               	movf	main@code,w
  1202  010A  22E0               	fcall	_processKeyCode
  1203                           
  1204                           ;main.c: 574:                 needSave = 1;
  1205  010B  1283               	bcf	3,5	;RP0=0, select bank0
  1206  010C  1303               	bcf	3,6	;RP1=0, select bank0
  1207  010D  01DC               	clrf	main@needSave
  1208  010E  0ADC               	incf	main@needSave,f
  1209                           
  1210                           ;main.c: 575:                 ps2DownA = 1;
  1211  010F  01ED               	clrf	_ps2DownA
  1212  0110  0AED               	incf	_ps2DownA,f
  1213                           
  1214                           ;main.c: 576:                 ps2NeedEncodeA = 0;
  1215  0111  01BC               	clrf	_ps2NeedEncodeA
  1216                           
  1217                           ;main.c: 579:         } else if ( readDataBPos != inDataBPos && ps2DeviceBMode == 0 ) {
  1218                           
  1219                           ;main.c: 577:             }
  1220  0112  2970               	goto	l2294
  1221  0113                     l2248:	
  1222  0113  0837               	movf	_readDataBPos,w
  1223  0114  0638               	xorwf	_inDataBPos,w
  1224  0115  1903               	skipnz
  1225  0116  2970               	goto	l2294
  1226  0117  083E               	movf	_ps2DeviceBMode,w
  1227  0118  1D03               	btfss	3,2
  1228  0119  2970               	goto	l2294
  1229                           
  1230                           ;main.c: 581:             code = inDataB[readDataBPos];
  1231  011A  0837               	movf	_readDataBPos,w
  1232  011B  3E20               	addlw	(low (_inDataB| 0))& (0+255)
  1233  011C  0084               	movwf	4
  1234  011D  1383               	bcf	3,7	;select IRP bank0
  1235  011E  0800               	movf	0,w
  1236  011F  00D6               	movwf	??_main
  1237  0120  0856               	movf	??_main,w
  1238  0121  00E0               	movwf	main@code
  1239                           
  1240                           ;main.c: 582:             readDataBPos = (readDataBPos + 1) & 7;
  1241  0122  0837               	movf	_readDataBPos,w
  1242  0123  3E01               	addlw	1
  1243  0124  3907               	andlw	7
  1244  0125  00D6               	movwf	??_main
  1245  0126  0856               	movf	??_main,w
  1246  0127  00B7               	movwf	_readDataBPos
  1247                           
  1248                           ;main.c: 583:             if ( ps2NeedEncodeB ) {
  1249  0128  083B               	movf	_ps2NeedEncodeB,w
  1250  0129  1903               	btfsc	3,2
  1251  012A  2943               	goto	l2272
  1252                           
  1253                           ;main.c: 584:                 for (int8_t i=0; i < 27; i+=2) {
  1254  012B  01DF               	clrf	main@i_167
  1255  012C                     L6:	
  1256  012C  085F               	movf	main@i_167,w
  1257  012D  3A80               	xorlw	128
  1258  012E  3E65               	addlw	-155
  1259  012F  1803               	btfsc	3,0
  1260  0130  2956               	goto	l2278
  1261                           
  1262                           ;main.c: 585:                     if ( code == replaceTwoBytesCodes[i] ) {
  1263  0131  085F               	movf	main@i_167,w
  1264  0132  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1265  0133  0084               	movwf	4
  1266  0134  2200               	fcall	stringdir
  1267  0135  0660               	xorwf	main@code,w
  1268  0136  1D03               	skipz
  1269  0137  293E               	goto	l2268
  1270                           
  1271                           ;main.c: 586:                         code = replaceTwoBytesCodes[i+1];
  1272  0138  085F               	movf	main@i_167,w
  1273  0139  3E01               	addlw	1
  1274  013A  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1275  013B  0084               	movwf	4
  1276  013C  2200               	fcall	stringdir
  1277  013D  2953               	goto	L3
  1278  013E                     l2268:	
  1279                           ;main.c: 588:                     }
  1280                           
  1281                           ;main.c: 587:                         break;
  1282                           
  1283                           
  1284                           ;main.c: 589:                 }
  1285  013E  3002               	movlw	2
  1286  013F  00D6               	movwf	??_main
  1287  0140  0856               	movf	??_main,w
  1288  0141  07DF               	addwf	main@i_167,f
  1289  0142  292C               	goto	L6
  1290  0143                     l2272:	
  1291                           ;main.c: 590:             } else {
  1292                           
  1293                           
  1294                           ;main.c: 591:                 code = ( code == 131 ) ? 63 : code;
  1295  0143  3083               	movlw	131
  1296  0144  0660               	xorwf	main@code,w
  1297  0145  1903               	btfsc	3,2
  1298  0146  294E               	goto	l2276
  1299  0147  0860               	movf	main@code,w
  1300  0148  00D6               	movwf	??_main
  1301  0149  01D7               	clrf	??_main+1
  1302  014A  0856               	movf	??_main,w
  1303  014B  00DA               	movwf	_main$168
  1304  014C  0857               	movf	??_main+1,w
  1305  014D  2951               	goto	L4
  1306  014E                     l2276:	
  1307  014E  303F               	movlw	63
  1308  014F  00DA               	movwf	_main$168
  1309  0150  3000               	movlw	0
  1310  0151                     L4:	
  1311  0151  00DB               	movwf	_main$168+1
  1312  0152  085A               	movf	_main$168,w
  1313  0153                     L3:	
  1314  0153  00D6               	movwf	??_main
  1315  0154  0856               	movf	??_main,w
  1316  0155  00E0               	movwf	main@code
  1317  0156                     l2278:	
  1318                           ;main.c: 592:             }
  1319                           
  1320                           
  1321                           ;main.c: 593:             if ( code == 0xF0 ) {
  1322  0156  30F0               	movlw	240
  1323  0157  0660               	xorwf	main@code,w
  1324  0158  1D03               	btfss	3,2
  1325  0159  295C               	goto	l2282
  1326                           
  1327                           ;main.c: 594:                 ps2DownB = 0;
  1328  015A  01EC               	clrf	_ps2DownB
  1329                           
  1330                           ;main.c: 595:             } else if ( code == 0xE0 ) {
  1331  015B  2970               	goto	l2294
  1332  015C                     l2282:	
  1333  015C  30E0               	movlw	224
  1334  015D  0660               	xorwf	main@code,w
  1335  015E  1D03               	btfss	3,2
  1336  015F  2963               	goto	l2286
  1337                           
  1338                           ;main.c: 596:                ps2NeedEncodeB = 1;
  1339  0160  01BB               	clrf	_ps2NeedEncodeB
  1340  0161  0ABB               	incf	_ps2NeedEncodeB,f
  1341                           
  1342                           ;main.c: 597:             } else {
  1343  0162  2970               	goto	l2294
  1344  0163                     l2286:	
  1345                           
  1346                           ;main.c: 598:                 processKeyCode(code, ps2DownB);
  1347  0163  086C               	movf	_ps2DownB,w
  1348  0164  00D6               	movwf	??_main
  1349  0165  0856               	movf	??_main,w
  1350  0166  00CD               	movwf	processKeyCode@keyDown
  1351  0167  0860               	movf	main@code,w
  1352  0168  22E0               	fcall	_processKeyCode
  1353                           
  1354                           ;main.c: 599:                 needSave = 1;
  1355  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1356  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1357  016B  01DC               	clrf	main@needSave
  1358  016C  0ADC               	incf	main@needSave,f
  1359                           
  1360                           ;main.c: 600:                 ps2DownB = 1;
  1361  016D  01EC               	clrf	_ps2DownB
  1362  016E  0AEC               	incf	_ps2DownB,f
  1363                           
  1364                           ;main.c: 601:                 ps2NeedEncodeB = 0;
  1365  016F  01BB               	clrf	_ps2NeedEncodeB
  1366  0170                     l2294:	
  1367                           ;main.c: 603:         }
  1368                           
  1369                           ;main.c: 602:             }
  1370                           
  1371                           
  1372                           ;main.c: 636:         kempstonMouseEmulatorDelay++;
  1373  0170  3001               	movlw	1
  1374  0171  07B0               	addwf	_kempstonMouseEmulatorDelay,f
  1375  0172  1803               	skipnc
  1376  0173  0AB1               	incf	_kempstonMouseEmulatorDelay+1,f
  1377  0174  3000               	movlw	0
  1378  0175  07B1               	addwf	_kempstonMouseEmulatorDelay+1,f
  1379                           
  1380                           ;main.c: 637:         if ( kempstonMouseEmulatorDelay > 2000 ) {
  1381  0176  3007               	movlw	7
  1382  0177  0231               	subwf	_kempstonMouseEmulatorDelay+1,w
  1383  0178  30D1               	movlw	209
  1384  0179  1903               	skipnz
  1385  017A  0230               	subwf	_kempstonMouseEmulatorDelay,w
  1386  017B  1C03               	skipc
  1387  017C  29A0               	goto	l2324
  1388                           
  1389                           ;main.c: 639:             if ( numLock ) {
  1390  017D  0836               	movf	_numLock,w
  1391  017E  1903               	btfsc	3,2
  1392  017F  299C               	goto	l2320
  1393                           
  1394                           ;main.c: 640:                 if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]-=2;
  1395  0180  1C41               	btfss	_kempstonMouseEmulatorKeys,0
  1396  0181  2984               	goto	l2304
  1397  0182  3002               	movlw	2
  1398  0183  02EA               	subwf	_outPorts+9,f
  1399  0184                     l2304:	
  1400                           
  1401                           ;main.c: 641:                 if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]+=2;
  1402  0184  1CC1               	btfss	_kempstonMouseEmulatorKeys,1
  1403  0185  298A               	goto	l2308
  1404  0186  3002               	movlw	2
  1405  0187  00D6               	movwf	??_main
  1406  0188  0856               	movf	??_main,w
  1407  0189  07EA               	addwf	_outPorts+9,f
  1408  018A                     l2308:	
  1409                           
  1410                           ;main.c: 642:                 if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10]+=2
      +                          ;
  1411  018A  1D41               	btfss	_kempstonMouseEmulatorKeys,2
  1412  018B  2990               	goto	l2312
  1413  018C  3002               	movlw	2
  1414  018D  00D6               	movwf	??_main
  1415  018E  0856               	movf	??_main,w
  1416  018F  07EB               	addwf	_outPorts+10,f
  1417  0190                     l2312:	
  1418                           
  1419                           ;main.c: 643:                 if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10]-=2
      +                          ;
  1420  0190  1DC1               	btfss	_kempstonMouseEmulatorKeys,3
  1421  0191  2994               	goto	l2316
  1422  0192  3002               	movlw	2
  1423  0193  02EB               	subwf	_outPorts+10,f
  1424  0194                     l2316:	
  1425                           
  1426                           ;main.c: 644:                 if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8] &=
      +                           254;
  1427  0194  1E41               	btfss	_kempstonMouseEmulatorKeys,4
  1428  0195  299B               	goto	l310
  1429  0196  30FE               	movlw	254
  1430  0197  00D6               	movwf	??_main
  1431  0198  0856               	movf	??_main,w
  1432  0199  05E9               	andwf	_outPorts+8,f
  1433  019A  299C               	goto	l2320
  1434  019B                     l310:	
  1435                           ;main.c: 645:                 else outPorts[8] |= 1;
  1436                           
  1437  019B  1469               	bsf	_outPorts+8,0
  1438  019C                     l2320:	
  1439                           ;main.c: 646:             }
  1440                           
  1441                           
  1442                           ;main.c: 647:             kempstonMouseEmulatorDelay = 0;
  1443  019C  01B0               	clrf	_kempstonMouseEmulatorDelay
  1444  019D  01B1               	clrf	_kempstonMouseEmulatorDelay+1
  1445                           
  1446                           ;main.c: 648:             needSave = 1;
  1447  019E  01DC               	clrf	main@needSave
  1448  019F  0ADC               	incf	main@needSave,f
  1449  01A0                     l2324:	
  1450                           ;main.c: 649:         }
  1451                           
  1452                           
  1453                           ;main.c: 651:         if ( needSave) {
  1454  01A0  085C               	movf	main@needSave,w
  1455  01A1  1903               	btfsc	3,2
  1456  01A2  29A4               	goto	l312
  1457                           
  1458                           ;main.c: 652:             sendDataToAltera();
  1459  01A3  2491               	fcall	_sendDataToAltera
  1460  01A4                     l312:	
  1461                           ;main.c: 653:         }
  1462                           
  1463  01A4  0064               	clrwdt	;# 
  1464                           
  1465                           ;main.c: 656:     }
  1466  01A5  28B2               	goto	l2200
  1467  01A6                     __end_of_main:	
  1468                           
  1469                           	psect	text1
  1470  0491                     __ptext1:	
  1471 ;; *************** function _sendDataToAltera *****************
  1472 ;; Defined at:
  1473 ;;		line 303 in file "main.c"
  1474 ;; Parameters:    Size  Location     Type
  1475 ;;		None
  1476 ;; Auto vars:     Size  Location     Type
  1477 ;;  i               1    2[BANK0 ] char 
  1478 ;; Return value:  Size  Location     Type
  1479 ;;                  1    wreg      void 
  1480 ;; Registers used:
  1481 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1482 ;; Tracked objects:
  1483 ;;		On entry : 0/0
  1484 ;;		On exit  : 0/0
  1485 ;;		Unchanged: 0/0
  1486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1487 ;;      Params:         0       0       0       0
  1488 ;;      Locals:         0       3       0       0
  1489 ;;      Temps:          2       0       0       0
  1490 ;;      Totals:         2       3       0       0
  1491 ;;Total ram usage:        5 bytes
  1492 ;; Hardware stack levels used:    1
  1493 ;; Hardware stack levels required when called:    2
  1494 ;; This function calls:
  1495 ;;		_myDelay
  1496 ;; This function is called by:
  1497 ;;		_main
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           
  1502                           ;psect for function _sendDataToAltera
  1503  0491                     _sendDataToAltera:	
  1504                           
  1505                           ;main.c: 305:     RA2 = 1;
  1506                           
  1507                           ;incstack = 0
  1508                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1509  0491  1283               	bcf	3,5	;RP0=0, select bank0
  1510  0492  1303               	bcf	3,6	;RP1=0, select bank0
  1511  0493  1505               	bsf	5,2	;volatile
  1512                           
  1513                           ;main.c: 306:     RA1 = 0;
  1514  0494  1085               	bcf	5,1	;volatile
  1515                           
  1516                           ;main.c: 307:     myDelay();
  1517  0495  2566               	fcall	_myDelay
  1518                           
  1519                           ;main.c: 308:     RA1 = 1;
  1520  0496  1283               	bcf	3,5	;RP0=0, select bank0
  1521  0497  1303               	bcf	3,6	;RP1=0, select bank0
  1522  0498  1485               	bsf	5,1	;volatile
  1523                           
  1524                           ;main.c: 309:     myDelay();
  1525  0499  2566               	fcall	_myDelay
  1526                           
  1527                           ;main.c: 310:     RA1 = 0;
  1528  049A  1283               	bcf	3,5	;RP0=0, select bank0
  1529  049B  1303               	bcf	3,6	;RP1=0, select bank0
  1530  049C  1085               	bcf	5,1	;volatile
  1531                           
  1532                           ;main.c: 311:     myDelay();
  1533  049D  2566               	fcall	_myDelay
  1534                           
  1535                           ;main.c: 312:     for(int8_t i=0;i<11;i++) {
  1536  049E  1283               	bcf	3,5	;RP0=0, select bank0
  1537  049F  1303               	bcf	3,6	;RP1=0, select bank0
  1538  04A0  01C4               	clrf	sendDataToAltera@i
  1539  04A1  0844               	movf	sendDataToAltera@i,w
  1540  04A2  3A80               	xorlw	128
  1541  04A3  3E75               	addlw	-139
  1542  04A4  1803               	btfsc	3,0
  1543  04A5  2CD8               	goto	l1998
  1544  04A6                     l236:	
  1545                           
  1546                           ;main.c: 313:         RA2 = 1;
  1547  04A6  1505               	bsf	5,2	;volatile
  1548                           
  1549                           ;main.c: 314:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1550  04A7  0844               	movf	sendDataToAltera@i,w
  1551  04A8  3A80               	xorlw	128
  1552  04A9  3E78               	addlw	-136
  1553  04AA  1C03               	skipc
  1554  04AB  2CB7               	goto	l1980
  1555  04AC  0844               	movf	sendDataToAltera@i,w
  1556  04AD  3E61               	addlw	(low (_outPorts| 0))& (0+255)
  1557  04AE  0084               	movwf	4
  1558  04AF  1383               	bcf	3,7	;select IRP bank0
  1559  04B0  0800               	movf	0,w
  1560  04B1  00F4               	movwf	??_sendDataToAltera
  1561  04B2  01F5               	clrf	??_sendDataToAltera+1
  1562  04B3  0874               	movf	??_sendDataToAltera,w
  1563  04B4  00C2               	movwf	_sendDataToAltera$147
  1564  04B5  0875               	movf	??_sendDataToAltera+1,w
  1565  04B6  2CC1               	goto	L7
  1566  04B7                     l1980:	
  1567  04B7  0844               	movf	sendDataToAltera@i,w
  1568  04B8  3E61               	addlw	(low (_outPorts| 0))& (0+255)
  1569  04B9  0084               	movwf	4
  1570  04BA  1383               	bcf	3,7	;select IRP bank0
  1571  04BB  0800               	movf	0,w
  1572  04BC  00F4               	movwf	??_sendDataToAltera
  1573  04BD  01F5               	clrf	??_sendDataToAltera+1
  1574  04BE  0974               	comf	??_sendDataToAltera,w
  1575  04BF  00C2               	movwf	_sendDataToAltera$147
  1576  04C0  0975               	comf	??_sendDataToAltera+1,w
  1577  04C1                     L7:	
  1578  04C1  00C3               	movwf	_sendDataToAltera$147+1
  1579  04C2  0842               	movf	_sendDataToAltera$147,w
  1580  04C3  0086               	movwf	6	;volatile
  1581                           
  1582                           ;main.c: 315:         myDelay();
  1583  04C4  2566               	fcall	_myDelay
  1584                           
  1585                           ;main.c: 316:         RA2 = 0;
  1586  04C5  1283               	bcf	3,5	;RP0=0, select bank0
  1587  04C6  1303               	bcf	3,6	;RP1=0, select bank0
  1588  04C7  1105               	bcf	5,2	;volatile
  1589                           
  1590                           ;main.c: 317:         myDelay();
  1591  04C8  2566               	fcall	_myDelay
  1592                           
  1593                           ;main.c: 318:         RA2 = 1;
  1594  04C9  1283               	bcf	3,5	;RP0=0, select bank0
  1595  04CA  1303               	bcf	3,6	;RP1=0, select bank0
  1596  04CB  1505               	bsf	5,2	;volatile
  1597                           
  1598                           ;main.c: 319:         myDelay();
  1599  04CC  2566               	fcall	_myDelay
  1600                           
  1601                           ;main.c: 320:     }
  1602  04CD  3001               	movlw	1
  1603  04CE  00F4               	movwf	??_sendDataToAltera
  1604  04CF  0874               	movf	??_sendDataToAltera,w
  1605  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  1606  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  1607  04D2  07C4               	addwf	sendDataToAltera@i,f
  1608  04D3  0844               	movf	sendDataToAltera@i,w
  1609  04D4  3A80               	xorlw	128
  1610  04D5  3E75               	addlw	-139
  1611  04D6  1C03               	skipc
  1612  04D7  2CA6               	goto	l236
  1613  04D8                     l1998:	
  1614                           
  1615                           ;main.c: 321:     PORTB = 0xFF;
  1616  04D8  30FF               	movlw	255
  1617  04D9  0086               	movwf	6	;volatile
  1618  04DA  0008               	return
  1619  04DB                     __end_of_sendDataToAltera:	
  1620                           
  1621                           	psect	text2
  1622  0566                     __ptext2:	
  1623 ;; *************** function _myDelay *****************
  1624 ;; Defined at:
  1625 ;;		line 298 in file "main.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;		None
  1628 ;; Auto vars:     Size  Location     Type
  1629 ;;		None
  1630 ;; Return value:  Size  Location     Type
  1631 ;;                  1    wreg      void 
  1632 ;; Registers used:
  1633 ;;		None
  1634 ;; Tracked objects:
  1635 ;;		On entry : 0/0
  1636 ;;		On exit  : 0/0
  1637 ;;		Unchanged: 0/0
  1638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1639 ;;      Params:         0       0       0       0
  1640 ;;      Locals:         0       0       0       0
  1641 ;;      Temps:          0       0       0       0
  1642 ;;      Totals:         0       0       0       0
  1643 ;;Total ram usage:        0 bytes
  1644 ;; Hardware stack levels used:    1
  1645 ;; Hardware stack levels required when called:    1
  1646 ;; This function calls:
  1647 ;;		Nothing
  1648 ;; This function is called by:
  1649 ;;		_sendDataToAltera
  1650 ;; This function uses a non-reentrant model
  1651 ;;
  1652                           
  1653                           
  1654                           ;psect for function _myDelay
  1655  0566                     _myDelay:	
  1656                           
  1657                           ;incstack = 0
  1658                           ; Regs used in _myDelay: []
  1659  0566  0008               	return
  1660  0567                     __end_of_myDelay:	
  1661                           
  1662                           	psect	text3
  1663  02E0                     __ptext3:	
  1664 ;; *************** function _processKeyCode *****************
  1665 ;; Defined at:
  1666 ;;		line 324 in file "main.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;  keyCode         1    wreg     unsigned char 
  1669 ;;  keyDown         1   11[BANK0 ] unsigned char 
  1670 ;; Auto vars:     Size  Location     Type
  1671 ;;  keyCode         1   19[BANK0 ] unsigned char 
  1672 ;;  i               1   17[BANK0 ] char 
  1673 ;;  i               1   18[BANK0 ] char 
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      void 
  1676 ;; Registers used:
  1677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1683 ;;      Params:         0       1       0       0
  1684 ;;      Locals:         0       3       0       0
  1685 ;;      Temps:          0       5       0       0
  1686 ;;      Totals:         0       9       0       0
  1687 ;;Total ram usage:        9 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    3
  1690 ;; This function calls:
  1691 ;;		_calculateBitsFromTable
  1692 ;;		_updateKey
  1693 ;; This function is called by:
  1694 ;;		_main
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697                           
  1698                           
  1699                           ;psect for function _processKeyCode
  1700  02E0                     _processKeyCode:	
  1701                           
  1702                           ;incstack = 0
  1703                           ; Regs used in _processKeyCode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1704                           ;processKeyCode@keyCode stored from wreg
  1705  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  1706  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  1707  02E2  00D5               	movwf	processKeyCode@keyCode
  1708                           
  1709                           ;main.c: 324: void processKeyCode(uint8_t keyCode, uint8_t keyDown);main.c: 325: {;main.
      +                          c: 329:     calculateBitsFromTable(&keyCode, &keyDown, &shift_ctrl_alt, importantKeys, 6
      +                          , 0);
  1710  02E3  304D               	movlw	(low (processKeyCode@keyDown| 0))& (0+255)
  1711  02E4  00CE               	movwf	??_processKeyCode
  1712  02E5  084E               	movf	??_processKeyCode,w
  1713  02E6  00C2               	movwf	calculateBitsFromTable@keyDown
  1714  02E7  3040               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
  1715  02E8  00CF               	movwf	??_processKeyCode+1
  1716  02E9  084F               	movf	??_processKeyCode+1,w
  1717  02EA  00C3               	movwf	calculateBitsFromTable@bits
  1718  02EB  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
  1719  02EC  00D0               	movwf	??_processKeyCode+2
  1720  02ED  0850               	movf	??_processKeyCode+2,w
  1721  02EE  00C4               	movwf	calculateBitsFromTable@table
  1722  02EF  3006               	movlw	6
  1723  02F0  00D1               	movwf	??_processKeyCode+3
  1724  02F1  0851               	movf	??_processKeyCode+3,w
  1725  02F2  00C5               	movwf	calculateBitsFromTable@count
  1726  02F3  01C6               	clrf	calculateBitsFromTable@clearIfFound
  1727  02F4  3055               	movlw	(low (processKeyCode@keyCode| 0))& (0+255)
  1728  02F5  24DB               	fcall	_calculateBitsFromTable
  1729                           
  1730                           ;main.c: 331:     calculateBitsFromTable(&keyCode, &keyDown, &kempstonMouseEmulatorKeys,
      +                           kempstonMouseKeys, 6, numLock);
  1731  02F6  304D               	movlw	(low (processKeyCode@keyDown| 0))& (0+255)
  1732  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  1733  02F8  1303               	bcf	3,6	;RP1=0, select bank0
  1734  02F9  00CE               	movwf	??_processKeyCode
  1735  02FA  084E               	movf	??_processKeyCode,w
  1736  02FB  00C2               	movwf	calculateBitsFromTable@keyDown
  1737  02FC  3041               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
  1738  02FD  00CF               	movwf	??_processKeyCode+1
  1739  02FE  084F               	movf	??_processKeyCode+1,w
  1740  02FF  00C3               	movwf	calculateBitsFromTable@bits
  1741  0300  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
  1742  0301  00D0               	movwf	??_processKeyCode+2
  1743  0302  0850               	movf	??_processKeyCode+2,w
  1744  0303  00C4               	movwf	calculateBitsFromTable@table
  1745  0304  3006               	movlw	6
  1746  0305  00D1               	movwf	??_processKeyCode+3
  1747  0306  0851               	movf	??_processKeyCode+3,w
  1748  0307  00C5               	movwf	calculateBitsFromTable@count
  1749  0308  0836               	movf	_numLock,w
  1750  0309  00D2               	movwf	??_processKeyCode+4
  1751  030A  0852               	movf	??_processKeyCode+4,w
  1752  030B  00C6               	movwf	calculateBitsFromTable@clearIfFound
  1753  030C  3055               	movlw	(low (processKeyCode@keyCode| 0))& (0+255)
  1754  030D  24DB               	fcall	_calculateBitsFromTable
  1755                           
  1756                           ;main.c: 337:     if ( keyCode == 119 && keyDown ) {
  1757  030E  3077               	movlw	119
  1758  030F  1283               	bcf	3,5	;RP0=0, select bank0
  1759  0310  1303               	bcf	3,6	;RP1=0, select bank0
  1760  0311  0655               	xorwf	processKeyCode@keyCode,w
  1761  0312  1D03               	btfss	3,2
  1762  0313  2B20               	goto	l2008
  1763  0314  084D               	movf	processKeyCode@keyDown,w
  1764  0315  1903               	btfsc	3,2
  1765  0316  2B20               	goto	l2008
  1766                           
  1767                           ;main.c: 338:         numLock = !numLock;
  1768  0317  0836               	movf	_numLock,w
  1769  0318  1D03               	btfss	3,2
  1770  0319  2B1C               	goto	u2180
  1771  031A  3001               	movlw	1
  1772  031B  2B1D               	goto	u2190
  1773  031C                     u2180:	
  1774  031C  3000               	movlw	0
  1775  031D                     u2190:	
  1776  031D  00CE               	movwf	??_processKeyCode
  1777  031E  084E               	movf	??_processKeyCode,w
  1778  031F  00B6               	movwf	_numLock
  1779  0320                     l2008:	
  1780                           ;main.c: 339:     }
  1781                           
  1782                           
  1783                           ;main.c: 342:     if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 0 && keyCode
      +                           == 31 && keyDown ) {
  1784  0320  0840               	movf	_shift_ctrl_alt,w
  1785  0321  390C               	andlw	12
  1786  0322  1903               	btfsc	3,2
  1787  0323  2B34               	goto	l246
  1788  0324  0840               	movf	_shift_ctrl_alt,w
  1789  0325  3930               	andlw	48
  1790  0326  1903               	btfsc	3,2
  1791  0327  2B34               	goto	l246
  1792  0328  301F               	movlw	31
  1793  0329  0655               	xorwf	processKeyCode@keyCode,w
  1794  032A  1D03               	btfss	3,2
  1795  032B  2B34               	goto	l246
  1796  032C  084D               	movf	processKeyCode@keyDown,w
  1797  032D  1903               	btfsc	3,2
  1798  032E  2B34               	goto	l246
  1799                           
  1800                           ;main.c: 343:         outPorts[8] &= 253;
  1801  032F  30FD               	movlw	253
  1802  0330  00CE               	movwf	??_processKeyCode
  1803  0331  084E               	movf	??_processKeyCode,w
  1804  0332  05E9               	andwf	_outPorts+8,f
  1805                           
  1806                           ;main.c: 344:     } else {
  1807  0333  2B35               	goto	l2018
  1808  0334                     l246:	
  1809                           
  1810                           ;main.c: 345:         outPorts[8] |= 2;
  1811  0334  14E9               	bsf	_outPorts+8,1
  1812  0335                     l2018:	
  1813                           ;main.c: 346:     }
  1814                           
  1815                           
  1816                           ;main.c: 349:     if ( (shift_ctrl_alt & 12) > 0 && keyCode == 126 && keyDown ) {
  1817  0335  0840               	movf	_shift_ctrl_alt,w
  1818  0336  390C               	andlw	12
  1819  0337  1903               	btfsc	3,2
  1820  0338  2B45               	goto	l248
  1821  0339  307E               	movlw	126
  1822  033A  0655               	xorwf	processKeyCode@keyCode,w
  1823  033B  1D03               	btfss	3,2
  1824  033C  2B45               	goto	l248
  1825  033D  084D               	movf	processKeyCode@keyDown,w
  1826  033E  1903               	btfsc	3,2
  1827  033F  2B45               	goto	l248
  1828                           
  1829                           ;main.c: 350:         outPorts[8] &= 251;
  1830  0340  30FB               	movlw	251
  1831  0341  00CE               	movwf	??_processKeyCode
  1832  0342  084E               	movf	??_processKeyCode,w
  1833  0343  05E9               	andwf	_outPorts+8,f
  1834                           
  1835                           ;main.c: 351:     } else {
  1836  0344  2B46               	goto	l2026
  1837  0345                     l248:	
  1838                           
  1839                           ;main.c: 352:         outPorts[8] |= 4;
  1840  0345  1569               	bsf	_outPorts+8,2
  1841  0346                     l2026:	
  1842                           ;main.c: 353:     }
  1843                           
  1844                           
  1845                           ;main.c: 359:     for(int8_t i = 0; i < 41 ;i+=2) {
  1846  0346  01D4               	clrf	processKeyCode@i
  1847  0347  0854               	movf	processKeyCode@i,w
  1848  0348  3A80               	xorlw	128
  1849  0349  3E57               	addlw	-169
  1850  034A  1803               	btfsc	3,0
  1851  034B  2B7E               	goto	l2056
  1852  034C                     l2032:	
  1853                           
  1854                           ;main.c: 360:         if ( keyCode == replaceOnShiftKeyDown[i] ) {
  1855  034C  0854               	movf	processKeyCode@i,w
  1856  034D  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1857  034E  0084               	movwf	4
  1858  034F  2200               	fcall	stringdir
  1859  0350  0655               	xorwf	processKeyCode@keyCode,w
  1860  0351  1D03               	skipz
  1861  0352  2B75               	goto	l2052
  1862                           
  1863                           ;main.c: 361:             if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0) || replaced
      +                           == keyCode) {
  1864  0353  0840               	movf	_shift_ctrl_alt,w
  1865  0354  3903               	andlw	3
  1866  0355  1903               	btfsc	3,2
  1867  0356  2B5A               	goto	l2038
  1868  0357  0835               	movf	_replaced,w
  1869  0358  1903               	btfsc	3,2
  1870  0359  2B5E               	goto	l2040
  1871  035A                     l2038:	
  1872  035A  0835               	movf	_replaced,w
  1873  035B  0655               	xorwf	processKeyCode@keyCode,w
  1874  035C  1D03               	skipz
  1875  035D  2B70               	goto	l2048
  1876  035E                     l2040:	
  1877                           
  1878                           ;main.c: 362:                 if ( keyDown ) replaced = keyCode;
  1879  035E  084D               	movf	processKeyCode@keyDown,w
  1880  035F  1903               	btfsc	3,2
  1881  0360  2B66               	goto	l2044
  1882  0361  0855               	movf	processKeyCode@keyCode,w
  1883  0362  00CE               	movwf	??_processKeyCode
  1884  0363  084E               	movf	??_processKeyCode,w
  1885  0364  00B5               	movwf	_replaced
  1886  0365  2B67               	goto	l2046
  1887  0366                     l2044:	
  1888                           ;main.c: 363:                 else replaced = 0;
  1889                           
  1890  0366  01B5               	clrf	_replaced
  1891  0367                     l2046:	
  1892                           
  1893                           ;main.c: 364:                 keyCode = replaceOnShiftKeyDown[i+1];
  1894  0367  0854               	movf	processKeyCode@i,w
  1895  0368  3E01               	addlw	1
  1896  0369  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1897  036A  0084               	movwf	4
  1898  036B  2200               	fcall	stringdir
  1899  036C  00CE               	movwf	??_processKeyCode
  1900  036D  084E               	movf	??_processKeyCode,w
  1901  036E  00D5               	movwf	processKeyCode@keyCode
  1902                           
  1903                           ;main.c: 365:             } else {
  1904  036F  2B7E               	goto	l2056
  1905  0370                     l2048:	
  1906                           
  1907                           ;main.c: 366:                 if ( replaced != 0 ) keyCode = 0;
  1908  0370  0835               	movf	_replaced,w
  1909  0371  1903               	btfsc	3,2
  1910  0372  2B7E               	goto	l2056
  1911  0373  01D5               	clrf	processKeyCode@keyCode
  1912                           
  1913                           ;main.c: 368:             break;
  1914                           
  1915                           ;main.c: 367:             }
  1916  0374  2B7E               	goto	l2056
  1917  0375                     l2052:	
  1918                           ;main.c: 369:         }
  1919                           
  1920                           
  1921                           ;main.c: 370:     }
  1922  0375  3002               	movlw	2
  1923  0376  00CE               	movwf	??_processKeyCode
  1924  0377  084E               	movf	??_processKeyCode,w
  1925  0378  07D4               	addwf	processKeyCode@i,f
  1926  0379  0854               	movf	processKeyCode@i,w
  1927  037A  3A80               	xorlw	128
  1928  037B  3E57               	addlw	-169
  1929  037C  1C03               	skipc
  1930  037D  2B4C               	goto	l2032
  1931  037E                     l2056:	
  1932                           
  1933                           ;main.c: 374:     for(int8_t i = 0; i < 8; i++) {
  1934  037E  01D3               	clrf	processKeyCode@i_153
  1935  037F  0853               	movf	processKeyCode@i_153,w
  1936  0380  3A80               	xorlw	128
  1937  0381  3E78               	addlw	-136
  1938  0382  1803               	btfsc	3,0
  1939  0383  2BAA               	goto	l2076
  1940  0384                     l2062:	
  1941                           
  1942                           ;main.c: 375:         if ( keyCode == replaceOnDelayKeyDown[i] && keyDown ) {
  1943  0384  0853               	movf	processKeyCode@i_153,w
  1944  0385  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
  1945  0386  0084               	movwf	4
  1946  0387  2200               	fcall	stringdir
  1947  0388  0655               	xorwf	processKeyCode@keyCode,w
  1948  0389  1D03               	skipz
  1949  038A  2BA1               	goto	l2072
  1950  038B  084D               	movf	processKeyCode@keyDown,w
  1951  038C  1903               	btfsc	3,2
  1952  038D  2BA1               	goto	l2072
  1953                           
  1954                           ;main.c: 376:             if ( delay == 0 ) {
  1955  038E  0832               	movf	_delay,w
  1956  038F  0433               	iorwf	_delay+1,w
  1957  0390  1D03               	btfss	3,2
  1958  0391  2B9F               	goto	l2070
  1959                           
  1960                           ;main.c: 377:                 delayedKey = keyCode;
  1961  0392  0855               	movf	processKeyCode@keyCode,w
  1962  0393  00CE               	movwf	??_processKeyCode
  1963  0394  084E               	movf	??_processKeyCode,w
  1964  0395  00B4               	movwf	_delayedKey
  1965                           
  1966                           ;main.c: 378:                 delay = 2600;
  1967  0396  3028               	movlw	40
  1968  0397  00B2               	movwf	_delay
  1969  0398  300A               	movlw	10
  1970  0399  00B3               	movwf	_delay+1
  1971                           
  1972                           ;main.c: 379:                 keyCode = 111;
  1973  039A  306F               	movlw	111
  1974  039B  00CE               	movwf	??_processKeyCode
  1975  039C  084E               	movf	??_processKeyCode,w
  1976  039D  00D5               	movwf	processKeyCode@keyCode
  1977                           
  1978                           ;main.c: 380:             } else {
  1979  039E  2BAA               	goto	l2076
  1980  039F                     l2070:	
  1981                           
  1982                           ;main.c: 381:                 keyCode = 0;
  1983  039F  01D5               	clrf	processKeyCode@keyCode
  1984                           
  1985                           ;main.c: 383:             break;
  1986                           
  1987                           ;main.c: 382:             }
  1988  03A0  2BAA               	goto	l2076
  1989  03A1                     l2072:	
  1990                           ;main.c: 384:         }
  1991                           
  1992                           
  1993                           ;main.c: 385:     }
  1994  03A1  3001               	movlw	1
  1995  03A2  00CE               	movwf	??_processKeyCode
  1996  03A3  084E               	movf	??_processKeyCode,w
  1997  03A4  07D3               	addwf	processKeyCode@i_153,f
  1998  03A5  0853               	movf	processKeyCode@i_153,w
  1999  03A6  3A80               	xorlw	128
  2000  03A7  3E78               	addlw	-136
  2001  03A8  1C03               	skipc
  2002  03A9  2B84               	goto	l2062
  2003  03AA                     l2076:	
  2004                           
  2005                           ;main.c: 389:     updateKey(keyCode, keyDown );
  2006  03AA  084D               	movf	processKeyCode@keyDown,w
  2007  03AB  00CE               	movwf	??_processKeyCode
  2008  03AC  084E               	movf	??_processKeyCode,w
  2009  03AD  00C7               	movwf	updateKey@down
  2010  03AE  0855               	movf	processKeyCode@keyCode,w
  2011  03AF  243E               	fcall	_updateKey
  2012  03B0  0008               	return
  2013  03B1                     __end_of_processKeyCode:	
  2014                           
  2015                           	psect	text4
  2016  043E                     __ptext4:	
  2017 ;; *************** function _updateKey *****************
  2018 ;; Defined at:
  2019 ;;		line 280 in file "main.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  key             1    wreg     unsigned char 
  2022 ;;  down            1    5[BANK0 ] unsigned char 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  key             1    6[BANK0 ] unsigned char 
  2025 ;;  code            1   10[BANK0 ] unsigned char 
  2026 ;;  localCtrl       1    9[BANK0 ] unsigned char 
  2027 ;;  localShift      1    7[BANK0 ] unsigned char 
  2028 ;; Return value:  Size  Location     Type
  2029 ;;                  1    wreg      void 
  2030 ;; Registers used:
  2031 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2032 ;; Tracked objects:
  2033 ;;		On entry : 0/0
  2034 ;;		On exit  : 0/0
  2035 ;;		Unchanged: 0/0
  2036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2037 ;;      Params:         0       1       0       0
  2038 ;;      Locals:         0       5       0       0
  2039 ;;      Temps:          1       0       0       0
  2040 ;;      Totals:         1       6       0       0
  2041 ;;Total ram usage:        7 bytes
  2042 ;; Hardware stack levels used:    1
  2043 ;; Hardware stack levels required when called:    2
  2044 ;; This function calls:
  2045 ;;		_updatePort
  2046 ;; This function is called by:
  2047 ;;		_processKeyCode
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           
  2052                           ;psect for function _updateKey
  2053  043E                     _updateKey:	
  2054                           
  2055                           ;incstack = 0
  2056                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2057                           ;updateKey@key stored from wreg
  2058  043E  1283               	bcf	3,5	;RP0=0, select bank0
  2059  043F  1303               	bcf	3,6	;RP1=0, select bank0
  2060  0440  00C8               	movwf	updateKey@key
  2061                           
  2062                           ;main.c: 280: void updateKey(uint8_t key, uint8_t down);main.c: 281: {;main.c: 282:     
      +                          uint8_t code = 0xFF;
  2063  0441  30FF               	movlw	255
  2064  0442  00F5               	movwf	??_updateKey
  2065  0443  0875               	movf	??_updateKey,w
  2066  0444  00CC               	movwf	updateKey@code
  2067                           
  2068                           ;main.c: 283:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  2069  0445  01CA               	clrf	_updateKey$140
  2070  0446  0840               	movf	_shift_ctrl_alt,w
  2071  0447  3903               	andlw	3
  2072  0448  1903               	btfsc	3,2
  2073  0449  2C4F               	goto	l1944
  2074  044A  0835               	movf	_replaced,w
  2075  044B  1D03               	btfss	3,2
  2076  044C  2C4F               	goto	l1944
  2077  044D  01CA               	clrf	_updateKey$140
  2078  044E  0ACA               	incf	_updateKey$140,f
  2079  044F                     l1944:	
  2080  044F  084A               	movf	_updateKey$140,w
  2081  0450  00F5               	movwf	??_updateKey
  2082  0451  0875               	movf	??_updateKey,w
  2083  0452  00C9               	movwf	updateKey@localShift
  2084                           
  2085                           ;main.c: 284:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  2086  0453  0840               	movf	_shift_ctrl_alt,w
  2087  0454  390C               	andlw	12
  2088  0455  1903               	btfsc	3,2
  2089  0456  2C59               	goto	u2050
  2090  0457  3001               	movlw	1
  2091  0458  2C5A               	goto	u2060
  2092  0459                     u2050:	
  2093  0459  3000               	movlw	0
  2094  045A                     u2060:	
  2095  045A  00F5               	movwf	??_updateKey
  2096  045B  0875               	movf	??_updateKey,w
  2097  045C  00CB               	movwf	updateKey@localCtrl
  2098                           
  2099                           ;main.c: 285:     code = codeToMatrix[key];
  2100  045D  0848               	movf	updateKey@key,w
  2101  045E  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  2102  045F  0084               	movwf	4
  2103  0460  2200               	fcall	stringdir
  2104  0461  00F5               	movwf	??_updateKey
  2105  0462  0875               	movf	??_updateKey,w
  2106  0463  00CC               	movwf	updateKey@code
  2107                           
  2108                           ;main.c: 286:     if ( code != 0xFF ) {
  2109  0464  0A4C               	incf	updateKey@code,w
  2110  0465  1903               	btfsc	3,2
  2111  0466  2C7F               	goto	l1958
  2112                           
  2113                           ;main.c: 287:         updatePort(code, down);
  2114  0467  0847               	movf	updateKey@down,w
  2115  0468  00F5               	movwf	??_updateKey
  2116  0469  0875               	movf	??_updateKey,w
  2117  046A  00F4               	movwf	updatePort@set
  2118  046B  084C               	movf	updateKey@code,w
  2119  046C  2520               	fcall	_updatePort
  2120                           
  2121                           ;main.c: 288:         localShift |= ((code & 64) > 0);
  2122  046D  1283               	bcf	3,5	;RP0=0, select bank0
  2123  046E  1303               	bcf	3,6	;RP1=0, select bank0
  2124  046F  1F4C               	btfss	updateKey@code,6
  2125  0470  2C73               	goto	u2080
  2126  0471  3001               	movlw	1
  2127  0472  2C74               	goto	u2090
  2128  0473                     u2080:	
  2129  0473  3000               	movlw	0
  2130  0474                     u2090:	
  2131  0474  00F5               	movwf	??_updateKey
  2132  0475  0875               	movf	??_updateKey,w
  2133  0476  04C9               	iorwf	updateKey@localShift,f
  2134                           
  2135                           ;main.c: 289:         localCtrl |= ((code & 128) > 0);
  2136  0477  1FCC               	btfss	updateKey@code,7
  2137  0478  2C7B               	goto	u2100
  2138  0479  3001               	movlw	1
  2139  047A  2C7C               	goto	u2110
  2140  047B                     u2100:	
  2141  047B  3000               	movlw	0
  2142  047C                     u2110:	
  2143  047C  00F5               	movwf	??_updateKey
  2144  047D  0875               	movf	??_updateKey,w
  2145  047E  04CB               	iorwf	updateKey@localCtrl,f
  2146  047F                     l1958:	
  2147                           ;main.c: 290:     }
  2148                           
  2149                           
  2150                           ;main.c: 291:     if ( down ) {
  2151  047F  0847               	movf	updateKey@down,w
  2152  0480  1903               	btfsc	3,2
  2153  0481  0008               	return
  2154                           
  2155                           ;main.c: 292:         updatePort(0x00, localShift );
  2156  0482  0849               	movf	updateKey@localShift,w
  2157  0483  00F5               	movwf	??_updateKey
  2158  0484  0875               	movf	??_updateKey,w
  2159  0485  00F4               	movwf	updatePort@set
  2160  0486  3000               	movlw	0
  2161  0487  2520               	fcall	_updatePort
  2162                           
  2163                           ;main.c: 293:         updatePort(0x0F, localCtrl );
  2164  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2165  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2166  048A  084B               	movf	updateKey@localCtrl,w
  2167  048B  00F5               	movwf	??_updateKey
  2168  048C  0875               	movf	??_updateKey,w
  2169  048D  00F4               	movwf	updatePort@set
  2170  048E  300F               	movlw	15
  2171  048F  2520               	fcall	_updatePort
  2172  0490  0008               	return
  2173  0491                     __end_of_updateKey:	
  2174                           ;main.c: 294:     }
  2175                           
  2176                           
  2177                           	psect	text5
  2178  0520                     __ptext5:	
  2179 ;; *************** function _updatePort *****************
  2180 ;; Defined at:
  2181 ;;		line 254 in file "main.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  bit_id          1    wreg     unsigned char 
  2184 ;;  set             1    4[COMMON] unsigned char 
  2185 ;; Auto vars:     Size  Location     Type
  2186 ;;  bit_id          1    4[BANK0 ] unsigned char 
  2187 ;;  a               1    3[BANK0 ] unsigned char 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2197 ;;      Params:         1       0       0       0
  2198 ;;      Locals:         0       2       0       0
  2199 ;;      Temps:          0       3       0       0
  2200 ;;      Totals:         1       5       0       0
  2201 ;;Total ram usage:        6 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    1
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_updateKey
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function _updatePort
  2213  0520                     _updatePort:	
  2214                           
  2215                           ;incstack = 0
  2216                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  2217                           ;updatePort@bit_id stored from wreg
  2218  0520  1283               	bcf	3,5	;RP0=0, select bank0
  2219  0521  1303               	bcf	3,6	;RP1=0, select bank0
  2220  0522  00C6               	movwf	updatePort@bit_id
  2221                           
  2222                           ;main.c: 254: void updatePort(uint8_t bit_id, uint8_t set);main.c: 255: {;main.c: 256:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  2223  0523  3001               	movlw	1
  2224  0524  00C2               	movwf	??_updatePort
  2225  0525  0846               	movf	updatePort@bit_id,w
  2226  0526  00C3               	movwf	??_updatePort+1
  2227  0527  3003               	movlw	3
  2228  0528                     u1945:	
  2229  0528  1003               	clrc
  2230  0529  0CC3               	rrf	??_updatePort+1,f
  2231  052A  3EFF               	addlw	-1
  2232  052B  1D03               	skipz
  2233  052C  2D28               	goto	u1945
  2234  052D  0843               	movf	??_updatePort+1,w
  2235  052E  3907               	andlw	7
  2236  052F  3E01               	addlw	1
  2237  0530  2D33               	goto	u1954
  2238  0531                     u1955:	
  2239  0531  1003               	clrc
  2240  0532  0DC2               	rlf	??_updatePort,f
  2241  0533                     u1954:	
  2242  0533  3EFF               	addlw	-1
  2243  0534  1D03               	skipz
  2244  0535  2D31               	goto	u1955
  2245  0536  0842               	movf	??_updatePort,w
  2246  0537  00C4               	movwf	??_updatePort+2
  2247  0538  0844               	movf	??_updatePort+2,w
  2248  0539  00C5               	movwf	updatePort@a
  2249                           
  2250                           ;main.c: 257:     if ( set ) outPorts[bit_id & 7] |= a;
  2251  053A  0874               	movf	updatePort@set,w
  2252  053B  1903               	btfsc	3,2
  2253  053C  2D47               	goto	l1916
  2254  053D  0845               	movf	updatePort@a,w
  2255  053E  00C2               	movwf	??_updatePort
  2256  053F  0846               	movf	updatePort@bit_id,w
  2257  0540  3907               	andlw	7
  2258  0541  3E61               	addlw	(low (_outPorts| 0))& (0+255)
  2259  0542  0084               	movwf	4
  2260  0543  0842               	movf	??_updatePort,w
  2261  0544  1383               	bcf	3,7	;select IRP bank0
  2262  0545  0480               	iorwf	0,f
  2263  0546  0008               	return
  2264  0547                     l1916:	
  2265                           ;main.c: 258:     else outPorts[bit_id & 7] &= ~a;
  2266                           
  2267  0547  0945               	comf	updatePort@a,w
  2268  0548  00C2               	movwf	??_updatePort
  2269  0549  0846               	movf	updatePort@bit_id,w
  2270  054A  3907               	andlw	7
  2271  054B  3E61               	addlw	(low (_outPorts| 0))& (0+255)
  2272  054C  0084               	movwf	4
  2273  054D  0842               	movf	??_updatePort,w
  2274  054E  1383               	bcf	3,7	;select IRP bank0
  2275  054F  0580               	andwf	0,f
  2276  0550  0008               	return
  2277  0551                     __end_of_updatePort:	
  2278                           
  2279                           	psect	text6
  2280  04DB                     __ptext6:	
  2281 ;; *************** function _calculateBitsFromTable *****************
  2282 ;; Defined at:
  2283 ;;		line 262 in file "main.c"
  2284 ;; Parameters:    Size  Location     Type
  2285 ;;  keyCode         1    wreg     PTR unsigned char 
  2286 ;;		 -> processKeyCode@keyCode(1), 
  2287 ;;  keyDown         1    0[BANK0 ] PTR unsigned char 
  2288 ;;		 -> processKeyCode@keyDown(1), 
  2289 ;;  bits            1    1[BANK0 ] PTR unsigned char 
  2290 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  2291 ;;  table           1    2[BANK0 ] PTR unsigned char 
  2292 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  2293 ;;  count           1    3[BANK0 ] unsigned char 
  2294 ;;  clearIfFound    1    4[BANK0 ] unsigned char 
  2295 ;; Auto vars:     Size  Location     Type
  2296 ;;  keyCode         1    5[BANK0 ] PTR unsigned char 
  2297 ;;		 -> processKeyCode@keyCode(1), 
  2298 ;;  i               1    6[BANK0 ] unsigned char 
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  1    wreg      void 
  2301 ;; Registers used:
  2302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2308 ;;      Params:         0       5       0       0
  2309 ;;      Locals:         0       2       0       0
  2310 ;;      Temps:          2       0       0       0
  2311 ;;      Totals:         2       7       0       0
  2312 ;;Total ram usage:        9 bytes
  2313 ;; Hardware stack levels used:    2
  2314 ;; Hardware stack levels required when called:    1
  2315 ;; This function calls:
  2316 ;;		Nothing
  2317 ;; This function is called by:
  2318 ;;		_processKeyCode
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321                           
  2322                           
  2323                           ;psect for function _calculateBitsFromTable
  2324  04DB                     _calculateBitsFromTable:	
  2325                           
  2326                           ;incstack = 0
  2327                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  2328                           ;calculateBitsFromTable@keyCode stored from wreg
  2329  04DB  1283               	bcf	3,5	;RP0=0, select bank0
  2330  04DC  1303               	bcf	3,6	;RP1=0, select bank0
  2331  04DD  00C7               	movwf	calculateBitsFromTable@keyCode
  2332                           
  2333                           ;main.c: 262: void calculateBitsFromTable(uint8_t* keyCode, uint8_t* keyDown, uint8_t* b
      +                          its, uint8_t table[], uint8_t count, uint8_t clearIfFound);main.c: 263: {;main.c: 264:  
      +                             for(uint8_t i = 0; i < count;i++) {
  2334  04DE  01C8               	clrf	calculateBitsFromTable@i
  2335  04DF                     l1934:	
  2336  04DF  0845               	movf	calculateBitsFromTable@count,w
  2337  04E0  0248               	subwf	calculateBitsFromTable@i,w
  2338  04E1  1803               	btfsc	3,0
  2339  04E2  0008               	return
  2340                           
  2341                           ;main.c: 265:         if ( (*keyCode) == table[i] ) {
  2342  04E3  0848               	movf	calculateBitsFromTable@i,w
  2343  04E4  0744               	addwf	calculateBitsFromTable@table,w
  2344  04E5  0084               	movwf	4
  2345  04E6  2200               	fcall	stringdir
  2346  04E7  00F4               	movwf	??_calculateBitsFromTable
  2347  04E8  0847               	movf	calculateBitsFromTable@keyCode,w
  2348  04E9  0084               	movwf	4
  2349  04EA  1383               	bcf	3,7	;select IRP bank0
  2350  04EB  0800               	movf	0,w
  2351  04EC  0674               	xorwf	??_calculateBitsFromTable,w
  2352  04ED  1D03               	skipz
  2353  04EE  2D1B               	goto	l1932
  2354                           
  2355                           ;main.c: 266:             if ( (*keyDown) ) {
  2356  04EF  0842               	movf	calculateBitsFromTable@keyDown,w
  2357  04F0  0084               	movwf	4
  2358  04F1  0800               	movf	0,w
  2359  04F2  1903               	btfsc	3,2
  2360  04F3  2D04               	goto	l1926
  2361                           
  2362                           ;main.c: 267:                 (*bits) |= (1 << i);
  2363  04F4  3001               	movlw	1
  2364  04F5  00F4               	movwf	??_calculateBitsFromTable
  2365  04F6  0A48               	incf	calculateBitsFromTable@i,w
  2366  04F7  2CFA               	goto	u1994
  2367  04F8                     u1995:	
  2368  04F8  1003               	clrc
  2369  04F9  0DF4               	rlf	??_calculateBitsFromTable,f
  2370  04FA                     u1994:	
  2371  04FA  3EFF               	addlw	-1
  2372  04FB  1D03               	skipz
  2373  04FC  2CF8               	goto	u1995
  2374  04FD  0874               	movf	??_calculateBitsFromTable,w
  2375  04FE  00F5               	movwf	??_calculateBitsFromTable+1
  2376  04FF  0843               	movf	calculateBitsFromTable@bits,w
  2377  0500  0084               	movwf	4
  2378  0501  0875               	movf	??_calculateBitsFromTable+1,w
  2379  0502  0480               	iorwf	0,f
  2380                           
  2381                           ;main.c: 268:             } else {
  2382  0503  2D14               	goto	l1928
  2383  0504                     l1926:	
  2384                           
  2385                           ;main.c: 269:                 (*bits) &= ~(1 << i);
  2386  0504  3001               	movlw	1
  2387  0505  00F4               	movwf	??_calculateBitsFromTable
  2388  0506  0A48               	incf	calculateBitsFromTable@i,w
  2389  0507  2D0A               	goto	u2004
  2390  0508                     u2005:	
  2391  0508  1003               	clrc
  2392  0509  0DF4               	rlf	??_calculateBitsFromTable,f
  2393  050A                     u2004:	
  2394  050A  3EFF               	addlw	-1
  2395  050B  1D03               	skipz
  2396  050C  2D08               	goto	u2005
  2397  050D  0874               	movf	??_calculateBitsFromTable,w
  2398  050E  3AFF               	xorlw	255
  2399  050F  00F5               	movwf	??_calculateBitsFromTable+1
  2400  0510  0843               	movf	calculateBitsFromTable@bits,w
  2401  0511  0084               	movwf	4
  2402  0512  0875               	movf	??_calculateBitsFromTable+1,w
  2403  0513  0580               	andwf	0,f
  2404  0514                     l1928:	
  2405                           ;main.c: 270:             }
  2406                           
  2407                           
  2408                           ;main.c: 271:             if ( clearIfFound ) {
  2409  0514  0846               	movf	calculateBitsFromTable@clearIfFound,w
  2410  0515  1903               	btfsc	3,2
  2411  0516  0008               	return
  2412                           
  2413                           ;main.c: 272:                 (*keyCode) = 0;
  2414  0517  0847               	movf	calculateBitsFromTable@keyCode,w
  2415  0518  0084               	movwf	4
  2416  0519  0180               	clrf	0
  2417                           
  2418                           ;main.c: 274:             break;
  2419                           
  2420                           ;main.c: 273:             }
  2421  051A  0008               	return
  2422  051B                     l1932:	
  2423                           ;main.c: 275:         }
  2424                           
  2425                           
  2426                           ;main.c: 276:     }
  2427  051B  3001               	movlw	1
  2428  051C  00F4               	movwf	??_calculateBitsFromTable
  2429  051D  0874               	movf	??_calculateBitsFromTable,w
  2430  051E  07C8               	addwf	calculateBitsFromTable@i,f
  2431  051F  2CDF               	goto	l1934
  2432  0520                     __end_of_calculateBitsFromTable:	
  2433                           
  2434                           	psect	text7
  2435  03B1                     __ptext7:	
  2436 ;; *************** function _myIsr *****************
  2437 ;; Defined at:
  2438 ;;		line 153 in file "main.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;		None
  2443 ;; Return value:  Size  Location     Type
  2444 ;;                  1    wreg      void 
  2445 ;; Registers used:
  2446 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2447 ;; Tracked objects:
  2448 ;;		On entry : 0/0
  2449 ;;		On exit  : 0/0
  2450 ;;		Unchanged: 0/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2452 ;;      Params:         0       0       0       0
  2453 ;;      Locals:         0       0       0       0
  2454 ;;      Temps:          4       0       0       0
  2455 ;;      Totals:         4       0       0       0
  2456 ;;Total ram usage:        4 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		Interrupt level 1
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           
  2466                           ;psect for function _myIsr
  2467  03B1                     _myIsr:	
  2468                           
  2469                           ;main.c: 155:     if(T0IE && T0IF){
  2470  03B1  1A8B               	btfsc	11,5	;volatile
  2471  03B2  1D0B               	btfss	11,2	;volatile
  2472  03B3  2C35               	goto	i1l199
  2473                           
  2474                           ;main.c: 156:         if ( ps2DataState == 2 ) {
  2475  03B4  3002               	movlw	2
  2476  03B5  0679               	xorwf	_ps2DataState,w
  2477  03B6  1D03               	btfss	3,2
  2478  03B7  2BE0               	goto	i1l1618
  2479                           
  2480                           ;main.c: 158:             if ( ps2BitsCount < 8 ) {
  2481  03B8  3008               	movlw	8
  2482  03B9  0276               	subwf	_ps2BitsCount,w
  2483  03BA  1803               	skipnc
  2484  03BB  2BCD               	goto	i1l1610
  2485                           
  2486                           ;main.c: 159:                 RA3 = ps2Bits & 1;
  2487  03BC  1C78               	btfss	_ps2Bits,0
  2488  03BD  2BC2               	goto	u152_20
  2489  03BE  1283               	bcf	3,5	;RP0=0, select bank0
  2490  03BF  1303               	bcf	3,6	;RP1=0, select bank0
  2491  03C0  1585               	bsf	5,3	;volatile
  2492  03C1  2BC5               	goto	i1l1606
  2493  03C2                     u152_20:	
  2494  03C2  1283               	bcf	3,5	;RP0=0, select bank0
  2495  03C3  1303               	bcf	3,6	;RP1=0, select bank0
  2496  03C4  1185               	bcf	5,3	;volatile
  2497  03C5                     i1l1606:	
  2498                           
  2499                           ;main.c: 160:                 ps2Parity ^= ps2Bits & 1;
  2500  03C5  0878               	movf	_ps2Bits,w
  2501  03C6  3901               	andlw	1
  2502  03C7  00F0               	movwf	??_myIsr
  2503  03C8  0870               	movf	??_myIsr,w
  2504  03C9  06F7               	xorwf	_ps2Parity,f
  2505                           
  2506                           ;main.c: 161:                 ps2Bits >>= 1;
  2507  03CA  1003               	clrc
  2508  03CB  0CF8               	rrf	_ps2Bits,f
  2509                           
  2510                           ;main.c: 162:             } else if (ps2BitsCount == 8 ) {
  2511  03CC  2BF3               	goto	i1l1632
  2512  03CD                     i1l1610:	
  2513  03CD  3008               	movlw	8
  2514  03CE  0676               	xorwf	_ps2BitsCount,w
  2515  03CF  1D03               	btfss	3,2
  2516  03D0  2BDB               	goto	i1l183
  2517                           
  2518                           ;main.c: 164:                 RA3 = ps2Parity;
  2519  03D1  1C77               	btfss	_ps2Parity,0
  2520  03D2  2BD7               	goto	u155_20
  2521  03D3  1283               	bcf	3,5	;RP0=0, select bank0
  2522  03D4  1303               	bcf	3,6	;RP1=0, select bank0
  2523  03D5  1585               	bsf	5,3	;volatile
  2524  03D6  2BF3               	goto	i1l1632
  2525  03D7                     u155_20:	
  2526  03D7  1283               	bcf	3,5	;RP0=0, select bank0
  2527  03D8  1303               	bcf	3,6	;RP1=0, select bank0
  2528  03D9  1185               	bcf	5,3	;volatile
  2529                           
  2530                           ;main.c: 165:             } else {
  2531  03DA  2BF3               	goto	i1l1632
  2532  03DB                     i1l183:	
  2533                           
  2534                           ;main.c: 166:                 RA3 = 1;
  2535  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  2536  03DC  1303               	bcf	3,6	;RP1=0, select bank0
  2537  03DD  1585               	bsf	5,3	;volatile
  2538                           
  2539                           ;main.c: 167:                 ps2DataState = 0;
  2540  03DE  01F9               	clrf	_ps2DataState
  2541                           
  2542                           ;main.c: 168:             }
  2543  03DF  2BF3               	goto	i1l1632
  2544  03E0                     i1l1618:	
  2545                           ;main.c: 171:         } else if ( ps2DataState == 1 ) {
  2546                           
  2547                           ;main.c: 169:             ps2BitsCount++;
  2548                           
  2549  03E0  0379               	decf	_ps2DataState,w
  2550  03E1  1D03               	btfss	3,2
  2551  03E2  2C20               	goto	i1l1648
  2552                           
  2553                           ;main.c: 172:             if ( ps2BitsCount < 8 ) {
  2554  03E3  3008               	movlw	8
  2555  03E4  0276               	subwf	_ps2BitsCount,w
  2556  03E5  1803               	skipnc
  2557  03E6  2BEF               	goto	i1l1630
  2558                           
  2559                           ;main.c: 173:                 ps2Bits >>= 1;
  2560  03E7  1003               	clrc
  2561  03E8  0CF8               	rrf	_ps2Bits,f
  2562                           
  2563                           ;main.c: 174:                 if ( RA3 ) ps2Bits |= 128;
  2564  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  2565  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  2566  03EB  1D85               	btfss	5,3	;volatile
  2567  03EC  2BF3               	goto	i1l1632
  2568  03ED  17F8               	bsf	_ps2Bits,7
  2569  03EE  2BF3               	goto	i1l1632
  2570  03EF                     i1l1630:	
  2571                           ;main.c: 176:             } else if ( ps2BitsCount == 8 ) {
  2572                           
  2573                           ;main.c: 175:                 ps2BitsCount++;
  2574                           
  2575  03EF  3008               	movlw	8
  2576  03F0  0676               	xorwf	_ps2BitsCount,w
  2577  03F1  1D03               	btfss	3,2
  2578  03F2  2BF8               	goto	i1l1634
  2579  03F3                     i1l1632:	
  2580                           
  2581                           ;main.c: 177:                 ps2BitsCount++;
  2582  03F3  3001               	movlw	1
  2583  03F4  00F0               	movwf	??_myIsr
  2584  03F5  0870               	movf	??_myIsr,w
  2585  03F6  07F6               	addwf	_ps2BitsCount,f
  2586                           
  2587                           ;main.c: 178:             } else if ( ps2BitsCount == 9 ) {
  2588  03F7  2C30               	goto	i1l1660
  2589  03F8                     i1l1634:	
  2590  03F8  3009               	movlw	9
  2591  03F9  0676               	xorwf	_ps2BitsCount,w
  2592  03FA  1D03               	btfss	3,2
  2593  03FB  2C30               	goto	i1l1660
  2594                           
  2595                           ;main.c: 181:                 if ( ps2Device == 0 ) {
  2596  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  2597  03FD  1303               	bcf	3,6	;RP1=0, select bank0
  2598  03FE  083D               	movf	_ps2Device,w
  2599  03FF  1D03               	btfss	3,2
  2600  0400  2C10               	goto	i1l1642
  2601                           
  2602                           ;main.c: 182:                     inDataA[inDataAPos] = ps2Bits;
  2603  0401  0878               	movf	_ps2Bits,w
  2604  0402  00F0               	movwf	??_myIsr
  2605  0403  083A               	movf	_inDataAPos,w
  2606  0404  3E28               	addlw	(low (_inDataA| 0))& (0+255)
  2607  0405  0084               	movwf	4
  2608  0406  0870               	movf	??_myIsr,w
  2609  0407  1383               	bcf	3,7	;select IRP bank0
  2610  0408  0080               	movwf	0
  2611                           
  2612                           ;main.c: 183:                     inDataAPos = (inDataAPos+1) & 7;
  2613  0409  083A               	movf	_inDataAPos,w
  2614  040A  3E01               	addlw	1
  2615  040B  3907               	andlw	7
  2616  040C  00F0               	movwf	??_myIsr
  2617  040D  0870               	movf	??_myIsr,w
  2618  040E  00BA               	movwf	_inDataAPos
  2619                           
  2620                           ;main.c: 184:                 } else {
  2621  040F  2C1E               	goto	i1l1646
  2622  0410                     i1l1642:	
  2623                           
  2624                           ;main.c: 185:                     inDataB[inDataBPos] = ps2Bits;
  2625  0410  0878               	movf	_ps2Bits,w
  2626  0411  00F0               	movwf	??_myIsr
  2627  0412  0838               	movf	_inDataBPos,w
  2628  0413  3E20               	addlw	(low (_inDataB| 0))& (0+255)
  2629  0414  0084               	movwf	4
  2630  0415  0870               	movf	??_myIsr,w
  2631  0416  1383               	bcf	3,7	;select IRP bank0
  2632  0417  0080               	movwf	0
  2633                           
  2634                           ;main.c: 186:                     inDataBPos = (inDataBPos+1) & 7;
  2635  0418  0838               	movf	_inDataBPos,w
  2636  0419  3E01               	addlw	1
  2637  041A  3907               	andlw	7
  2638  041B  00F0               	movwf	??_myIsr
  2639  041C  0870               	movf	??_myIsr,w
  2640  041D  00B8               	movwf	_inDataBPos
  2641  041E                     i1l1646:	
  2642                           ;main.c: 187:                 }
  2643                           
  2644                           
  2645                           ;main.c: 189:                 ps2DataState = 0;
  2646  041E  01F9               	clrf	_ps2DataState
  2647                           
  2648                           ;main.c: 191:         } else if ( ps2DataState == 0 ) {
  2649                           
  2650                           ;main.c: 190:             }
  2651  041F  2C30               	goto	i1l1660
  2652  0420                     i1l1648:	
  2653  0420  0879               	movf	_ps2DataState,w
  2654  0421  1D03               	btfss	3,2
  2655  0422  2C30               	goto	i1l1660
  2656                           
  2657                           ;main.c: 192:             if ( !RA4 && !RA3 ) {
  2658  0423  1283               	bcf	3,5	;RP0=0, select bank0
  2659  0424  1303               	bcf	3,6	;RP1=0, select bank0
  2660  0425  1E05               	btfss	5,4	;volatile
  2661  0426  1985               	btfsc	5,3	;volatile
  2662  0427  2C30               	goto	i1l1660
  2663                           
  2664                           ;main.c: 193:                 ps2BitsCount = 0;
  2665  0428  01F6               	clrf	_ps2BitsCount
  2666                           
  2667                           ;main.c: 194:                 ps2Bits = 0;
  2668  0429  01F8               	clrf	_ps2Bits
  2669                           
  2670                           ;main.c: 195:                 ps2DataState = 1;
  2671  042A  01F9               	clrf	_ps2DataState
  2672  042B  0AF9               	incf	_ps2DataState,f
  2673                           
  2674                           ;main.c: 196:                 ps2Device = RA0;
  2675  042C  3000               	movlw	0
  2676  042D  1805               	btfsc	5,0	;volatile
  2677  042E  3001               	movlw	1
  2678  042F  00BD               	movwf	_ps2Device
  2679  0430                     i1l1660:	
  2680                           ;main.c: 198:         }
  2681                           
  2682                           ;main.c: 197:             }
  2683                           
  2684                           
  2685                           ;main.c: 199:         T0IF=0;
  2686  0430  110B               	bcf	11,2	;volatile
  2687                           
  2688                           ;main.c: 200:         TMR0 = 255;
  2689  0431  30FF               	movlw	255
  2690  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2691  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2692  0434  0081               	movwf	1	;volatile
  2693  0435                     i1l199:	
  2694                           ;main.c: 203:     }
  2695                           
  2696                           ;main.c: 201:     } else {
  2697                           
  2698  0435  0873               	movf	??_myIsr+3,w
  2699  0436  008A               	movwf	10
  2700  0437  0872               	movf	??_myIsr+2,w
  2701  0438  0084               	movwf	4
  2702  0439  0E71               	swapf	(??_myIsr+1)^(0+4294967168),w
  2703  043A  0083               	movwf	3
  2704  043B  0EFE               	swapf	126,f
  2705  043C  0E7E               	swapf	126,w
  2706  043D  0009               	retfie
  2707  043E                     __end_of_myIsr:	
  2708  007E                     btemp	set	126	;btemp
  2709  007E                     wtemp0	set	126
  2710                           
  2711                           	psect	intentry
  2712  0004                     __pintentry:	
  2713                           ;incstack = 0
  2714                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0]
  2715                           
  2716  0004                     interrupt_function:	
  2717  007E                     saved_w	set	btemp
  2718  0004  00FE               	movwf	btemp
  2719  0005  0E03               	swapf	3,w
  2720  0006  00F1               	movwf	??_myIsr+1
  2721  0007  0804               	movf	4,w
  2722  0008  00F2               	movwf	??_myIsr+2
  2723  0009  080A               	movf	10,w
  2724  000A  00F3               	movwf	??_myIsr+3
  2725  000B  2BB1               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        13
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     31      78
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@keyDown	PTR unsigned char  size(1) Largest target is 1
		 -> processKeyCode@keyDown(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 

    calculateBitsFromTable@keyCode	PTR unsigned char  size(1) Largest target is 1
		 -> processKeyCode@keyCode(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_sendDataToAltera
    _processKeyCode->_calculateBitsFromTable
    _processKeyCode->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_processKeyCode
    _processKeyCode->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    4319
                                             20 BANK0     11    11      0
                     _processKeyCode
                   _sendDataToAltera
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     198
                                              4 COMMON     2     2      0
                                              0 BANK0      3     3      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _processKeyCode                                       9     8      1    3255
                                             11 BANK0      9     8      1
             _calculateBitsFromTable
                          _updateKey
 ---------------------------------------------------------------------------------
 (2) _updateKey                                            7     6      1     883
                                              5 COMMON     1     1      0
                                              5 BANK0      6     5      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (3) _updatePort                                           6     5      1     459
                                              4 COMMON     1     0      1
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _calculateBitsFromTable                               9     4      5    1350
                                              4 COMMON     2     2      0
                                              0 BANK0      7     2      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                4     4      0       0
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _processKeyCode
     _calculateBitsFromTable
     _updateKey
       _updatePort
   _sendDataToAltera
     _myDelay

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1F      4E       3       97.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      58      10        0.0%
ABS                  0      0      58       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sun Nov 11 02:47:35 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0074                                 l310 019B  
                               l312 01A4                                 l236 04A6  
                               l246 0334                                 l248 0345  
                               _GIE 005F                                 _RA0 0028  
                               _RA1 0029                                 _RA2 002A  
                               _RA3 002B                                 _RA4 002C  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _PSA 040B  
                               fsr0 0004                                 indf 0000  
                              l2040 035E                                l2032 034C  
                              l2008 0320                                l2200 00B2  
                              l2026 0346                                l2018 0335  
                              l2044 0366                                l2052 0375  
                              l2070 039F                                l2062 0384  
                              l2046 0367                                l2038 035A  
                              l2230 00F0                                l2222 00E0  
                              l2072 03A1                                l2048 0370  
                              l2056 037E                                l2312 0190  
                              l2304 0184                                l2320 019C  
                              l2240 0105                                l2232 00F8  
                              l2226 00E5                                l2076 03AA  
                              l2316 0194                                l2308 018A  
                              l2324 01A0                                l2236 00FE  
                              l2094 0055                                l2272 0143  
                              l2248 0113                                l2088 0047  
                              l2282 015C                                l2276 014E  
                              l2268 013E                                l2286 0163  
                              l2278 0156                                l2294 0170  
                              l1932 051B                                l1916 0547  
                              l1926 0504                                l1934 04DF  
                              l1928 0514                                l1944 044F  
                              l1980 04B7                                l1958 047F  
                              l1998 04D8                                _EEIE 0467  
                              _EEIF 0067                                _CMIE 0466  
                              _CMIF 0066                                _T0IE 005D  
                              _T0IF 005A                                _T0CS 040D  
                              u2004 050A                                u2100 047B  
                              u2005 0508                                u2110 047C  
                              u2050 0459                                _T0SE 040C  
                              u2060 045A                                u2080 0473  
                              u2090 0474                                u2180 031C  
                              u2190 031D                                u1945 0528  
                              u1954 0533                                u1955 0531  
                              _PEIE 005E                                _INTE 005C  
                              _INTF 0059                                _RBIE 005B  
                              _RBIF 0058                                u1994 04FA  
                              u1995 04F8                                _RCIE 0465  
                              _RCIF 0065                                _TMR0 0001  
                              _TMR2 0011                                _SPEN 00C7  
                              _TXIE 0464                                _TXIF 0064  
                              _main 0032                                btemp 007E  
                              start 000C                               ?_main 0070  
                      main@needSave 005C                               _CMCON 001F  
      __end_of_replaceTwoBytesCodes 02CC                               _T1CON 0010  
                             i1l183 03DB                               i1l199 0435  
                             _RCSTA 0018                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                __end_of_codeToMatrix 0286  
                             _TRISA 0085                               _TRISB 0086  
                             _VRCON 009F                               _TXSTA 0098  
                             _nRBPU 040F                               _delay 0032  
                   __end_of_myDelay 0567                               _myIsr 03B1  
                             main@i 005D                    updatePort@bit_id 0046  
                             pclath 000A                               status 0003  
                      updateKey@key 0048                               wtemp0 007E  
                   __initialization 000D                        __end_of_main 01A6  
                            ??_main 0056     __size_of_calculateBitsFromTable 0045  
                 sendDataToAltera@i 0044                              _CCP1IE 0462  
                            _CCP1IF 0062                              ?_myIsr 0070  
                            _CCPR1H 0016                              _CCPR1L 0015  
                            i1l1610 03CD                              i1l1630 03EF  
                            i1l1606 03C5                              i1l1632 03F3  
                            i1l1642 0410                              i1l1634 03F8  
                            i1l1618 03E0                              i1l1660 0430  
                            i1l1646 041E                              i1l1648 0420  
                            _INTEDG 040E                              u152_20 03C2  
                            u155_20 03D7                              _TMR1IE 0460  
                            _TMR1IF 0060                              _TMR2IE 0461  
                            _TMR2IF 0061            __end_of_sendDataToAltera 04DB  
             _replaceOnDelayKeyDown 02CC                    ??_processKeyCode 004E  
                         ??_myDelay 0074                              saved_w 007E  
                     updateKey@code 004C                       updateKey@down 0047  
           __end_of__initialization 0030              _calculateBitsFromTable 04DB  
              _replaceTwoBytesCodes 02B0                       updatePort@set 0074  
                    __pcstackCOMMON 0070                        __pidataBANK0 0551  
                     __end_of_myIsr 043E                      _ps2DeviceAMode 003F  
                    _ps2DeviceBMode 003E                 updateKey@localShift 0049  
                           ??_myIsr 0070                        _ps2DataState 0079  
                        __pbssBANK0 0020                          _inDataAPos 003A  
                        _inDataBPos 0038                        _ps2BitsCount 0076  
                      _codeToMatrix 0206                          _delayedKey 0034  
              _sendDataToAltera$147 0042                          __pmaintext 0032  
                        __pintentry 0004                             _CCP1CON 0017  
        calculateBitsFromTable@bits 0043                     processKeyCode@i 0054  
                __size_of_updateKey 0053                      _ps2NeedEncodeA 003C  
                    _ps2NeedEncodeB 003B                          __stringtab 0200  
        _kempstonMouseEmulatorDelay 0030       __end_of_replaceOnShiftKeyDown 02B0  
                           _inDataA 0028                             _inDataB 0020  
                           _ps2Bits 0078                             __ptext1 0491  
                           __ptext2 0566                             __ptext3 02E0  
                           __ptext4 043E                             __ptext5 0520  
                           __ptext6 04DB                             __ptext7 03B1  
     calculateBitsFromTable@keyCode 0047       calculateBitsFromTable@keyDown 0042  
                           _myDelay 0566  calculateBitsFromTable@clearIfFound 0046  
                           _numLock 0036                             clrloop0 055F  
              end_of_initialization 0030                       _importantKeys 02D4  
                    _shift_ctrl_alt 0040                   ?_sendDataToAltera 0070  
                 __end_of_updateKey 0491                  ??_sendDataToAltera 0074  
                 _kempstonMouseKeys 02DA                          _updatePort 0520  
           ?_calculateBitsFromTable 0042           __end_of_kempstonMouseKeys 02E0  
             processKeyCode@keyCode 0055               processKeyCode@keyDown 004D  
               start_initialization 000D                         updatePort@a 0045  
    __end_of_calculateBitsFromTable 0520             calculateBitsFromTable@i 0048  
                      _readDataAPos 0039                        _readDataBPos 0037  
                       __pdataBANK0 0061             __size_of_processKeyCode 00D1  
                       __pbssCOMMON 0076                           ___latbits 0000  
                     __pcstackBANK0 0042                         ?_updatePort 0074  
                updateKey@localCtrl 004B                           _ps2Device 003D  
                         _ps2Parity 0077                           __pstrings 0200  
                          ?_myDelay 0070         calculateBitsFromTable@count 0045  
                    __size_of_myIsr 008D         calculateBitsFromTable@table 0044  
                 interrupt_function 0004                           clear_ram0 055E  
               __size_of_updatePort 0031               _replaceOnShiftKeyDown 0286  
                         _updateKey 043E                         __stringbase 0205  
                         main@i_164 005E                           main@i_167 005F  
         __size_of_sendDataToAltera 004A                          ?_updateKey 0047  
                __end_of__stringtab 0206                      _processKeyCode 02E0  
                  __size_of_myDelay 0001                            _main$165 0058  
                          _main$168 005A                            _ps2DownA 006D  
                          _ps2DownB 006C                       __size_of_main 0174  
     __end_of_replaceOnDelayKeyDown 02D4                            _replaced 0035  
                          _outPorts 0061                            main@code 0060  
            __end_of_processKeyCode 03B1                 processKeyCode@i_153 0053  
                      ??_updatePort 0042           _kempstonMouseEmulatorKeys 0041  
                          intlevel1 0000                           stringcode 0200  
                __end_of_updatePort 0551                     ?_processKeyCode 004D  
                       ??_updateKey 0075                    _sendDataToAltera 0491  
                          stringdir 0200                            stringtab 0200  
             __end_of_importantKeys 02DA                       _updateKey$140 004A  
