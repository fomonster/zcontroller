

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Oct 19 12:45:34 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.00
    25                           ; Generated 27/05/2018 GMT
    26                           ; 
    27                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F628A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  008C                     	;# 
    86  008E                     	;# 
    87  0092                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009F                     	;# 
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  000A                     	;# 
   103  000B                     	;# 
   104  000C                     	;# 
   105  000E                     	;# 
   106  000E                     	;# 
   107  000F                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  008C                     	;# 
   123  008E                     	;# 
   124  0092                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009F                     	;# 
   132                           
   133                           	psect	idataBANK0
   134  047B                     __pidataBANK0:	
   135                           
   136                           ;initializer for _outPorts
   137  047B  3400               	retlw	0
   138  047C  3400               	retlw	0
   139  047D  3400               	retlw	0
   140  047E  3400               	retlw	0
   141  047F  3400               	retlw	0
   142  0480  3400               	retlw	0
   143  0481  3400               	retlw	0
   144  0482  3400               	retlw	0
   145  0483  3407               	retlw	7
   146  0484  34F5               	retlw	245
   147  0485  34DA               	retlw	218
   148                           
   149                           	psect	strings
   150  0200                     __pstrings:	
   151  0200                     stringtab:	
   152  0200                     __stringtab:	
   153  0200                     stringcode:	
   154                           ;	String table - string pointers are 1 byte each
   155                           
   156  0200                     stringdir:	
   157  0200  3002               	movlw	high stringdir
   158  0201  008A               	movwf	10
   159  0202  0804               	movf	4,w
   160  0203  0A84               	incf	4,f
   161  0204  0782               	addwf	2,f
   162  0205                     __stringbase:	
   163  0205  3400               	retlw	0
   164  0206                     __end_of__stringtab:	
   165  0206                     _codeToMatrix:	
   166  0206  34FF               	retlw	255
   167  0207  34FF               	retlw	255
   168  0208  34FF               	retlw	255
   169  0209  34FF               	retlw	255
   170  020A  34FF               	retlw	255
   171  020B  34FF               	retlw	255
   172  020C  34FF               	retlw	255
   173  020D  34FF               	retlw	255
   174  020E  34FF               	retlw	255
   175  020F  34FF               	retlw	255
   176  0210  34FF               	retlw	255
   177  0211  34FF               	retlw	255
   178  0212  34FF               	retlw	255
   179  0213  34FF               	retlw	255
   180  0214  349C               	retlw	156
   181  0215  34FF               	retlw	255
   182  0216  34FF               	retlw	255
   183  0217  34FF               	retlw	255
   184  0218  34FF               	retlw	255
   185  0219  34FF               	retlw	255
   186  021A  34FF               	retlw	255
   187  021B  3402               	retlw	2
   188  021C  3403               	retlw	3
   189  021D  34FF               	retlw	255
   190  021E  34FF               	retlw	255
   191  021F  34FF               	retlw	255
   192  0220  3408               	retlw	8
   193  0221  3409               	retlw	9
   194  0222  3401               	retlw	1
   195  0223  340A               	retlw	10
   196  0224  340B               	retlw	11
   197  0225  34D6               	retlw	214
   198  0226  34FF               	retlw	255
   199  0227  3418               	retlw	24
   200  0228  3410               	retlw	16
   201  0229  3411               	retlw	17
   202  022A  3412               	retlw	18
   203  022B  341B               	retlw	27
   204  022C  3413               	retlw	19
   205  022D  34FF               	retlw	255
   206  022E  345C               	retlw	92
   207  022F  3407               	retlw	7
   208  0230  3420               	retlw	32
   209  0231  3419               	retlw	25
   210  0232  3422               	retlw	34
   211  0233  341A               	retlw	26
   212  0234  3423               	retlw	35
   213  0235  3463               	retlw	99
   214  0236  3464               	retlw	100
   215  0237  341F               	retlw	31
   216  0238  3427               	retlw	39
   217  0239  3426               	retlw	38
   218  023A  3421               	retlw	33
   219  023B  3425               	retlw	37
   220  023C  3424               	retlw	36
   221  023D  3454               	retlw	84
   222  023E  34A0               	retlw	160
   223  023F  3406               	retlw	6
   224  0240  3417               	retlw	23
   225  0241  341E               	retlw	30
   226  0242  341D               	retlw	29
   227  0243  341C               	retlw	28
   228  0244  3414               	retlw	20
   229  0245  34FF               	retlw	255
   230  0246  34FF               	retlw	255
   231  0247  349F               	retlw	159
   232  0248  3416               	retlw	22
   233  0249  3415               	retlw	21
   234  024A  340D               	retlw	13
   235  024B  3404               	retlw	4
   236  024C  340C               	retlw	12
   237  024D  34FF               	retlw	255
   238  024E  34C1               	retlw	193
   239  024F  3497               	retlw	151
   240  0250  34A0               	retlw	160
   241  0251  340E               	retlw	14
   242  0252  348D               	retlw	141
   243  0253  3405               	retlw	5
   244  0254  349E               	retlw	158
   245  0255  3483               	retlw	131
   246  0256  348B               	retlw	139
   247  0257  3493               	retlw	147
   248  0258  349C               	retlw	156
   249  0259  349B               	retlw	155
   250  025A  34E5               	retlw	229
   251  025B  348E               	retlw	142
   252  025C  34A3               	retlw	163
   253  025D  34A6               	retlw	166
   254  025E  344B               	retlw	75
   255  025F  34FF               	retlw	255
   256  0260  3406               	retlw	6
   257  0261  34DD               	retlw	221
   258  0262  34A4               	retlw	164
   259  0263  34D1               	retlw	209
   260  0264  34A7               	retlw	167
   261  0265  3494               	retlw	148
   262  0266  348C               	retlw	140
   263  0267  3484               	retlw	132
   264  0268  3496               	retlw	150
   265  0269  34C9               	retlw	201
   266  026A  34D9               	retlw	217
   267  026B  34E1               	retlw	225
   268  026C  3444               	retlw	68
   269  026D  3488               	retlw	136
   270  026E  3485               	retlw	133
   271  026F  3403               	retlw	3
   272  0270  349A               	retlw	154
   273  0271  341B               	retlw	27
   274  0272  341C               	retlw	28
   275  0273  34A2               	retlw	162
   276  0274  3498               	retlw	152
   277  0275  34C0               	retlw	192
   278  0276  3404               	retlw	4
   279  0277  3497               	retlw	151
   280  0278  340B               	retlw	11
   281  0279  3423               	retlw	35
   282  027A  3424               	retlw	36
   283  027B  3414               	retlw	20
   284  027C  3443               	retlw	67
   285  027D  34FF               	retlw	255
   286  027E  34FF               	retlw	255
   287  027F  3496               	retlw	150
   288  0280  3413               	retlw	19
   289  0281  349E               	retlw	158
   290  0282  34A7               	retlw	167
   291  0283  340C               	retlw	12
   292  0284  34FF               	retlw	255
   293  0285  34FF               	retlw	255
   294  0286                     __end_of_codeToMatrix:	
   295  0286                     _replaceOnShiftKeyDown:	
   296  0286  3416               	retlw	22
   297  0287  344F               	retlw	79
   298  0288  341E               	retlw	30
   299  0289  3450               	retlw	80
   300  028A  3426               	retlw	38
   301  028B  3451               	retlw	81
   302  028C  3425               	retlw	37
   303  028D  3453               	retlw	83
   304  028E  342E               	retlw	46
   305  028F  3456               	retlw	86
   306  0290  3436               	retlw	54
   307  0291  3457               	retlw	87
   308  0292  343D               	retlw	61
   309  0293  345C               	retlw	92
   310  0294  343E               	retlw	62
   311  0295  345E               	retlw	94
   312  0296  3446               	retlw	70
   313  0297  345F               	retlw	95
   314  0298  3445               	retlw	69
   315  0299  3460               	retlw	96
   316  029A  344E               	retlw	78
   317  029B  3461               	retlw	97
   318  029C  3455               	retlw	85
   319  029D  3462               	retlw	98
   320  029E  345D               	retlw	93
   321  029F  3463               	retlw	99
   322  02A0  344C               	retlw	76
   323  02A1  3467               	retlw	103
   324  02A2  3452               	retlw	82
   325  02A3  3468               	retlw	104
   326  02A4  3441               	retlw	65
   327  02A5  346A               	retlw	106
   328  02A6  3449               	retlw	73
   329  02A7  346D               	retlw	109
   330  02A8  344A               	retlw	74
   331  02A9  346E               	retlw	110
   332  02AA  340E               	retlw	14
   333  02AB  3448               	retlw	72
   334  02AC  3454               	retlw	84
   335  02AD  3464               	retlw	100
   336  02AE  345B               	retlw	91
   337  02AF  3465               	retlw	101
   338  02B0                     __end_of_replaceOnShiftKeyDown:	
   339  02B0                     _replaceTwoBytesCodes:	
   340  02B0  3411               	retlw	17
   341  02B1  3408               	retlw	8
   342  02B2  3414               	retlw	20
   343  02B3  3413               	retlw	19
   344  02B4  3470               	retlw	112
   345  02B5  3417               	retlw	23
   346  02B6  346C               	retlw	108
   347  02B7  3418               	retlw	24
   348  02B8  347D               	retlw	125
   349  02B9  3419               	retlw	25
   350  02BA  3471               	retlw	113
   351  02BB  341F               	retlw	31
   352  02BC  3469               	retlw	105
   353  02BD  3420               	retlw	32
   354  02BE  347A               	retlw	122
   355  02BF  3427               	retlw	39
   356  02C0  3475               	retlw	117
   357  02C1  3428               	retlw	40
   358  02C2  346B               	retlw	107
   359  02C3  342F               	retlw	47
   360  02C4  3472               	retlw	114
   361  02C5  3430               	retlw	48
   362  02C6  3474               	retlw	116
   363  02C7  3437               	retlw	55
   364  02C8  344A               	retlw	74
   365  02C9  3438               	retlw	56
   366  02CA  345A               	retlw	90
   367  02CB  3439               	retlw	57
   368  02CC                     __end_of_replaceTwoBytesCodes:	
   369  02CC                     _replaceOnDelayKeyDown:	
   370  02CC  341F               	retlw	31
   371  02CD  3454               	retlw	84
   372  02CE  345B               	retlw	91
   373  02CF  3463               	retlw	99
   374  02D0  3464               	retlw	100
   375  02D1  3465               	retlw	101
   376  02D2  3448               	retlw	72
   377  02D3  345D               	retlw	93
   378  02D4                     __end_of_replaceOnDelayKeyDown:	
   379  02D4                     _importantKeys:	
   380  02D4  3412               	retlw	18
   381  02D5  3459               	retlw	89
   382  02D6  3414               	retlw	20
   383  02D7  3413               	retlw	19
   384  02D8  3411               	retlw	17
   385  02D9  3408               	retlw	8
   386  02DA                     __end_of_importantKeys:	
   387  02DA                     _kempstonMouseKeys:	
   388  02DA  346B               	retlw	107
   389  02DB  3474               	retlw	116
   390  02DC  3475               	retlw	117
   391  02DD  3472               	retlw	114
   392  02DE  3473               	retlw	115
   393  02DF  3404               	retlw	4
   394  02E0                     __end_of_kempstonMouseKeys:	
   395                           
   396                           	psect	nvBANK0
   397  0049                     __pnvBANK0:	
   398  0049                     _ps2Down:	
   399  0049                     	ds	1
   400  0005                     _PORTA	set	5
   401  0018                     _RCSTA	set	24
   402  001F                     _CMCON	set	31
   403  0017                     _CCP1CON	set	23
   404  0016                     _CCPR1H	set	22
   405  0015                     _CCPR1L	set	21
   406  0010                     _T1CON	set	16
   407  0011                     _TMR2	set	17
   408  000F                     _TMR1H	set	15
   409  000E                     _TMR1L	set	14
   410  0006                     _PORTB	set	6
   411  0005                     _PORTAbits	set	5
   412  0001                     _TMR0	set	1
   413  00C7                     _SPEN	set	199
   414  0060                     _TMR1IF	set	96
   415  0061                     _TMR2IF	set	97
   416  0062                     _CCP1IF	set	98
   417  0064                     _TXIF	set	100
   418  0065                     _RCIF	set	101
   419  0066                     _CMIF	set	102
   420  0067                     _EEIF	set	103
   421  0058                     _RBIF	set	88
   422  0059                     _INTF	set	89
   423  005B                     _RBIE	set	91
   424  005C                     _INTE	set	92
   425  005E                     _PEIE	set	94
   426  002A                     _RA2	set	42
   427  0029                     _RA1	set	41
   428  005F                     _GIE	set	95
   429  005A                     _T0IF	set	90
   430  005D                     _T0IE	set	93
   431  0086                     _TRISB	set	134
   432  0085                     _TRISA	set	133
   433  0098                     _TXSTA	set	152
   434  009F                     _VRCON	set	159
   435  042C                     _TRISA4	set	1068
   436  042B                     _TRISA3	set	1067
   437  042A                     _TRISA2	set	1066
   438  0429                     _TRISA1	set	1065
   439  0428                     _TRISA0	set	1064
   440  0408                     _PS0	set	1032
   441  0409                     _PS1	set	1033
   442  040A                     _PS2	set	1034
   443  040B                     _PSA	set	1035
   444  040C                     _T0SE	set	1036
   445  040D                     _T0CS	set	1037
   446  040E                     _INTEDG	set	1038
   447  040F                     _nRBPU	set	1039
   448  0460                     _TMR1IE	set	1120
   449  0461                     _TMR2IE	set	1121
   450  0462                     _CCP1IE	set	1122
   451  0464                     _TXIE	set	1124
   452  0465                     _RCIE	set	1125
   453  0466                     _CMIE	set	1126
   454  0467                     _EEIE	set	1127
   455                           
   456                           	psect	cinit
   457  0011                     start_initialization:	
   458                           ; #config settings
   459                           
   460  0011                     __initialization:	
   461                           
   462                           ; Initialize objects allocated to BANK0
   463  0011  247B               	fcall	__pidataBANK0	;fetch initializer
   464  0012  00BE               	movwf	__pdataBANK0& (0+127)
   465  0013  247C               	fcall	__pidataBANK0+1	;fetch initializer
   466  0014  00BF               	movwf	(__pdataBANK0+1)& (0+127)
   467  0015  247D               	fcall	__pidataBANK0+2	;fetch initializer
   468  0016  00C0               	movwf	(__pdataBANK0+2)& (0+127)
   469  0017  247E               	fcall	__pidataBANK0+3	;fetch initializer
   470  0018  00C1               	movwf	(__pdataBANK0+3)& (0+127)
   471  0019  247F               	fcall	__pidataBANK0+4	;fetch initializer
   472  001A  00C2               	movwf	(__pdataBANK0+4)& (0+127)
   473  001B  2480               	fcall	__pidataBANK0+5	;fetch initializer
   474  001C  00C3               	movwf	(__pdataBANK0+5)& (0+127)
   475  001D  2481               	fcall	__pidataBANK0+6	;fetch initializer
   476  001E  00C4               	movwf	(__pdataBANK0+6)& (0+127)
   477  001F  2482               	fcall	__pidataBANK0+7	;fetch initializer
   478  0020  00C5               	movwf	(__pdataBANK0+7)& (0+127)
   479  0021  2483               	fcall	__pidataBANK0+8	;fetch initializer
   480  0022  00C6               	movwf	(__pdataBANK0+8)& (0+127)
   481  0023  2484               	fcall	__pidataBANK0+9	;fetch initializer
   482  0024  00C7               	movwf	(__pdataBANK0+9)& (0+127)
   483  0025  2485               	fcall	__pidataBANK0+10	;fetch initializer
   484  0026  00C8               	movwf	(__pdataBANK0+10)& (0+127)
   485                           
   486                           ; Clear objects allocated to BANK0
   487  0027  1383               	bcf	3,7	;select IRP bank0
   488  0028  3032               	movlw	low __pbssBANK0
   489  0029  0084               	movwf	4
   490  002A  303E               	movlw	low (__pbssBANK0+12)
   491  002B  2486               	fcall	clear_ram0
   492                           
   493                           ; Clear objects allocated to COMMON
   494  002C  3079               	movlw	low __pbssCOMMON
   495  002D  0084               	movwf	4
   496  002E  307D               	movlw	low (__pbssCOMMON+4)
   497  002F  2486               	fcall	clear_ram0
   498  0030                     end_of_initialization:	
   499                           ;End of C runtime variable initialization code
   500                           
   501  0030                     __end_of__initialization:	
   502  0030  0183               	clrf	3
   503  0031  2832               	ljmp	_main	;jump to C main() function
   504                           
   505                           	psect	bssCOMMON
   506  0079                     __pbssCOMMON:	
   507  0079                     _ps2NeedEncode:	
   508  0079                     	ds	1
   509  007A                     _ps2BitsCount:	
   510  007A                     	ds	1
   511  007B                     _ps2Bits:	
   512  007B                     	ds	1
   513  007C                     _ps2DataState:	
   514  007C                     	ds	1
   515                           
   516                           	psect	bssBANK0
   517  0032                     __pbssBANK0:	
   518  0032                     _kempstonMouseEmulatorDelay:	
   519  0032                     	ds	2
   520  0034                     _delay:	
   521  0034                     	ds	2
   522  0036                     _delayedKey:	
   523  0036                     	ds	1
   524  0037                     _replaced:	
   525  0037                     	ds	1
   526  0038                     _numLock:	
   527  0038                     	ds	1
   528  0039                     _ps2WaitCode:	
   529  0039                     	ds	1
   530  003A                     _ps2Device:	
   531  003A                     	ds	1
   532  003B                     _ps2Data:	
   533  003B                     	ds	1
   534  003C                     _kempstonMouseEmulatorKeys:	
   535  003C                     	ds	1
   536  003D                     _shift_ctrl_alt:	
   537  003D                     	ds	1
   538                           
   539                           	psect	dataBANK0
   540  003E                     __pdataBANK0:	
   541  003E                     _outPorts:	
   542  003E                     	ds	11
   543                           
   544                           	psect	clrtext
   545  0486                     clear_ram0:	
   546                           ;	Called with FSR containing the base address, and
   547                           ;	W with the last address+1
   548                           
   549  0486  0064               	clrwdt	;clear the watchdog before getting into this loop
   550  0487                     clrloop0:	
   551  0487  0180               	clrf	0	;clear RAM location pointed to by FSR
   552  0488  0A84               	incf	4,f	;increment pointer
   553  0489  0604               	xorwf	4,w	;XOR with final address
   554  048A  1903               	btfsc	3,2	;have we reached the end yet?
   555  048B  3400               	retlw	0	;all done for this memory range, return
   556  048C  0604               	xorwf	4,w	;XOR again to restore value
   557  048D  2C87               	goto	clrloop0	;do the next byte
   558                           
   559                           	psect	cstackCOMMON
   560  0070                     __pcstackCOMMON:	
   561  0070                     ?_myIsr:	
   562  0070                     ??_myIsr:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ?_myDelay:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_sendDataToAltera:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ?_main:	
   572                           ; 1 bytes @ 0x0
   573                           
   574                           
   575                           ; 1 bytes @ 0x0
   576  0070                     	ds	6
   577  0076                     _myIsr$133:	
   578                           
   579                           ; 2 bytes @ 0x6
   580  0076                     	ds	2
   581  0078                     myIsr@i:	
   582                           
   583                           ; 1 bytes @ 0x8
   584  0078                     	ds	1
   585                           
   586                           	psect	cstackBANK0
   587  0020                     __pcstackBANK0:	
   588  0020                     ?_updatePort:	
   589  0020                     ??_myDelay:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0020                     ??_sendDataToAltera:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0020                     ?_calculateBitsFromTable:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0020                     updatePort@set:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0020                     calculateBitsFromTable@table:	
   602                           ; 1 bytes @ 0x0
   603                           
   604                           
   605                           ; 1 bytes @ 0x0
   606  0020                     	ds	1
   607  0021                     ??_updatePort:	
   608  0021                     calculateBitsFromTable@count:	
   609                           ; 1 bytes @ 0x1
   610                           
   611                           
   612                           ; 1 bytes @ 0x1
   613  0021                     	ds	1
   614  0022                     calculateBitsFromTable@clearIfFound:	
   615  0022                     _sendDataToAltera$150:	
   616                           ; 1 bytes @ 0x2
   617                           
   618                           
   619                           ; 2 bytes @ 0x2
   620  0022                     	ds	1
   621  0023                     ??_calculateBitsFromTable:	
   622                           
   623                           ; 1 bytes @ 0x3
   624  0023                     	ds	1
   625  0024                     updatePort@a:	
   626  0024                     sendDataToAltera@i:	
   627                           ; 1 bytes @ 0x4
   628                           
   629                           
   630                           ; 1 bytes @ 0x4
   631  0024                     	ds	1
   632  0025                     updatePort@bit_id:	
   633  0025                     calculateBitsFromTable@bits:	
   634                           ; 1 bytes @ 0x5
   635                           
   636                           
   637                           ; 1 bytes @ 0x5
   638  0025                     	ds	1
   639  0026                     ?_updateKey:	
   640  0026                     updateKey@set:	
   641                           ; 1 bytes @ 0x6
   642                           
   643  0026                     calculateBitsFromTable@i:	
   644                           ; 1 bytes @ 0x6
   645                           
   646                           
   647                           ; 1 bytes @ 0x6
   648  0026                     	ds	1
   649  0027                     ??_updateKey:	
   650                           
   651                           ; 1 bytes @ 0x7
   652  0027                     	ds	1
   653  0028                     updateKey@localShift:	
   654                           
   655                           ; 1 bytes @ 0x8
   656  0028                     	ds	1
   657  0029                     _updateKey$143:	
   658                           
   659                           ; 1 bytes @ 0x9
   660  0029                     	ds	1
   661  002A                     updateKey@localCtrl:	
   662                           
   663                           ; 1 bytes @ 0xA
   664  002A                     	ds	1
   665  002B                     updateKey@key:	
   666                           
   667                           ; 1 bytes @ 0xB
   668  002B                     	ds	1
   669  002C                     updateKey@code:	
   670                           
   671                           ; 1 bytes @ 0xC
   672  002C                     	ds	1
   673  002D                     ??_main:	
   674                           
   675                           ; 1 bytes @ 0xD
   676  002D                     	ds	3
   677  0030                     main@i_164:	
   678                           
   679                           ; 1 bytes @ 0x10
   680  0030                     	ds	1
   681  0031                     main@i:	
   682                           
   683                           ; 1 bytes @ 0x11
   684  0031                     	ds	1
   685                           
   686                           	psect	maintext
   687  0032                     __pmaintext:	
   688 ;;
   689 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   690 ;;
   691 ;; *************** function _main *****************
   692 ;; Defined at:
   693 ;;		line 361 in file "main.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;  i               1   16[BANK0 ] char 
   698 ;;  i               1   17[BANK0 ] char 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : B00/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   708 ;;      Params:         0       0       0       0
   709 ;;      Locals:         0       2       0       0
   710 ;;      Temps:          0       3       0       0
   711 ;;      Totals:         0       5       0       0
   712 ;;Total ram usage:        5 bytes
   713 ;; Hardware stack levels required when called:    4
   714 ;; This function calls:
   715 ;;		_calculateBitsFromTable
   716 ;;		_sendDataToAltera
   717 ;;		_updateKey
   718 ;;		_updatePort
   719 ;; This function is called by:
   720 ;;		Startup code after reset
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           
   725                           ;psect for function _main
   726  0032                     _main:	
   727                           
   728                           ;main.c: 366:     GIE = 1;
   729                           
   730                           ;incstack = 0
   731                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   732  0032  178B               	bsf	11,7	;volatile
   733                           
   734                           ;main.c: 367:     PEIE = 0;
   735  0033  130B               	bcf	11,6	;volatile
   736                           
   737                           ;main.c: 368:     T0IE = 1;
   738  0034  168B               	bsf	11,5	;volatile
   739                           
   740                           ;main.c: 369:     INTE = 0;
   741  0035  120B               	bcf	11,4	;volatile
   742                           
   743                           ;main.c: 370:     RBIE = 0;
   744  0036  118B               	bcf	11,3	;volatile
   745                           
   746                           ;main.c: 371:     T0IF = 0;
   747  0037  110B               	bcf	11,2	;volatile
   748                           
   749                           ;main.c: 372:     INTF = 0;
   750  0038  108B               	bcf	11,1	;volatile
   751                           
   752                           ;main.c: 373:     RBIF = 0;
   753  0039  100B               	bcf	11,0	;volatile
   754                           
   755                           ;main.c: 376:     EEIF = 0;
   756  003A  1283               	bcf	3,5	;RP0=0, select bank0
   757  003B  1303               	bcf	3,6	;RP1=0, select bank0
   758  003C  138C               	bcf	12,7	;volatile
   759                           
   760                           ;main.c: 377:     CMIF = 0;
   761  003D  130C               	bcf	12,6	;volatile
   762                           
   763                           ;main.c: 378:     RCIF = 0;
   764  003E  128C               	bcf	12,5	;volatile
   765                           
   766                           ;main.c: 379:     TXIF = 0;
   767  003F  120C               	bcf	12,4	;volatile
   768                           
   769                           ;main.c: 380:     CCP1IF = 0;
   770  0040  110C               	bcf	12,2	;volatile
   771                           
   772                           ;main.c: 381:     TMR2IF = 0;
   773  0041  108C               	bcf	12,1	;volatile
   774                           
   775                           ;main.c: 382:     TMR1IF = 0;
   776  0042  100C               	bcf	12,0	;volatile
   777                           
   778                           ;main.c: 385:     EEIE = 0;
   779  0043  1683               	bsf	3,5	;RP0=1, select bank1
   780  0044  1303               	bcf	3,6	;RP1=0, select bank1
   781  0045  138C               	bcf	12,7	;volatile
   782                           
   783                           ;main.c: 386:     CMIE = 0;
   784  0046  130C               	bcf	12,6	;volatile
   785                           
   786                           ;main.c: 387:     RCIE = 0;
   787  0047  128C               	bcf	12,5	;volatile
   788                           
   789                           ;main.c: 388:     TXIE = 0;
   790  0048  120C               	bcf	12,4	;volatile
   791                           
   792                           ;main.c: 389:     CCP1IE = 0;
   793  0049  110C               	bcf	12,2	;volatile
   794                           
   795                           ;main.c: 390:     TMR2IE = 0;
   796  004A  108C               	bcf	12,1	;volatile
   797                           
   798                           ;main.c: 391:     TMR1IE = 0;
   799  004B  100C               	bcf	12,0	;volatile
   800                           
   801                           ;main.c: 394:     nRBPU = 0;
   802  004C  1381               	bcf	1,7	;volatile
   803                           
   804                           ;main.c: 395:     INTEDG = 0;
   805  004D  1301               	bcf	1,6	;volatile
   806                           
   807                           ;main.c: 396:     T0CS = 1;
   808  004E  1681               	bsf	1,5	;volatile
   809                           
   810                           ;main.c: 397:     T0SE = 1;
   811  004F  1601               	bsf	1,4	;volatile
   812                           
   813                           ;main.c: 398:     PSA = 1;
   814  0050  1581               	bsf	1,3	;volatile
   815                           
   816                           ;main.c: 399:     PS2 = 0;
   817  0051  1101               	bcf	1,2	;volatile
   818                           
   819                           ;main.c: 400:     PS1 = 0;
   820  0052  1081               	bcf	1,1	;volatile
   821                           
   822                           ;main.c: 401:     PS0 = 0;
   823  0053  1001               	bcf	1,0	;volatile
   824                           
   825                           ;main.c: 404:     TMR0 = 255;
   826  0054  30FF               	movlw	255
   827  0055  1283               	bcf	3,5	;RP0=0, select bank0
   828  0056  1303               	bcf	3,6	;RP1=0, select bank0
   829  0057  0081               	movwf	1	;volatile
   830                           
   831                           ;main.c: 405:     TMR1L = 0;
   832  0058  018E               	clrf	14	;volatile
   833                           
   834                           ;main.c: 406:     TMR1H = 0;
   835  0059  018F               	clrf	15	;volatile
   836                           
   837                           ;main.c: 407:     TMR2 = 0;
   838  005A  0191               	clrf	17	;volatile
   839                           
   840                           ;main.c: 408:     T1CON = 0;
   841  005B  0190               	clrf	16	;volatile
   842                           
   843                           ;main.c: 409:     CCPR1L = 0;
   844  005C  0195               	clrf	21	;volatile
   845                           
   846                           ;main.c: 410:     CCPR1H = 0;
   847  005D  0196               	clrf	22	;volatile
   848                           
   849                           ;main.c: 411:     CCP1CON = 0;
   850  005E  0197               	clrf	23	;volatile
   851                           
   852                           ;main.c: 412:     CMCON = 7;
   853  005F  3007               	movlw	7
   854  0060  009F               	movwf	31	;volatile
   855                           
   856                           ;main.c: 413:     VRCON = 0;
   857  0061  1683               	bsf	3,5	;RP0=1, select bank1
   858  0062  1303               	bcf	3,6	;RP1=0, select bank1
   859  0063  019F               	clrf	31	;volatile
   860                           
   861                           ;main.c: 414:     RCSTA = 0;
   862  0064  1283               	bcf	3,5	;RP0=0, select bank0
   863  0065  1303               	bcf	3,6	;RP1=0, select bank0
   864  0066  0198               	clrf	24	;volatile
   865                           
   866                           ;main.c: 415:     TXSTA = 128;
   867  0067  3080               	movlw	128
   868  0068  1683               	bsf	3,5	;RP0=1, select bank1
   869  0069  1303               	bcf	3,6	;RP1=0, select bank1
   870  006A  0098               	movwf	24	;volatile
   871                           
   872                           ;main.c: 416:     SPEN = 0;
   873  006B  1283               	bcf	3,5	;RP0=0, select bank0
   874  006C  1303               	bcf	3,6	;RP1=0, select bank0
   875  006D  1398               	bcf	24,7	;volatile
   876                           
   877                           ;main.c: 421:     PORTA = 0;
   878  006E  0185               	clrf	5	;volatile
   879                           
   880                           ;main.c: 422:     TRISA = 255;
   881  006F  30FF               	movlw	255
   882  0070  1683               	bsf	3,5	;RP0=1, select bank1
   883  0071  1303               	bcf	3,6	;RP1=0, select bank1
   884  0072  0085               	movwf	5	;volatile
   885                           
   886                           ;main.c: 423:     TRISA0 = 1;
   887  0073  1405               	bsf	5,0	;volatile
   888                           
   889                           ;main.c: 424:     TRISA1 = 0;
   890  0074  1085               	bcf	5,1	;volatile
   891                           
   892                           ;main.c: 425:     TRISA2 = 0;
   893  0075  1105               	bcf	5,2	;volatile
   894                           
   895                           ;main.c: 426:     TRISA3 = 1;
   896  0076  1585               	bsf	5,3	;volatile
   897                           
   898                           ;main.c: 427:     TRISA4 = 1;
   899  0077  1605               	bsf	5,4	;volatile
   900                           
   901                           ;main.c: 433:     TRISB = 0;
   902  0078  0186               	clrf	6	;volatile
   903                           
   904                           ;main.c: 434:     PORTB = 0;
   905  0079  1283               	bcf	3,5	;RP0=0, select bank0
   906  007A  1303               	bcf	3,6	;RP1=0, select bank0
   907  007B  0186               	clrf	6	;volatile
   908                           
   909                           ;main.c: 437:     ps2Data = 0;
   910  007C  01BB               	clrf	_ps2Data
   911                           
   912                           ;main.c: 439:     ps2WaitCode = 0;
   913  007D  01B9               	clrf	_ps2WaitCode
   914                           
   915                           ;main.c: 440:     ps2Down = 1;
   916  007E  01C9               	clrf	_ps2Down
   917  007F  0AC9               	incf	_ps2Down,f
   918                           
   919                           ;main.c: 441:     ps2NeedEncode = 0;
   920  0080  01F9               	clrf	_ps2NeedEncode
   921                           
   922                           ;main.c: 442:     ps2DataState = 0;
   923  0081  01FC               	clrf	_ps2DataState
   924                           
   925                           ;main.c: 444:     delay = 0;
   926  0082  01B4               	clrf	_delay
   927  0083  01B5               	clrf	_delay+1
   928                           
   929                           ;main.c: 445:     delayedKey = 0;
   930  0084  01B6               	clrf	_delayedKey
   931                           
   932                           ;main.c: 446:     shift_ctrl_alt = 0;
   933  0085  01BD               	clrf	_shift_ctrl_alt
   934                           
   935                           ;main.c: 447:     replaced = 0;
   936  0086  01B7               	clrf	_replaced
   937  0087                     l1414:	
   938                           ;main.c: 449:     while(1)
   939                           
   940                           
   941                           ;main.c: 450:     {;main.c: 452:         if ( ps2DataState == 2 ) {
   942  0087  3002               	movlw	2
   943  0088  067C               	xorwf	_ps2DataState,w
   944  0089  1D03               	btfss	3,2
   945  008A  2957               	goto	l1502
   946                           
   947                           ;main.c: 454:             if ( ps2Device == 0 ) {
   948  008B  1283               	bcf	3,5	;RP0=0, select bank0
   949  008C  1303               	bcf	3,6	;RP1=0, select bank0
   950  008D  083A               	movf	_ps2Device,w
   951  008E  1D03               	btfss	3,2
   952  008F  294E               	goto	l1498
   953                           
   954                           ;main.c: 460:                 calculateBitsFromTable(&shift_ctrl_alt, importantKeys, 6, 
      +                          0);
   955  0090  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
   956  0091  00AD               	movwf	??_main
   957  0092  082D               	movf	??_main,w
   958  0093  00A0               	movwf	calculateBitsFromTable@table
   959  0094  3006               	movlw	6
   960  0095  00AE               	movwf	??_main+1
   961  0096  082E               	movf	??_main+1,w
   962  0097  00A1               	movwf	calculateBitsFromTable@count
   963  0098  01A2               	clrf	calculateBitsFromTable@clearIfFound
   964  0099  303D               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
   965  009A  240C               	fcall	_calculateBitsFromTable
   966                           
   967                           ;main.c: 462:                 calculateBitsFromTable(&kempstonMouseEmulatorKeys, kempsto
      +                          nMouseKeys, 6, numLock);
   968  009B  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
   969  009C  1283               	bcf	3,5	;RP0=0, select bank0
   970  009D  1303               	bcf	3,6	;RP1=0, select bank0
   971  009E  00AD               	movwf	??_main
   972  009F  082D               	movf	??_main,w
   973  00A0  00A0               	movwf	calculateBitsFromTable@table
   974  00A1  3006               	movlw	6
   975  00A2  00AE               	movwf	??_main+1
   976  00A3  082E               	movf	??_main+1,w
   977  00A4  00A1               	movwf	calculateBitsFromTable@count
   978  00A5  0838               	movf	_numLock,w
   979  00A6  00AF               	movwf	??_main+2
   980  00A7  082F               	movf	??_main+2,w
   981  00A8  00A2               	movwf	calculateBitsFromTable@clearIfFound
   982  00A9  303C               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
   983  00AA  240C               	fcall	_calculateBitsFromTable
   984                           
   985                           ;main.c: 470:                 if ( ps2Data == 119 && ps2Down ) {
   986  00AB  3077               	movlw	119
   987  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   988  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   989  00AE  063B               	xorwf	_ps2Data,w
   990  00AF  1D03               	btfss	3,2
   991  00B0  28BD               	goto	l1426
   992  00B1  0849               	movf	_ps2Down,w
   993  00B2  1903               	btfsc	3,2
   994  00B3  28BD               	goto	l1426
   995                           
   996                           ;main.c: 471:                     numLock = !numLock;
   997  00B4  0838               	movf	_numLock,w
   998  00B5  1D03               	btfss	3,2
   999  00B6  28B9               	goto	u1250
  1000  00B7  3001               	movlw	1
  1001  00B8  28BA               	goto	u1260
  1002  00B9                     u1250:	
  1003  00B9  3000               	movlw	0
  1004  00BA                     u1260:	
  1005  00BA  00AD               	movwf	??_main
  1006  00BB  082D               	movf	??_main,w
  1007  00BC  00B8               	movwf	_numLock
  1008  00BD                     l1426:	
  1009                           ;main.c: 472:                 }
  1010                           
  1011                           
  1012                           ;main.c: 475:                 if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 
      +                          0 && ps2Data == 31 && ps2Down ) {
  1013  00BD  083D               	movf	_shift_ctrl_alt,w
  1014  00BE  390C               	andlw	12
  1015  00BF  1903               	btfsc	3,2
  1016  00C0  28D1               	goto	l230
  1017  00C1  083D               	movf	_shift_ctrl_alt,w
  1018  00C2  3930               	andlw	48
  1019  00C3  1903               	btfsc	3,2
  1020  00C4  28D1               	goto	l230
  1021  00C5  301F               	movlw	31
  1022  00C6  063B               	xorwf	_ps2Data,w
  1023  00C7  1D03               	btfss	3,2
  1024  00C8  28D1               	goto	l230
  1025  00C9  0849               	movf	_ps2Down,w
  1026  00CA  1903               	btfsc	3,2
  1027  00CB  28D1               	goto	l230
  1028                           
  1029                           ;main.c: 476:                     outPorts[8] &= 253;
  1030  00CC  30FD               	movlw	253
  1031  00CD  00AD               	movwf	??_main
  1032  00CE  082D               	movf	??_main,w
  1033  00CF  05C6               	andwf	_outPorts+8,f
  1034                           
  1035                           ;main.c: 477:                 } else {
  1036  00D0  28D2               	goto	l1436
  1037  00D1                     l230:	
  1038                           
  1039                           ;main.c: 478:                     outPorts[8] |= 2;
  1040  00D1  14C6               	bsf	_outPorts+8,1
  1041  00D2                     l1436:	
  1042                           ;main.c: 479:                 }
  1043                           
  1044                           
  1045                           ;main.c: 482:                 if ( (shift_ctrl_alt & 12) > 0 && ps2Data == 126 && ps2Dow
      +                          n ) {
  1046  00D2  083D               	movf	_shift_ctrl_alt,w
  1047  00D3  390C               	andlw	12
  1048  00D4  1903               	btfsc	3,2
  1049  00D5  28E2               	goto	l232
  1050  00D6  307E               	movlw	126
  1051  00D7  063B               	xorwf	_ps2Data,w
  1052  00D8  1D03               	btfss	3,2
  1053  00D9  28E2               	goto	l232
  1054  00DA  0849               	movf	_ps2Down,w
  1055  00DB  1903               	btfsc	3,2
  1056  00DC  28E2               	goto	l232
  1057                           
  1058                           ;main.c: 483:                     outPorts[8] &= 251;
  1059  00DD  30FB               	movlw	251
  1060  00DE  00AD               	movwf	??_main
  1061  00DF  082D               	movf	??_main,w
  1062  00E0  05C6               	andwf	_outPorts+8,f
  1063                           
  1064                           ;main.c: 484:                 } else {
  1065  00E1  28E3               	goto	l1444
  1066  00E2                     l232:	
  1067                           
  1068                           ;main.c: 485:                     outPorts[8] |= 4;
  1069  00E2  1546               	bsf	_outPorts+8,2
  1070  00E3                     l1444:	
  1071                           ;main.c: 486:                 }
  1072                           
  1073                           
  1074                           ;main.c: 493:                 for(int8_t i = 0; i < 41 ;i+=2) {
  1075  00E3  01B1               	clrf	main@i
  1076  00E4  0831               	movf	main@i,w
  1077  00E5  3A80               	xorlw	128
  1078  00E6  3E57               	addlw	-169
  1079  00E7  1803               	btfsc	3,0
  1080  00E8  291B               	goto	l1474
  1081  00E9                     l1450:	
  1082                           
  1083                           ;main.c: 494:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
  1084  00E9  0831               	movf	main@i,w
  1085  00EA  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1086  00EB  0084               	movwf	4
  1087  00EC  2200               	fcall	stringdir
  1088  00ED  063B               	xorwf	_ps2Data,w
  1089  00EE  1D03               	skipz
  1090  00EF  2912               	goto	l1470
  1091                           
  1092                           ;main.c: 495:                         if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0)
      +                           || replaced == ps2Data) {
  1093  00F0  083D               	movf	_shift_ctrl_alt,w
  1094  00F1  3903               	andlw	3
  1095  00F2  1903               	btfsc	3,2
  1096  00F3  28F7               	goto	l1456
  1097  00F4  0837               	movf	_replaced,w
  1098  00F5  1903               	btfsc	3,2
  1099  00F6  28FB               	goto	l1458
  1100  00F7                     l1456:	
  1101  00F7  0837               	movf	_replaced,w
  1102  00F8  063B               	xorwf	_ps2Data,w
  1103  00F9  1D03               	skipz
  1104  00FA  290D               	goto	l1466
  1105  00FB                     l1458:	
  1106                           
  1107                           ;main.c: 496:                             if ( ps2Down ) replaced = ps2Data;
  1108  00FB  0849               	movf	_ps2Down,w
  1109  00FC  1903               	btfsc	3,2
  1110  00FD  2903               	goto	l1462
  1111  00FE  083B               	movf	_ps2Data,w
  1112  00FF  00AD               	movwf	??_main
  1113  0100  082D               	movf	??_main,w
  1114  0101  00B7               	movwf	_replaced
  1115  0102  2904               	goto	l1464
  1116  0103                     l1462:	
  1117                           ;main.c: 497:                             else replaced = 0;
  1118                           
  1119  0103  01B7               	clrf	_replaced
  1120  0104                     l1464:	
  1121                           
  1122                           ;main.c: 498:                             ps2Data = replaceOnShiftKeyDown[i+1];
  1123  0104  0831               	movf	main@i,w
  1124  0105  3E01               	addlw	1
  1125  0106  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1126  0107  0084               	movwf	4
  1127  0108  2200               	fcall	stringdir
  1128  0109  00AD               	movwf	??_main
  1129  010A  082D               	movf	??_main,w
  1130  010B  00BB               	movwf	_ps2Data
  1131                           
  1132                           ;main.c: 499:                         } else {
  1133  010C  291B               	goto	l1474
  1134  010D                     l1466:	
  1135                           
  1136                           ;main.c: 500:                             if ( replaced != 0 ) ps2Data = 0;
  1137  010D  0837               	movf	_replaced,w
  1138  010E  1903               	btfsc	3,2
  1139  010F  291B               	goto	l1474
  1140  0110  01BB               	clrf	_ps2Data
  1141                           
  1142                           ;main.c: 502:                         break;
  1143                           
  1144                           ;main.c: 501:                         }
  1145  0111  291B               	goto	l1474
  1146  0112                     l1470:	
  1147                           ;main.c: 503:                     }
  1148                           
  1149                           
  1150                           ;main.c: 504:                 }
  1151  0112  3002               	movlw	2
  1152  0113  00AD               	movwf	??_main
  1153  0114  082D               	movf	??_main,w
  1154  0115  07B1               	addwf	main@i,f
  1155  0116  0831               	movf	main@i,w
  1156  0117  3A80               	xorlw	128
  1157  0118  3E57               	addlw	-169
  1158  0119  1C03               	skipc
  1159  011A  28E9               	goto	l1450
  1160  011B                     l1474:	
  1161                           
  1162                           ;main.c: 508:                 for(int8_t i = 0; i < 8; i++) {
  1163  011B  01B0               	clrf	main@i_164
  1164  011C  0830               	movf	main@i_164,w
  1165  011D  3A80               	xorlw	128
  1166  011E  3E78               	addlw	-136
  1167  011F  1803               	btfsc	3,0
  1168  0120  2947               	goto	l1494
  1169  0121                     l1480:	
  1170                           
  1171                           ;main.c: 509:                     if ( ps2Data == replaceOnDelayKeyDown[i] && ps2Down ) 
      +                          {
  1172  0121  0830               	movf	main@i_164,w
  1173  0122  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
  1174  0123  0084               	movwf	4
  1175  0124  2200               	fcall	stringdir
  1176  0125  063B               	xorwf	_ps2Data,w
  1177  0126  1D03               	skipz
  1178  0127  293E               	goto	l1490
  1179  0128  0849               	movf	_ps2Down,w
  1180  0129  1903               	btfsc	3,2
  1181  012A  293E               	goto	l1490
  1182                           
  1183                           ;main.c: 510:                         if ( delay == 0 ) {
  1184  012B  0834               	movf	_delay,w
  1185  012C  0435               	iorwf	_delay+1,w
  1186  012D  1D03               	btfss	3,2
  1187  012E  293C               	goto	l1488
  1188                           
  1189                           ;main.c: 511:                             delayedKey = ps2Data;
  1190  012F  083B               	movf	_ps2Data,w
  1191  0130  00AD               	movwf	??_main
  1192  0131  082D               	movf	??_main,w
  1193  0132  00B6               	movwf	_delayedKey
  1194                           
  1195                           ;main.c: 512:                             delay = 2600;
  1196  0133  3028               	movlw	40
  1197  0134  00B4               	movwf	_delay
  1198  0135  300A               	movlw	10
  1199  0136  00B5               	movwf	_delay+1
  1200                           
  1201                           ;main.c: 513:                             ps2Data = 111;
  1202  0137  306F               	movlw	111
  1203  0138  00AD               	movwf	??_main
  1204  0139  082D               	movf	??_main,w
  1205  013A  00BB               	movwf	_ps2Data
  1206                           
  1207                           ;main.c: 514:                         } else {
  1208  013B  2947               	goto	l1494
  1209  013C                     l1488:	
  1210                           
  1211                           ;main.c: 515:                             ps2Data = 0;
  1212  013C  01BB               	clrf	_ps2Data
  1213                           
  1214                           ;main.c: 517:                         break;
  1215                           
  1216                           ;main.c: 516:                         }
  1217  013D  2947               	goto	l1494
  1218  013E                     l1490:	
  1219                           ;main.c: 518:                     }
  1220                           
  1221                           
  1222                           ;main.c: 519:                 }
  1223  013E  3001               	movlw	1
  1224  013F  00AD               	movwf	??_main
  1225  0140  082D               	movf	??_main,w
  1226  0141  07B0               	addwf	main@i_164,f
  1227  0142  0830               	movf	main@i_164,w
  1228  0143  3A80               	xorlw	128
  1229  0144  3E78               	addlw	-136
  1230  0145  1C03               	skipc
  1231  0146  2921               	goto	l1480
  1232  0147                     l1494:	
  1233                           
  1234                           ;main.c: 525:                 updateKey(ps2Data, ps2Down );
  1235  0147  0849               	movf	_ps2Down,w
  1236  0148  00AD               	movwf	??_main
  1237  0149  082D               	movf	??_main,w
  1238  014A  00A6               	movwf	updateKey@set
  1239  014B  083B               	movf	_ps2Data,w
  1240  014C  236C               	fcall	_updateKey
  1241                           
  1242                           ;main.c: 528:                 sendDataToAltera();
  1243  014D  23C3               	fcall	_sendDataToAltera
  1244  014E                     l1498:	
  1245                           ;main.c: 534:             }
  1246                           
  1247                           ;main.c: 530:             } else if ( ps2Device == 1 ) {
  1248                           
  1249                           
  1250                           ;main.c: 537:             ps2Data = 0;
  1251  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1252  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1253  0150  01BB               	clrf	_ps2Data
  1254                           
  1255                           ;main.c: 539:             ps2WaitCode = 0;
  1256  0151  01B9               	clrf	_ps2WaitCode
  1257                           
  1258                           ;main.c: 540:             ps2Down = 1;
  1259  0152  01C9               	clrf	_ps2Down
  1260  0153  0AC9               	incf	_ps2Down,f
  1261                           
  1262                           ;main.c: 541:             ps2NeedEncode = 0;
  1263  0154  01F9               	clrf	_ps2NeedEncode
  1264                           
  1265                           ;main.c: 542:             ps2DataState = 0;
  1266  0155  01FC               	clrf	_ps2DataState
  1267                           
  1268                           ;main.c: 546:         } else if ( delay != 0 ) {
  1269  0156  29B1               	goto	l253
  1270  0157                     l1502:	
  1271  0157  1283               	bcf	3,5	;RP0=0, select bank0
  1272  0158  1303               	bcf	3,6	;RP1=0, select bank0
  1273  0159  0834               	movf	_delay,w
  1274  015A  0435               	iorwf	_delay+1,w
  1275  015B  1903               	btfsc	3,2
  1276  015C  297E               	goto	l1518
  1277                           
  1278                           ;main.c: 548:             delay--;
  1279  015D  3001               	movlw	1
  1280  015E  02B4               	subwf	_delay,f
  1281  015F  3000               	movlw	0
  1282  0160  1C03               	skipc
  1283  0161  03B5               	decf	_delay+1,f
  1284  0162  02B5               	subwf	_delay+1,f
  1285                           
  1286                           ;main.c: 549:             if ( delay == 0 ) {
  1287  0163  0834               	movf	_delay,w
  1288  0164  0435               	iorwf	_delay+1,w
  1289  0165  1D03               	btfss	3,2
  1290  0166  296C               	goto	l1510
  1291                           
  1292                           ;main.c: 551:                 updatePort(0x00, 0);
  1293  0167  01A0               	clrf	updatePort@set
  1294  0168  3000               	movlw	0
  1295  0169  244A               	fcall	_updatePort
  1296                           
  1297                           ;main.c: 553:                 sendDataToAltera();
  1298  016A  23C3               	fcall	_sendDataToAltera
  1299                           
  1300                           ;main.c: 555:             } else if ( delay == 1300 ) {
  1301  016B  29B1               	goto	l253
  1302  016C                     l1510:	
  1303  016C  3014               	movlw	20
  1304  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1305  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1306  016F  0634               	xorwf	_delay,w
  1307  0170  3005               	movlw	5
  1308  0171  1903               	skipnz
  1309  0172  0635               	xorwf	_delay+1,w
  1310  0173  1D03               	btfss	3,2
  1311  0174  29B1               	goto	l253
  1312                           
  1313                           ;main.c: 557:                 updateKey(delayedKey, 1 );
  1314  0175  01A6               	clrf	updateKey@set
  1315  0176  0AA6               	incf	updateKey@set,f
  1316  0177  0836               	movf	_delayedKey,w
  1317  0178  236C               	fcall	_updateKey
  1318                           
  1319                           ;main.c: 558:                 delayedKey = 0;
  1320  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1321  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1322  017B  01B6               	clrf	_delayedKey
  1323                           
  1324                           ;main.c: 559:                 sendDataToAltera();
  1325  017C  23C3               	fcall	_sendDataToAltera
  1326                           
  1327                           ;main.c: 562:         } else {
  1328                           
  1329                           ;main.c: 560:             }
  1330  017D  29B1               	goto	l253
  1331  017E                     l1518:	
  1332                           
  1333                           ;main.c: 565:             kempstonMouseEmulatorDelay++;
  1334  017E  3001               	movlw	1
  1335  017F  1283               	bcf	3,5	;RP0=0, select bank0
  1336  0180  1303               	bcf	3,6	;RP1=0, select bank0
  1337  0181  07B2               	addwf	_kempstonMouseEmulatorDelay,f
  1338  0182  1803               	skipnc
  1339  0183  0AB3               	incf	_kempstonMouseEmulatorDelay+1,f
  1340  0184  3000               	movlw	0
  1341  0185  07B3               	addwf	_kempstonMouseEmulatorDelay+1,f
  1342                           
  1343                           ;main.c: 566:             if ( kempstonMouseEmulatorDelay > 2000 ) {
  1344  0186  3007               	movlw	7
  1345  0187  0233               	subwf	_kempstonMouseEmulatorDelay+1,w
  1346  0188  30D1               	movlw	209
  1347  0189  1903               	skipnz
  1348  018A  0232               	subwf	_kempstonMouseEmulatorDelay,w
  1349  018B  1C03               	skipc
  1350  018C  29B1               	goto	l253
  1351                           
  1352                           ;main.c: 568:                 if ( numLock ) {
  1353  018D  0838               	movf	_numLock,w
  1354  018E  1903               	btfsc	3,2
  1355  018F  29AC               	goto	l1542
  1356                           
  1357                           ;main.c: 569:                     if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]
      +                          -=2;
  1358  0190  1C3C               	btfss	_kempstonMouseEmulatorKeys,0
  1359  0191  2994               	goto	l1526
  1360  0192  3002               	movlw	2
  1361  0193  02C7               	subwf	_outPorts+9,f
  1362  0194                     l1526:	
  1363                           
  1364                           ;main.c: 570:                     if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]
      +                          +=2;
  1365  0194  1CBC               	btfss	_kempstonMouseEmulatorKeys,1
  1366  0195  299A               	goto	l1530
  1367  0196  3002               	movlw	2
  1368  0197  00AD               	movwf	??_main
  1369  0198  082D               	movf	??_main,w
  1370  0199  07C7               	addwf	_outPorts+9,f
  1371  019A                     l1530:	
  1372                           
  1373                           ;main.c: 571:                     if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10
      +                          ]+=2;
  1374  019A  1D3C               	btfss	_kempstonMouseEmulatorKeys,2
  1375  019B  29A0               	goto	l1534
  1376  019C  3002               	movlw	2
  1377  019D  00AD               	movwf	??_main
  1378  019E  082D               	movf	??_main,w
  1379  019F  07C8               	addwf	_outPorts+10,f
  1380  01A0                     l1534:	
  1381                           
  1382                           ;main.c: 572:                     if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10
      +                          ]-=2;
  1383  01A0  1DBC               	btfss	_kempstonMouseEmulatorKeys,3
  1384  01A1  29A4               	goto	l1538
  1385  01A2  3002               	movlw	2
  1386  01A3  02C8               	subwf	_outPorts+10,f
  1387  01A4                     l1538:	
  1388                           
  1389                           ;main.c: 573:                     if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8
      +                          ] &= 254;
  1390  01A4  1E3C               	btfss	_kempstonMouseEmulatorKeys,4
  1391  01A5  29AB               	goto	l265
  1392  01A6  30FE               	movlw	254
  1393  01A7  00AD               	movwf	??_main
  1394  01A8  082D               	movf	??_main,w
  1395  01A9  05C6               	andwf	_outPorts+8,f
  1396  01AA  29AC               	goto	l1542
  1397  01AB                     l265:	
  1398                           ;main.c: 574:                     else outPorts[8] |= 1;
  1399                           
  1400  01AB  1446               	bsf	_outPorts+8,0
  1401  01AC                     l1542:	
  1402                           ;main.c: 575:                 }
  1403                           
  1404                           
  1405                           ;main.c: 577:                 sendDataToAltera();
  1406  01AC  23C3               	fcall	_sendDataToAltera
  1407                           
  1408                           ;main.c: 579:                 kempstonMouseEmulatorDelay = 0;
  1409  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1410  01AE  1303               	bcf	3,6	;RP1=0, select bank0
  1411  01AF  01B2               	clrf	_kempstonMouseEmulatorDelay
  1412  01B0  01B3               	clrf	_kempstonMouseEmulatorDelay+1
  1413  01B1                     l253:	
  1414                           ;main.c: 582:         }
  1415                           
  1416                           ;main.c: 580:             }
  1417                           
  1418  01B1  0064               	clrwdt	;# 
  1419                           
  1420                           ;main.c: 585:     }
  1421  01B2  2887               	goto	l1414
  1422  01B3                     __end_of_main:	
  1423                           
  1424                           	psect	text1
  1425  036C                     __ptext1:	
  1426 ;; *************** function _updateKey *****************
  1427 ;; Defined at:
  1428 ;;		line 190 in file "main.c"
  1429 ;; Parameters:    Size  Location     Type
  1430 ;;  key             1    wreg     unsigned char 
  1431 ;;  set             1    6[BANK0 ] unsigned char 
  1432 ;; Auto vars:     Size  Location     Type
  1433 ;;  key             1   11[BANK0 ] unsigned char 
  1434 ;;  code            1   12[BANK0 ] unsigned char 
  1435 ;;  localCtrl       1   10[BANK0 ] unsigned char 
  1436 ;;  localShift      1    8[BANK0 ] unsigned char 
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  1    wreg      void 
  1439 ;; Registers used:
  1440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1446 ;;      Params:         0       1       0       0
  1447 ;;      Locals:         0       5       0       0
  1448 ;;      Temps:          0       1       0       0
  1449 ;;      Totals:         0       7       0       0
  1450 ;;Total ram usage:        7 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; Hardware stack levels required when called:    3
  1453 ;; This function calls:
  1454 ;;		_updatePort
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460                           
  1461                           ;psect for function _updateKey
  1462  036C                     _updateKey:	
  1463                           
  1464                           ;incstack = 0
  1465                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1466                           ;updateKey@key stored from wreg
  1467  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1468  036D  1303               	bcf	3,6	;RP1=0, select bank0
  1469  036E  00AB               	movwf	updateKey@key
  1470                           
  1471                           ;main.c: 190: void updateKey(uint8_t key, uint8_t set);main.c: 191: {;main.c: 192:     u
      +                          int8_t code = 0xFF;
  1472  036F  30FF               	movlw	255
  1473  0370  00A7               	movwf	??_updateKey
  1474  0371  0827               	movf	??_updateKey,w
  1475  0372  00AC               	movwf	updateKey@code
  1476                           
  1477                           ;main.c: 193:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  1478  0373  01A9               	clrf	_updateKey$143
  1479  0374  083D               	movf	_shift_ctrl_alt,w
  1480  0375  3903               	andlw	3
  1481  0376  1903               	btfsc	3,2
  1482  0377  2B7D               	goto	l1208
  1483  0378  0837               	movf	_replaced,w
  1484  0379  1D03               	btfss	3,2
  1485  037A  2B7D               	goto	l1208
  1486  037B  01A9               	clrf	_updateKey$143
  1487  037C  0AA9               	incf	_updateKey$143,f
  1488  037D                     l1208:	
  1489  037D  0829               	movf	_updateKey$143,w
  1490  037E  00A7               	movwf	??_updateKey
  1491  037F  0827               	movf	??_updateKey,w
  1492  0380  00A8               	movwf	updateKey@localShift
  1493                           
  1494                           ;main.c: 194:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  1495  0381  083D               	movf	_shift_ctrl_alt,w
  1496  0382  390C               	andlw	12
  1497  0383  1903               	btfsc	3,2
  1498  0384  2B87               	goto	u840
  1499  0385  3001               	movlw	1
  1500  0386  2B88               	goto	u850
  1501  0387                     u840:	
  1502  0387  3000               	movlw	0
  1503  0388                     u850:	
  1504  0388  00A7               	movwf	??_updateKey
  1505  0389  0827               	movf	??_updateKey,w
  1506  038A  00AA               	movwf	updateKey@localCtrl
  1507                           
  1508                           ;main.c: 195:     if ( key < 128 ) code = codeToMatrix[key];
  1509  038B  3080               	movlw	128
  1510  038C  022B               	subwf	updateKey@key,w
  1511  038D  1803               	skipnc
  1512  038E  2B96               	goto	l1216
  1513  038F  082B               	movf	updateKey@key,w
  1514  0390  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  1515  0391  0084               	movwf	4
  1516  0392  2200               	fcall	stringdir
  1517  0393  00A7               	movwf	??_updateKey
  1518  0394  0827               	movf	??_updateKey,w
  1519  0395  00AC               	movwf	updateKey@code
  1520  0396                     l1216:	
  1521                           
  1522                           ;main.c: 196:     if ( code != 0xFF ) {
  1523  0396  0A2C               	incf	updateKey@code,w
  1524  0397  1903               	btfsc	3,2
  1525  0398  2BB1               	goto	l1224
  1526                           
  1527                           ;main.c: 197:         updatePort(code, set);
  1528  0399  0826               	movf	updateKey@set,w
  1529  039A  00A7               	movwf	??_updateKey
  1530  039B  0827               	movf	??_updateKey,w
  1531  039C  00A0               	movwf	updatePort@set
  1532  039D  082C               	movf	updateKey@code,w
  1533  039E  244A               	fcall	_updatePort
  1534                           
  1535                           ;main.c: 198:         localShift |= ((code & 64) > 0);
  1536  039F  1283               	bcf	3,5	;RP0=0, select bank0
  1537  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  1538  03A1  1F2C               	btfss	updateKey@code,6
  1539  03A2  2BA5               	goto	u880
  1540  03A3  3001               	movlw	1
  1541  03A4  2BA6               	goto	u890
  1542  03A5                     u880:	
  1543  03A5  3000               	movlw	0
  1544  03A6                     u890:	
  1545  03A6  00A7               	movwf	??_updateKey
  1546  03A7  0827               	movf	??_updateKey,w
  1547  03A8  04A8               	iorwf	updateKey@localShift,f
  1548                           
  1549                           ;main.c: 199:         localCtrl |= ((code & 128) > 0);
  1550  03A9  1FAC               	btfss	updateKey@code,7
  1551  03AA  2BAD               	goto	u900
  1552  03AB  3001               	movlw	1
  1553  03AC  2BAE               	goto	u910
  1554  03AD                     u900:	
  1555  03AD  3000               	movlw	0
  1556  03AE                     u910:	
  1557  03AE  00A7               	movwf	??_updateKey
  1558  03AF  0827               	movf	??_updateKey,w
  1559  03B0  04AA               	iorwf	updateKey@localCtrl,f
  1560  03B1                     l1224:	
  1561                           ;main.c: 200:     }
  1562                           
  1563                           
  1564                           ;main.c: 201:     if ( set ) {
  1565  03B1  0826               	movf	updateKey@set,w
  1566  03B2  1903               	btfsc	3,2
  1567  03B3  0008               	return
  1568                           
  1569                           ;main.c: 202:         updatePort(0x00, localShift );
  1570  03B4  0828               	movf	updateKey@localShift,w
  1571  03B5  00A7               	movwf	??_updateKey
  1572  03B6  0827               	movf	??_updateKey,w
  1573  03B7  00A0               	movwf	updatePort@set
  1574  03B8  3000               	movlw	0
  1575  03B9  244A               	fcall	_updatePort
  1576                           
  1577                           ;main.c: 203:         updatePort(0x0F, localCtrl );
  1578  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  1579  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  1580  03BC  082A               	movf	updateKey@localCtrl,w
  1581  03BD  00A7               	movwf	??_updateKey
  1582  03BE  0827               	movf	??_updateKey,w
  1583  03BF  00A0               	movwf	updatePort@set
  1584  03C0  300F               	movlw	15
  1585  03C1  244A               	fcall	_updatePort
  1586  03C2  0008               	return
  1587  03C3                     __end_of_updateKey:	
  1588                           ;main.c: 204:     }
  1589                           
  1590                           
  1591                           	psect	text2
  1592  044A                     __ptext2:	
  1593 ;; *************** function _updatePort *****************
  1594 ;; Defined at:
  1595 ;;		line 181 in file "main.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  bit_id          1    wreg     unsigned char 
  1598 ;;  set             1    0[BANK0 ] unsigned char 
  1599 ;; Auto vars:     Size  Location     Type
  1600 ;;  bit_id          1    5[BANK0 ] unsigned char 
  1601 ;;  a               1    4[BANK0 ] unsigned char 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1611 ;;      Params:         0       1       0       0
  1612 ;;      Locals:         0       2       0       0
  1613 ;;      Temps:          0       3       0       0
  1614 ;;      Totals:         0       6       0       0
  1615 ;;Total ram usage:        6 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    2
  1618 ;; This function calls:
  1619 ;;		Nothing
  1620 ;; This function is called by:
  1621 ;;		_updateKey
  1622 ;;		_main
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           
  1627                           ;psect for function _updatePort
  1628  044A                     _updatePort:	
  1629                           
  1630                           ;incstack = 0
  1631                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1632                           ;updatePort@bit_id stored from wreg
  1633  044A  1283               	bcf	3,5	;RP0=0, select bank0
  1634  044B  1303               	bcf	3,6	;RP1=0, select bank0
  1635  044C  00A5               	movwf	updatePort@bit_id
  1636                           
  1637                           ;main.c: 181: void updatePort(uint8_t bit_id, uint8_t set);main.c: 182: {;main.c: 183:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  1638  044D  3001               	movlw	1
  1639  044E  00A1               	movwf	??_updatePort
  1640  044F  0825               	movf	updatePort@bit_id,w
  1641  0450  00A2               	movwf	??_updatePort+1
  1642  0451  3003               	movlw	3
  1643  0452                     u795:	
  1644  0452  1003               	clrc
  1645  0453  0CA2               	rrf	??_updatePort+1,f
  1646  0454  3EFF               	addlw	-1
  1647  0455  1D03               	skipz
  1648  0456  2C52               	goto	u795
  1649  0457  0822               	movf	??_updatePort+1,w
  1650  0458  3907               	andlw	7
  1651  0459  3E01               	addlw	1
  1652  045A  2C5D               	goto	u804
  1653  045B                     u805:	
  1654  045B  1003               	clrc
  1655  045C  0DA1               	rlf	??_updatePort,f
  1656  045D                     u804:	
  1657  045D  3EFF               	addlw	-1
  1658  045E  1D03               	skipz
  1659  045F  2C5B               	goto	u805
  1660  0460  0821               	movf	??_updatePort,w
  1661  0461  00A3               	movwf	??_updatePort+2
  1662  0462  0823               	movf	??_updatePort+2,w
  1663  0463  00A4               	movwf	updatePort@a
  1664                           
  1665                           ;main.c: 184:     if ( set ) outPorts[bit_id & 7] |= a;
  1666  0464  0820               	movf	updatePort@set,w
  1667  0465  1903               	btfsc	3,2
  1668  0466  2C71               	goto	l1198
  1669  0467  0824               	movf	updatePort@a,w
  1670  0468  00A1               	movwf	??_updatePort
  1671  0469  0825               	movf	updatePort@bit_id,w
  1672  046A  3907               	andlw	7
  1673  046B  3E3E               	addlw	(low (_outPorts| 0))& (0+255)
  1674  046C  0084               	movwf	4
  1675  046D  0821               	movf	??_updatePort,w
  1676  046E  1383               	bcf	3,7	;select IRP bank0
  1677  046F  0480               	iorwf	0,f
  1678  0470  0008               	return
  1679  0471                     l1198:	
  1680                           ;main.c: 185:     else outPorts[bit_id & 7] &= ~a;
  1681                           
  1682  0471  0924               	comf	updatePort@a,w
  1683  0472  00A1               	movwf	??_updatePort
  1684  0473  0825               	movf	updatePort@bit_id,w
  1685  0474  3907               	andlw	7
  1686  0475  3E3E               	addlw	(low (_outPorts| 0))& (0+255)
  1687  0476  0084               	movwf	4
  1688  0477  0821               	movf	??_updatePort,w
  1689  0478  1383               	bcf	3,7	;select IRP bank0
  1690  0479  0580               	andwf	0,f
  1691  047A  0008               	return
  1692  047B                     __end_of_updatePort:	
  1693                           
  1694                           	psect	text3
  1695  03C3                     __ptext3:	
  1696 ;; *************** function _sendDataToAltera *****************
  1697 ;; Defined at:
  1698 ;;		line 241 in file "main.c"
  1699 ;; Parameters:    Size  Location     Type
  1700 ;;		None
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;  i               1    4[BANK0 ] char 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1712 ;;      Params:         0       0       0       0
  1713 ;;      Locals:         0       3       0       0
  1714 ;;      Temps:          0       2       0       0
  1715 ;;      Totals:         0       5       0       0
  1716 ;;Total ram usage:        5 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:    3
  1719 ;; This function calls:
  1720 ;;		_myDelay
  1721 ;; This function is called by:
  1722 ;;		_main
  1723 ;; This function uses a non-reentrant model
  1724 ;;
  1725                           
  1726                           
  1727                           ;psect for function _sendDataToAltera
  1728  03C3                     _sendDataToAltera:	
  1729                           
  1730                           ;main.c: 243:     RA1 = 0;
  1731                           
  1732                           ;incstack = 0
  1733                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1734  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  1735  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  1736  03C5  1085               	bcf	5,1	;volatile
  1737                           
  1738                           ;main.c: 244:     RA2 = 1;
  1739  03C6  1505               	bsf	5,2	;volatile
  1740                           
  1741                           ;main.c: 245:     myDelay();
  1742  03C7  248E               	fcall	_myDelay
  1743                           
  1744                           ;main.c: 246:     RA1 = 1;
  1745  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  1746  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  1747  03CA  1485               	bsf	5,1	;volatile
  1748                           
  1749                           ;main.c: 247:     myDelay();
  1750  03CB  248E               	fcall	_myDelay
  1751                           
  1752                           ;main.c: 248:     RA1 = 0;
  1753  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  1754  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  1755  03CE  1085               	bcf	5,1	;volatile
  1756                           
  1757                           ;main.c: 249:     myDelay();
  1758  03CF  248E               	fcall	_myDelay
  1759                           
  1760                           ;main.c: 250:     for(int8_t i=0;i<11;i++) {
  1761  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  1762  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  1763  03D2  01A4               	clrf	sendDataToAltera@i
  1764  03D3  0824               	movf	sendDataToAltera@i,w
  1765  03D4  3A80               	xorlw	128
  1766  03D5  3E75               	addlw	-139
  1767  03D6  1803               	btfsc	3,0
  1768  03D7  2C09               	goto	l1264
  1769  03D8                     l1242:	
  1770                           
  1771                           ;main.c: 251:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1772  03D8  0824               	movf	sendDataToAltera@i,w
  1773  03D9  3A80               	xorlw	128
  1774  03DA  3E78               	addlw	-136
  1775  03DB  1C03               	skipc
  1776  03DC  2BE8               	goto	l1246
  1777  03DD  0824               	movf	sendDataToAltera@i,w
  1778  03DE  3E3E               	addlw	(low (_outPorts| 0))& (0+255)
  1779  03DF  0084               	movwf	4
  1780  03E0  1383               	bcf	3,7	;select IRP bank0
  1781  03E1  0800               	movf	0,w
  1782  03E2  00A0               	movwf	??_sendDataToAltera
  1783  03E3  01A1               	clrf	??_sendDataToAltera+1
  1784  03E4  0820               	movf	??_sendDataToAltera,w
  1785  03E5  00A2               	movwf	_sendDataToAltera$150
  1786  03E6  0821               	movf	??_sendDataToAltera+1,w
  1787  03E7  2BF2               	goto	L1
  1788  03E8                     l1246:	
  1789  03E8  0824               	movf	sendDataToAltera@i,w
  1790  03E9  3E3E               	addlw	(low (_outPorts| 0))& (0+255)
  1791  03EA  0084               	movwf	4
  1792  03EB  1383               	bcf	3,7	;select IRP bank0
  1793  03EC  0800               	movf	0,w
  1794  03ED  00A0               	movwf	??_sendDataToAltera
  1795  03EE  01A1               	clrf	??_sendDataToAltera+1
  1796  03EF  0920               	comf	??_sendDataToAltera,w
  1797  03F0  00A2               	movwf	_sendDataToAltera$150
  1798  03F1  0921               	comf	??_sendDataToAltera+1,w
  1799  03F2                     L1:	
  1800  03F2  00A3               	movwf	_sendDataToAltera$150+1
  1801  03F3  0822               	movf	_sendDataToAltera$150,w
  1802  03F4  0086               	movwf	6	;volatile
  1803                           
  1804                           ;main.c: 252:         myDelay();
  1805  03F5  248E               	fcall	_myDelay
  1806                           
  1807                           ;main.c: 253:         RA2 = 0;
  1808  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1809  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1810  03F8  1105               	bcf	5,2	;volatile
  1811                           
  1812                           ;main.c: 254:         myDelay();
  1813  03F9  248E               	fcall	_myDelay
  1814                           
  1815                           ;main.c: 255:         RA2 = 1;
  1816  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  1817  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  1818  03FC  1505               	bsf	5,2	;volatile
  1819                           
  1820                           ;main.c: 256:         myDelay();
  1821  03FD  248E               	fcall	_myDelay
  1822                           
  1823                           ;main.c: 257:     }
  1824  03FE  3001               	movlw	1
  1825  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  1826  0400  1303               	bcf	3,6	;RP1=0, select bank0
  1827  0401  00A0               	movwf	??_sendDataToAltera
  1828  0402  0820               	movf	??_sendDataToAltera,w
  1829  0403  07A4               	addwf	sendDataToAltera@i,f
  1830  0404  0824               	movf	sendDataToAltera@i,w
  1831  0405  3A80               	xorlw	128
  1832  0406  3E75               	addlw	-139
  1833  0407  1C03               	skipc
  1834  0408  2BD8               	goto	l1242
  1835  0409                     l1264:	
  1836                           
  1837                           ;main.c: 258:     PORTB = 0xFF;
  1838  0409  30FF               	movlw	255
  1839  040A  0086               	movwf	6	;volatile
  1840  040B  0008               	return
  1841  040C                     __end_of_sendDataToAltera:	
  1842                           
  1843                           	psect	text4
  1844  048E                     __ptext4:	
  1845 ;; *************** function _myDelay *****************
  1846 ;; Defined at:
  1847 ;;		line 209 in file "main.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;		None
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		None
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1861 ;;      Params:         0       0       0       0
  1862 ;;      Locals:         0       0       0       0
  1863 ;;      Temps:          0       0       0       0
  1864 ;;      Totals:         0       0       0       0
  1865 ;;Total ram usage:        0 bytes
  1866 ;; Hardware stack levels used:    1
  1867 ;; Hardware stack levels required when called:    2
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_sendDataToAltera
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875                           
  1876                           ;psect for function _myDelay
  1877  048E                     _myDelay:	
  1878                           
  1879                           ;incstack = 0
  1880                           ; Regs used in _myDelay: []
  1881  048E  0008               	return
  1882  048F                     __end_of_myDelay:	
  1883                           
  1884                           	psect	text5
  1885  040C                     __ptext5:	
  1886 ;; *************** function _calculateBitsFromTable *****************
  1887 ;; Defined at:
  1888 ;;		line 311 in file "main.c"
  1889 ;; Parameters:    Size  Location     Type
  1890 ;;  bits            1    wreg     PTR unsigned char 
  1891 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1892 ;;  table           1    0[BANK0 ] PTR unsigned char 
  1893 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  1894 ;;  count           1    1[BANK0 ] unsigned char 
  1895 ;;  clearIfFound    1    2[BANK0 ] unsigned char 
  1896 ;; Auto vars:     Size  Location     Type
  1897 ;;  bits            1    5[BANK0 ] PTR unsigned char 
  1898 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1899 ;;  i               1    6[BANK0 ] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1909 ;;      Params:         0       3       0       0
  1910 ;;      Locals:         0       2       0       0
  1911 ;;      Temps:          0       2       0       0
  1912 ;;      Totals:         0       7       0       0
  1913 ;;Total ram usage:        7 bytes
  1914 ;; Hardware stack levels used:    2
  1915 ;; Hardware stack levels required when called:    2
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           
  1924                           ;psect for function _calculateBitsFromTable
  1925  040C                     _calculateBitsFromTable:	
  1926                           
  1927                           ;incstack = 0
  1928                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  1929                           ;calculateBitsFromTable@bits stored from wreg
  1930  040C  1283               	bcf	3,5	;RP0=0, select bank0
  1931  040D  1303               	bcf	3,6	;RP1=0, select bank0
  1932  040E  00A5               	movwf	calculateBitsFromTable@bits
  1933                           
  1934                           ;main.c: 311: void calculateBitsFromTable(uint8_t* bits, uint8_t table[], uint8_t count,
      +                           uint8_t clearIfFound);main.c: 312: {;main.c: 313:     for(uint8_t i = 0; i < count;i++)
      +                           {
  1935  040F  01A6               	clrf	calculateBitsFromTable@i
  1936  0410                     l1282:	
  1937  0410  0821               	movf	calculateBitsFromTable@count,w
  1938  0411  0226               	subwf	calculateBitsFromTable@i,w
  1939  0412  1803               	btfsc	3,0
  1940  0413  0008               	return
  1941                           
  1942                           ;main.c: 314:         if ( ps2Data == table[i] ) {
  1943  0414  0826               	movf	calculateBitsFromTable@i,w
  1944  0415  0720               	addwf	calculateBitsFromTable@table,w
  1945  0416  0084               	movwf	4
  1946  0417  2200               	fcall	stringdir
  1947  0418  063B               	xorwf	_ps2Data,w
  1948  0419  1D03               	skipz
  1949  041A  2C45               	goto	l1280
  1950                           
  1951                           ;main.c: 315:             if ( ps2Down ) {
  1952  041B  0849               	movf	_ps2Down,w
  1953  041C  1903               	btfsc	3,2
  1954  041D  2C2F               	goto	l1274
  1955                           
  1956                           ;main.c: 316:                 (*bits) |= (1 << i);
  1957  041E  3001               	movlw	1
  1958  041F  00A3               	movwf	??_calculateBitsFromTable
  1959  0420  0A26               	incf	calculateBitsFromTable@i,w
  1960  0421  2C24               	goto	u984
  1961  0422                     u985:	
  1962  0422  1003               	clrc
  1963  0423  0DA3               	rlf	??_calculateBitsFromTable,f
  1964  0424                     u984:	
  1965  0424  3EFF               	addlw	-1
  1966  0425  1D03               	skipz
  1967  0426  2C22               	goto	u985
  1968  0427  0823               	movf	??_calculateBitsFromTable,w
  1969  0428  00A4               	movwf	??_calculateBitsFromTable+1
  1970  0429  0825               	movf	calculateBitsFromTable@bits,w
  1971  042A  0084               	movwf	4
  1972  042B  0824               	movf	??_calculateBitsFromTable+1,w
  1973  042C  1383               	bcf	3,7	;select IRP bank0
  1974  042D  0480               	iorwf	0,f
  1975                           
  1976                           ;main.c: 317:             } else {
  1977  042E  2C40               	goto	l1276
  1978  042F                     l1274:	
  1979                           
  1980                           ;main.c: 318:                 (*bits) &= ~(1 << i);
  1981  042F  3001               	movlw	1
  1982  0430  00A3               	movwf	??_calculateBitsFromTable
  1983  0431  0A26               	incf	calculateBitsFromTable@i,w
  1984  0432  2C35               	goto	u994
  1985  0433                     u995:	
  1986  0433  1003               	clrc
  1987  0434  0DA3               	rlf	??_calculateBitsFromTable,f
  1988  0435                     u994:	
  1989  0435  3EFF               	addlw	-1
  1990  0436  1D03               	skipz
  1991  0437  2C33               	goto	u995
  1992  0438  0823               	movf	??_calculateBitsFromTable,w
  1993  0439  3AFF               	xorlw	255
  1994  043A  00A4               	movwf	??_calculateBitsFromTable+1
  1995  043B  0825               	movf	calculateBitsFromTable@bits,w
  1996  043C  0084               	movwf	4
  1997  043D  0824               	movf	??_calculateBitsFromTable+1,w
  1998  043E  1383               	bcf	3,7	;select IRP bank0
  1999  043F  0580               	andwf	0,f
  2000  0440                     l1276:	
  2001                           ;main.c: 319:             }
  2002                           
  2003                           
  2004                           ;main.c: 320:             if ( clearIfFound ) {
  2005  0440  0822               	movf	calculateBitsFromTable@clearIfFound,w
  2006  0441  1903               	btfsc	3,2
  2007  0442  0008               	return
  2008                           
  2009                           ;main.c: 321:                 ps2Data = 0;
  2010  0443  01BB               	clrf	_ps2Data
  2011                           
  2012                           ;main.c: 323:             break;
  2013                           
  2014                           ;main.c: 322:             }
  2015  0444  0008               	return
  2016  0445                     l1280:	
  2017                           ;main.c: 324:         }
  2018                           
  2019                           
  2020                           ;main.c: 325:     }
  2021  0445  3001               	movlw	1
  2022  0446  00A3               	movwf	??_calculateBitsFromTable
  2023  0447  0823               	movf	??_calculateBitsFromTable,w
  2024  0448  07A6               	addwf	calculateBitsFromTable@i,f
  2025  0449  2C10               	goto	l1282
  2026  044A                     __end_of_calculateBitsFromTable:	
  2027                           
  2028                           	psect	text6
  2029  02E0                     __ptext6:	
  2030 ;; *************** function _myIsr *****************
  2031 ;; Defined at:
  2032 ;;		line 114 in file "main.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;		None
  2035 ;; Auto vars:     Size  Location     Type
  2036 ;;  i               1    8[COMMON] char 
  2037 ;; Return value:  Size  Location     Type
  2038 ;;                  1    wreg      void 
  2039 ;; Registers used:
  2040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2041 ;; Tracked objects:
  2042 ;;		On entry : 0/0
  2043 ;;		On exit  : 0/0
  2044 ;;		Unchanged: 0/0
  2045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2046 ;;      Params:         0       0       0       0
  2047 ;;      Locals:         3       0       0       0
  2048 ;;      Temps:          6       0       0       0
  2049 ;;      Totals:         9       0       0       0
  2050 ;;Total ram usage:        9 bytes
  2051 ;; Hardware stack levels used:    2
  2052 ;; This function calls:
  2053 ;;		Nothing
  2054 ;; This function is called by:
  2055 ;;		Interrupt level 1
  2056 ;; This function uses a non-reentrant model
  2057 ;;
  2058                           
  2059                           
  2060                           ;psect for function _myIsr
  2061  02E0                     _myIsr:	
  2062                           
  2063                           ;main.c: 116:     if(T0IE && T0IF){
  2064  02E0  1A8B               	btfsc	11,5	;volatile
  2065  02E1  1D0B               	btfss	11,2	;volatile
  2066  02E2  2B60               	goto	i1l185
  2067                           
  2068                           ;main.c: 118:         T0IF=0;
  2069  02E3  110B               	bcf	11,2	;volatile
  2070                           
  2071                           ;main.c: 119:         TMR0 = 255;
  2072  02E4  30FF               	movlw	255
  2073  02E5  0081               	movwf	1	;volatile
  2074                           
  2075                           ;main.c: 123:         if ( ps2DataState == 0 ) {
  2076  02E6  087C               	movf	_ps2DataState,w
  2077  02E7  1D03               	btfss	3,2
  2078  02E8  2AF5               	goto	i1l1304
  2079                           
  2080                           ;main.c: 124:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  2081  02E9  1E05               	btfss	5,4	;volatile
  2082  02EA  1985               	btfsc	5,3	;volatile
  2083  02EB  2B60               	goto	i1l185
  2084                           
  2085                           ;main.c: 125:                 ps2BitsCount = 0;
  2086  02EC  01FA               	clrf	_ps2BitsCount
  2087                           
  2088                           ;main.c: 126:                 ps2Bits = 0;
  2089  02ED  01FB               	clrf	_ps2Bits
  2090                           
  2091                           ;main.c: 127:                 ps2DataState = 1;
  2092  02EE  01FC               	clrf	_ps2DataState
  2093  02EF  0AFC               	incf	_ps2DataState,f
  2094                           
  2095                           ;main.c: 128:                 ps2Device = PORTAbits.RA0;
  2096  02F0  3000               	movlw	0
  2097  02F1  1805               	btfsc	5,0	;volatile
  2098  02F2  3001               	movlw	1
  2099  02F3  00BA               	movwf	_ps2Device
  2100                           
  2101                           ;main.c: 130:         } else if ( ps2DataState == 1 ) {
  2102                           
  2103                           ;main.c: 129:             }
  2104  02F4  2B60               	goto	i1l185
  2105  02F5                     i1l1304:	
  2106  02F5  037C               	decf	_ps2DataState,w
  2107  02F6  1D03               	btfss	3,2
  2108  02F7  2B5C               	goto	i1l1352
  2109                           
  2110                           ;main.c: 131:             if ( ps2BitsCount < 8 ) {
  2111  02F8  087A               	movf	_ps2BitsCount,w
  2112  02F9  3A80               	xorlw	128
  2113  02FA  3E78               	addlw	-136
  2114  02FB  1803               	skipnc
  2115  02FC  2B0D               	goto	i1l1312
  2116                           
  2117                           ;main.c: 132:                 if ( PORTAbits.RA3 ) {
  2118  02FD  1D85               	btfss	5,3	;volatile
  2119  02FE  2B11               	goto	i1l1314
  2120                           
  2121                           ;main.c: 133:                     ps2Bits |= ( 1 << ps2BitsCount );
  2122  02FF  3001               	movlw	1
  2123  0300  00F0               	movwf	??_myIsr
  2124  0301  0A7A               	incf	_ps2BitsCount,w
  2125  0302  2B05               	goto	u110_24
  2126  0303                     u110_25:	
  2127  0303  1003               	clrc
  2128  0304  0DF0               	rlf	??_myIsr,f
  2129  0305                     u110_24:	
  2130  0305  3EFF               	addlw	-1
  2131  0306  1D03               	skipz
  2132  0307  2B03               	goto	u110_25
  2133  0308  0870               	movf	??_myIsr,w
  2134  0309  00F1               	movwf	??_myIsr+1
  2135  030A  0871               	movf	??_myIsr+1,w
  2136  030B  04FB               	iorwf	_ps2Bits,f
  2137                           
  2138                           ;main.c: 134:                 }
  2139  030C  2B11               	goto	i1l1314
  2140  030D                     i1l1312:	
  2141                           ;main.c: 136:             } else if ( ps2BitsCount == 8 ) {
  2142                           
  2143                           ;main.c: 135:                 ps2BitsCount++;
  2144                           
  2145  030D  3008               	movlw	8
  2146  030E  067A               	xorwf	_ps2BitsCount,w
  2147  030F  1D03               	btfss	3,2
  2148  0310  2B16               	goto	i1l1316
  2149  0311                     i1l1314:	
  2150                           
  2151                           ;main.c: 137:                 ps2BitsCount++;
  2152  0311  3001               	movlw	1
  2153  0312  00F0               	movwf	??_myIsr
  2154  0313  0870               	movf	??_myIsr,w
  2155  0314  07FA               	addwf	_ps2BitsCount,f
  2156                           
  2157                           ;main.c: 138:             } else if ( ps2BitsCount == 9 ) {
  2158  0315  2B60               	goto	i1l185
  2159  0316                     i1l1316:	
  2160  0316  3009               	movlw	9
  2161  0317  067A               	xorwf	_ps2BitsCount,w
  2162  0318  1D03               	btfss	3,2
  2163  0319  2B60               	goto	i1l185
  2164                           
  2165                           ;main.c: 140:                 if ( ps2NeedEncode ) {
  2166  031A  0879               	movf	_ps2NeedEncode,w
  2167  031B  1903               	btfsc	3,2
  2168  031C  2B35               	goto	i1l1334
  2169                           
  2170                           ;main.c: 141:                     for (int8_t i=0; i < 27; i+=2) {
  2171  031D  01F8               	clrf	myIsr@i
  2172  031E                     L4:	
  2173  031E  0878               	movf	myIsr@i,w
  2174  031F  3A80               	xorlw	128
  2175  0320  3E65               	addlw	-155
  2176  0321  1803               	btfsc	3,0
  2177  0322  2B48               	goto	i1l1340
  2178                           
  2179                           ;main.c: 142:                         if ( ps2Bits == replaceTwoBytesCodes[i] ) {
  2180  0323  0878               	movf	myIsr@i,w
  2181  0324  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2182  0325  0084               	movwf	4
  2183  0326  2200               	fcall	stringdir
  2184  0327  067B               	xorwf	_ps2Bits,w
  2185  0328  1D03               	skipz
  2186  0329  2B30               	goto	i1l1330
  2187                           
  2188                           ;main.c: 143:                             ps2Data = replaceTwoBytesCodes[i+1];
  2189  032A  0878               	movf	myIsr@i,w
  2190  032B  3E01               	addlw	1
  2191  032C  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2192  032D  0084               	movwf	4
  2193  032E  2200               	fcall	stringdir
  2194  032F  2B45               	goto	L2
  2195  0330                     i1l1330:	
  2196                           ;main.c: 145:                         }
  2197                           
  2198                           ;main.c: 144:                             break;
  2199                           
  2200                           
  2201                           ;main.c: 146:                     }
  2202  0330  3002               	movlw	2
  2203  0331  00F0               	movwf	??_myIsr
  2204  0332  0870               	movf	??_myIsr,w
  2205  0333  07F8               	addwf	myIsr@i,f
  2206  0334  2B1E               	goto	L4
  2207  0335                     i1l1334:	
  2208                           ;main.c: 147:                 } else {
  2209                           
  2210                           
  2211                           ;main.c: 148:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2212  0335  3083               	movlw	131
  2213  0336  067B               	xorwf	_ps2Bits,w
  2214  0337  1903               	btfsc	3,2
  2215  0338  2B40               	goto	i1l1338
  2216  0339  087B               	movf	_ps2Bits,w
  2217  033A  00F0               	movwf	??_myIsr
  2218  033B  01F1               	clrf	??_myIsr+1
  2219  033C  0870               	movf	??_myIsr,w
  2220  033D  00F6               	movwf	_myIsr$133
  2221  033E  0871               	movf	??_myIsr+1,w
  2222  033F  2B43               	goto	L3
  2223  0340                     i1l1338:	
  2224  0340  303F               	movlw	63
  2225  0341  00F6               	movwf	_myIsr$133
  2226  0342  3000               	movlw	0
  2227  0343                     L3:	
  2228  0343  00F7               	movwf	_myIsr$133+1
  2229  0344  0876               	movf	_myIsr$133,w
  2230  0345                     L2:	
  2231  0345  00F0               	movwf	??_myIsr
  2232  0346  0870               	movf	??_myIsr,w
  2233  0347  00BB               	movwf	_ps2Data
  2234  0348                     i1l1340:	
  2235                           ;main.c: 149:                 }
  2236                           
  2237                           
  2238                           ;main.c: 150:                 if ( ps2Bits == 0xF0 ) {
  2239  0348  30F0               	movlw	240
  2240  0349  067B               	xorwf	_ps2Bits,w
  2241  034A  1D03               	btfss	3,2
  2242  034B  2B4F               	goto	i1l1344
  2243                           
  2244                           ;main.c: 151:                     ps2DataState = 0;
  2245  034C  01FC               	clrf	_ps2DataState
  2246                           
  2247                           ;main.c: 152:                     ps2Down = 0;
  2248  034D  01C9               	clrf	_ps2Down
  2249                           
  2250                           ;main.c: 153:                 } else if ( ps2Bits == 0xE0 ) {
  2251  034E  2B60               	goto	i1l185
  2252  034F                     i1l1344:	
  2253  034F  30E0               	movlw	224
  2254  0350  067B               	xorwf	_ps2Bits,w
  2255  0351  1D03               	btfss	3,2
  2256  0352  2B57               	goto	i1l1350
  2257                           
  2258                           ;main.c: 154:                     ps2DataState = 0;
  2259  0353  01FC               	clrf	_ps2DataState
  2260                           
  2261                           ;main.c: 155:                     ps2NeedEncode = 1;
  2262  0354  01F9               	clrf	_ps2NeedEncode
  2263  0355  0AF9               	incf	_ps2NeedEncode,f
  2264                           
  2265                           ;main.c: 164:                 } else {
  2266  0356  2B60               	goto	i1l185
  2267  0357                     i1l1350:	
  2268                           
  2269                           ;main.c: 165:                     ps2DataState = 2;
  2270  0357  3002               	movlw	2
  2271  0358  00F0               	movwf	??_myIsr
  2272  0359  0870               	movf	??_myIsr,w
  2273  035A  00FC               	movwf	_ps2DataState
  2274                           
  2275                           ;main.c: 169:         } else if ( ps2DataState == 4 ) {
  2276                           
  2277                           ;main.c: 168:             }
  2278                           
  2279                           ;main.c: 166:                 }
  2280  035B  2B60               	goto	i1l185
  2281  035C                     i1l1352:	
  2282  035C  3004               	movlw	4
  2283  035D  067C               	xorwf	_ps2DataState,w
  2284  035E  1903               	btfsc	3,2
  2285                           
  2286                           ;main.c: 171:             ps2DataState = 0;
  2287  035F  01FC               	clrf	_ps2DataState
  2288  0360                     i1l185:	
  2289                           ;main.c: 175:     }
  2290                           
  2291                           ;main.c: 173:     } else {
  2292                           
  2293                           ;main.c: 172:         }
  2294                           
  2295                           
  2296                           ;main.c: 176:     GIE = 1;
  2297  0360  178B               	bsf	11,7	;volatile
  2298  0361  0875               	movf	??_myIsr+5,w
  2299  0362  00FF               	movwf	127
  2300  0363  0874               	movf	??_myIsr+4,w
  2301  0364  008A               	movwf	10
  2302  0365  0873               	movf	??_myIsr+3,w
  2303  0366  0084               	movwf	4
  2304  0367  0E72               	swapf	(??_myIsr+2)^(0+4294967168),w
  2305  0368  0083               	movwf	3
  2306  0369  0EFE               	swapf	126,f
  2307  036A  0E7E               	swapf	126,w
  2308  036B  0009               	retfie
  2309  036C                     __end_of_myIsr:	
  2310  007E                     btemp	set	126	;btemp
  2311  007E                     wtemp0	set	126
  2312                           
  2313                           	psect	intentry
  2314  0004                     __pintentry:	
  2315                           ;incstack = 0
  2316                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath]
  2317                           
  2318  0004                     interrupt_function:	
  2319  007E                     saved_w	set	btemp
  2320  0004  00FE               	movwf	btemp
  2321  0005  0E03               	swapf	3,w
  2322  0006  00F2               	movwf	??_myIsr+2
  2323  0007  0804               	movf	4,w
  2324  0008  00F3               	movwf	??_myIsr+3
  2325  0009  080A               	movf	10,w
  2326  000A  00F4               	movwf	??_myIsr+4
  2327  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2328  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2329  000D  087F               	movf	btemp+1,w
  2330  000E  00F5               	movwf	??_myIsr+5
  2331  000F  2AE0               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         16
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80     18      42
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2292
                                             13 BANK0      5     5      0
             _calculateBitsFromTable
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                              6 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              0 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculateBitsFromTable                               7     4      3     722
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                9     9      0     114
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateBitsFromTable
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      2A       3       52.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      37      10        0.0%
ABS                  0      0      37       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Oct 19 12:45:34 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0023                                 l230 00D1  
                               l232 00E2                                 l253 01B1  
                               l265 01AB                                 _GIE 005F  
                               _RA1 0029                                 _RA2 002A  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 u804 045D  
                               u900 03AD                                 u805 045B  
                               u910 03AE                                 _PSA 040B  
                               u840 0387                                 u850 0388  
                               u880 03A5                                 u890 03A6  
                               u795 0452                                 u984 0424  
                               u985 0422                                 u994 0435  
                               u995 0433                                 fsr0 0004  
                               indf 0000                                l1224 03B1  
                              l1216 0396                                l1208 037D  
                              l1242 03D8                                l1246 03E8  
                              l1510 016C                                l1502 0157  
                              l1414 0087                                l1280 0445  
                              l1264 0409                                l1274 042F  
                              l1282 0410                                l1530 019A  
                              l1450 00E9                                l1426 00BD  
                              l1276 0440                                l1444 00E3  
                              l1436 00D2                                l1198 0471  
                              l1534 01A0                                l1526 0194  
                              l1542 01AC                                l1518 017E  
                              l1462 0103                                l1470 0112  
                              l1480 0121                                l1464 0104  
                              l1456 00F7                                l1538 01A4  
                              l1490 013E                                l1466 010D  
                              l1458 00FB                                l1474 011B  
                              l1494 0147                                l1488 013C  
                              l1498 014E                                _EEIE 0467  
                              _EEIF 0067                                _CMIE 0466  
                              _CMIF 0066                                _T0IE 005D  
                              _T0IF 005A                                _T0CS 040D  
                              u1250 00B9                                _T0SE 040C  
                              u1260 00BA                                _PEIE 005E  
                              _INTE 005C                                _INTF 0059  
                              _RBIE 005B                                _RBIF 0058  
                              _RCIE 0465                                _RCIF 0065  
                              _TMR0 0001                                _TMR2 0011  
                              _SPEN 00C7                                _TXIE 0464  
                              _TXIF 0064                                _main 0032  
                              btemp 007E                                start 0010  
                             ?_main 0070                               _CMCON 001F  
      __end_of_replaceTwoBytesCodes 02CC                               _T1CON 0010  
                             i1l185 0360                               _RCSTA 0018  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
              __end_of_codeToMatrix 0286                               _TRISA 0085  
                             _TRISB 0086                               _VRCON 009F  
                             _TXSTA 0098                               _nRBPU 040F  
                             _delay 0034                     __end_of_myDelay 048F  
                             _myIsr 02E0                               main@i 0031  
                  updatePort@bit_id 0025                               pclath 000A  
                             status 0003                        updateKey@key 002B  
                      updateKey@set 0026                               wtemp0 007E  
                   __initialization 0011                        __end_of_main 01B3  
                            ??_main 002D     __size_of_calculateBitsFromTable 003E  
                 sendDataToAltera@i 0024                              _CCP1IE 0462  
                            _CCP1IF 0062                              ?_myIsr 0070  
                            _CCPR1H 0016                              _CCPR1L 0015  
                            u110_24 0305                              u110_25 0303  
                            i1l1312 030D                              i1l1304 02F5  
                            i1l1330 0330                              i1l1314 0311  
                            i1l1340 0348                              i1l1316 0316  
                            i1l1350 0357                              i1l1334 0335  
                            i1l1344 034F                              i1l1352 035C  
                            i1l1338 0340                              _INTEDG 040E  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _TMR2IE 0461                              _TMR2IF 0061  
                            _TRISA0 0428                              _TRISA1 0429  
                            _TRISA2 042A                              _TRISA3 042B  
                            _TRISA4 042C            __end_of_sendDataToAltera 040C  
             _replaceOnDelayKeyDown 02CC                           ??_myDelay 0020  
                            myIsr@i 0078                              saved_w 007E  
                     updateKey@code 002C             __end_of__initialization 0030  
            _calculateBitsFromTable 040C                _replaceTwoBytesCodes 02B0  
                     updatePort@set 0020                      __pcstackCOMMON 0070  
                      __pidataBANK0 047B                       __end_of_myIsr 036C  
               updateKey@localShift 0028                             ??_myIsr 0070  
                      _ps2DataState 007C                          __pbssBANK0 0032  
                      _ps2BitsCount 007A                        _codeToMatrix 0206  
                        _delayedKey 0036                _sendDataToAltera$150 0022  
                        __pmaintext 0032                          __pintentry 0004  
                           _CCP1CON 0017          calculateBitsFromTable@bits 0025  
                __size_of_updateKey 0057                          __stringtab 0200  
        _kempstonMouseEmulatorDelay 0032       __end_of_replaceOnShiftKeyDown 02B0  
                           _ps2Data 003B                             _ps2Bits 007B  
                           _ps2Down 0049                             __ptext1 036C  
                           __ptext2 044A                             __ptext3 03C3  
                           __ptext4 048E                             __ptext5 040C  
                           __ptext6 02E0                             _myDelay 048E  
calculateBitsFromTable@clearIfFound 0022                             _numLock 0038  
                           clrloop0 0487                end_of_initialization 0030  
                     _importantKeys 02D4                      _shift_ctrl_alt 003D  
                 ?_sendDataToAltera 0070                   __end_of_updateKey 03C3  
                ??_sendDataToAltera 0020                   _kempstonMouseKeys 02DA  
                         _PORTAbits 0005                          _updatePort 044A  
           ?_calculateBitsFromTable 0020           __end_of_kempstonMouseKeys 02E0  
               start_initialization 0011                         updatePort@a 0024  
    __end_of_calculateBitsFromTable 044A             calculateBitsFromTable@i 0026  
                       __pdataBANK0 003E                         __pbssCOMMON 0079  
                         ___latbits 0000                       __pcstackBANK0 0020  
                       ?_updatePort 0020                  updateKey@localCtrl 002A  
                         __pnvBANK0 0049                           _ps2Device 003A  
                         __pstrings 0200                       _ps2NeedEncode 0079  
                          ?_myDelay 0070                         _ps2WaitCode 0039  
                         _myIsr$133 0076         calculateBitsFromTable@count 0021  
                    __size_of_myIsr 008C         calculateBitsFromTable@table 0020  
                 interrupt_function 0004                           clear_ram0 0486  
               __size_of_updatePort 0031               _replaceOnShiftKeyDown 0286  
                         _updateKey 036C                         __stringbase 0205  
                         main@i_164 0030           __size_of_sendDataToAltera 0049  
                        ?_updateKey 0026                  __end_of__stringtab 0206  
                  __size_of_myDelay 0001                       __size_of_main 0181  
     __end_of_replaceOnDelayKeyDown 02D4                            _replaced 0037  
                          _outPorts 003E                        ??_updatePort 0021  
         _kempstonMouseEmulatorKeys 003C                            intlevel1 0000  
                         stringcode 0200                  __end_of_updatePort 047B  
                       ??_updateKey 0027                    _sendDataToAltera 03C3  
                          stringdir 0200                            stringtab 0200  
             __end_of_importantKeys 02DA                       _updateKey$143 0029  
