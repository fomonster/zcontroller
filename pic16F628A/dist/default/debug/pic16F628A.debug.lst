

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Oct 20 01:58:49 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F628A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	dabs	1,0x7E,2
    23  0000                     
    24                           ; Version 2.00
    25                           ; Generated 27/05/2018 GMT
    26                           ; 
    27                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F628A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001F                     	;# 
    82  0081                     	;# 
    83  0085                     	;# 
    84  0086                     	;# 
    85  008C                     	;# 
    86  008E                     	;# 
    87  0092                     	;# 
    88  0098                     	;# 
    89  0099                     	;# 
    90  009A                     	;# 
    91  009B                     	;# 
    92  009C                     	;# 
    93  009D                     	;# 
    94  009F                     	;# 
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  000A                     	;# 
   103  000B                     	;# 
   104  000C                     	;# 
   105  000E                     	;# 
   106  000E                     	;# 
   107  000F                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0015                     	;# 
   112  0015                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001F                     	;# 
   119  0081                     	;# 
   120  0085                     	;# 
   121  0086                     	;# 
   122  008C                     	;# 
   123  008E                     	;# 
   124  0092                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009F                     	;# 
   132                           
   133                           	psect	idataBANK0
   134  047B                     __pidataBANK0:	
   135                           
   136                           ;initializer for _outPorts
   137  047B  3400               	retlw	0
   138  047C  3400               	retlw	0
   139  047D  3400               	retlw	0
   140  047E  3400               	retlw	0
   141  047F  3400               	retlw	0
   142  0480  3400               	retlw	0
   143  0481  3400               	retlw	0
   144  0482  3400               	retlw	0
   145  0483  3407               	retlw	7
   146  0484  34F5               	retlw	245
   147  0485  34DA               	retlw	218
   148                           
   149                           	psect	strings
   150  0200                     __pstrings:	
   151  0200                     stringtab:	
   152  0200                     __stringtab:	
   153  0200                     stringcode:	
   154                           ;	String table - string pointers are 1 byte each
   155                           
   156  0200                     stringdir:	
   157  0200  3002               	movlw	high stringdir
   158  0201  008A               	movwf	10
   159  0202  0804               	movf	4,w
   160  0203  0A84               	incf	4,f
   161  0204  0782               	addwf	2,f
   162  0205                     __stringbase:	
   163  0205  3400               	retlw	0
   164  0206                     __end_of__stringtab:	
   165  0206                     _codeToMatrix:	
   166  0206  34FF               	retlw	255
   167  0207  34FF               	retlw	255
   168  0208  34FF               	retlw	255
   169  0209  34FF               	retlw	255
   170  020A  34FF               	retlw	255
   171  020B  34FF               	retlw	255
   172  020C  34FF               	retlw	255
   173  020D  34FF               	retlw	255
   174  020E  34FF               	retlw	255
   175  020F  34FF               	retlw	255
   176  0210  34FF               	retlw	255
   177  0211  34FF               	retlw	255
   178  0212  34FF               	retlw	255
   179  0213  34FF               	retlw	255
   180  0214  349C               	retlw	156
   181  0215  34FF               	retlw	255
   182  0216  34FF               	retlw	255
   183  0217  34FF               	retlw	255
   184  0218  34FF               	retlw	255
   185  0219  34FF               	retlw	255
   186  021A  34FF               	retlw	255
   187  021B  3402               	retlw	2
   188  021C  3403               	retlw	3
   189  021D  34FF               	retlw	255
   190  021E  34FF               	retlw	255
   191  021F  34FF               	retlw	255
   192  0220  3408               	retlw	8
   193  0221  3409               	retlw	9
   194  0222  3401               	retlw	1
   195  0223  340A               	retlw	10
   196  0224  340B               	retlw	11
   197  0225  34D6               	retlw	214
   198  0226  34FF               	retlw	255
   199  0227  3418               	retlw	24
   200  0228  3410               	retlw	16
   201  0229  3411               	retlw	17
   202  022A  3412               	retlw	18
   203  022B  341B               	retlw	27
   204  022C  3413               	retlw	19
   205  022D  34FF               	retlw	255
   206  022E  345C               	retlw	92
   207  022F  3407               	retlw	7
   208  0230  3420               	retlw	32
   209  0231  3419               	retlw	25
   210  0232  3422               	retlw	34
   211  0233  341A               	retlw	26
   212  0234  3423               	retlw	35
   213  0235  3463               	retlw	99
   214  0236  3464               	retlw	100
   215  0237  341F               	retlw	31
   216  0238  3427               	retlw	39
   217  0239  3426               	retlw	38
   218  023A  3421               	retlw	33
   219  023B  3425               	retlw	37
   220  023C  3424               	retlw	36
   221  023D  3454               	retlw	84
   222  023E  34A0               	retlw	160
   223  023F  3406               	retlw	6
   224  0240  3417               	retlw	23
   225  0241  341E               	retlw	30
   226  0242  341D               	retlw	29
   227  0243  341C               	retlw	28
   228  0244  3414               	retlw	20
   229  0245  34FF               	retlw	255
   230  0246  34FF               	retlw	255
   231  0247  349F               	retlw	159
   232  0248  3416               	retlw	22
   233  0249  3415               	retlw	21
   234  024A  340D               	retlw	13
   235  024B  3404               	retlw	4
   236  024C  340C               	retlw	12
   237  024D  34FF               	retlw	255
   238  024E  34C1               	retlw	193
   239  024F  3497               	retlw	151
   240  0250  34A0               	retlw	160
   241  0251  340E               	retlw	14
   242  0252  348D               	retlw	141
   243  0253  3405               	retlw	5
   244  0254  349E               	retlw	158
   245  0255  3483               	retlw	131
   246  0256  348B               	retlw	139
   247  0257  3493               	retlw	147
   248  0258  349C               	retlw	156
   249  0259  349B               	retlw	155
   250  025A  34E5               	retlw	229
   251  025B  348E               	retlw	142
   252  025C  34A3               	retlw	163
   253  025D  34A6               	retlw	166
   254  025E  344B               	retlw	75
   255  025F  34FF               	retlw	255
   256  0260  3406               	retlw	6
   257  0261  34DD               	retlw	221
   258  0262  34A4               	retlw	164
   259  0263  34D1               	retlw	209
   260  0264  34A7               	retlw	167
   261  0265  3494               	retlw	148
   262  0266  348C               	retlw	140
   263  0267  3484               	retlw	132
   264  0268  3496               	retlw	150
   265  0269  34C9               	retlw	201
   266  026A  34D9               	retlw	217
   267  026B  34E1               	retlw	225
   268  026C  3444               	retlw	68
   269  026D  3488               	retlw	136
   270  026E  3485               	retlw	133
   271  026F  3403               	retlw	3
   272  0270  349A               	retlw	154
   273  0271  341B               	retlw	27
   274  0272  341C               	retlw	28
   275  0273  34A2               	retlw	162
   276  0274  3498               	retlw	152
   277  0275  34C0               	retlw	192
   278  0276  3404               	retlw	4
   279  0277  3497               	retlw	151
   280  0278  340B               	retlw	11
   281  0279  3423               	retlw	35
   282  027A  3424               	retlw	36
   283  027B  3414               	retlw	20
   284  027C  3443               	retlw	67
   285  027D  34FF               	retlw	255
   286  027E  34FF               	retlw	255
   287  027F  3496               	retlw	150
   288  0280  3413               	retlw	19
   289  0281  349E               	retlw	158
   290  0282  34A7               	retlw	167
   291  0283  340C               	retlw	12
   292  0284  34FF               	retlw	255
   293  0285  34FF               	retlw	255
   294  0286                     __end_of_codeToMatrix:	
   295  0286                     _replaceOnShiftKeyDown:	
   296  0286  3416               	retlw	22
   297  0287  344F               	retlw	79
   298  0288  341E               	retlw	30
   299  0289  3450               	retlw	80
   300  028A  3426               	retlw	38
   301  028B  3451               	retlw	81
   302  028C  3425               	retlw	37
   303  028D  3453               	retlw	83
   304  028E  342E               	retlw	46
   305  028F  3456               	retlw	86
   306  0290  3436               	retlw	54
   307  0291  3457               	retlw	87
   308  0292  343D               	retlw	61
   309  0293  345C               	retlw	92
   310  0294  343E               	retlw	62
   311  0295  345E               	retlw	94
   312  0296  3446               	retlw	70
   313  0297  345F               	retlw	95
   314  0298  3445               	retlw	69
   315  0299  3460               	retlw	96
   316  029A  344E               	retlw	78
   317  029B  3461               	retlw	97
   318  029C  3455               	retlw	85
   319  029D  3462               	retlw	98
   320  029E  345D               	retlw	93
   321  029F  3463               	retlw	99
   322  02A0  344C               	retlw	76
   323  02A1  3467               	retlw	103
   324  02A2  3452               	retlw	82
   325  02A3  3468               	retlw	104
   326  02A4  3441               	retlw	65
   327  02A5  346A               	retlw	106
   328  02A6  3449               	retlw	73
   329  02A7  346D               	retlw	109
   330  02A8  344A               	retlw	74
   331  02A9  346E               	retlw	110
   332  02AA  340E               	retlw	14
   333  02AB  3448               	retlw	72
   334  02AC  3454               	retlw	84
   335  02AD  3464               	retlw	100
   336  02AE  345B               	retlw	91
   337  02AF  3465               	retlw	101
   338  02B0                     __end_of_replaceOnShiftKeyDown:	
   339  02B0                     _replaceTwoBytesCodes:	
   340  02B0  3411               	retlw	17
   341  02B1  3408               	retlw	8
   342  02B2  3414               	retlw	20
   343  02B3  3413               	retlw	19
   344  02B4  3470               	retlw	112
   345  02B5  3417               	retlw	23
   346  02B6  346C               	retlw	108
   347  02B7  3418               	retlw	24
   348  02B8  347D               	retlw	125
   349  02B9  3419               	retlw	25
   350  02BA  3471               	retlw	113
   351  02BB  341F               	retlw	31
   352  02BC  3469               	retlw	105
   353  02BD  3420               	retlw	32
   354  02BE  347A               	retlw	122
   355  02BF  3427               	retlw	39
   356  02C0  3475               	retlw	117
   357  02C1  3428               	retlw	40
   358  02C2  346B               	retlw	107
   359  02C3  342F               	retlw	47
   360  02C4  3472               	retlw	114
   361  02C5  3430               	retlw	48
   362  02C6  3474               	retlw	116
   363  02C7  3437               	retlw	55
   364  02C8  344A               	retlw	74
   365  02C9  3438               	retlw	56
   366  02CA  345A               	retlw	90
   367  02CB  3439               	retlw	57
   368  02CC                     __end_of_replaceTwoBytesCodes:	
   369  02CC                     _replaceOnDelayKeyDown:	
   370  02CC  341F               	retlw	31
   371  02CD  3454               	retlw	84
   372  02CE  345B               	retlw	91
   373  02CF  3463               	retlw	99
   374  02D0  3464               	retlw	100
   375  02D1  3465               	retlw	101
   376  02D2  3448               	retlw	72
   377  02D3  345D               	retlw	93
   378  02D4                     __end_of_replaceOnDelayKeyDown:	
   379  02D4                     _importantKeys:	
   380  02D4  3412               	retlw	18
   381  02D5  3459               	retlw	89
   382  02D6  3414               	retlw	20
   383  02D7  3413               	retlw	19
   384  02D8  3411               	retlw	17
   385  02D9  3408               	retlw	8
   386  02DA                     __end_of_importantKeys:	
   387  02DA                     _kempstonMouseKeys:	
   388  02DA  346B               	retlw	107
   389  02DB  3474               	retlw	116
   390  02DC  3475               	retlw	117
   391  02DD  3472               	retlw	114
   392  02DE  3473               	retlw	115
   393  02DF  3404               	retlw	4
   394  02E0                     __end_of_kempstonMouseKeys:	
   395                           
   396                           	psect	nvCOMMON
   397  007C                     __pnvCOMMON:	
   398  007C                     _ps2DataState:	
   399  007C                     	ds	1
   400                           
   401                           	psect	nvBANK0
   402  0047                     __pnvBANK0:	
   403  0047                     _ps2Down:	
   404  0047                     	ds	1
   405  0048                     _ps2Device:	
   406  0048                     	ds	1
   407  0049                     _ps2Data:	
   408  0049                     	ds	1
   409  0005                     _PORTA	set	5
   410  0018                     _RCSTA	set	24
   411  001F                     _CMCON	set	31
   412  0017                     _CCP1CON	set	23
   413  0016                     _CCPR1H	set	22
   414  0015                     _CCPR1L	set	21
   415  0010                     _T1CON	set	16
   416  0011                     _TMR2	set	17
   417  000F                     _TMR1H	set	15
   418  000E                     _TMR1L	set	14
   419  0006                     _PORTB	set	6
   420  0005                     _PORTAbits	set	5
   421  0001                     _TMR0	set	1
   422  00C7                     _SPEN	set	199
   423  0060                     _TMR1IF	set	96
   424  0061                     _TMR2IF	set	97
   425  0062                     _CCP1IF	set	98
   426  0064                     _TXIF	set	100
   427  0065                     _RCIF	set	101
   428  0066                     _CMIF	set	102
   429  0067                     _EEIF	set	103
   430  0058                     _RBIF	set	88
   431  0059                     _INTF	set	89
   432  005B                     _RBIE	set	91
   433  005C                     _INTE	set	92
   434  005E                     _PEIE	set	94
   435  002A                     _RA2	set	42
   436  0029                     _RA1	set	41
   437  005F                     _GIE	set	95
   438  005A                     _T0IF	set	90
   439  005D                     _T0IE	set	93
   440  0086                     _TRISB	set	134
   441  0085                     _TRISA	set	133
   442  0098                     _TXSTA	set	152
   443  009F                     _VRCON	set	159
   444  042C                     _TRISA4	set	1068
   445  042B                     _TRISA3	set	1067
   446  042A                     _TRISA2	set	1066
   447  0429                     _TRISA1	set	1065
   448  0428                     _TRISA0	set	1064
   449  0408                     _PS0	set	1032
   450  0409                     _PS1	set	1033
   451  040A                     _PS2	set	1034
   452  040B                     _PSA	set	1035
   453  040C                     _T0SE	set	1036
   454  040D                     _T0CS	set	1037
   455  040E                     _INTEDG	set	1038
   456  040F                     _nRBPU	set	1039
   457  0460                     _TMR1IE	set	1120
   458  0461                     _TMR2IE	set	1121
   459  0462                     _CCP1IE	set	1122
   460  0464                     _TXIE	set	1124
   461  0465                     _RCIE	set	1125
   462  0466                     _CMIE	set	1126
   463  0467                     _EEIE	set	1127
   464                           
   465                           	psect	cinit
   466  0011                     start_initialization:	
   467                           ; #config settings
   468                           
   469  0011                     __initialization:	
   470                           
   471                           ; Initialize objects allocated to BANK0
   472  0011  247B               	fcall	__pidataBANK0	;fetch initializer
   473  0012  00B2               	movwf	__pdataBANK0& (0+127)
   474  0013  247C               	fcall	__pidataBANK0+1	;fetch initializer
   475  0014  00B3               	movwf	(__pdataBANK0+1)& (0+127)
   476  0015  247D               	fcall	__pidataBANK0+2	;fetch initializer
   477  0016  00B4               	movwf	(__pdataBANK0+2)& (0+127)
   478  0017  247E               	fcall	__pidataBANK0+3	;fetch initializer
   479  0018  00B5               	movwf	(__pdataBANK0+3)& (0+127)
   480  0019  247F               	fcall	__pidataBANK0+4	;fetch initializer
   481  001A  00B6               	movwf	(__pdataBANK0+4)& (0+127)
   482  001B  2480               	fcall	__pidataBANK0+5	;fetch initializer
   483  001C  00B7               	movwf	(__pdataBANK0+5)& (0+127)
   484  001D  2481               	fcall	__pidataBANK0+6	;fetch initializer
   485  001E  00B8               	movwf	(__pdataBANK0+6)& (0+127)
   486  001F  2482               	fcall	__pidataBANK0+7	;fetch initializer
   487  0020  00B9               	movwf	(__pdataBANK0+7)& (0+127)
   488  0021  2483               	fcall	__pidataBANK0+8	;fetch initializer
   489  0022  00BA               	movwf	(__pdataBANK0+8)& (0+127)
   490  0023  2484               	fcall	__pidataBANK0+9	;fetch initializer
   491  0024  00BB               	movwf	(__pdataBANK0+9)& (0+127)
   492  0025  2485               	fcall	__pidataBANK0+10	;fetch initializer
   493  0026  00BC               	movwf	(__pdataBANK0+10)& (0+127)
   494                           
   495                           ; Clear objects allocated to BANK0
   496  0027  01BD               	clrf	__pbssBANK0& (0+127)
   497  0028  01BE               	clrf	(__pbssBANK0+1)& (0+127)
   498  0029  01BF               	clrf	(__pbssBANK0+2)& (0+127)
   499  002A  01C0               	clrf	(__pbssBANK0+3)& (0+127)
   500  002B  01C1               	clrf	(__pbssBANK0+4)& (0+127)
   501  002C  01C2               	clrf	(__pbssBANK0+5)& (0+127)
   502  002D  01C3               	clrf	(__pbssBANK0+6)& (0+127)
   503  002E  01C4               	clrf	(__pbssBANK0+7)& (0+127)
   504  002F  01C5               	clrf	(__pbssBANK0+8)& (0+127)
   505  0030  01C6               	clrf	(__pbssBANK0+9)& (0+127)
   506                           
   507                           ; Clear objects allocated to COMMON
   508  0031  01F9               	clrf	__pbssCOMMON& (0+127)
   509  0032  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
   510  0033  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
   511  0034                     end_of_initialization:	
   512                           ;End of C runtime variable initialization code
   513                           
   514  0034                     __end_of__initialization:	
   515  0034  0183               	clrf	3
   516  0035  2836               	ljmp	_main	;jump to C main() function
   517                           
   518                           	psect	bssCOMMON
   519  0079                     __pbssCOMMON:	
   520  0079                     _ps2NeedEncode:	
   521  0079                     	ds	1
   522  007A                     _ps2BitsCount:	
   523  007A                     	ds	1
   524  007B                     _ps2Bits:	
   525  007B                     	ds	1
   526                           
   527                           	psect	bssBANK0
   528  003D                     __pbssBANK0:	
   529  003D                     _kempstonMouseEmulatorDelay:	
   530  003D                     	ds	2
   531  003F                     _delay:	
   532  003F                     	ds	2
   533  0041                     _delayedKey:	
   534  0041                     	ds	1
   535  0042                     _replaced:	
   536  0042                     	ds	1
   537  0043                     _numLock:	
   538  0043                     	ds	1
   539  0044                     _ps2WaitCode:	
   540  0044                     	ds	1
   541  0045                     _kempstonMouseEmulatorKeys:	
   542  0045                     	ds	1
   543  0046                     _shift_ctrl_alt:	
   544  0046                     	ds	1
   545                           
   546                           	psect	dataBANK0
   547  0032                     __pdataBANK0:	
   548  0032                     _outPorts:	
   549  0032                     	ds	11
   550                           
   551                           	psect	cstackCOMMON
   552  0070                     __pcstackCOMMON:	
   553  0070                     ?_myIsr:	
   554  0070                     ??_myIsr:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  0070                     ?_myDelay:	
   558                           ; 1 bytes @ 0x0
   559                           
   560  0070                     ?_sendDataToAltera:	
   561                           ; 1 bytes @ 0x0
   562                           
   563  0070                     ?_main:	
   564                           ; 1 bytes @ 0x0
   565                           
   566                           
   567                           ; 1 bytes @ 0x0
   568  0070                     	ds	6
   569  0076                     _myIsr$133:	
   570                           
   571                           ; 2 bytes @ 0x6
   572  0076                     	ds	2
   573  0078                     myIsr@i:	
   574                           
   575                           ; 1 bytes @ 0x8
   576  0078                     	ds	1
   577                           
   578                           	psect	cstackBANK0
   579  0020                     __pcstackBANK0:	
   580  0020                     ?_updatePort:	
   581  0020                     ??_myDelay:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0020                     ??_sendDataToAltera:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0020                     ?_calculateBitsFromTable:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0020                     updatePort@set:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0020                     calculateBitsFromTable@table:	
   594                           ; 1 bytes @ 0x0
   595                           
   596                           
   597                           ; 1 bytes @ 0x0
   598  0020                     	ds	1
   599  0021                     ??_updatePort:	
   600  0021                     calculateBitsFromTable@count:	
   601                           ; 1 bytes @ 0x1
   602                           
   603                           
   604                           ; 1 bytes @ 0x1
   605  0021                     	ds	1
   606  0022                     calculateBitsFromTable@clearIfFound:	
   607  0022                     _sendDataToAltera$150:	
   608                           ; 1 bytes @ 0x2
   609                           
   610                           
   611                           ; 2 bytes @ 0x2
   612  0022                     	ds	1
   613  0023                     ??_calculateBitsFromTable:	
   614                           
   615                           ; 1 bytes @ 0x3
   616  0023                     	ds	1
   617  0024                     updatePort@a:	
   618  0024                     sendDataToAltera@i:	
   619                           ; 1 bytes @ 0x4
   620                           
   621                           
   622                           ; 1 bytes @ 0x4
   623  0024                     	ds	1
   624  0025                     updatePort@bit_id:	
   625  0025                     calculateBitsFromTable@bits:	
   626                           ; 1 bytes @ 0x5
   627                           
   628                           
   629                           ; 1 bytes @ 0x5
   630  0025                     	ds	1
   631  0026                     ?_updateKey:	
   632  0026                     updateKey@set:	
   633                           ; 1 bytes @ 0x6
   634                           
   635  0026                     calculateBitsFromTable@i:	
   636                           ; 1 bytes @ 0x6
   637                           
   638                           
   639                           ; 1 bytes @ 0x6
   640  0026                     	ds	1
   641  0027                     ??_updateKey:	
   642                           
   643                           ; 1 bytes @ 0x7
   644  0027                     	ds	1
   645  0028                     updateKey@localShift:	
   646                           
   647                           ; 1 bytes @ 0x8
   648  0028                     	ds	1
   649  0029                     _updateKey$143:	
   650                           
   651                           ; 1 bytes @ 0x9
   652  0029                     	ds	1
   653  002A                     updateKey@localCtrl:	
   654                           
   655                           ; 1 bytes @ 0xA
   656  002A                     	ds	1
   657  002B                     updateKey@key:	
   658                           
   659                           ; 1 bytes @ 0xB
   660  002B                     	ds	1
   661  002C                     updateKey@code:	
   662                           
   663                           ; 1 bytes @ 0xC
   664  002C                     	ds	1
   665  002D                     ??_main:	
   666                           
   667                           ; 1 bytes @ 0xD
   668  002D                     	ds	3
   669  0030                     main@i_164:	
   670                           
   671                           ; 1 bytes @ 0x10
   672  0030                     	ds	1
   673  0031                     main@i:	
   674                           
   675                           ; 1 bytes @ 0x11
   676  0031                     	ds	1
   677                           
   678                           	psect	maintext
   679  0036                     __pmaintext:	
   680 ;;
   681 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   682 ;;
   683 ;; *************** function _main *****************
   684 ;; Defined at:
   685 ;;		line 360 in file "main.c"
   686 ;; Parameters:    Size  Location     Type
   687 ;;		None
   688 ;; Auto vars:     Size  Location     Type
   689 ;;  i               1   16[BANK0 ] char 
   690 ;;  i               1   17[BANK0 ] char 
   691 ;; Return value:  Size  Location     Type
   692 ;;                  1    wreg      void 
   693 ;; Registers used:
   694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   695 ;; Tracked objects:
   696 ;;		On entry : B00/0
   697 ;;		On exit  : 0/0
   698 ;;		Unchanged: 0/0
   699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   700 ;;      Params:         0       0       0       0
   701 ;;      Locals:         0       2       0       0
   702 ;;      Temps:          0       3       0       0
   703 ;;      Totals:         0       5       0       0
   704 ;;Total ram usage:        5 bytes
   705 ;; Hardware stack levels required when called:    4
   706 ;; This function calls:
   707 ;;		_calculateBitsFromTable
   708 ;;		_sendDataToAltera
   709 ;;		_updateKey
   710 ;;		_updatePort
   711 ;; This function is called by:
   712 ;;		Startup code after reset
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           
   717                           ;psect for function _main
   718  0036                     _main:	
   719                           
   720                           ;main.c: 365:     GIE = 1;
   721                           
   722                           ;incstack = 0
   723                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   724  0036  178B               	bsf	11,7	;volatile
   725                           
   726                           ;main.c: 366:     PEIE = 0;
   727  0037  130B               	bcf	11,6	;volatile
   728                           
   729                           ;main.c: 367:     T0IE = 1;
   730  0038  168B               	bsf	11,5	;volatile
   731                           
   732                           ;main.c: 368:     INTE = 0;
   733  0039  120B               	bcf	11,4	;volatile
   734                           
   735                           ;main.c: 369:     RBIE = 0;
   736  003A  118B               	bcf	11,3	;volatile
   737                           
   738                           ;main.c: 370:     T0IF = 0;
   739  003B  110B               	bcf	11,2	;volatile
   740                           
   741                           ;main.c: 371:     INTF = 0;
   742  003C  108B               	bcf	11,1	;volatile
   743                           
   744                           ;main.c: 372:     RBIF = 0;
   745  003D  100B               	bcf	11,0	;volatile
   746                           
   747                           ;main.c: 375:     EEIF = 0;
   748  003E  1283               	bcf	3,5	;RP0=0, select bank0
   749  003F  1303               	bcf	3,6	;RP1=0, select bank0
   750  0040  138C               	bcf	12,7	;volatile
   751                           
   752                           ;main.c: 376:     CMIF = 0;
   753  0041  130C               	bcf	12,6	;volatile
   754                           
   755                           ;main.c: 377:     RCIF = 0;
   756  0042  128C               	bcf	12,5	;volatile
   757                           
   758                           ;main.c: 378:     TXIF = 0;
   759  0043  120C               	bcf	12,4	;volatile
   760                           
   761                           ;main.c: 379:     CCP1IF = 0;
   762  0044  110C               	bcf	12,2	;volatile
   763                           
   764                           ;main.c: 380:     TMR2IF = 0;
   765  0045  108C               	bcf	12,1	;volatile
   766                           
   767                           ;main.c: 381:     TMR1IF = 0;
   768  0046  100C               	bcf	12,0	;volatile
   769                           
   770                           ;main.c: 384:     EEIE = 0;
   771  0047  1683               	bsf	3,5	;RP0=1, select bank1
   772  0048  1303               	bcf	3,6	;RP1=0, select bank1
   773  0049  138C               	bcf	12,7	;volatile
   774                           
   775                           ;main.c: 385:     CMIE = 0;
   776  004A  130C               	bcf	12,6	;volatile
   777                           
   778                           ;main.c: 386:     RCIE = 0;
   779  004B  128C               	bcf	12,5	;volatile
   780                           
   781                           ;main.c: 387:     TXIE = 0;
   782  004C  120C               	bcf	12,4	;volatile
   783                           
   784                           ;main.c: 388:     CCP1IE = 0;
   785  004D  110C               	bcf	12,2	;volatile
   786                           
   787                           ;main.c: 389:     TMR2IE = 0;
   788  004E  108C               	bcf	12,1	;volatile
   789                           
   790                           ;main.c: 390:     TMR1IE = 0;
   791  004F  100C               	bcf	12,0	;volatile
   792                           
   793                           ;main.c: 393:     nRBPU = 0;
   794  0050  1381               	bcf	1,7	;volatile
   795                           
   796                           ;main.c: 394:     INTEDG = 0;
   797  0051  1301               	bcf	1,6	;volatile
   798                           
   799                           ;main.c: 395:     T0CS = 1;
   800  0052  1681               	bsf	1,5	;volatile
   801                           
   802                           ;main.c: 396:     T0SE = 1;
   803  0053  1601               	bsf	1,4	;volatile
   804                           
   805                           ;main.c: 397:     PSA = 1;
   806  0054  1581               	bsf	1,3	;volatile
   807                           
   808                           ;main.c: 398:     PS2 = 0;
   809  0055  1101               	bcf	1,2	;volatile
   810                           
   811                           ;main.c: 399:     PS1 = 0;
   812  0056  1081               	bcf	1,1	;volatile
   813                           
   814                           ;main.c: 400:     PS0 = 0;
   815  0057  1001               	bcf	1,0	;volatile
   816                           
   817                           ;main.c: 403:     TMR0 = 255;
   818  0058  30FF               	movlw	255
   819  0059  1283               	bcf	3,5	;RP0=0, select bank0
   820  005A  1303               	bcf	3,6	;RP1=0, select bank0
   821  005B  0081               	movwf	1	;volatile
   822                           
   823                           ;main.c: 404:     TMR1L = 0;
   824  005C  018E               	clrf	14	;volatile
   825                           
   826                           ;main.c: 405:     TMR1H = 0;
   827  005D  018F               	clrf	15	;volatile
   828                           
   829                           ;main.c: 406:     TMR2 = 0;
   830  005E  0191               	clrf	17	;volatile
   831                           
   832                           ;main.c: 407:     T1CON = 6;
   833  005F  3006               	movlw	6
   834  0060  0090               	movwf	16	;volatile
   835                           
   836                           ;main.c: 408:     CCPR1L = 0;
   837  0061  0195               	clrf	21	;volatile
   838                           
   839                           ;main.c: 409:     CCPR1H = 0;
   840  0062  0196               	clrf	22	;volatile
   841                           
   842                           ;main.c: 410:     CCP1CON = 0;
   843  0063  0197               	clrf	23	;volatile
   844                           
   845                           ;main.c: 411:     CMCON = 7;
   846  0064  3007               	movlw	7
   847  0065  009F               	movwf	31	;volatile
   848                           
   849                           ;main.c: 412:     VRCON = 0;
   850  0066  1683               	bsf	3,5	;RP0=1, select bank1
   851  0067  1303               	bcf	3,6	;RP1=0, select bank1
   852  0068  019F               	clrf	31	;volatile
   853                           
   854                           ;main.c: 413:     RCSTA = 0;
   855  0069  1283               	bcf	3,5	;RP0=0, select bank0
   856  006A  1303               	bcf	3,6	;RP1=0, select bank0
   857  006B  0198               	clrf	24	;volatile
   858                           
   859                           ;main.c: 414:     TXSTA = 128;
   860  006C  3080               	movlw	128
   861  006D  1683               	bsf	3,5	;RP0=1, select bank1
   862  006E  1303               	bcf	3,6	;RP1=0, select bank1
   863  006F  0098               	movwf	24	;volatile
   864                           
   865                           ;main.c: 415:     SPEN = 0;
   866  0070  1283               	bcf	3,5	;RP0=0, select bank0
   867  0071  1303               	bcf	3,6	;RP1=0, select bank0
   868  0072  1398               	bcf	24,7	;volatile
   869                           
   870                           ;main.c: 420:     PORTA = 0;
   871  0073  0185               	clrf	5	;volatile
   872                           
   873                           ;main.c: 421:     TRISA = 255;
   874  0074  30FF               	movlw	255
   875  0075  1683               	bsf	3,5	;RP0=1, select bank1
   876  0076  1303               	bcf	3,6	;RP1=0, select bank1
   877  0077  0085               	movwf	5	;volatile
   878                           
   879                           ;main.c: 422:     TRISA0 = 1;
   880  0078  1405               	bsf	5,0	;volatile
   881                           
   882                           ;main.c: 423:     TRISA1 = 0;
   883  0079  1085               	bcf	5,1	;volatile
   884                           
   885                           ;main.c: 424:     TRISA2 = 0;
   886  007A  1105               	bcf	5,2	;volatile
   887                           
   888                           ;main.c: 425:     TRISA3 = 1;
   889  007B  1585               	bsf	5,3	;volatile
   890                           
   891                           ;main.c: 426:     TRISA4 = 1;
   892  007C  1605               	bsf	5,4	;volatile
   893                           
   894                           ;main.c: 432:     TRISB = 0;
   895  007D  0186               	clrf	6	;volatile
   896                           
   897                           ;main.c: 433:     PORTB = 0xFF;
   898  007E  30FF               	movlw	255
   899  007F  1283               	bcf	3,5	;RP0=0, select bank0
   900  0080  1303               	bcf	3,6	;RP1=0, select bank0
   901  0081  0086               	movwf	6	;volatile
   902                           
   903                           ;main.c: 436:     ps2Data = 0;
   904  0082  01C9               	clrf	_ps2Data
   905                           
   906                           ;main.c: 438:     ps2WaitCode = 0;
   907  0083  01C4               	clrf	_ps2WaitCode
   908                           
   909                           ;main.c: 439:     ps2Down = 1;
   910  0084  01C7               	clrf	_ps2Down
   911  0085  0AC7               	incf	_ps2Down,f
   912                           
   913                           ;main.c: 440:     ps2NeedEncode = 0;
   914  0086  01F9               	clrf	_ps2NeedEncode
   915                           
   916                           ;main.c: 441:     ps2DataState = 0;
   917  0087  01FC               	clrf	_ps2DataState
   918                           
   919                           ;main.c: 443:     delay = 0;
   920  0088  01BF               	clrf	_delay
   921  0089  01C0               	clrf	_delay+1
   922                           
   923                           ;main.c: 444:     delayedKey = 0;
   924  008A  01C1               	clrf	_delayedKey
   925                           
   926                           ;main.c: 445:     shift_ctrl_alt = 0;
   927  008B  01C6               	clrf	_shift_ctrl_alt
   928                           
   929                           ;main.c: 446:     replaced = 0;
   930  008C  01C2               	clrf	_replaced
   931  008D                     l226:	
   932                           ;main.c: 448:     while(1)
   933                           
   934                           
   935                           ;main.c: 449:     {;main.c: 451:         ps2DataState = 2;
   936  008D  3002               	movlw	2
   937  008E  1283               	bcf	3,5	;RP0=0, select bank0
   938  008F  1303               	bcf	3,6	;RP1=0, select bank0
   939  0090  00AD               	movwf	??_main
   940  0091  082D               	movf	??_main,w
   941  0092  00FC               	movwf	_ps2DataState
   942                           
   943                           ;main.c: 452:         ps2Device = 0;
   944  0093  01C8               	clrf	_ps2Device
   945                           
   946                           ;main.c: 453:         ps2Data = 69;
   947  0094  3045               	movlw	69
   948  0095  00AD               	movwf	??_main
   949  0096  082D               	movf	??_main,w
   950  0097  00C9               	movwf	_ps2Data
   951                           
   952                           ;main.c: 456:         if ( ps2DataState == 2 ) {
   953  0098  3002               	movlw	2
   954  0099  067C               	xorwf	_ps2DataState,w
   955  009A  1D03               	btfss	3,2
   956  009B  2966               	goto	l1502
   957                           
   958                           ;main.c: 458:             if ( ps2Device == 0 ) {
   959  009C  0848               	movf	_ps2Device,w
   960  009D  1D03               	btfss	3,2
   961  009E  295D               	goto	l1498
   962                           
   963                           ;main.c: 464:                 calculateBitsFromTable(&shift_ctrl_alt, importantKeys, 6, 
      +                          0);
   964  009F  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
   965  00A0  00AD               	movwf	??_main
   966  00A1  082D               	movf	??_main,w
   967  00A2  00A0               	movwf	calculateBitsFromTable@table
   968  00A3  3006               	movlw	6
   969  00A4  00AE               	movwf	??_main+1
   970  00A5  082E               	movf	??_main+1,w
   971  00A6  00A1               	movwf	calculateBitsFromTable@count
   972  00A7  01A2               	clrf	calculateBitsFromTable@clearIfFound
   973  00A8  3046               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
   974  00A9  240C               	fcall	_calculateBitsFromTable
   975                           
   976                           ;main.c: 466:                 calculateBitsFromTable(&kempstonMouseEmulatorKeys, kempsto
      +                          nMouseKeys, 6, numLock);
   977  00AA  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
   978  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   979  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   980  00AD  00AD               	movwf	??_main
   981  00AE  082D               	movf	??_main,w
   982  00AF  00A0               	movwf	calculateBitsFromTable@table
   983  00B0  3006               	movlw	6
   984  00B1  00AE               	movwf	??_main+1
   985  00B2  082E               	movf	??_main+1,w
   986  00B3  00A1               	movwf	calculateBitsFromTable@count
   987  00B4  0843               	movf	_numLock,w
   988  00B5  00AF               	movwf	??_main+2
   989  00B6  082F               	movf	??_main+2,w
   990  00B7  00A2               	movwf	calculateBitsFromTable@clearIfFound
   991  00B8  3045               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
   992  00B9  240C               	fcall	_calculateBitsFromTable
   993                           
   994                           ;main.c: 474:                 if ( ps2Data == 119 && ps2Down ) {
   995  00BA  3077               	movlw	119
   996  00BB  1283               	bcf	3,5	;RP0=0, select bank0
   997  00BC  1303               	bcf	3,6	;RP1=0, select bank0
   998  00BD  0649               	xorwf	_ps2Data,w
   999  00BE  1D03               	btfss	3,2
  1000  00BF  28CC               	goto	l1426
  1001  00C0  0847               	movf	_ps2Down,w
  1002  00C1  1903               	btfsc	3,2
  1003  00C2  28CC               	goto	l1426
  1004                           
  1005                           ;main.c: 475:                     numLock = !numLock;
  1006  00C3  0843               	movf	_numLock,w
  1007  00C4  1D03               	btfss	3,2
  1008  00C5  28C8               	goto	u1250
  1009  00C6  3001               	movlw	1
  1010  00C7  28C9               	goto	u1260
  1011  00C8                     u1250:	
  1012  00C8  3000               	movlw	0
  1013  00C9                     u1260:	
  1014  00C9  00AD               	movwf	??_main
  1015  00CA  082D               	movf	??_main,w
  1016  00CB  00C3               	movwf	_numLock
  1017  00CC                     l1426:	
  1018                           ;main.c: 476:                 }
  1019                           
  1020                           
  1021                           ;main.c: 479:                 if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 
      +                          0 && ps2Data == 31 && ps2Down ) {
  1022  00CC  0846               	movf	_shift_ctrl_alt,w
  1023  00CD  390C               	andlw	12
  1024  00CE  1903               	btfsc	3,2
  1025  00CF  28E0               	goto	l230
  1026  00D0  0846               	movf	_shift_ctrl_alt,w
  1027  00D1  3930               	andlw	48
  1028  00D2  1903               	btfsc	3,2
  1029  00D3  28E0               	goto	l230
  1030  00D4  301F               	movlw	31
  1031  00D5  0649               	xorwf	_ps2Data,w
  1032  00D6  1D03               	btfss	3,2
  1033  00D7  28E0               	goto	l230
  1034  00D8  0847               	movf	_ps2Down,w
  1035  00D9  1903               	btfsc	3,2
  1036  00DA  28E0               	goto	l230
  1037                           
  1038                           ;main.c: 480:                     outPorts[8] &= 253;
  1039  00DB  30FD               	movlw	253
  1040  00DC  00AD               	movwf	??_main
  1041  00DD  082D               	movf	??_main,w
  1042  00DE  05BA               	andwf	_outPorts+8,f
  1043                           
  1044                           ;main.c: 481:                 } else {
  1045  00DF  28E1               	goto	l1436
  1046  00E0                     l230:	
  1047                           
  1048                           ;main.c: 482:                     outPorts[8] |= 2;
  1049  00E0  14BA               	bsf	_outPorts+8,1
  1050  00E1                     l1436:	
  1051                           ;main.c: 483:                 }
  1052                           
  1053                           
  1054                           ;main.c: 486:                 if ( (shift_ctrl_alt & 12) > 0 && ps2Data == 126 && ps2Dow
      +                          n ) {
  1055  00E1  0846               	movf	_shift_ctrl_alt,w
  1056  00E2  390C               	andlw	12
  1057  00E3  1903               	btfsc	3,2
  1058  00E4  28F1               	goto	l232
  1059  00E5  307E               	movlw	126
  1060  00E6  0649               	xorwf	_ps2Data,w
  1061  00E7  1D03               	btfss	3,2
  1062  00E8  28F1               	goto	l232
  1063  00E9  0847               	movf	_ps2Down,w
  1064  00EA  1903               	btfsc	3,2
  1065  00EB  28F1               	goto	l232
  1066                           
  1067                           ;main.c: 487:                     outPorts[8] &= 251;
  1068  00EC  30FB               	movlw	251
  1069  00ED  00AD               	movwf	??_main
  1070  00EE  082D               	movf	??_main,w
  1071  00EF  05BA               	andwf	_outPorts+8,f
  1072                           
  1073                           ;main.c: 488:                 } else {
  1074  00F0  28F2               	goto	l1444
  1075  00F1                     l232:	
  1076                           
  1077                           ;main.c: 489:                     outPorts[8] |= 4;
  1078  00F1  153A               	bsf	_outPorts+8,2
  1079  00F2                     l1444:	
  1080                           ;main.c: 490:                 }
  1081                           
  1082                           
  1083                           ;main.c: 497:                 for(int8_t i = 0; i < 41 ;i+=2) {
  1084  00F2  01B1               	clrf	main@i
  1085  00F3  0831               	movf	main@i,w
  1086  00F4  3A80               	xorlw	128
  1087  00F5  3E57               	addlw	-169
  1088  00F6  1803               	btfsc	3,0
  1089  00F7  292A               	goto	l1474
  1090  00F8                     l1450:	
  1091                           
  1092                           ;main.c: 498:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
  1093  00F8  0831               	movf	main@i,w
  1094  00F9  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1095  00FA  0084               	movwf	4
  1096  00FB  2200               	fcall	stringdir
  1097  00FC  0649               	xorwf	_ps2Data,w
  1098  00FD  1D03               	skipz
  1099  00FE  2921               	goto	l1470
  1100                           
  1101                           ;main.c: 499:                         if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0)
      +                           || replaced == ps2Data) {
  1102  00FF  0846               	movf	_shift_ctrl_alt,w
  1103  0100  3903               	andlw	3
  1104  0101  1903               	btfsc	3,2
  1105  0102  2906               	goto	l1456
  1106  0103  0842               	movf	_replaced,w
  1107  0104  1903               	btfsc	3,2
  1108  0105  290A               	goto	l1458
  1109  0106                     l1456:	
  1110  0106  0842               	movf	_replaced,w
  1111  0107  0649               	xorwf	_ps2Data,w
  1112  0108  1D03               	skipz
  1113  0109  291C               	goto	l1466
  1114  010A                     l1458:	
  1115                           
  1116                           ;main.c: 500:                             if ( ps2Down ) replaced = ps2Data;
  1117  010A  0847               	movf	_ps2Down,w
  1118  010B  1903               	btfsc	3,2
  1119  010C  2912               	goto	l1462
  1120  010D  0849               	movf	_ps2Data,w
  1121  010E  00AD               	movwf	??_main
  1122  010F  082D               	movf	??_main,w
  1123  0110  00C2               	movwf	_replaced
  1124  0111  2913               	goto	l1464
  1125  0112                     l1462:	
  1126                           ;main.c: 501:                             else replaced = 0;
  1127                           
  1128  0112  01C2               	clrf	_replaced
  1129  0113                     l1464:	
  1130                           
  1131                           ;main.c: 502:                             ps2Data = replaceOnShiftKeyDown[i+1];
  1132  0113  0831               	movf	main@i,w
  1133  0114  3E01               	addlw	1
  1134  0115  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
  1135  0116  0084               	movwf	4
  1136  0117  2200               	fcall	stringdir
  1137  0118  00AD               	movwf	??_main
  1138  0119  082D               	movf	??_main,w
  1139  011A  00C9               	movwf	_ps2Data
  1140                           
  1141                           ;main.c: 503:                         } else {
  1142  011B  292A               	goto	l1474
  1143  011C                     l1466:	
  1144                           
  1145                           ;main.c: 504:                             if ( replaced != 0 ) ps2Data = 0;
  1146  011C  0842               	movf	_replaced,w
  1147  011D  1903               	btfsc	3,2
  1148  011E  292A               	goto	l1474
  1149  011F  01C9               	clrf	_ps2Data
  1150                           
  1151                           ;main.c: 506:                         break;
  1152                           
  1153                           ;main.c: 505:                         }
  1154  0120  292A               	goto	l1474
  1155  0121                     l1470:	
  1156                           ;main.c: 507:                     }
  1157                           
  1158                           
  1159                           ;main.c: 508:                 }
  1160  0121  3002               	movlw	2
  1161  0122  00AD               	movwf	??_main
  1162  0123  082D               	movf	??_main,w
  1163  0124  07B1               	addwf	main@i,f
  1164  0125  0831               	movf	main@i,w
  1165  0126  3A80               	xorlw	128
  1166  0127  3E57               	addlw	-169
  1167  0128  1C03               	skipc
  1168  0129  28F8               	goto	l1450
  1169  012A                     l1474:	
  1170                           
  1171                           ;main.c: 512:                 for(int8_t i = 0; i < 8; i++) {
  1172  012A  01B0               	clrf	main@i_164
  1173  012B  0830               	movf	main@i_164,w
  1174  012C  3A80               	xorlw	128
  1175  012D  3E78               	addlw	-136
  1176  012E  1803               	btfsc	3,0
  1177  012F  2956               	goto	l1494
  1178  0130                     l1480:	
  1179                           
  1180                           ;main.c: 513:                     if ( ps2Data == replaceOnDelayKeyDown[i] && ps2Down ) 
      +                          {
  1181  0130  0830               	movf	main@i_164,w
  1182  0131  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
  1183  0132  0084               	movwf	4
  1184  0133  2200               	fcall	stringdir
  1185  0134  0649               	xorwf	_ps2Data,w
  1186  0135  1D03               	skipz
  1187  0136  294D               	goto	l1490
  1188  0137  0847               	movf	_ps2Down,w
  1189  0138  1903               	btfsc	3,2
  1190  0139  294D               	goto	l1490
  1191                           
  1192                           ;main.c: 514:                         if ( delay == 0 ) {
  1193  013A  083F               	movf	_delay,w
  1194  013B  0440               	iorwf	_delay+1,w
  1195  013C  1D03               	btfss	3,2
  1196  013D  294B               	goto	l1488
  1197                           
  1198                           ;main.c: 515:                             delayedKey = ps2Data;
  1199  013E  0849               	movf	_ps2Data,w
  1200  013F  00AD               	movwf	??_main
  1201  0140  082D               	movf	??_main,w
  1202  0141  00C1               	movwf	_delayedKey
  1203                           
  1204                           ;main.c: 516:                             delay = 2600;
  1205  0142  3028               	movlw	40
  1206  0143  00BF               	movwf	_delay
  1207  0144  300A               	movlw	10
  1208  0145  00C0               	movwf	_delay+1
  1209                           
  1210                           ;main.c: 517:                             ps2Data = 111;
  1211  0146  306F               	movlw	111
  1212  0147  00AD               	movwf	??_main
  1213  0148  082D               	movf	??_main,w
  1214  0149  00C9               	movwf	_ps2Data
  1215                           
  1216                           ;main.c: 518:                         } else {
  1217  014A  2956               	goto	l1494
  1218  014B                     l1488:	
  1219                           
  1220                           ;main.c: 519:                             ps2Data = 0;
  1221  014B  01C9               	clrf	_ps2Data
  1222                           
  1223                           ;main.c: 521:                         break;
  1224                           
  1225                           ;main.c: 520:                         }
  1226  014C  2956               	goto	l1494
  1227  014D                     l1490:	
  1228                           ;main.c: 522:                     }
  1229                           
  1230                           
  1231                           ;main.c: 523:                 }
  1232  014D  3001               	movlw	1
  1233  014E  00AD               	movwf	??_main
  1234  014F  082D               	movf	??_main,w
  1235  0150  07B0               	addwf	main@i_164,f
  1236  0151  0830               	movf	main@i_164,w
  1237  0152  3A80               	xorlw	128
  1238  0153  3E78               	addlw	-136
  1239  0154  1C03               	skipc
  1240  0155  2930               	goto	l1480
  1241  0156                     l1494:	
  1242                           
  1243                           ;main.c: 529:                 updateKey(ps2Data, ps2Down );
  1244  0156  0847               	movf	_ps2Down,w
  1245  0157  00AD               	movwf	??_main
  1246  0158  082D               	movf	??_main,w
  1247  0159  00A6               	movwf	updateKey@set
  1248  015A  0849               	movf	_ps2Data,w
  1249  015B  236C               	fcall	_updateKey
  1250                           
  1251                           ;main.c: 532:                 sendDataToAltera();
  1252  015C  23C3               	fcall	_sendDataToAltera
  1253  015D                     l1498:	
  1254                           ;main.c: 538:             }
  1255                           
  1256                           ;main.c: 534:             } else if ( ps2Device == 1 ) {
  1257                           
  1258                           
  1259                           ;main.c: 541:             ps2Data = 0;
  1260  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1261  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1262  015F  01C9               	clrf	_ps2Data
  1263                           
  1264                           ;main.c: 543:             ps2WaitCode = 0;
  1265  0160  01C4               	clrf	_ps2WaitCode
  1266                           
  1267                           ;main.c: 544:             ps2Down = 1;
  1268  0161  01C7               	clrf	_ps2Down
  1269  0162  0AC7               	incf	_ps2Down,f
  1270                           
  1271                           ;main.c: 545:             ps2NeedEncode = 0;
  1272  0163  01F9               	clrf	_ps2NeedEncode
  1273                           
  1274                           ;main.c: 546:             ps2DataState = 0;
  1275  0164  01FC               	clrf	_ps2DataState
  1276                           
  1277                           ;main.c: 550:         } else if ( delay != 0 ) {
  1278  0165  29BE               	goto	l253
  1279  0166                     l1502:	
  1280  0166  083F               	movf	_delay,w
  1281  0167  0440               	iorwf	_delay+1,w
  1282  0168  1903               	btfsc	3,2
  1283  0169  298B               	goto	l1518
  1284                           
  1285                           ;main.c: 552:             delay--;
  1286  016A  3001               	movlw	1
  1287  016B  02BF               	subwf	_delay,f
  1288  016C  3000               	movlw	0
  1289  016D  1C03               	skipc
  1290  016E  03C0               	decf	_delay+1,f
  1291  016F  02C0               	subwf	_delay+1,f
  1292                           
  1293                           ;main.c: 553:             if ( delay == 0 ) {
  1294  0170  083F               	movf	_delay,w
  1295  0171  0440               	iorwf	_delay+1,w
  1296  0172  1D03               	btfss	3,2
  1297  0173  2979               	goto	l1510
  1298                           
  1299                           ;main.c: 555:                 updatePort(0x00, 0);
  1300  0174  01A0               	clrf	updatePort@set
  1301  0175  3000               	movlw	0
  1302  0176  244A               	fcall	_updatePort
  1303                           
  1304                           ;main.c: 557:                 sendDataToAltera();
  1305  0177  23C3               	fcall	_sendDataToAltera
  1306                           
  1307                           ;main.c: 559:             } else if ( delay == 1300 ) {
  1308  0178  29BE               	goto	l253
  1309  0179                     l1510:	
  1310  0179  3014               	movlw	20
  1311  017A  1283               	bcf	3,5	;RP0=0, select bank0
  1312  017B  1303               	bcf	3,6	;RP1=0, select bank0
  1313  017C  063F               	xorwf	_delay,w
  1314  017D  3005               	movlw	5
  1315  017E  1903               	skipnz
  1316  017F  0640               	xorwf	_delay+1,w
  1317  0180  1D03               	btfss	3,2
  1318  0181  29BE               	goto	l253
  1319                           
  1320                           ;main.c: 561:                 updateKey(delayedKey, 1 );
  1321  0182  01A6               	clrf	updateKey@set
  1322  0183  0AA6               	incf	updateKey@set,f
  1323  0184  0841               	movf	_delayedKey,w
  1324  0185  236C               	fcall	_updateKey
  1325                           
  1326                           ;main.c: 562:                 delayedKey = 0;
  1327  0186  1283               	bcf	3,5	;RP0=0, select bank0
  1328  0187  1303               	bcf	3,6	;RP1=0, select bank0
  1329  0188  01C1               	clrf	_delayedKey
  1330                           
  1331                           ;main.c: 563:                 sendDataToAltera();
  1332  0189  23C3               	fcall	_sendDataToAltera
  1333                           
  1334                           ;main.c: 566:         } else {
  1335                           
  1336                           ;main.c: 564:             }
  1337  018A  29BE               	goto	l253
  1338  018B                     l1518:	
  1339                           
  1340                           ;main.c: 569:             kempstonMouseEmulatorDelay++;
  1341  018B  3001               	movlw	1
  1342  018C  1283               	bcf	3,5	;RP0=0, select bank0
  1343  018D  1303               	bcf	3,6	;RP1=0, select bank0
  1344  018E  07BD               	addwf	_kempstonMouseEmulatorDelay,f
  1345  018F  1803               	skipnc
  1346  0190  0ABE               	incf	_kempstonMouseEmulatorDelay+1,f
  1347  0191  3000               	movlw	0
  1348  0192  07BE               	addwf	_kempstonMouseEmulatorDelay+1,f
  1349                           
  1350                           ;main.c: 570:             if ( kempstonMouseEmulatorDelay > 2000 ) {
  1351  0193  3007               	movlw	7
  1352  0194  023E               	subwf	_kempstonMouseEmulatorDelay+1,w
  1353  0195  30D1               	movlw	209
  1354  0196  1903               	skipnz
  1355  0197  023D               	subwf	_kempstonMouseEmulatorDelay,w
  1356  0198  1C03               	skipc
  1357  0199  29BE               	goto	l253
  1358                           
  1359                           ;main.c: 572:                 if ( numLock ) {
  1360  019A  0843               	movf	_numLock,w
  1361  019B  1903               	btfsc	3,2
  1362  019C  29B9               	goto	l1542
  1363                           
  1364                           ;main.c: 573:                     if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]
      +                          -=2;
  1365  019D  1C45               	btfss	_kempstonMouseEmulatorKeys,0
  1366  019E  29A1               	goto	l1526
  1367  019F  3002               	movlw	2
  1368  01A0  02BB               	subwf	_outPorts+9,f
  1369  01A1                     l1526:	
  1370                           
  1371                           ;main.c: 574:                     if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]
      +                          +=2;
  1372  01A1  1CC5               	btfss	_kempstonMouseEmulatorKeys,1
  1373  01A2  29A7               	goto	l1530
  1374  01A3  3002               	movlw	2
  1375  01A4  00AD               	movwf	??_main
  1376  01A5  082D               	movf	??_main,w
  1377  01A6  07BB               	addwf	_outPorts+9,f
  1378  01A7                     l1530:	
  1379                           
  1380                           ;main.c: 575:                     if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10
      +                          ]+=2;
  1381  01A7  1D45               	btfss	_kempstonMouseEmulatorKeys,2
  1382  01A8  29AD               	goto	l1534
  1383  01A9  3002               	movlw	2
  1384  01AA  00AD               	movwf	??_main
  1385  01AB  082D               	movf	??_main,w
  1386  01AC  07BC               	addwf	_outPorts+10,f
  1387  01AD                     l1534:	
  1388                           
  1389                           ;main.c: 576:                     if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10
      +                          ]-=2;
  1390  01AD  1DC5               	btfss	_kempstonMouseEmulatorKeys,3
  1391  01AE  29B1               	goto	l1538
  1392  01AF  3002               	movlw	2
  1393  01B0  02BC               	subwf	_outPorts+10,f
  1394  01B1                     l1538:	
  1395                           
  1396                           ;main.c: 577:                     if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8
      +                          ] &= 254;
  1397  01B1  1E45               	btfss	_kempstonMouseEmulatorKeys,4
  1398  01B2  29B8               	goto	l265
  1399  01B3  30FE               	movlw	254
  1400  01B4  00AD               	movwf	??_main
  1401  01B5  082D               	movf	??_main,w
  1402  01B6  05BA               	andwf	_outPorts+8,f
  1403  01B7  29B9               	goto	l1542
  1404  01B8                     l265:	
  1405                           ;main.c: 578:                     else outPorts[8] |= 1;
  1406                           
  1407  01B8  143A               	bsf	_outPorts+8,0
  1408  01B9                     l1542:	
  1409                           ;main.c: 579:                 }
  1410                           
  1411                           
  1412                           ;main.c: 581:                 sendDataToAltera();
  1413  01B9  23C3               	fcall	_sendDataToAltera
  1414                           
  1415                           ;main.c: 583:                 kempstonMouseEmulatorDelay = 0;
  1416  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1417  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1418  01BC  01BD               	clrf	_kempstonMouseEmulatorDelay
  1419  01BD  01BE               	clrf	_kempstonMouseEmulatorDelay+1
  1420  01BE                     l253:	
  1421                           ;main.c: 586:         }
  1422                           
  1423                           ;main.c: 584:             }
  1424                           
  1425  01BE  0064               	clrwdt	;# 
  1426                           
  1427                           ;main.c: 589:     }
  1428  01BF  288D               	goto	l226
  1429  01C0                     __end_of_main:	
  1430                           
  1431                           	psect	text1
  1432  036C                     __ptext1:	
  1433 ;; *************** function _updateKey *****************
  1434 ;; Defined at:
  1435 ;;		line 189 in file "main.c"
  1436 ;; Parameters:    Size  Location     Type
  1437 ;;  key             1    wreg     unsigned char 
  1438 ;;  set             1    6[BANK0 ] unsigned char 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  key             1   11[BANK0 ] unsigned char 
  1441 ;;  code            1   12[BANK0 ] unsigned char 
  1442 ;;  localCtrl       1   10[BANK0 ] unsigned char 
  1443 ;;  localShift      1    8[BANK0 ] unsigned char 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1453 ;;      Params:         0       1       0       0
  1454 ;;      Locals:         0       5       0       0
  1455 ;;      Temps:          0       1       0       0
  1456 ;;      Totals:         0       7       0       0
  1457 ;;Total ram usage:        7 bytes
  1458 ;; Hardware stack levels used:    1
  1459 ;; Hardware stack levels required when called:    3
  1460 ;; This function calls:
  1461 ;;		_updatePort
  1462 ;; This function is called by:
  1463 ;;		_main
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           
  1468                           ;psect for function _updateKey
  1469  036C                     _updateKey:	
  1470                           
  1471                           ;incstack = 0
  1472                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1473                           ;updateKey@key stored from wreg
  1474  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1475  036D  1303               	bcf	3,6	;RP1=0, select bank0
  1476  036E  00AB               	movwf	updateKey@key
  1477                           
  1478                           ;main.c: 189: void updateKey(uint8_t key, uint8_t set);main.c: 190: {;main.c: 191:     u
      +                          int8_t code = 0xFF;
  1479  036F  30FF               	movlw	255
  1480  0370  00A7               	movwf	??_updateKey
  1481  0371  0827               	movf	??_updateKey,w
  1482  0372  00AC               	movwf	updateKey@code
  1483                           
  1484                           ;main.c: 192:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  1485  0373  01A9               	clrf	_updateKey$143
  1486  0374  0846               	movf	_shift_ctrl_alt,w
  1487  0375  3903               	andlw	3
  1488  0376  1903               	btfsc	3,2
  1489  0377  2B7D               	goto	l1208
  1490  0378  0842               	movf	_replaced,w
  1491  0379  1D03               	btfss	3,2
  1492  037A  2B7D               	goto	l1208
  1493  037B  01A9               	clrf	_updateKey$143
  1494  037C  0AA9               	incf	_updateKey$143,f
  1495  037D                     l1208:	
  1496  037D  0829               	movf	_updateKey$143,w
  1497  037E  00A7               	movwf	??_updateKey
  1498  037F  0827               	movf	??_updateKey,w
  1499  0380  00A8               	movwf	updateKey@localShift
  1500                           
  1501                           ;main.c: 193:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  1502  0381  0846               	movf	_shift_ctrl_alt,w
  1503  0382  390C               	andlw	12
  1504  0383  1903               	btfsc	3,2
  1505  0384  2B87               	goto	u840
  1506  0385  3001               	movlw	1
  1507  0386  2B88               	goto	u850
  1508  0387                     u840:	
  1509  0387  3000               	movlw	0
  1510  0388                     u850:	
  1511  0388  00A7               	movwf	??_updateKey
  1512  0389  0827               	movf	??_updateKey,w
  1513  038A  00AA               	movwf	updateKey@localCtrl
  1514                           
  1515                           ;main.c: 194:     if ( key < 128 ) code = codeToMatrix[key];
  1516  038B  3080               	movlw	128
  1517  038C  022B               	subwf	updateKey@key,w
  1518  038D  1803               	skipnc
  1519  038E  2B96               	goto	l1216
  1520  038F  082B               	movf	updateKey@key,w
  1521  0390  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  1522  0391  0084               	movwf	4
  1523  0392  2200               	fcall	stringdir
  1524  0393  00A7               	movwf	??_updateKey
  1525  0394  0827               	movf	??_updateKey,w
  1526  0395  00AC               	movwf	updateKey@code
  1527  0396                     l1216:	
  1528                           
  1529                           ;main.c: 195:     if ( code != 0xFF ) {
  1530  0396  0A2C               	incf	updateKey@code,w
  1531  0397  1903               	btfsc	3,2
  1532  0398  2BB1               	goto	l1224
  1533                           
  1534                           ;main.c: 196:         updatePort(code, set);
  1535  0399  0826               	movf	updateKey@set,w
  1536  039A  00A7               	movwf	??_updateKey
  1537  039B  0827               	movf	??_updateKey,w
  1538  039C  00A0               	movwf	updatePort@set
  1539  039D  082C               	movf	updateKey@code,w
  1540  039E  244A               	fcall	_updatePort
  1541                           
  1542                           ;main.c: 197:         localShift |= ((code & 64) > 0);
  1543  039F  1283               	bcf	3,5	;RP0=0, select bank0
  1544  03A0  1303               	bcf	3,6	;RP1=0, select bank0
  1545  03A1  1F2C               	btfss	updateKey@code,6
  1546  03A2  2BA5               	goto	u880
  1547  03A3  3001               	movlw	1
  1548  03A4  2BA6               	goto	u890
  1549  03A5                     u880:	
  1550  03A5  3000               	movlw	0
  1551  03A6                     u890:	
  1552  03A6  00A7               	movwf	??_updateKey
  1553  03A7  0827               	movf	??_updateKey,w
  1554  03A8  04A8               	iorwf	updateKey@localShift,f
  1555                           
  1556                           ;main.c: 198:         localCtrl |= ((code & 128) > 0);
  1557  03A9  1FAC               	btfss	updateKey@code,7
  1558  03AA  2BAD               	goto	u900
  1559  03AB  3001               	movlw	1
  1560  03AC  2BAE               	goto	u910
  1561  03AD                     u900:	
  1562  03AD  3000               	movlw	0
  1563  03AE                     u910:	
  1564  03AE  00A7               	movwf	??_updateKey
  1565  03AF  0827               	movf	??_updateKey,w
  1566  03B0  04AA               	iorwf	updateKey@localCtrl,f
  1567  03B1                     l1224:	
  1568                           ;main.c: 199:     }
  1569                           
  1570                           
  1571                           ;main.c: 200:     if ( set ) {
  1572  03B1  0826               	movf	updateKey@set,w
  1573  03B2  1903               	btfsc	3,2
  1574  03B3  0008               	return
  1575                           
  1576                           ;main.c: 201:         updatePort(0x00, localShift );
  1577  03B4  0828               	movf	updateKey@localShift,w
  1578  03B5  00A7               	movwf	??_updateKey
  1579  03B6  0827               	movf	??_updateKey,w
  1580  03B7  00A0               	movwf	updatePort@set
  1581  03B8  3000               	movlw	0
  1582  03B9  244A               	fcall	_updatePort
  1583                           
  1584                           ;main.c: 202:         updatePort(0x0F, localCtrl );
  1585  03BA  1283               	bcf	3,5	;RP0=0, select bank0
  1586  03BB  1303               	bcf	3,6	;RP1=0, select bank0
  1587  03BC  082A               	movf	updateKey@localCtrl,w
  1588  03BD  00A7               	movwf	??_updateKey
  1589  03BE  0827               	movf	??_updateKey,w
  1590  03BF  00A0               	movwf	updatePort@set
  1591  03C0  300F               	movlw	15
  1592  03C1  244A               	fcall	_updatePort
  1593  03C2  0008               	return
  1594  03C3                     __end_of_updateKey:	
  1595                           ;main.c: 203:     }
  1596                           
  1597                           
  1598                           	psect	text2
  1599  044A                     __ptext2:	
  1600 ;; *************** function _updatePort *****************
  1601 ;; Defined at:
  1602 ;;		line 180 in file "main.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  bit_id          1    wreg     unsigned char 
  1605 ;;  set             1    0[BANK0 ] unsigned char 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;  bit_id          1    5[BANK0 ] unsigned char 
  1608 ;;  a               1    4[BANK0 ] unsigned char 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1618 ;;      Params:         0       1       0       0
  1619 ;;      Locals:         0       2       0       0
  1620 ;;      Temps:          0       3       0       0
  1621 ;;      Totals:         0       6       0       0
  1622 ;;Total ram usage:        6 bytes
  1623 ;; Hardware stack levels used:    1
  1624 ;; Hardware stack levels required when called:    2
  1625 ;; This function calls:
  1626 ;;		Nothing
  1627 ;; This function is called by:
  1628 ;;		_updateKey
  1629 ;;		_main
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           
  1634                           ;psect for function _updatePort
  1635  044A                     _updatePort:	
  1636                           
  1637                           ;incstack = 0
  1638                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1639                           ;updatePort@bit_id stored from wreg
  1640  044A  1283               	bcf	3,5	;RP0=0, select bank0
  1641  044B  1303               	bcf	3,6	;RP1=0, select bank0
  1642  044C  00A5               	movwf	updatePort@bit_id
  1643                           
  1644                           ;main.c: 180: void updatePort(uint8_t bit_id, uint8_t set);main.c: 181: {;main.c: 182:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  1645  044D  3001               	movlw	1
  1646  044E  00A1               	movwf	??_updatePort
  1647  044F  0825               	movf	updatePort@bit_id,w
  1648  0450  00A2               	movwf	??_updatePort+1
  1649  0451  3003               	movlw	3
  1650  0452                     u795:	
  1651  0452  1003               	clrc
  1652  0453  0CA2               	rrf	??_updatePort+1,f
  1653  0454  3EFF               	addlw	-1
  1654  0455  1D03               	skipz
  1655  0456  2C52               	goto	u795
  1656  0457  0822               	movf	??_updatePort+1,w
  1657  0458  3907               	andlw	7
  1658  0459  3E01               	addlw	1
  1659  045A  2C5D               	goto	u804
  1660  045B                     u805:	
  1661  045B  1003               	clrc
  1662  045C  0DA1               	rlf	??_updatePort,f
  1663  045D                     u804:	
  1664  045D  3EFF               	addlw	-1
  1665  045E  1D03               	skipz
  1666  045F  2C5B               	goto	u805
  1667  0460  0821               	movf	??_updatePort,w
  1668  0461  00A3               	movwf	??_updatePort+2
  1669  0462  0823               	movf	??_updatePort+2,w
  1670  0463  00A4               	movwf	updatePort@a
  1671                           
  1672                           ;main.c: 183:     if ( set ) outPorts[bit_id & 7] |= a;
  1673  0464  0820               	movf	updatePort@set,w
  1674  0465  1903               	btfsc	3,2
  1675  0466  2C71               	goto	l1198
  1676  0467  0824               	movf	updatePort@a,w
  1677  0468  00A1               	movwf	??_updatePort
  1678  0469  0825               	movf	updatePort@bit_id,w
  1679  046A  3907               	andlw	7
  1680  046B  3E32               	addlw	(low (_outPorts| 0))& (0+255)
  1681  046C  0084               	movwf	4
  1682  046D  0821               	movf	??_updatePort,w
  1683  046E  1383               	bcf	3,7	;select IRP bank0
  1684  046F  0480               	iorwf	0,f
  1685  0470  0008               	return
  1686  0471                     l1198:	
  1687                           ;main.c: 184:     else outPorts[bit_id & 7] &= ~a;
  1688                           
  1689  0471  0924               	comf	updatePort@a,w
  1690  0472  00A1               	movwf	??_updatePort
  1691  0473  0825               	movf	updatePort@bit_id,w
  1692  0474  3907               	andlw	7
  1693  0475  3E32               	addlw	(low (_outPorts| 0))& (0+255)
  1694  0476  0084               	movwf	4
  1695  0477  0821               	movf	??_updatePort,w
  1696  0478  1383               	bcf	3,7	;select IRP bank0
  1697  0479  0580               	andwf	0,f
  1698  047A  0008               	return
  1699  047B                     __end_of_updatePort:	
  1700                           
  1701                           	psect	text3
  1702  03C3                     __ptext3:	
  1703 ;; *************** function _sendDataToAltera *****************
  1704 ;; Defined at:
  1705 ;;		line 240 in file "main.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  i               1    4[BANK0 ] char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1719 ;;      Params:         0       0       0       0
  1720 ;;      Locals:         0       3       0       0
  1721 ;;      Temps:          0       2       0       0
  1722 ;;      Totals:         0       5       0       0
  1723 ;;Total ram usage:        5 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    3
  1726 ;; This function calls:
  1727 ;;		_myDelay
  1728 ;; This function is called by:
  1729 ;;		_main
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           
  1734                           ;psect for function _sendDataToAltera
  1735  03C3                     _sendDataToAltera:	
  1736                           
  1737                           ;main.c: 242:     RA1 = 0;
  1738                           
  1739                           ;incstack = 0
  1740                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1741  03C3  1283               	bcf	3,5	;RP0=0, select bank0
  1742  03C4  1303               	bcf	3,6	;RP1=0, select bank0
  1743  03C5  1085               	bcf	5,1	;volatile
  1744                           
  1745                           ;main.c: 243:     RA2 = 1;
  1746  03C6  1505               	bsf	5,2	;volatile
  1747                           
  1748                           ;main.c: 244:     myDelay();
  1749  03C7  2486               	fcall	_myDelay
  1750                           
  1751                           ;main.c: 245:     RA1 = 1;
  1752  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  1753  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  1754  03CA  1485               	bsf	5,1	;volatile
  1755                           
  1756                           ;main.c: 246:     myDelay();
  1757  03CB  2486               	fcall	_myDelay
  1758                           
  1759                           ;main.c: 247:     RA1 = 0;
  1760  03CC  1283               	bcf	3,5	;RP0=0, select bank0
  1761  03CD  1303               	bcf	3,6	;RP1=0, select bank0
  1762  03CE  1085               	bcf	5,1	;volatile
  1763                           
  1764                           ;main.c: 248:     myDelay();
  1765  03CF  2486               	fcall	_myDelay
  1766                           
  1767                           ;main.c: 249:     for(int8_t i=0;i<11;i++) {
  1768  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  1769  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  1770  03D2  01A4               	clrf	sendDataToAltera@i
  1771  03D3  0824               	movf	sendDataToAltera@i,w
  1772  03D4  3A80               	xorlw	128
  1773  03D5  3E75               	addlw	-139
  1774  03D6  1803               	btfsc	3,0
  1775  03D7  2C09               	goto	l1264
  1776  03D8                     l1242:	
  1777                           
  1778                           ;main.c: 250:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1779  03D8  0824               	movf	sendDataToAltera@i,w
  1780  03D9  3A80               	xorlw	128
  1781  03DA  3E78               	addlw	-136
  1782  03DB  1C03               	skipc
  1783  03DC  2BE8               	goto	l1246
  1784  03DD  0824               	movf	sendDataToAltera@i,w
  1785  03DE  3E32               	addlw	(low (_outPorts| 0))& (0+255)
  1786  03DF  0084               	movwf	4
  1787  03E0  1383               	bcf	3,7	;select IRP bank0
  1788  03E1  0800               	movf	0,w
  1789  03E2  00A0               	movwf	??_sendDataToAltera
  1790  03E3  01A1               	clrf	??_sendDataToAltera+1
  1791  03E4  0820               	movf	??_sendDataToAltera,w
  1792  03E5  00A2               	movwf	_sendDataToAltera$150
  1793  03E6  0821               	movf	??_sendDataToAltera+1,w
  1794  03E7  2BF2               	goto	L1
  1795  03E8                     l1246:	
  1796  03E8  0824               	movf	sendDataToAltera@i,w
  1797  03E9  3E32               	addlw	(low (_outPorts| 0))& (0+255)
  1798  03EA  0084               	movwf	4
  1799  03EB  1383               	bcf	3,7	;select IRP bank0
  1800  03EC  0800               	movf	0,w
  1801  03ED  00A0               	movwf	??_sendDataToAltera
  1802  03EE  01A1               	clrf	??_sendDataToAltera+1
  1803  03EF  0920               	comf	??_sendDataToAltera,w
  1804  03F0  00A2               	movwf	_sendDataToAltera$150
  1805  03F1  0921               	comf	??_sendDataToAltera+1,w
  1806  03F2                     L1:	
  1807  03F2  00A3               	movwf	_sendDataToAltera$150+1
  1808  03F3  0822               	movf	_sendDataToAltera$150,w
  1809  03F4  0086               	movwf	6	;volatile
  1810                           
  1811                           ;main.c: 251:         myDelay();
  1812  03F5  2486               	fcall	_myDelay
  1813                           
  1814                           ;main.c: 252:         RA2 = 0;
  1815  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  1816  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  1817  03F8  1105               	bcf	5,2	;volatile
  1818                           
  1819                           ;main.c: 253:         myDelay();
  1820  03F9  2486               	fcall	_myDelay
  1821                           
  1822                           ;main.c: 254:         RA2 = 1;
  1823  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  1824  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  1825  03FC  1505               	bsf	5,2	;volatile
  1826                           
  1827                           ;main.c: 255:         myDelay();
  1828  03FD  2486               	fcall	_myDelay
  1829                           
  1830                           ;main.c: 256:     }
  1831  03FE  3001               	movlw	1
  1832  03FF  1283               	bcf	3,5	;RP0=0, select bank0
  1833  0400  1303               	bcf	3,6	;RP1=0, select bank0
  1834  0401  00A0               	movwf	??_sendDataToAltera
  1835  0402  0820               	movf	??_sendDataToAltera,w
  1836  0403  07A4               	addwf	sendDataToAltera@i,f
  1837  0404  0824               	movf	sendDataToAltera@i,w
  1838  0405  3A80               	xorlw	128
  1839  0406  3E75               	addlw	-139
  1840  0407  1C03               	skipc
  1841  0408  2BD8               	goto	l1242
  1842  0409                     l1264:	
  1843                           
  1844                           ;main.c: 257:     PORTB = 0xFF;
  1845  0409  30FF               	movlw	255
  1846  040A  0086               	movwf	6	;volatile
  1847  040B  0008               	return
  1848  040C                     __end_of_sendDataToAltera:	
  1849                           
  1850                           	psect	text4
  1851  0486                     __ptext4:	
  1852 ;; *************** function _myDelay *****************
  1853 ;; Defined at:
  1854 ;;		line 208 in file "main.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  1    wreg      void 
  1861 ;; Registers used:
  1862 ;;		None
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1868 ;;      Params:         0       0       0       0
  1869 ;;      Locals:         0       0       0       0
  1870 ;;      Temps:          0       0       0       0
  1871 ;;      Totals:         0       0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    2
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_sendDataToAltera
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           
  1883                           ;psect for function _myDelay
  1884  0486                     _myDelay:	
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _myDelay: []
  1888  0486  0008               	return
  1889  0487                     __end_of_myDelay:	
  1890                           
  1891                           	psect	text5
  1892  040C                     __ptext5:	
  1893 ;; *************** function _calculateBitsFromTable *****************
  1894 ;; Defined at:
  1895 ;;		line 310 in file "main.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  bits            1    wreg     PTR unsigned char 
  1898 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1899 ;;  table           1    0[BANK0 ] PTR unsigned char 
  1900 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  1901 ;;  count           1    1[BANK0 ] unsigned char 
  1902 ;;  clearIfFound    1    2[BANK0 ] unsigned char 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  bits            1    5[BANK0 ] PTR unsigned char 
  1905 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1906 ;;  i               1    6[BANK0 ] unsigned char 
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1916 ;;      Params:         0       3       0       0
  1917 ;;      Locals:         0       2       0       0
  1918 ;;      Temps:          0       2       0       0
  1919 ;;      Totals:         0       7       0       0
  1920 ;;Total ram usage:        7 bytes
  1921 ;; Hardware stack levels used:    2
  1922 ;; Hardware stack levels required when called:    2
  1923 ;; This function calls:
  1924 ;;		Nothing
  1925 ;; This function is called by:
  1926 ;;		_main
  1927 ;; This function uses a non-reentrant model
  1928 ;;
  1929                           
  1930                           
  1931                           ;psect for function _calculateBitsFromTable
  1932  040C                     _calculateBitsFromTable:	
  1933                           
  1934                           ;incstack = 0
  1935                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  1936                           ;calculateBitsFromTable@bits stored from wreg
  1937  040C  1283               	bcf	3,5	;RP0=0, select bank0
  1938  040D  1303               	bcf	3,6	;RP1=0, select bank0
  1939  040E  00A5               	movwf	calculateBitsFromTable@bits
  1940                           
  1941                           ;main.c: 310: void calculateBitsFromTable(uint8_t* bits, uint8_t table[], uint8_t count,
      +                           uint8_t clearIfFound);main.c: 311: {;main.c: 312:     for(uint8_t i = 0; i < count;i++)
      +                           {
  1942  040F  01A6               	clrf	calculateBitsFromTable@i
  1943  0410                     l1282:	
  1944  0410  0821               	movf	calculateBitsFromTable@count,w
  1945  0411  0226               	subwf	calculateBitsFromTable@i,w
  1946  0412  1803               	btfsc	3,0
  1947  0413  0008               	return
  1948                           
  1949                           ;main.c: 313:         if ( ps2Data == table[i] ) {
  1950  0414  0826               	movf	calculateBitsFromTable@i,w
  1951  0415  0720               	addwf	calculateBitsFromTable@table,w
  1952  0416  0084               	movwf	4
  1953  0417  2200               	fcall	stringdir
  1954  0418  0649               	xorwf	_ps2Data,w
  1955  0419  1D03               	skipz
  1956  041A  2C45               	goto	l1280
  1957                           
  1958                           ;main.c: 314:             if ( ps2Down ) {
  1959  041B  0847               	movf	_ps2Down,w
  1960  041C  1903               	btfsc	3,2
  1961  041D  2C2F               	goto	l1274
  1962                           
  1963                           ;main.c: 315:                 (*bits) |= (1 << i);
  1964  041E  3001               	movlw	1
  1965  041F  00A3               	movwf	??_calculateBitsFromTable
  1966  0420  0A26               	incf	calculateBitsFromTable@i,w
  1967  0421  2C24               	goto	u984
  1968  0422                     u985:	
  1969  0422  1003               	clrc
  1970  0423  0DA3               	rlf	??_calculateBitsFromTable,f
  1971  0424                     u984:	
  1972  0424  3EFF               	addlw	-1
  1973  0425  1D03               	skipz
  1974  0426  2C22               	goto	u985
  1975  0427  0823               	movf	??_calculateBitsFromTable,w
  1976  0428  00A4               	movwf	??_calculateBitsFromTable+1
  1977  0429  0825               	movf	calculateBitsFromTable@bits,w
  1978  042A  0084               	movwf	4
  1979  042B  0824               	movf	??_calculateBitsFromTable+1,w
  1980  042C  1383               	bcf	3,7	;select IRP bank0
  1981  042D  0480               	iorwf	0,f
  1982                           
  1983                           ;main.c: 316:             } else {
  1984  042E  2C40               	goto	l1276
  1985  042F                     l1274:	
  1986                           
  1987                           ;main.c: 317:                 (*bits) &= ~(1 << i);
  1988  042F  3001               	movlw	1
  1989  0430  00A3               	movwf	??_calculateBitsFromTable
  1990  0431  0A26               	incf	calculateBitsFromTable@i,w
  1991  0432  2C35               	goto	u994
  1992  0433                     u995:	
  1993  0433  1003               	clrc
  1994  0434  0DA3               	rlf	??_calculateBitsFromTable,f
  1995  0435                     u994:	
  1996  0435  3EFF               	addlw	-1
  1997  0436  1D03               	skipz
  1998  0437  2C33               	goto	u995
  1999  0438  0823               	movf	??_calculateBitsFromTable,w
  2000  0439  3AFF               	xorlw	255
  2001  043A  00A4               	movwf	??_calculateBitsFromTable+1
  2002  043B  0825               	movf	calculateBitsFromTable@bits,w
  2003  043C  0084               	movwf	4
  2004  043D  0824               	movf	??_calculateBitsFromTable+1,w
  2005  043E  1383               	bcf	3,7	;select IRP bank0
  2006  043F  0580               	andwf	0,f
  2007  0440                     l1276:	
  2008                           ;main.c: 318:             }
  2009                           
  2010                           
  2011                           ;main.c: 319:             if ( clearIfFound ) {
  2012  0440  0822               	movf	calculateBitsFromTable@clearIfFound,w
  2013  0441  1903               	btfsc	3,2
  2014  0442  0008               	return
  2015                           
  2016                           ;main.c: 320:                 ps2Data = 0;
  2017  0443  01C9               	clrf	_ps2Data
  2018                           
  2019                           ;main.c: 322:             break;
  2020                           
  2021                           ;main.c: 321:             }
  2022  0444  0008               	return
  2023  0445                     l1280:	
  2024                           ;main.c: 323:         }
  2025                           
  2026                           
  2027                           ;main.c: 324:     }
  2028  0445  3001               	movlw	1
  2029  0446  00A3               	movwf	??_calculateBitsFromTable
  2030  0447  0823               	movf	??_calculateBitsFromTable,w
  2031  0448  07A6               	addwf	calculateBitsFromTable@i,f
  2032  0449  2C10               	goto	l1282
  2033  044A                     __end_of_calculateBitsFromTable:	
  2034                           
  2035                           	psect	text6
  2036  02E0                     __ptext6:	
  2037 ;; *************** function _myIsr *****************
  2038 ;; Defined at:
  2039 ;;		line 113 in file "main.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;		None
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  i               1    8[COMMON] char 
  2044 ;; Return value:  Size  Location     Type
  2045 ;;                  1    wreg      void 
  2046 ;; Registers used:
  2047 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2048 ;; Tracked objects:
  2049 ;;		On entry : 0/0
  2050 ;;		On exit  : 0/0
  2051 ;;		Unchanged: 0/0
  2052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2053 ;;      Params:         0       0       0       0
  2054 ;;      Locals:         3       0       0       0
  2055 ;;      Temps:          6       0       0       0
  2056 ;;      Totals:         9       0       0       0
  2057 ;;Total ram usage:        9 bytes
  2058 ;; Hardware stack levels used:    2
  2059 ;; This function calls:
  2060 ;;		Nothing
  2061 ;; This function is called by:
  2062 ;;		Interrupt level 1
  2063 ;; This function uses a non-reentrant model
  2064 ;;
  2065                           
  2066                           
  2067                           ;psect for function _myIsr
  2068  02E0                     _myIsr:	
  2069                           
  2070                           ;main.c: 115:     if(T0IE && T0IF){
  2071  02E0  1A8B               	btfsc	11,5	;volatile
  2072  02E1  1D0B               	btfss	11,2	;volatile
  2073  02E2  2B60               	goto	i1l185
  2074                           
  2075                           ;main.c: 117:         T0IF=0;
  2076  02E3  110B               	bcf	11,2	;volatile
  2077                           
  2078                           ;main.c: 118:         TMR0 = 255;
  2079  02E4  30FF               	movlw	255
  2080  02E5  0081               	movwf	1	;volatile
  2081                           
  2082                           ;main.c: 122:         if ( ps2DataState == 0 ) {
  2083  02E6  087C               	movf	_ps2DataState,w
  2084  02E7  1D03               	btfss	3,2
  2085  02E8  2AF5               	goto	i1l1304
  2086                           
  2087                           ;main.c: 123:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  2088  02E9  1E05               	btfss	5,4	;volatile
  2089  02EA  1985               	btfsc	5,3	;volatile
  2090  02EB  2B60               	goto	i1l185
  2091                           
  2092                           ;main.c: 124:                 ps2BitsCount = 0;
  2093  02EC  01FA               	clrf	_ps2BitsCount
  2094                           
  2095                           ;main.c: 125:                 ps2Bits = 0;
  2096  02ED  01FB               	clrf	_ps2Bits
  2097                           
  2098                           ;main.c: 126:                 ps2DataState = 1;
  2099  02EE  01FC               	clrf	_ps2DataState
  2100  02EF  0AFC               	incf	_ps2DataState,f
  2101                           
  2102                           ;main.c: 127:                 ps2Device = PORTAbits.RA0;
  2103  02F0  3000               	movlw	0
  2104  02F1  1805               	btfsc	5,0	;volatile
  2105  02F2  3001               	movlw	1
  2106  02F3  00C8               	movwf	_ps2Device
  2107                           
  2108                           ;main.c: 129:         } else if ( ps2DataState == 1 ) {
  2109                           
  2110                           ;main.c: 128:             }
  2111  02F4  2B60               	goto	i1l185
  2112  02F5                     i1l1304:	
  2113  02F5  037C               	decf	_ps2DataState,w
  2114  02F6  1D03               	btfss	3,2
  2115  02F7  2B5C               	goto	i1l1352
  2116                           
  2117                           ;main.c: 130:             if ( ps2BitsCount < 8 ) {
  2118  02F8  087A               	movf	_ps2BitsCount,w
  2119  02F9  3A80               	xorlw	128
  2120  02FA  3E78               	addlw	-136
  2121  02FB  1803               	skipnc
  2122  02FC  2B0D               	goto	i1l1312
  2123                           
  2124                           ;main.c: 131:                 if ( PORTAbits.RA3 ) {
  2125  02FD  1D85               	btfss	5,3	;volatile
  2126  02FE  2B11               	goto	i1l1314
  2127                           
  2128                           ;main.c: 132:                     ps2Bits |= ( 1 << ps2BitsCount );
  2129  02FF  3001               	movlw	1
  2130  0300  00F0               	movwf	??_myIsr
  2131  0301  0A7A               	incf	_ps2BitsCount,w
  2132  0302  2B05               	goto	u110_24
  2133  0303                     u110_25:	
  2134  0303  1003               	clrc
  2135  0304  0DF0               	rlf	??_myIsr,f
  2136  0305                     u110_24:	
  2137  0305  3EFF               	addlw	-1
  2138  0306  1D03               	skipz
  2139  0307  2B03               	goto	u110_25
  2140  0308  0870               	movf	??_myIsr,w
  2141  0309  00F1               	movwf	??_myIsr+1
  2142  030A  0871               	movf	??_myIsr+1,w
  2143  030B  04FB               	iorwf	_ps2Bits,f
  2144                           
  2145                           ;main.c: 133:                 }
  2146  030C  2B11               	goto	i1l1314
  2147  030D                     i1l1312:	
  2148                           ;main.c: 135:             } else if ( ps2BitsCount == 8 ) {
  2149                           
  2150                           ;main.c: 134:                 ps2BitsCount++;
  2151                           
  2152  030D  3008               	movlw	8
  2153  030E  067A               	xorwf	_ps2BitsCount,w
  2154  030F  1D03               	btfss	3,2
  2155  0310  2B16               	goto	i1l1316
  2156  0311                     i1l1314:	
  2157                           
  2158                           ;main.c: 136:                 ps2BitsCount++;
  2159  0311  3001               	movlw	1
  2160  0312  00F0               	movwf	??_myIsr
  2161  0313  0870               	movf	??_myIsr,w
  2162  0314  07FA               	addwf	_ps2BitsCount,f
  2163                           
  2164                           ;main.c: 137:             } else if ( ps2BitsCount == 9 ) {
  2165  0315  2B60               	goto	i1l185
  2166  0316                     i1l1316:	
  2167  0316  3009               	movlw	9
  2168  0317  067A               	xorwf	_ps2BitsCount,w
  2169  0318  1D03               	btfss	3,2
  2170  0319  2B60               	goto	i1l185
  2171                           
  2172                           ;main.c: 139:                 if ( ps2NeedEncode ) {
  2173  031A  0879               	movf	_ps2NeedEncode,w
  2174  031B  1903               	btfsc	3,2
  2175  031C  2B35               	goto	i1l1334
  2176                           
  2177                           ;main.c: 140:                     for (int8_t i=0; i < 27; i+=2) {
  2178  031D  01F8               	clrf	myIsr@i
  2179  031E                     L4:	
  2180  031E  0878               	movf	myIsr@i,w
  2181  031F  3A80               	xorlw	128
  2182  0320  3E65               	addlw	-155
  2183  0321  1803               	btfsc	3,0
  2184  0322  2B48               	goto	i1l1340
  2185                           
  2186                           ;main.c: 141:                         if ( ps2Bits == replaceTwoBytesCodes[i] ) {
  2187  0323  0878               	movf	myIsr@i,w
  2188  0324  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2189  0325  0084               	movwf	4
  2190  0326  2200               	fcall	stringdir
  2191  0327  067B               	xorwf	_ps2Bits,w
  2192  0328  1D03               	skipz
  2193  0329  2B30               	goto	i1l1330
  2194                           
  2195                           ;main.c: 142:                             ps2Data = replaceTwoBytesCodes[i+1];
  2196  032A  0878               	movf	myIsr@i,w
  2197  032B  3E01               	addlw	1
  2198  032C  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  2199  032D  0084               	movwf	4
  2200  032E  2200               	fcall	stringdir
  2201  032F  2B45               	goto	L2
  2202  0330                     i1l1330:	
  2203                           ;main.c: 144:                         }
  2204                           
  2205                           ;main.c: 143:                             break;
  2206                           
  2207                           
  2208                           ;main.c: 145:                     }
  2209  0330  3002               	movlw	2
  2210  0331  00F0               	movwf	??_myIsr
  2211  0332  0870               	movf	??_myIsr,w
  2212  0333  07F8               	addwf	myIsr@i,f
  2213  0334  2B1E               	goto	L4
  2214  0335                     i1l1334:	
  2215                           ;main.c: 146:                 } else {
  2216                           
  2217                           
  2218                           ;main.c: 147:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2219  0335  3083               	movlw	131
  2220  0336  067B               	xorwf	_ps2Bits,w
  2221  0337  1903               	btfsc	3,2
  2222  0338  2B40               	goto	i1l1338
  2223  0339  087B               	movf	_ps2Bits,w
  2224  033A  00F0               	movwf	??_myIsr
  2225  033B  01F1               	clrf	??_myIsr+1
  2226  033C  0870               	movf	??_myIsr,w
  2227  033D  00F6               	movwf	_myIsr$133
  2228  033E  0871               	movf	??_myIsr+1,w
  2229  033F  2B43               	goto	L3
  2230  0340                     i1l1338:	
  2231  0340  303F               	movlw	63
  2232  0341  00F6               	movwf	_myIsr$133
  2233  0342  3000               	movlw	0
  2234  0343                     L3:	
  2235  0343  00F7               	movwf	_myIsr$133+1
  2236  0344  0876               	movf	_myIsr$133,w
  2237  0345                     L2:	
  2238  0345  00F0               	movwf	??_myIsr
  2239  0346  0870               	movf	??_myIsr,w
  2240  0347  00C9               	movwf	_ps2Data
  2241  0348                     i1l1340:	
  2242                           ;main.c: 148:                 }
  2243                           
  2244                           
  2245                           ;main.c: 149:                 if ( ps2Bits == 0xF0 ) {
  2246  0348  30F0               	movlw	240
  2247  0349  067B               	xorwf	_ps2Bits,w
  2248  034A  1D03               	btfss	3,2
  2249  034B  2B4F               	goto	i1l1344
  2250                           
  2251                           ;main.c: 150:                     ps2DataState = 0;
  2252  034C  01FC               	clrf	_ps2DataState
  2253                           
  2254                           ;main.c: 151:                     ps2Down = 0;
  2255  034D  01C7               	clrf	_ps2Down
  2256                           
  2257                           ;main.c: 152:                 } else if ( ps2Bits == 0xE0 ) {
  2258  034E  2B60               	goto	i1l185
  2259  034F                     i1l1344:	
  2260  034F  30E0               	movlw	224
  2261  0350  067B               	xorwf	_ps2Bits,w
  2262  0351  1D03               	btfss	3,2
  2263  0352  2B57               	goto	i1l1350
  2264                           
  2265                           ;main.c: 153:                     ps2DataState = 0;
  2266  0353  01FC               	clrf	_ps2DataState
  2267                           
  2268                           ;main.c: 154:                     ps2NeedEncode = 1;
  2269  0354  01F9               	clrf	_ps2NeedEncode
  2270  0355  0AF9               	incf	_ps2NeedEncode,f
  2271                           
  2272                           ;main.c: 163:                 } else {
  2273  0356  2B60               	goto	i1l185
  2274  0357                     i1l1350:	
  2275                           
  2276                           ;main.c: 164:                     ps2DataState = 2;
  2277  0357  3002               	movlw	2
  2278  0358  00F0               	movwf	??_myIsr
  2279  0359  0870               	movf	??_myIsr,w
  2280  035A  00FC               	movwf	_ps2DataState
  2281                           
  2282                           ;main.c: 168:         } else if ( ps2DataState == 4 ) {
  2283                           
  2284                           ;main.c: 167:             }
  2285                           
  2286                           ;main.c: 165:                 }
  2287  035B  2B60               	goto	i1l185
  2288  035C                     i1l1352:	
  2289  035C  3004               	movlw	4
  2290  035D  067C               	xorwf	_ps2DataState,w
  2291  035E  1903               	btfsc	3,2
  2292                           
  2293                           ;main.c: 170:             ps2DataState = 0;
  2294  035F  01FC               	clrf	_ps2DataState
  2295  0360                     i1l185:	
  2296                           ;main.c: 174:     }
  2297                           
  2298                           ;main.c: 172:     } else {
  2299                           
  2300                           ;main.c: 171:         }
  2301                           
  2302                           
  2303                           ;main.c: 175:     GIE = 1;
  2304  0360  178B               	bsf	11,7	;volatile
  2305  0361  0875               	movf	??_myIsr+5,w
  2306  0362  00FF               	movwf	127
  2307  0363  0874               	movf	??_myIsr+4,w
  2308  0364  008A               	movwf	10
  2309  0365  0873               	movf	??_myIsr+3,w
  2310  0366  0084               	movwf	4
  2311  0367  0E72               	swapf	(??_myIsr+2)^(0+4294967168),w
  2312  0368  0083               	movwf	3
  2313  0369  0EFE               	swapf	126,f
  2314  036A  0E7E               	swapf	126,w
  2315  036B  0009               	retfie
  2316  036C                     __end_of_myIsr:	
  2317  007E                     btemp	set	126	;btemp
  2318  007E                     wtemp0	set	126
  2319                           
  2320                           	psect	intentry
  2321  0004                     __pintentry:	
  2322                           ;incstack = 0
  2323                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath]
  2324                           
  2325  0004                     interrupt_function:	
  2326  007E                     saved_w	set	btemp
  2327  0004  00FE               	movwf	btemp
  2328  0005  0E03               	swapf	3,w
  2329  0006  00F2               	movwf	??_myIsr+2
  2330  0007  0804               	movf	4,w
  2331  0008  00F3               	movwf	??_myIsr+3
  2332  0009  080A               	movf	10,w
  2333  000A  00F4               	movwf	??_myIsr+4
  2334  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2335  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2336  000D  087F               	movf	btemp+1,w
  2337  000E  00F5               	movwf	??_myIsr+5
  2338  000F  2AE0               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         13
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80     18      42
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myIsr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2292
                                             13 BANK0      5     5      0
             _calculateBitsFromTable
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                              6 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              0 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculateBitsFromTable                               7     4      3     722
                                              0 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                9     9      0     114
                                              0 COMMON     9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateBitsFromTable
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      2A       3       52.5%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      37      10        0.0%
ABS                  0      0      37       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Oct 20 01:58:49 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0023                                 l230 00E0  
                               l232 00F1                                 l226 008D  
                               l253 01BE                                 l265 01B8  
                               _GIE 005F                                 _RA1 0029  
                               _RA2 002A                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               u804 045D                                 u900 03AD  
                               u805 045B                                 u910 03AE  
                               _PSA 040B                                 u840 0387  
                               u850 0388                                 u880 03A5  
                               u890 03A6                                 u795 0452  
                               u984 0424                                 u985 0422  
                               u994 0435                                 u995 0433  
                               fsr0 0004                                 indf 0000  
                              l1224 03B1                                l1216 0396  
                              l1208 037D                                l1242 03D8  
                              l1246 03E8                                l1510 0179  
                              l1502 0166                                l1280 0445  
                              l1264 0409                                l1274 042F  
                              l1282 0410                                l1530 01A7  
                              l1450 00F8                                l1426 00CC  
                              l1276 0440                                l1444 00F2  
                              l1436 00E1                                l1198 0471  
                              l1534 01AD                                l1526 01A1  
                              l1542 01B9                                l1518 018B  
                              l1462 0112                                l1470 0121  
                              l1480 0130                                l1464 0113  
                              l1456 0106                                l1538 01B1  
                              l1490 014D                                l1466 011C  
                              l1458 010A                                l1474 012A  
                              l1494 0156                                l1488 014B  
                              l1498 015D                                _EEIE 0467  
                              _EEIF 0067                                _CMIE 0466  
                              _CMIF 0066                                _T0IE 005D  
                              _T0IF 005A                                _T0CS 040D  
                              u1250 00C8                                _T0SE 040C  
                              u1260 00C9                                _PEIE 005E  
                              _INTE 005C                                _INTF 0059  
                              _RBIE 005B                                _RBIF 0058  
                              _RCIE 0465                                _RCIF 0065  
                              _TMR0 0001                                _TMR2 0011  
                              _SPEN 00C7                                _TXIE 0464  
                              _TXIF 0064                                _main 0036  
                              btemp 007E                                start 0010  
                             ?_main 0070                               _CMCON 001F  
      __end_of_replaceTwoBytesCodes 02CC                               _T1CON 0010  
                             i1l185 0360                               _RCSTA 0018  
                             _TMR1H 000F                               _TMR1L 000E  
                             _PORTA 0005                               _PORTB 0006  
              __end_of_codeToMatrix 0286                               _TRISA 0085  
                             _TRISB 0086                               _VRCON 009F  
                             _TXSTA 0098                               _nRBPU 040F  
                             _delay 003F                     __end_of_myDelay 0487  
                             _myIsr 02E0                               main@i 0031  
                  updatePort@bit_id 0025                               pclath 000A  
                             status 0003                        updateKey@key 002B  
                      updateKey@set 0026                               wtemp0 007E  
                   __initialization 0011                        __end_of_main 01C0  
                            ??_main 002D     __size_of_calculateBitsFromTable 003E  
                 sendDataToAltera@i 0024                              _CCP1IE 0462  
                            _CCP1IF 0062                              ?_myIsr 0070  
                            _CCPR1H 0016                              _CCPR1L 0015  
                            u110_24 0305                              u110_25 0303  
                            i1l1312 030D                              i1l1304 02F5  
                            i1l1330 0330                              i1l1314 0311  
                            i1l1340 0348                              i1l1316 0316  
                            i1l1350 0357                              i1l1334 0335  
                            i1l1344 034F                              i1l1352 035C  
                            i1l1338 0340                              _INTEDG 040E  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _TMR2IE 0461                              _TMR2IF 0061  
                            _TRISA0 0428                              _TRISA1 0429  
                            _TRISA2 042A                              _TRISA3 042B  
                            _TRISA4 042C            __end_of_sendDataToAltera 040C  
             _replaceOnDelayKeyDown 02CC                           ??_myDelay 0020  
                            myIsr@i 0078                              saved_w 007E  
                     updateKey@code 002C             __end_of__initialization 0034  
            _calculateBitsFromTable 040C                _replaceTwoBytesCodes 02B0  
                     updatePort@set 0020                      __pcstackCOMMON 0070  
                      __pidataBANK0 047B                       __end_of_myIsr 036C  
               updateKey@localShift 0028                             ??_myIsr 0070  
                      _ps2DataState 007C                          __pbssBANK0 003D  
                        __pnvCOMMON 007C                        _ps2BitsCount 007A  
                      _codeToMatrix 0206                          _delayedKey 0041  
              _sendDataToAltera$150 0022                          __pmaintext 0036  
                        __pintentry 0004                             _CCP1CON 0017  
        calculateBitsFromTable@bits 0025                  __size_of_updateKey 0057  
                        __stringtab 0200          _kempstonMouseEmulatorDelay 003D  
     __end_of_replaceOnShiftKeyDown 02B0                             _ps2Data 0049  
                           _ps2Bits 007B                             _ps2Down 0047  
                           __ptext1 036C                             __ptext2 044A  
                           __ptext3 03C3                             __ptext4 0486  
                           __ptext5 040C                             __ptext6 02E0  
                           _myDelay 0486  calculateBitsFromTable@clearIfFound 0022  
                           _numLock 0043                end_of_initialization 0034  
                     _importantKeys 02D4                      _shift_ctrl_alt 0046  
                 ?_sendDataToAltera 0070                   __end_of_updateKey 03C3  
                ??_sendDataToAltera 0020                   _kempstonMouseKeys 02DA  
                         _PORTAbits 0005                          _updatePort 044A  
           ?_calculateBitsFromTable 0020           __end_of_kempstonMouseKeys 02E0  
               start_initialization 0011                         updatePort@a 0024  
    __end_of_calculateBitsFromTable 044A             calculateBitsFromTable@i 0026  
                       __pdataBANK0 0032                         __pbssCOMMON 0079  
                         ___latbits 0000                       __pcstackBANK0 0020  
                       ?_updatePort 0020                  updateKey@localCtrl 002A  
                         __pnvBANK0 0047                           _ps2Device 0048  
                         __pstrings 0200                       _ps2NeedEncode 0079  
                          ?_myDelay 0070                         _ps2WaitCode 0044  
                         _myIsr$133 0076         calculateBitsFromTable@count 0021  
                    __size_of_myIsr 008C         calculateBitsFromTable@table 0020  
                 interrupt_function 0004                 __size_of_updatePort 0031  
             _replaceOnShiftKeyDown 0286                           _updateKey 036C  
                       __stringbase 0205                           main@i_164 0030  
         __size_of_sendDataToAltera 0049                          ?_updateKey 0026  
                __end_of__stringtab 0206                    __size_of_myDelay 0001  
                     __size_of_main 018A       __end_of_replaceOnDelayKeyDown 02D4  
                          _replaced 0042                            _outPorts 0032  
                      ??_updatePort 0021           _kempstonMouseEmulatorKeys 0045  
                          intlevel1 0000                           stringcode 0200  
                __end_of_updatePort 047B                         ??_updateKey 0027  
                  _sendDataToAltera 03C3                            stringdir 0200  
                          stringtab 0200               __end_of_importantKeys 02DA  
                     _updateKey$143 0029  
