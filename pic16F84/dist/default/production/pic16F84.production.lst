

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Aug 24 19:19:38 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F84A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   102                           EEDATA equ 08h ;# 
   103  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   104                           EEADR equ 09h ;# 
   105  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   106                           PCLATH equ 0Ah ;# 
   107  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   108                           INTCON equ 0Bh ;# 
   109  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   110                           OPTION_REG equ 081h ;# 
   111  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   112                           TRISA equ 085h ;# 
   113  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   114                           TRISB equ 086h ;# 
   115  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   116                           EECON1 equ 088h ;# 
   117  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   118                           EECON2 equ 089h ;# 
   119  0089                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   120                           INDF equ 00h ;# 
   121  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   122                           TMR0 equ 01h ;# 
   123  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   124                           PCL equ 02h ;# 
   125  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   126                           STATUS equ 03h ;# 
   127  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   128                           FSR equ 04h ;# 
   129  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   130                           PORTA equ 05h ;# 
   131  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   132                           PORTB equ 06h ;# 
   133  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   134                           EEDATA equ 08h ;# 
   135  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   136                           EEADR equ 09h ;# 
   137  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   138                           PCLATH equ 0Ah ;# 
   139  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   140                           INTCON equ 0Bh ;# 
   141  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   142                           OPTION_REG equ 081h ;# 
   143  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   144                           TRISA equ 085h ;# 
   145  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   146                           TRISB equ 086h ;# 
   147  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   148                           EECON1 equ 088h ;# 
   149  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   150                           EECON2 equ 089h ;# 
   151  0089                     	FNCALL	_main,_keyDown
   152                           	FNCALL	_main,_keyUp
   153                           	FNCALL	_main,_sendDataToAltera
   154                           	FNCALL	_sendDataToAltera,_myDelay
   155                           	FNCALL	_keyUp,_resetPort
   156                           	FNCALL	_keyDown,_resetPort
   157                           	FNCALL	_keyDown,_setPort
   158                           	FNROOT	_main
   159                           	FNCALL	intlevel1,_myIsr
   160                           	global	intlevel1
   161                           	FNROOT	intlevel1
   162                           	global	_codeToMatrix
   163                           psect	strings,class=STRING,delta=2,noexec
   164                           global __pstrings
   165                           __pstrings:
   166  0200                     stringtab:
   167  0200                     	global    __stringtab
   168                           __stringtab:
   169  0200                     ;	String table - string pointers are 1 byte each
   170                           stringcode:stringdir:
   171  0200                     movlw high(stringdir)
      + 0200                     stringdir:	
   172  0200  3002               movwf pclath
   173  0201  008A               movf fsr,w
   174  0202  0804               incf fsr
   175  0203  0A84               	addwf pc
   176  0204  0782               	global __stringbase
   177                           __stringbase:
   178  0205                     	retlw	0
   179  0205  3400               psect	strings
   180                           	global    __end_of__stringtab
   181                           __end_of__stringtab:
   182  0206                     	file	"./ps2tozxtable.h"
   183                           	line	30
   184                           _codeToMatrix:
   185  0206                     	retlw	0FFh
   186  0206  34FF               	retlw	0FFh
   187  0207  34FF               	retlw	0FFh
   188  0208  34FF               	retlw	0FFh
   189  0209  34FF               	retlw	0FFh
   190  020A  34FF               	retlw	0FFh
   191  020B  34FF               	retlw	0FFh
   192  020C  34FF               	retlw	0FFh
   193  020D  34FF               	retlw	0FFh
   194  020E  34FF               	retlw	0FFh
   195  020F  34FF               	retlw	0FFh
   196  0210  34FF               	retlw	0FFh
   197  0211  34FF               	retlw	0FFh
   198  0212  34FF               	retlw	0FFh
   199  0213  34FF               	retlw	09Ch
   200  0214  349C               	retlw	0FFh
   201  0215  34FF               	retlw	0FFh
   202  0216  34FF               	retlw	0Fh
   203  0217  340F               	retlw	low(0)
   204  0218  3400               	retlw	0FFh
   205  0219  34FF               	retlw	low(0)
   206  021A  3400               	retlw	02h
   207  021B  3402               	retlw	03h
   208  021C  3403               	retlw	0FFh
   209  021D  34FF               	retlw	0FFh
   210  021E  34FF               	retlw	0FFh
   211  021F  34FF               	retlw	08h
   212  0220  3408               	retlw	09h
   213  0221  3409               	retlw	01h
   214  0222  3401               	retlw	0Ah
   215  0223  340A               	retlw	0Bh
   216  0224  340B               	retlw	044h
   217  0225  3444               	retlw	0FFh
   218  0226  34FF               	retlw	018h
   219  0227  3418               	retlw	010h
   220  0228  3410               	retlw	011h
   221  0229  3411               	retlw	012h
   222  022A  3412               	retlw	01Bh
   223  022B  341B               	retlw	013h
   224  022C  3413               	retlw	0FFh
   225  022D  34FF               	retlw	05Ch
   226  022E  345C               	retlw	07h
   227  022F  3407               	retlw	020h
   228  0230  3420               	retlw	019h
   229  0231  3419               	retlw	022h
   230  0232  3422               	retlw	01Ah
   231  0233  341A               	retlw	023h
   232  0234  3423               	retlw	063h
   233  0235  3463               	retlw	064h
   234  0236  3464               	retlw	01Fh
   235  0237  341F               	retlw	027h
   236  0238  3427               	retlw	026h
   237  0239  3426               	retlw	021h
   238  023A  3421               	retlw	025h
   239  023B  3425               	retlw	024h
   240  023C  3424               	retlw	054h
   241  023D  3454               	retlw	0A0h
   242  023E  34A0               	retlw	06h
   243  023F  3406               	retlw	017h
   244  0240  3417               	retlw	01Eh
   245  0241  341E               	retlw	01Dh
   246  0242  341D               	retlw	01Ch
   247  0243  341C               	retlw	014h
   248  0244  3414               	retlw	0FFh
   249  0245  34FF               	retlw	0FFh
   250  0246  34FF               	retlw	09Fh
   251  0247  349F               	retlw	016h
   252  0248  3416               	retlw	015h
   253  0249  3415               	retlw	0Dh
   254  024A  340D               	retlw	04h
   255  024B  3404               	retlw	0Ch
   256  024C  340C               	retlw	0FFh
   257  024D  34FF               	retlw	0FFh
   258  024E  34FF               	retlw	097h
   259  024F  3497               	retlw	0A0h
   260  0250  34A0               	retlw	0Eh
   261  0251  340E               	retlw	08Dh
   262  0252  348D               	retlw	05h
   263  0253  3405               	retlw	09Eh
   264  0254  349E               	retlw	083h
   265  0255  3483               	retlw	08Bh
   266  0256  348B               	retlw	093h
   267  0257  3493               	retlw	09Ch
   268  0258  349C               	retlw	09Bh
   269  0259  349B               	retlw	0FFh
   270  025A  34FF               	retlw	08Eh
   271  025B  348E               	retlw	0A3h
   272  025C  34A3               	retlw	0A6h
   273  025D  34A6               	retlw	04Bh
   274  025E  344B               	retlw	0FFh
   275  025F  34FF               	retlw	06h
   276  0260  3406               	retlw	0FFh
   277  0261  34FF               	retlw	0A4h
   278  0262  34A4               	retlw	0FFh
   279  0263  34FF               	retlw	0A7h
   280  0264  34A7               	retlw	094h
   281  0265  3494               	retlw	08Ch
   282  0266  348C               	retlw	084h
   283  0267  3484               	retlw	096h
   284  0268  3496               	retlw	090h
   285  0269  3490               	retlw	0FFh
   286  026A  34FF               	retlw	0FFh
   287  026B  34FF               	retlw	044h
   288  026C  3444               	retlw	088h
   289  026D  3488               	retlw	085h
   290  026E  3485               	retlw	03h
   291  026F  3403               	retlw	09Ah
   292  0270  349A               	retlw	01Bh
   293  0271  341B               	retlw	01Ch
   294  0272  341C               	retlw	0A2h
   295  0273  34A2               	retlw	098h
   296  0274  3498               	retlw	0FFh
   297  0275  34FF               	retlw	04h
   298  0276  3404               	retlw	097h
   299  0277  3497               	retlw	0Bh
   300  0278  340B               	retlw	023h
   301  0279  3423               	retlw	024h
   302  027A  3424               	retlw	014h
   303  027B  3414               	retlw	043h
   304  027C  3443               	retlw	0FFh
   305  027D  34FF               	retlw	0FFh
   306  027E  34FF               	retlw	096h
   307  027F  3496               	retlw	013h
   308  0280  3413               	retlw	09Eh
   309  0281  349E               	retlw	0A7h
   310  0282  34A7               	retlw	0Ch
   311  0283  340C               	retlw	0FFh
   312  0284  34FF               	retlw	0FFh
   313  0285  34FF               	global __end_of_codeToMatrix
   314                           __end_of_codeToMatrix:
   315  0286                     	global	_replaceOnShiftKeyDown
   316                           psect	strings
   317                           	file	"./ps2tozxtable.h"
   318                           	line	4
   319                           _replaceOnShiftKeyDown:
   320  0286                     	retlw	016h
   321  0286  3416               	retlw	04Fh
   322  0287  344F               	retlw	01Eh
   323  0288  341E               	retlw	050h
   324  0289  3450               	retlw	026h
   325  028A  3426               	retlw	051h
   326  028B  3451               	retlw	025h
   327  028C  3425               	retlw	053h
   328  028D  3453               	retlw	02Eh
   329  028E  342E               	retlw	056h
   330  028F  3456               	retlw	036h
   331  0290  3436               	retlw	057h
   332  0291  3457               	retlw	03Dh
   333  0292  343D               	retlw	05Ch
   334  0293  345C               	retlw	03Eh
   335  0294  343E               	retlw	05Eh
   336  0295  345E               	retlw	046h
   337  0296  3446               	retlw	05Fh
   338  0297  345F               	retlw	045h
   339  0298  3445               	retlw	060h
   340  0299  3460               	retlw	04Eh
   341  029A  344E               	retlw	061h
   342  029B  3461               	retlw	055h
   343  029C  3455               	retlw	062h
   344  029D  3462               	retlw	05Dh
   345  029E  345D               	retlw	063h
   346  029F  3463               	retlw	04Ch
   347  02A0  344C               	retlw	067h
   348  02A1  3467               	retlw	052h
   349  02A2  3452               	retlw	068h
   350  02A3  3468               	retlw	041h
   351  02A4  3441               	retlw	06Ah
   352  02A5  346A               	retlw	049h
   353  02A6  3449               	retlw	06Dh
   354  02A7  346D               	retlw	04Ah
   355  02A8  344A               	retlw	06Eh
   356  02A9  346E               	global __end_of_replaceOnShiftKeyDown
   357                           __end_of_replaceOnShiftKeyDown:
   358  02AA                     	global	_codeToMatrix
   359                           	global	_replaceOnShiftKeyDown
   360                           	global	_outPorts
   361                           	global	_replaced
   362                           	global	_ctrl
   363                           	global	_shift
   364                           	global	_i
   365                           	global	_ps2NeedEncode
   366                           	global	_ps2Up
   367                           	global	_ps2WaitCode
   368                           	global	_ps2DataCount
   369                           	global	_ps2Data
   370                           	global	_ps2BitsCount
   371                           	global	_ps2Bits
   372                           	global	_ps2DataState
   373                           	global	_PORTA
   374                           _PORTA	set	0x5
   375  0005                     	global	_PORTB
   376                           _PORTB	set	0x6
   377  0006                     	global	_PORTAbits
   378                           _PORTAbits	set	0x5
   379  0005                     	global	_TMR0
   380                           _TMR0	set	0x1
   381  0001                     	global	_RA1
   382                           _RA1	set	0x29
   383  0029                     	global	_RA2
   384                           _RA2	set	0x2A
   385  002A                     	global	_GIE
   386                           _GIE	set	0x5F
   387  005F                     	global	_T0IF
   388                           _T0IF	set	0x5A
   389  005A                     	global	_T0IE
   390                           _T0IE	set	0x5D
   391  005D                     	global	_TRISB
   392                           _TRISB	set	0x86
   393  0086                     	global	_PSA
   394                           _PSA	set	0x40B
   395  040B                     	global	_T0SE
   396                           _T0SE	set	0x40C
   397  040C                     	global	_T0CS
   398                           _T0CS	set	0x40D
   399  040D                     	global	_TRISA4
   400                           _TRISA4	set	0x42C
   401  042C                     	global	_TRISA3
   402                           _TRISA3	set	0x42B
   403  042B                     	global	_TRISA2
   404                           _TRISA2	set	0x42A
   405  042A                     	global	_TRISA1
   406                           _TRISA1	set	0x429
   407  0429                     	global	_TRISA0
   408                           _TRISA0	set	0x428
   409  0428                     ; #config settings
   410                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sk70."
   411                           	line	#
   412                           psect cinit,class=CODE,delta=2
   413                           global start_initialization
   414                           start_initialization:
   415  000E                     
   416                           global __initialization
   417                           __initialization:
   418  000E                     psect	bssBANK0,class=BANK0,space=1,noexec
   419                           global __pbssBANK0
   420                           __pbssBANK0:
   421  000C                     _outPorts:
   422  000C                            ds      11
   423  000C                     
   424                           _replaced:
   425  0017                            ds      1
   426  0017                     
   427                           _ctrl:
   428  0018                            ds      1
   429  0018                     
   430                           _shift:
   431  0019                            ds      1
   432  0019                     
   433                           _i:
   434  001A                            ds      1
   435  001A                     
   436                           _ps2NeedEncode:
   437  001B                            ds      1
   438  001B                     
   439                           _ps2Up:
   440  001C                            ds      1
   441  001C                     
   442                           _ps2WaitCode:
   443  001D                            ds      1
   444  001D                     
   445                           _ps2DataCount:
   446  001E                            ds      1
   447  001E                     
   448                           _ps2Data:
   449  001F                            ds      1
   450  001F                     
   451                           _ps2BitsCount:
   452  0020                            ds      1
   453  0020                     
   454                           _ps2Bits:
   455  0021                            ds      1
   456  0021                     
   457                           _ps2DataState:
   458  0022                            ds      1
   459  0022                     
   460                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sk70."
   461                           	line	#
   462                           psect clrtext,class=CODE,delta=2
   463                           global clear_ram0
   464                           ;	Called with FSR containing the base address, and
   465                           ;	W with the last address+1
   466                           clear_ram0:
   467  0376                     	clrwdt			;clear the watchdog before getting into this loop
   468  0376  0064               clrloop0:
   469  0377                     	clrf	indf		;clear RAM location pointed to by FSR
   470  0377  0180               	incf	fsr,f		;increment pointer
   471  0378  0A84               	xorwf	fsr,w		;XOR with final address
   472  0379  0604               	btfsc	status,2	;have we reached the end yet?
   473  037A  1903               	retlw	0		;all done for this memory range, return
   474  037B  3400               	xorwf	fsr,w		;XOR again to restore value
   475  037C  0604               	goto	clrloop0		;do the next byte
   476  037D  2B77               
   477                           ; Clear objects allocated to BANK0
   478                           psect cinit,class=CODE,delta=2,merge=1
   479                           	bcf	status, 7	;select IRP bank0
   480  000E  1383               	movlw	low(__pbssBANK0)
   481  000F  300C               	movwf	fsr
   482  0010  0084               	movlw	low((__pbssBANK0)+017h)
   483  0011  3023               	fcall	clear_ram0
   484  0012  2376               psect cinit,class=CODE,delta=2,merge=1
   485                           global end_of_initialization,__end_of__initialization
   486                           
   487                           ;End of C runtime variable initialization code
   488                           
   489                           end_of_initialization:
   490  0013                     __end_of__initialization:
   491  0013                     clrf status
   492  0013  0183               ljmp _main	;jump to C main() function
   493  0014  2926               psect	cstackCOMMON,class=COMMON,space=1,noexec
   494                           global __pcstackCOMMON
   495                           __pcstackCOMMON:
   496  0000                     ??_myDelay:	; 1 bytes @ 0x0
   497  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   498                           global __pcstackBANK0
   499                           __pcstackBANK0:
   500  0023                     ?_myIsr:	; 1 bytes @ 0x0
   501  0023                     ??_myIsr:	; 1 bytes @ 0x0
   502  0023                     ?_setPort:	; 1 bytes @ 0x0
   503  0023                     ?_resetPort:	; 1 bytes @ 0x0
   504  0023                     ?_keyDown:	; 1 bytes @ 0x0
   505  0023                     ?_keyUp:	; 1 bytes @ 0x0
   506  0023                     ?_myDelay:	; 1 bytes @ 0x0
   507  0023                     ?_sendDataToAltera:	; 1 bytes @ 0x0
   508  0023                     ?_main:	; 1 bytes @ 0x0
   509  0023                     	ds	5
   510  0023                     	global	_myIsr$79
   511                           _myIsr$79:	; 2 bytes @ 0x5
   512  0028                     	ds	2
   513  0028                     ??_setPort:	; 1 bytes @ 0x7
   514  002A                     ??_resetPort:	; 1 bytes @ 0x7
   515  002A                     ??_sendDataToAltera:	; 1 bytes @ 0x7
   516  002A                     	ds	3
   517  002A                     	global	setPort@bit_id
   518                           setPort@bit_id:	; 1 bytes @ 0xA
   519  002D                     	global	resetPort@bit_id
   520                           resetPort@bit_id:	; 1 bytes @ 0xA
   521  002D                     	ds	1
   522  002D                     ??_keyDown:	; 1 bytes @ 0xB
   523  002E                     ??_keyUp:	; 1 bytes @ 0xB
   524  002E                     	ds	1
   525  002E                     	global	keyDown@key
   526                           keyDown@key:	; 1 bytes @ 0xC
   527  002F                     	global	keyUp@key
   528                           keyUp@key:	; 1 bytes @ 0xC
   529  002F                     	ds	1
   530  002F                     ??_main:	; 1 bytes @ 0xD
   531  0030                     	ds	1
   532  0030                     ;!
   533                           ;!Data Sizes:
   534                           ;!    Strings     0
   535                           ;!    Constant    164
   536                           ;!    Data        0
   537                           ;!    BSS         23
   538                           ;!    Persistent  0
   539                           ;!    Stack       0
   540                           ;!
   541                           ;!Auto Spaces:
   542                           ;!    Space          Size  Autos    Used
   543                           ;!    COMMON            0      0       0
   544                           ;!    BANK0            66     14      37
   545                           
   546                           ;!
   547                           ;!Pointer List with Targets:
   548                           ;!
   549                           ;!    None.
   550                           
   551                           
   552                           ;!
   553                           ;!Critical Paths under _main in COMMON
   554                           ;!
   555                           ;!    None.
   556                           ;!
   557                           ;!Critical Paths under _myIsr in COMMON
   558                           ;!
   559                           ;!    None.
   560                           ;!
   561                           ;!Critical Paths under _main in BANK0
   562                           ;!
   563                           ;!    _main->_keyDown
   564                           ;!    _main->_keyUp
   565                           ;!    _keyUp->_resetPort
   566                           ;!    _keyDown->_resetPort
   567                           ;!    _keyDown->_setPort
   568                           ;!
   569                           ;!Critical Paths under _myIsr in BANK0
   570                           ;!
   571                           ;!    None.
   572                           
   573 ;;
   574 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   575 ;;
   576                           
   577                           ;!
   578                           ;!Call Graph Tables:
   579                           ;!
   580                           ;! ---------------------------------------------------------------------------------
   581                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   582                           ;! ---------------------------------------------------------------------------------
   583                           ;! (0) _main                                                 1     1      0     220
   584                           ;!                                             13 BANK0      1     1      0
   585                           ;!                            _keyDown
   586                           ;!                              _keyUp
   587                           ;!                   _sendDataToAltera
   588                           ;! ---------------------------------------------------------------------------------
   589                           ;! (1) _sendDataToAltera                                     1     1      0       0
   590                           ;!                                              7 BANK0      1     1      0
   591                           ;!                            _myDelay
   592                           ;! ---------------------------------------------------------------------------------
   593                           ;! (2) _myDelay                                              0     0      0       0
   594                           ;! ---------------------------------------------------------------------------------
   595                           ;! (1) _keyUp                                                2     2      0      88
   596                           ;!                                             11 BANK0      2     2      0
   597                           ;!                          _resetPort
   598                           ;! ---------------------------------------------------------------------------------
   599                           ;! (1) _keyDown                                              2     2      0     132
   600                           ;!                                             11 BANK0      2     2      0
   601                           ;!                          _resetPort
   602                           ;!                            _setPort
   603                           ;! ---------------------------------------------------------------------------------
   604                           ;! (2) _setPort                                              4     4      0      44
   605                           ;!                                              7 BANK0      4     4      0
   606                           ;! ---------------------------------------------------------------------------------
   607                           ;! (2) _resetPort                                            4     4      0      44
   608                           ;!                                              7 BANK0      4     4      0
   609                           ;! ---------------------------------------------------------------------------------
   610                           ;! Estimated maximum stack depth 2
   611                           ;! ---------------------------------------------------------------------------------
   612                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   613                           ;! ---------------------------------------------------------------------------------
   614                           ;! (3) _myIsr                                                7     7      0      24
   615                           ;!                                              0 BANK0      7     7      0
   616                           ;! ---------------------------------------------------------------------------------
   617                           ;! Estimated maximum stack depth 3
   618                           ;! ---------------------------------------------------------------------------------
   619                           ;!
   620                           ;! Call Graph Graphs:
   621                           ;!
   622                           ;! _main (ROOT)
   623                           ;!   _keyDown
   624                           ;!     _resetPort
   625                           ;!     _setPort
   626                           ;!   _keyUp
   627                           ;!     _resetPort
   628                           ;!   _sendDataToAltera
   629                           ;!     _myDelay
   630                           ;!
   631                           ;! _myIsr (ROOT)
   632                           ;!
   633                           
   634                           ;! Address spaces:
   635                           
   636                           ;!Name               Size   Autos  Total    Cost      Usage
   637                           ;!BITCOMMON            0      0       0       0        0.0%
   638                           ;!EEDATA              40      0       0       0        0.0%
   639                           ;!NULL                 0      0       0       0        0.0%
   640                           ;!CODE                 0      0       0       0        0.0%
   641                           ;!BITSFR0              0      0       0       1        0.0%
   642                           ;!SFR0                 0      0       0       1        0.0%
   643                           ;!COMMON               0      0       0       1        0.0%
   644                           ;!BITSFR1              0      0       0       2        0.0%
   645                           ;!SFR1                 0      0       0       2        0.0%
   646                           ;!STACK                0      0       0       2        0.0%
   647                           ;!BANK0               42      E      25       3       56.1%
   648                           ;!ABS                  0      0      25       4        0.0%
   649                           ;!BITBANK0            42      0       0       5        0.0%
   650                           ;!DATA                 0      0      25       6        0.0%
   651                           
   652                           	global	_main
   653                           
   654 ;; *************** function _main *****************
   655 ;; Defined at:
   656 ;;		line 251 in file "main.c"
   657 ;; Parameters:    Size  Location     Type
   658 ;;		None
   659 ;; Auto vars:     Size  Location     Type
   660 ;;		None
   661 ;; Return value:  Size  Location     Type
   662 ;;                  1    wreg      void 
   663 ;; Registers used:
   664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   665 ;; Tracked objects:
   666 ;;		On entry : B00/0
   667 ;;		On exit  : 0/0
   668 ;;		Unchanged: 0/0
   669 ;; Data sizes:     COMMON   BANK0
   670 ;;      Params:         0       0
   671 ;;      Locals:         0       0
   672 ;;      Temps:          0       1
   673 ;;      Totals:         0       1
   674 ;;Total ram usage:        1 bytes
   675 ;; Hardware stack levels required when called:    3
   676 ;; This function calls:
   677 ;;		_keyDown
   678 ;;		_keyUp
   679 ;;		_sendDataToAltera
   680 ;; This function is called by:
   681 ;;		Startup code after reset
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   685                           	file	"main.c"
   686                           	line	251
   687                           global __pmaintext
   688                           __pmaintext:	;psect for function _main
   689  0126                     psect	maintext
   690                           	file	"main.c"
   691                           	line	251
   692                           	global	__size_of_main
   693                           	__size_of_main	equ	__end_of_main-_main
   694  00AC                     	
   695                           _main:	
   696  0126                     ;incstack = 0
   697                           	opt	stack 5
   698                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   699                           	line	253
   700                           	
   701                           l1185:	
   702  0126                     ;main.c: 253:     TRISA0 = 1;
   703                           	bsf	status, 5	;RP0=1, select bank1
   704  0126  1683               	bsf	(1064/8)^080h,(1064)&7	;volatile
   705  0127  1405               	line	254
   706                           ;main.c: 254:     TRISA1 = 0;
   707                           	bcf	(1065/8)^080h,(1065)&7	;volatile
   708  0128  1085               	line	255
   709                           ;main.c: 255:     TRISA2 = 0;
   710                           	bcf	(1066/8)^080h,(1066)&7	;volatile
   711  0129  1105               	line	256
   712                           ;main.c: 256:     TRISA3 = 1;
   713                           	bsf	(1067/8)^080h,(1067)&7	;volatile
   714  012A  1585               	line	257
   715                           ;main.c: 257:     TRISA4 = 1;
   716                           	bsf	(1068/8)^080h,(1068)&7	;volatile
   717  012B  1605               	line	259
   718                           	
   719                           l1187:	
   720  012C                     ;main.c: 259:     PORTA = 0b00000000;
   721                           	bcf	status, 5	;RP0=0, select bank0
   722  012C  1283               	clrf	(5)	;volatile
   723  012D  0185               	line	261
   724                           ;main.c: 261:     TRISB = 0b00000000;
   725                           	bsf	status, 5	;RP0=1, select bank1
   726  012E  1683               	clrf	(134)^080h	;volatile
   727  012F  0186               	line	262
   728                           ;main.c: 262:     PORTB = 0b00000000;
   729                           	bcf	status, 5	;RP0=0, select bank0
   730  0130  1283               	clrf	(6)	;volatile
   731  0131  0186               	line	282
   732                           	
   733                           l1189:	
   734  0132                     ;main.c: 282:     T0CS = 1;
   735                           	bsf	status, 5	;RP0=1, select bank1
   736  0132  1683               	bsf	(1037/8)^080h,(1037)&7	;volatile
   737  0133  1681               	line	283
   738                           	
   739                           l1191:	
   740  0134                     ;main.c: 283:     T0SE = 1;
   741                           	bsf	(1036/8)^080h,(1036)&7	;volatile
   742  0134  1601               	line	284
   743                           	
   744                           l1193:	
   745  0135                     ;main.c: 284:     GIE = 1;
   746                           	bsf	(95/8),(95)&7	;volatile
   747  0135  178B               	line	285
   748                           	
   749                           l1195:	
   750  0136                     ;main.c: 285:     T0IE = 1;
   751                           	bsf	(93/8),(93)&7	;volatile
   752  0136  168B               	line	286
   753                           	
   754                           l1197:	
   755  0137                     ;main.c: 286:     PSA = 1;
   756                           	bsf	(1035/8)^080h,(1035)&7	;volatile
   757  0137  1581               	line	287
   758                           	
   759                           l1199:	
   760  0138                     ;main.c: 287:     T0IF = 0;
   761                           	bcf	(90/8),(90)&7	;volatile
   762  0138  110B               	line	288
   763                           	
   764                           l1201:	
   765  0139                     ;main.c: 288:     TMR0 = 255;
   766                           	movlw	low(0FFh)
   767  0139  30FF               	bcf	status, 5	;RP0=0, select bank0
   768  013A  1283               	movwf	(1)	;volatile
   769  013B  0081               	line	290
   770                           	
   771                           l1203:	
   772  013C                     ;main.c: 290:     ps2Data = 0;
   773                           	clrf	(_ps2Data)
   774  013C  019F               	line	291
   775                           	
   776                           l1205:	
   777  013D                     ;main.c: 291:     ps2DataCount = 0;
   778                           	clrf	(_ps2DataCount)
   779  013D  019E               	line	292
   780                           	
   781                           l1207:	
   782  013E                     ;main.c: 292:     ps2WaitCode = 0;
   783                           	clrf	(_ps2WaitCode)
   784  013E  019D               	line	293
   785                           	
   786                           l1209:	
   787  013F                     ;main.c: 293:     ps2Up = 0;
   788                           	clrf	(_ps2Up)
   789  013F  019C               	line	294
   790                           	
   791                           l1211:	
   792  0140                     ;main.c: 294:     ps2NeedEncode = 0;
   793                           	clrf	(_ps2NeedEncode)
   794  0140  019B               	line	295
   795                           	
   796                           l1213:	
   797  0141                     ;main.c: 295:     ps2DataState = 0;
   798                           	clrf	(_ps2DataState)
   799  0141  01A2               	goto	l1215
   800  0142  2943               	line	297
   801                           ;main.c: 297:     while(1)
   802                           	
   803                           l146:	
   804  0143                     	line	299
   805                           	
   806                           l1215:	
   807  0143                     ;main.c: 298:     {;main.c: 299:         if ( ps2DataState == 2 ) {
   808                           		movlw	2
   809  0143  3002               	bcf	status, 5	;RP0=0, select bank0
   810  0144  1283               	xorwf	((_ps2DataState)),w
   811  0145  0622               	btfss	status,2
   812  0146  1D03               	goto	u761
   813  0147  2949               	goto	u760
   814  0148  294A               u761:
   815  0149                     	goto	l147
   816  0149  29CE               u760:
   817  014A                     	line	301
   818                           	
   819                           l1217:	
   820  014A                     ;main.c: 301:             replaced = 0;
   821                           	clrf	(_replaced)
   822  014A  0197               	line	302
   823                           	
   824                           l1219:	
   825  014B                     ;main.c: 302:             if ( shift && !ctrl ) {
   826                           	movf	((_shift)),w
   827  014B  0819               	btfsc	status,2
   828  014C  1903               	goto	u771
   829  014D  294F               	goto	u770
   830  014E  2950               u771:
   831  014F                     	goto	l1239
   832  014F  297E               u770:
   833  0150                     	
   834                           l1221:	
   835  0150                     	movf	((_ctrl)),w
   836  0150  0818               	btfss	status,2
   837  0151  1D03               	goto	u781
   838  0152  2954               	goto	u780
   839  0153  2955               u781:
   840  0154                     	goto	l1239
   841  0154  297E               u780:
   842  0155                     	line	303
   843                           	
   844                           l1223:	
   845  0155                     ;main.c: 303:                 for(i = 0; i < 35 ;i+=2) {
   846                           	clrf	(_i)
   847  0155  019A               	
   848                           l1225:	
   849  0156                     	movlw	low(023h)
   850  0156  3023               	subwf	(_i),w
   851  0157  021A               	skipc
   852  0158  1C03               	goto	u791
   853  0159  295B               	goto	u790
   854  015A  295C               u791:
   855  015B                     	goto	l1229
   856  015B  295E               u790:
   857  015C                     	goto	l1239
   858  015C  297E               	
   859                           l1227:	
   860  015D                     	goto	l1239
   861  015D  297E               	
   862                           l149:	
   863  015E                     	line	304
   864                           	
   865                           l1229:	
   866  015E                     ;main.c: 304:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   867                           	movf	(_i),w
   868  015E  081A               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
   869  015F  3E81               	movwf	fsr0
   870  0160  0084               	fcall	stringdir
   871  0161  2200               	xorwf	(_ps2Data),w
   872  0162  061F               	skipz
   873  0163  1D03               	goto	u801
   874  0164  2966               	goto	u800
   875  0165  2967               u801:
   876  0166                     	goto	l1235
   877  0166  2972               u800:
   878  0167                     	line	305
   879                           	
   880                           l1231:	
   881  0167                     ;main.c: 305:                         replaced = 1;
   882                           	clrf	(_replaced)
   883  0167  0197               	incf	(_replaced),f
   884  0168  0A97               	line	306
   885                           	
   886                           l1233:	
   887  0169                     ;main.c: 306:                         ps2Data = replaceOnShiftKeyDown[i+1];
   888                           	movf	(_i),w
   889  0169  081A               	addlw	01h
   890  016A  3E01               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
   891  016B  3E81               	movwf	fsr0
   892  016C  0084               	fcall	stringdir
   893  016D  2200               	movwf	(??_main+0)+0
   894  016E  00B0               	movf	(??_main+0)+0,w
   895  016F  0830               	movwf	(_ps2Data)
   896  0170  009F               	line	307
   897                           ;main.c: 307:                         break;
   898                           	goto	l1239
   899  0171  297E               	line	308
   900                           ;main.c: 308:                     }
   901                           	
   902                           l151:	
   903  0172                     	line	309
   904                           	
   905                           l1235:	
   906  0172                     ;main.c: 309:                 }
   907                           	movlw	low(02h)
   908  0172  3002               	movwf	(??_main+0)+0
   909  0173  00B0               	movf	(??_main+0)+0,w
   910  0174  0830               	addwf	(_i),f
   911  0175  079A               	
   912                           l1237:	
   913  0176                     	movlw	low(023h)
   914  0176  3023               	subwf	(_i),w
   915  0177  021A               	skipc
   916  0178  1C03               	goto	u811
   917  0179  297B               	goto	u810
   918  017A  297C               u811:
   919  017B                     	goto	l1229
   920  017B  295E               u810:
   921  017C                     	goto	l1239
   922  017C  297E               	
   923                           l150:	
   924  017D                     	goto	l1239
   925  017D  297E               	line	310
   926                           ;main.c: 310:             }
   927                           	
   928                           l148:	
   929  017E                     	line	312
   930                           	
   931                           l1239:	
   932  017E                     ;main.c: 312:             if ( ps2Up == 0) {
   933                           	movf	((_ps2Up)),w
   934  017E  081C               	btfss	status,2
   935  017F  1D03               	goto	u821
   936  0180  2982               	goto	u820
   937  0181  2983               u821:
   938  0182                     	goto	l1251
   939  0182  29A5               u820:
   940  0183                     	line	313
   941                           	
   942                           l1241:	
   943  0183                     ;main.c: 313:                 keyDown(ps2Data);
   944                           	movf	(_ps2Data),w
   945  0183  081F               	fcall	_keyDown
   946  0184  22AA               	line	314
   947                           	
   948                           l1243:	
   949  0185                     ;main.c: 314:                 if ( ps2Data == 18 || ps2Data == 89) shift = 1;
   950                           		movlw	18
   951  0185  3012               	bcf	status, 5	;RP0=0, select bank0
   952  0186  1283               	xorwf	((_ps2Data)),w
   953  0187  061F               	btfsc	status,2
   954  0188  1903               	goto	u831
   955  0189  298B               	goto	u830
   956  018A  298C               u831:
   957  018B                     	goto	l155
   958  018B  2992               u830:
   959  018C                     	
   960                           l1245:	
   961  018C                     		movlw	89
   962  018C  3059               	xorwf	((_ps2Data)),w
   963  018D  061F               	btfss	status,2
   964  018E  1D03               	goto	u841
   965  018F  2991               	goto	u840
   966  0190  2992               u841:
   967  0191                     	goto	l1247
   968  0191  2995               u840:
   969  0192                     	
   970                           l155:	
   971  0192                     	clrf	(_shift)
   972  0192  0199               	incf	(_shift),f
   973  0193  0A99               	goto	l1247
   974  0194  2995               	
   975                           l153:	
   976  0195                     	line	315
   977                           	
   978                           l1247:	
   979  0195                     ;main.c: 315:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 1;
   980                           		movlw	20
   981  0195  3014               	xorwf	((_ps2Data)),w
   982  0196  061F               	btfsc	status,2
   983  0197  1903               	goto	u851
   984  0198  299A               	goto	u850
   985  0199  299B               u851:
   986  019A                     	goto	l158
   987  019A  29A1               u850:
   988  019B                     	
   989                           l1249:	
   990  019B                     		movlw	19
   991  019B  3013               	xorwf	((_ps2Data)),w
   992  019C  061F               	btfss	status,2
   993  019D  1D03               	goto	u861
   994  019E  29A0               	goto	u860
   995  019F  29A1               u861:
   996  01A0                     	goto	l1265
   997  01A0  29C6               u860:
   998  01A1                     	
   999                           l158:	
  1000  01A1                     	clrf	(_ctrl)
  1001  01A1  0198               	incf	(_ctrl),f
  1002  01A2  0A98               	goto	l1265
  1003  01A3  29C6               	
  1004                           l156:	
  1005  01A4                     	line	317
  1006                           ;main.c: 317:             } else {
  1007                           	goto	l1265
  1008  01A4  29C6               	
  1009                           l152:	
  1010  01A5                     	line	318
  1011                           	
  1012                           l1251:	
  1013  01A5                     ;main.c: 318:                 if ( ps2Data == 18 || ps2Data == 89) shift = 0;
  1014                           		movlw	18
  1015  01A5  3012               	xorwf	((_ps2Data)),w
  1016  01A6  061F               	btfsc	status,2
  1017  01A7  1903               	goto	u871
  1018  01A8  29AA               	goto	u870
  1019  01A9  29AB               u871:
  1020  01AA                     	goto	l1255
  1021  01AA  29B2               u870:
  1022  01AB                     	
  1023                           l1253:	
  1024  01AB                     		movlw	89
  1025  01AB  3059               	xorwf	((_ps2Data)),w
  1026  01AC  061F               	btfss	status,2
  1027  01AD  1D03               	goto	u881
  1028  01AE  29B0               	goto	u880
  1029  01AF  29B1               u881:
  1030  01B0                     	goto	l1257
  1031  01B0  29B4               u880:
  1032  01B1                     	goto	l1255
  1033  01B1  29B2               	
  1034                           l162:	
  1035  01B2                     	
  1036                           l1255:	
  1037  01B2                     	clrf	(_shift)
  1038  01B2  0199               	goto	l1257
  1039  01B3  29B4               	
  1040                           l160:	
  1041  01B4                     	line	319
  1042                           	
  1043                           l1257:	
  1044  01B4                     ;main.c: 319:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 0;
  1045                           		movlw	20
  1046  01B4  3014               	xorwf	((_ps2Data)),w
  1047  01B5  061F               	btfsc	status,2
  1048  01B6  1903               	goto	u891
  1049  01B7  29B9               	goto	u890
  1050  01B8  29BA               u891:
  1051  01B9                     	goto	l1261
  1052  01B9  29C1               u890:
  1053  01BA                     	
  1054                           l1259:	
  1055  01BA                     		movlw	19
  1056  01BA  3013               	xorwf	((_ps2Data)),w
  1057  01BB  061F               	btfss	status,2
  1058  01BC  1D03               	goto	u901
  1059  01BD  29BF               	goto	u900
  1060  01BE  29C0               u901:
  1061  01BF                     	goto	l1263
  1062  01BF  29C3               u900:
  1063  01C0                     	goto	l1261
  1064  01C0  29C1               	
  1065                           l165:	
  1066  01C1                     	
  1067                           l1261:	
  1068  01C1                     	clrf	(_ctrl)
  1069  01C1  0198               	goto	l1263
  1070  01C2  29C3               	
  1071                           l163:	
  1072  01C3                     	line	320
  1073                           	
  1074                           l1263:	
  1075  01C3                     ;main.c: 320:                 keyUp(ps2Data);
  1076                           	movf	(_ps2Data),w
  1077  01C3  081F               	fcall	_keyUp
  1078  01C4  235C               	goto	l1265
  1079  01C5  29C6               	line	321
  1080                           ;main.c: 321:             }
  1081                           	
  1082                           l159:	
  1083  01C6                     	line	324
  1084                           	
  1085                           l1265:	
  1086  01C6                     ;main.c: 324:             ps2Data = 0;
  1087                           	bcf	status, 5	;RP0=0, select bank0
  1088  01C6  1283               	clrf	(_ps2Data)
  1089  01C7  019F               	line	325
  1090                           	
  1091                           l1267:	
  1092  01C8                     ;main.c: 325:             ps2DataCount = 0;
  1093                           	clrf	(_ps2DataCount)
  1094  01C8  019E               	line	326
  1095                           	
  1096                           l1269:	
  1097  01C9                     ;main.c: 326:             ps2WaitCode = 0;
  1098                           	clrf	(_ps2WaitCode)
  1099  01C9  019D               	line	327
  1100                           	
  1101                           l1271:	
  1102  01CA                     ;main.c: 327:             ps2Up = 0;
  1103                           	clrf	(_ps2Up)
  1104  01CA  019C               	line	328
  1105                           	
  1106                           l1273:	
  1107  01CB                     ;main.c: 328:             ps2NeedEncode = 0;
  1108                           	clrf	(_ps2NeedEncode)
  1109  01CB  019B               	line	329
  1110                           	
  1111                           l1275:	
  1112  01CC                     ;main.c: 329:             ps2DataState = 0;
  1113                           	clrf	(_ps2DataState)
  1114  01CC  01A2               	line	332
  1115                           	
  1116                           l1277:	
  1117  01CD                     ;main.c: 332:             sendDataToAltera();
  1118                           	fcall	_sendDataToAltera
  1119  01CD  22EB               	line	333
  1120                           ;main.c: 333:         }
  1121                           	
  1122                           l147:	
  1123  01CE                     	line	337
  1124                           # 337 "main.c"
  1125                           clrwdt ;# 
  1126  01CE  0064               psect	maintext
  1127                           	goto	l1215
  1128  01CF  2943               	line	338
  1129                           ;main.c: 338:     }
  1130                           	
  1131                           l166:	
  1132  01D0                     	goto	l1215
  1133  01D0  2943               	
  1134                           l167:	
  1135  01D1                     	line	340
  1136                           	
  1137                           l168:	
  1138  01D1                     	global	start
  1139                           	ljmp	start
  1140  01D1  280D               	opt stack 0
  1141                           GLOBAL	__end_of_main
  1142                           	__end_of_main:
  1143  01D2                     	signat	_main,89
  1144                           	global	_sendDataToAltera
  1145                           
  1146 ;; *************** function _sendDataToAltera *****************
  1147 ;; Defined at:
  1148 ;;		line 191 in file "main.c"
  1149 ;; Parameters:    Size  Location     Type
  1150 ;;		None
  1151 ;; Auto vars:     Size  Location     Type
  1152 ;;		None
  1153 ;; Return value:  Size  Location     Type
  1154 ;;                  1    wreg      void 
  1155 ;; Registers used:
  1156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1157 ;; Tracked objects:
  1158 ;;		On entry : 0/0
  1159 ;;		On exit  : 0/0
  1160 ;;		Unchanged: 0/0
  1161 ;; Data sizes:     COMMON   BANK0
  1162 ;;      Params:         0       0
  1163 ;;      Locals:         0       0
  1164 ;;      Temps:          0       1
  1165 ;;      Totals:         0       1
  1166 ;;Total ram usage:        1 bytes
  1167 ;; Hardware stack levels used:    1
  1168 ;; Hardware stack levels required when called:    2
  1169 ;; This function calls:
  1170 ;;		_myDelay
  1171 ;; This function is called by:
  1172 ;;		_main
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
  1176                           	line	191
  1177                           global __ptext1
  1178                           __ptext1:	;psect for function _sendDataToAltera
  1179  02EB                     psect	text1
  1180                           	file	"main.c"
  1181                           	line	191
  1182                           	global	__size_of_sendDataToAltera
  1183                           	__size_of_sendDataToAltera	equ	__end_of_sendDataToAltera-_sendDataToAltera
  1184  0032                     	
  1185                           _sendDataToAltera:	
  1186  02EB                     ;incstack = 0
  1187                           	opt	stack 5
  1188                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1189                           	line	193
  1190                           	
  1191                           l1059:	
  1192  02EB                     ;main.c: 193:     RA2 = 1;
  1193                           	bcf	status, 5	;RP0=0, select bank0
  1194  02EB  1283               	bsf	(42/8),(42)&7	;volatile
  1195  02EC  1505               	line	194
  1196                           ;main.c: 194:     RA1 = 1;
  1197                           	bsf	(41/8),(41)&7	;volatile
  1198  02ED  1485               	line	195
  1199                           	
  1200                           l1061:	
  1201  02EE                     ;main.c: 195:     myDelay();
  1202                           	fcall	_myDelay
  1203  02EE  237E               	line	196
  1204                           	
  1205                           l1063:	
  1206  02EF                     ;main.c: 196:     RA2 = 0;
  1207                           	bcf	status, 5	;RP0=0, select bank0
  1208  02EF  1283               	bcf	(42/8),(42)&7	;volatile
  1209  02F0  1105               	line	197
  1210                           ;main.c: 197:     myDelay();
  1211                           	fcall	_myDelay
  1212  02F1  237E               	line	198
  1213                           	
  1214                           l1065:	
  1215  02F2                     ;main.c: 198:     RA2 = 1;
  1216                           	bcf	status, 5	;RP0=0, select bank0
  1217  02F2  1283               	bsf	(42/8),(42)&7	;volatile
  1218  02F3  1505               	line	199
  1219                           ;main.c: 199:     myDelay();
  1220                           	fcall	_myDelay
  1221  02F4  237E               	line	200
  1222                           	
  1223                           l1067:	
  1224  02F5                     ;main.c: 200:     RA1 = 0;
  1225                           	bcf	status, 5	;RP0=0, select bank0
  1226  02F5  1283               	bcf	(41/8),(41)&7	;volatile
  1227  02F6  1085               	line	201
  1228                           ;main.c: 201:     myDelay();
  1229                           	fcall	_myDelay
  1230  02F7  237E               	line	202
  1231                           	
  1232                           l1069:	
  1233  02F8                     ;main.c: 202:     for(i=0;i<8;i++) {
  1234                           	bcf	status, 5	;RP0=0, select bank0
  1235  02F8  1283               	clrf	(_i)
  1236  02F9  019A               	
  1237                           l1071:	
  1238  02FA                     	movlw	low(08h)
  1239  02FA  3008               	subwf	(_i),w
  1240  02FB  021A               	skipc
  1241  02FC  1C03               	goto	u591
  1242  02FD  2AFF               	goto	u590
  1243  02FE  2B00               u591:
  1244  02FF                     	goto	l139
  1245  02FF  2B02               u590:
  1246  0300                     	goto	l140
  1247  0300  2B1A               	
  1248                           l1073:	
  1249  0301                     	goto	l140
  1250  0301  2B1A               	
  1251                           l139:	
  1252  0302                     	line	203
  1253                           ;main.c: 203:         RA2 = 1;
  1254                           	bsf	(42/8),(42)&7	;volatile
  1255  0302  1505               	line	204
  1256                           	
  1257                           l1075:	
  1258  0303                     ;main.c: 204:         myDelay();
  1259                           	fcall	_myDelay
  1260  0303  237E               	line	205
  1261                           	
  1262                           l1077:	
  1263  0304                     ;main.c: 205:         PORTB = outPorts[i];
  1264                           	bcf	status, 5	;RP0=0, select bank0
  1265  0304  1283               	movf	(_i),w
  1266  0305  081A               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1267  0306  3E0C               	movwf	fsr0
  1268  0307  0084               	bcf	status, 7	;select IRP bank0
  1269  0308  1383               	movf	indf,w
  1270  0309  0800               	movwf	(6)	;volatile
  1271  030A  0086               	line	206
  1272                           	
  1273                           l1079:	
  1274  030B                     ;main.c: 206:         myDelay();
  1275                           	fcall	_myDelay
  1276  030B  237E               	line	207
  1277                           	
  1278                           l1081:	
  1279  030C                     ;main.c: 207:         RA2 = 0;
  1280                           	bcf	status, 5	;RP0=0, select bank0
  1281  030C  1283               	bcf	(42/8),(42)&7	;volatile
  1282  030D  1105               	line	208
  1283                           	
  1284                           l1083:	
  1285  030E                     ;main.c: 208:         myDelay();
  1286                           	fcall	_myDelay
  1287  030E  237E               	line	209
  1288                           	
  1289                           l1085:	
  1290  030F                     ;main.c: 209:     }
  1291                           	movlw	low(01h)
  1292  030F  3001               	bcf	status, 5	;RP0=0, select bank0
  1293  0310  1283               	movwf	(??_sendDataToAltera+0)+0
  1294  0311  00AA               	movf	(??_sendDataToAltera+0)+0,w
  1295  0312  082A               	addwf	(_i),f
  1296  0313  079A               	
  1297                           l1087:	
  1298  0314                     	movlw	low(08h)
  1299  0314  3008               	subwf	(_i),w
  1300  0315  021A               	skipc
  1301  0316  1C03               	goto	u601
  1302  0317  2B19               	goto	u600
  1303  0318  2B1A               u601:
  1304  0319                     	goto	l139
  1305  0319  2B02               u600:
  1306  031A                     	
  1307                           l140:	
  1308  031A                     	line	210
  1309                           ;main.c: 210:     RA2 = 1;
  1310                           	bsf	(42/8),(42)&7	;volatile
  1311  031A  1505               	line	211
  1312                           	
  1313                           l1089:	
  1314  031B                     ;main.c: 211:     PORTB = 0;
  1315                           	clrf	(6)	;volatile
  1316  031B  0186               	line	212
  1317                           	
  1318                           l141:	
  1319  031C                     	return
  1320  031C  0008               	opt stack 0
  1321                           GLOBAL	__end_of_sendDataToAltera
  1322                           	__end_of_sendDataToAltera:
  1323  031D                     	signat	_sendDataToAltera,89
  1324                           	global	_myDelay
  1325                           
  1326 ;; *************** function _myDelay *****************
  1327 ;; Defined at:
  1328 ;;		line 183 in file "main.c"
  1329 ;; Parameters:    Size  Location     Type
  1330 ;;		None
  1331 ;; Auto vars:     Size  Location     Type
  1332 ;;		None
  1333 ;; Return value:  Size  Location     Type
  1334 ;;                  1    wreg      void 
  1335 ;; Registers used:
  1336 ;;		None
  1337 ;; Tracked objects:
  1338 ;;		On entry : 0/0
  1339 ;;		On exit  : 0/0
  1340 ;;		Unchanged: 0/0
  1341 ;; Data sizes:     COMMON   BANK0
  1342 ;;      Params:         0       0
  1343 ;;      Locals:         0       0
  1344 ;;      Temps:          0       0
  1345 ;;      Totals:         0       0
  1346 ;;Total ram usage:        0 bytes
  1347 ;; Hardware stack levels used:    1
  1348 ;; Hardware stack levels required when called:    1
  1349 ;; This function calls:
  1350 ;;		Nothing
  1351 ;; This function is called by:
  1352 ;;		_sendDataToAltera
  1353 ;; This function uses a non-reentrant model
  1354 ;;
  1355                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
  1356                           	line	183
  1357                           global __ptext2
  1358                           __ptext2:	;psect for function _myDelay
  1359  037E                     psect	text2
  1360                           	file	"main.c"
  1361                           	line	183
  1362                           	global	__size_of_myDelay
  1363                           	__size_of_myDelay	equ	__end_of_myDelay-_myDelay
  1364  0001                     	
  1365                           _myDelay:	
  1366  037E                     ;incstack = 0
  1367                           	opt	stack 5
  1368                           ; Regs used in _myDelay: []
  1369                           	line	186
  1370                           	
  1371                           l136:	
  1372  037E                     	return
  1373  037E  0008               	opt stack 0
  1374                           GLOBAL	__end_of_myDelay
  1375                           	__end_of_myDelay:
  1376  037F                     	signat	_myDelay,89
  1377                           	global	_keyUp
  1378                           
  1379 ;; *************** function _keyUp *****************
  1380 ;; Defined at:
  1381 ;;		line 176 in file "main.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  key             1    wreg     unsigned char 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  key             1   12[BANK0 ] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMMON   BANK0
  1395 ;;      Params:         0       0
  1396 ;;      Locals:         0       1
  1397 ;;      Temps:          0       1
  1398 ;;      Totals:         0       2
  1399 ;;Total ram usage:        2 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    2
  1402 ;; This function calls:
  1403 ;;		_resetPort
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
  1409                           	line	176
  1410                           global __ptext3
  1411                           __ptext3:	;psect for function _keyUp
  1412  035C                     psect	text3
  1413                           	file	"main.c"
  1414                           	line	176
  1415                           	global	__size_of_keyUp
  1416                           	__size_of_keyUp	equ	__end_of_keyUp-_keyUp
  1417  001A                     	
  1418                           _keyUp:	
  1419  035C                     ;incstack = 0
  1420                           	opt	stack 5
  1421                           ; Regs used in _keyUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1422                           ;keyUp@key stored from wreg
  1423                           	bcf	status, 5	;RP0=0, select bank0
  1424  035C  1283               	movwf	(keyUp@key)
  1425  035D  00AF               	line	178
  1426                           	
  1427                           l1049:	
  1428  035E                     ;main.c: 176: void keyUp(uint8_t key);main.c: 177: {;main.c: 178:     if ( key >= 128 ) 
                                 return;
  1429                           	movlw	low(080h)
  1430  035E  3080               	subwf	(keyUp@key),w
  1431  035F  022F               	skipc
  1432  0360  1C03               	goto	u571
  1433  0361  2B63               	goto	u570
  1434  0362  2B64               u571:
  1435  0363                     	goto	l1053
  1436  0363  2B66               u570:
  1437  0364                     	goto	l132
  1438  0364  2B75               	
  1439                           l1051:	
  1440  0365                     	goto	l132
  1441  0365  2B75               	
  1442                           l131:	
  1443  0366                     	line	179
  1444                           	
  1445                           l1053:	
  1446  0366                     ;main.c: 179:     i = codeToMatrix[key];
  1447                           	movf	(keyUp@key),w
  1448  0366  082F               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1449  0367  3E01               	movwf	fsr0
  1450  0368  0084               	fcall	stringdir
  1451  0369  2200               	movwf	(??_keyUp+0)+0
  1452  036A  00AE               	movf	(??_keyUp+0)+0,w
  1453  036B  082E               	movwf	(_i)
  1454  036C  009A               	line	180
  1455                           	
  1456                           l1055:	
  1457  036D                     ;main.c: 180:     if ( i != 0xFF ) resetPort(i);
  1458                           		incf	((_i)),w
  1459  036D  0A1A               	btfsc	status,2
  1460  036E  1903               	goto	u581
  1461  036F  2B71               	goto	u580
  1462  0370  2B72               u581:
  1463  0371                     	goto	l132
  1464  0371  2B75               u580:
  1465  0372                     	
  1466                           l1057:	
  1467  0372                     	movf	(_i),w
  1468  0372  081A               	fcall	_resetPort
  1469  0373  231D               	goto	l132
  1470  0374  2B75               	
  1471                           l133:	
  1472  0375                     	line	181
  1473                           	
  1474                           l132:	
  1475  0375                     	return
  1476  0375  0008               	opt stack 0
  1477                           GLOBAL	__end_of_keyUp
  1478                           	__end_of_keyUp:
  1479  0376                     	signat	_keyUp,4217
  1480                           	global	_keyDown
  1481                           
  1482 ;; *************** function _keyDown *****************
  1483 ;; Defined at:
  1484 ;;		line 155 in file "main.c"
  1485 ;; Parameters:    Size  Location     Type
  1486 ;;  key             1    wreg     unsigned char 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  key             1   12[BANK0 ] unsigned char 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  1    wreg      void 
  1491 ;; Registers used:
  1492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMMON   BANK0
  1498 ;;      Params:         0       0
  1499 ;;      Locals:         0       1
  1500 ;;      Temps:          0       1
  1501 ;;      Totals:         0       2
  1502 ;;Total ram usage:        2 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; Hardware stack levels required when called:    2
  1505 ;; This function calls:
  1506 ;;		_resetPort
  1507 ;;		_setPort
  1508 ;; This function is called by:
  1509 ;;		_main
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  1513                           	line	155
  1514                           global __ptext4
  1515                           __ptext4:	;psect for function _keyDown
  1516  02AA                     psect	text4
  1517                           	file	"main.c"
  1518                           	line	155
  1519                           	global	__size_of_keyDown
  1520                           	__size_of_keyDown	equ	__end_of_keyDown-_keyDown
  1521  0041                     	
  1522                           _keyDown:	
  1523  02AA                     ;incstack = 0
  1524                           	opt	stack 5
  1525                           ; Regs used in _keyDown: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1526                           ;keyDown@key stored from wreg
  1527                           	bcf	status, 5	;RP0=0, select bank0
  1528  02AA  1283               	movwf	(keyDown@key)
  1529  02AB  00AF               	line	157
  1530                           	
  1531                           l1023:	
  1532  02AC                     ;main.c: 155: void keyDown(uint8_t key);main.c: 156: {;main.c: 157:     if ( key >= 128 
                                 ) return;
  1533                           	movlw	low(080h)
  1534  02AC  3080               	subwf	(keyDown@key),w
  1535  02AD  022F               	skipc
  1536  02AE  1C03               	goto	u501
  1537  02AF  2AB1               	goto	u500
  1538  02B0  2AB2               u501:
  1539  02B1                     	goto	l1027
  1540  02B1  2AB4               u500:
  1541  02B2                     	goto	l117
  1542  02B2  2AEA               	
  1543                           l1025:	
  1544  02B3                     	goto	l117
  1545  02B3  2AEA               	
  1546                           l116:	
  1547  02B4                     	line	158
  1548                           	
  1549                           l1027:	
  1550  02B4                     ;main.c: 158:     i = codeToMatrix[key];
  1551                           	movf	(keyDown@key),w
  1552  02B4  082F               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1553  02B5  3E01               	movwf	fsr0
  1554  02B6  0084               	fcall	stringdir
  1555  02B7  2200               	movwf	(??_keyDown+0)+0
  1556  02B8  00AE               	movf	(??_keyDown+0)+0,w
  1557  02B9  082E               	movwf	(_i)
  1558  02BA  009A               	line	159
  1559                           	
  1560                           l1029:	
  1561  02BB                     ;main.c: 159:     if ( i != 0xFF ) {
  1562                           		incf	((_i)),w
  1563  02BB  0A1A               	btfsc	status,2
  1564  02BC  1903               	goto	u511
  1565  02BD  2ABF               	goto	u510
  1566  02BE  2AC0               u511:
  1567  02BF                     	goto	l117
  1568  02BF  2AEA               u510:
  1569  02C0                     	line	160
  1570                           	
  1571                           l1031:	
  1572  02C0                     ;main.c: 160:         setPort(i);
  1573                           	movf	(_i),w
  1574  02C0  081A               	fcall	_setPort
  1575  02C1  233D               	line	162
  1576                           	
  1577                           l1033:	
  1578  02C2                     ;main.c: 162:         if ( (shift &&!replaced) || (i & 0b01000000) ) {
  1579                           	bcf	status, 5	;RP0=0, select bank0
  1580  02C2  1283               	movf	((_shift)),w
  1581  02C3  0819               	btfsc	status,2
  1582  02C4  1903               	goto	u521
  1583  02C5  2AC7               	goto	u520
  1584  02C6  2AC8               u521:
  1585  02C7                     	goto	l123
  1586  02C7  2ACD               u520:
  1587  02C8                     	
  1588                           l1035:	
  1589  02C8                     	movf	((_replaced)),w
  1590  02C8  0817               	btfsc	status,2
  1591  02C9  1903               	goto	u531
  1592  02CA  2ACC               	goto	u530
  1593  02CB  2ACD               u531:
  1594  02CC                     	goto	l1037
  1595  02CC  2AD2               u530:
  1596  02CD                     	
  1597                           l123:	
  1598  02CD                     	btfss	(_i),(6)&7
  1599  02CD  1F1A               	goto	u541
  1600  02CE  2AD0               	goto	u540
  1601  02CF  2AD1               u541:
  1602  02D0                     	goto	l1039
  1603  02D0  2AD5               u540:
  1604  02D1                     	goto	l1037
  1605  02D1  2AD2               	
  1606                           l121:	
  1607  02D2                     	line	163
  1608                           	
  1609                           l1037:	
  1610  02D2                     ;main.c: 163:             setPort(0x00);
  1611                           	movlw	low(0)
  1612  02D2  3000               	fcall	_setPort
  1613  02D3  233D               	line	164
  1614                           ;main.c: 164:         } else {
  1615                           	goto	l1041
  1616  02D4  2AD8               	
  1617                           l119:	
  1618  02D5                     	line	165
  1619                           	
  1620                           l1039:	
  1621  02D5                     ;main.c: 165:             resetPort(0x00);
  1622                           	movlw	low(0)
  1623  02D5  3000               	fcall	_resetPort
  1624  02D6  231D               	goto	l1041
  1625  02D7  2AD8               	line	166
  1626                           ;main.c: 166:         }
  1627                           	
  1628                           l124:	
  1629  02D8                     	line	168
  1630                           	
  1631                           l1041:	
  1632  02D8                     ;main.c: 168:         if ( ctrl || (i & 0b10000000) ) {
  1633                           	bcf	status, 5	;RP0=0, select bank0
  1634  02D8  1283               	movf	((_ctrl)),w
  1635  02D9  0818               	btfss	status,2
  1636  02DA  1D03               	goto	u551
  1637  02DB  2ADD               	goto	u550
  1638  02DC  2ADE               u551:
  1639  02DD                     	goto	l1045
  1640  02DD  2AE3               u550:
  1641  02DE                     	
  1642                           l1043:	
  1643  02DE                     	btfss	(_i),(7)&7
  1644  02DE  1F9A               	goto	u561
  1645  02DF  2AE1               	goto	u560
  1646  02E0  2AE2               u561:
  1647  02E1                     	goto	l1047
  1648  02E1  2AE6               u560:
  1649  02E2                     	goto	l1045
  1650  02E2  2AE3               	
  1651                           l127:	
  1652  02E3                     	line	169
  1653                           	
  1654                           l1045:	
  1655  02E3                     ;main.c: 169:             setPort(0x0F);
  1656                           	movlw	low(0Fh)
  1657  02E3  300F               	fcall	_setPort
  1658  02E4  233D               	line	170
  1659                           ;main.c: 170:         } else {
  1660                           	goto	l117
  1661  02E5  2AEA               	
  1662                           l125:	
  1663  02E6                     	line	171
  1664                           	
  1665                           l1047:	
  1666  02E6                     ;main.c: 171:             resetPort(0x0F);
  1667                           	movlw	low(0Fh)
  1668  02E6  300F               	fcall	_resetPort
  1669  02E7  231D               	goto	l117
  1670  02E8  2AEA               	line	172
  1671                           ;main.c: 172:         }
  1672                           	
  1673                           l128:	
  1674  02E9                     	goto	l117
  1675  02E9  2AEA               	line	173
  1676                           ;main.c: 173:     }
  1677                           	
  1678                           l118:	
  1679  02EA                     	line	174
  1680                           	
  1681                           l117:	
  1682  02EA                     	return
  1683  02EA  0008               	opt stack 0
  1684                           GLOBAL	__end_of_keyDown
  1685                           	__end_of_keyDown:
  1686  02EB                     	signat	_keyDown,4217
  1687                           	global	_setPort
  1688                           
  1689 ;; *************** function _setPort *****************
  1690 ;; Defined at:
  1691 ;;		line 143 in file "main.c"
  1692 ;; Parameters:    Size  Location     Type
  1693 ;;  bit_id          1    wreg     unsigned char 
  1694 ;; Auto vars:     Size  Location     Type
  1695 ;;  bit_id          1   10[BANK0 ] unsigned char 
  1696 ;; Return value:  Size  Location     Type
  1697 ;;                  1    wreg      void 
  1698 ;; Registers used:
  1699 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1700 ;; Tracked objects:
  1701 ;;		On entry : 0/0
  1702 ;;		On exit  : 0/0
  1703 ;;		Unchanged: 0/0
  1704 ;; Data sizes:     COMMON   BANK0
  1705 ;;      Params:         0       0
  1706 ;;      Locals:         0       1
  1707 ;;      Temps:          0       3
  1708 ;;      Totals:         0       4
  1709 ;;Total ram usage:        4 bytes
  1710 ;; Hardware stack levels used:    1
  1711 ;; Hardware stack levels required when called:    1
  1712 ;; This function calls:
  1713 ;;		Nothing
  1714 ;; This function is called by:
  1715 ;;		_keyDown
  1716 ;; This function uses a non-reentrant model
  1717 ;;
  1718                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  1719                           	line	143
  1720                           global __ptext5
  1721                           __ptext5:	;psect for function _setPort
  1722  033D                     psect	text5
  1723                           	file	"main.c"
  1724                           	line	143
  1725                           	global	__size_of_setPort
  1726                           	__size_of_setPort	equ	__end_of_setPort-_setPort
  1727  001F                     	
  1728                           _setPort:	
  1729  033D                     ;incstack = 0
  1730                           	opt	stack 5
  1731                           ; Regs used in _setPort: [wreg-fsr0h+status,2+status,0]
  1732                           ;setPort@bit_id stored from wreg
  1733                           	bcf	status, 5	;RP0=0, select bank0
  1734  033D  1283               	movwf	(setPort@bit_id)
  1735  033E  00AD               	line	145
  1736                           	
  1737                           l1019:	
  1738  033F                     ;main.c: 143: void setPort(uint8_t bit_id);main.c: 144: {;main.c: 145:     outPorts[bit_
                                 id & 7] |= (1 << ((bit_id >> 3) & 7));
  1739                           	movlw	low(01h)
  1740  033F  3001               	movwf	(??_setPort+0)+0
  1741  0340  00AA               	movf	(setPort@bit_id),w
  1742  0341  082D               	movwf	(??_setPort+1)+0
  1743  0342  00AB               	movlw	03h
  1744  0343  3003               u465:
  1745  0344                     	clrc
  1746  0344  1003               	rrf	(??_setPort+1)+0,f
  1747  0345  0CAB               	addlw	-1
  1748  0346  3EFF               	skipz
  1749  0347  1D03               	goto	u465
  1750  0348  2B44               	movf	0+(??_setPort+1)+0,w
  1751  0349  082B               	andlw	07h
  1752  034A  3907               	addlw	1
  1753  034B  3E01               	goto	u474
  1754  034C  2B4F               u475:
  1755  034D                     	clrc
  1756  034D  1003               	rlf	(??_setPort+0)+0,f
  1757  034E  0DAA               u474:
  1758  034F                     	addlw	-1
  1759  034F  3EFF               	skipz
  1760  0350  1D03               	goto	u475
  1761  0351  2B4D               	movf	0+(??_setPort+0)+0,w
  1762  0352  082A               	movwf	(??_setPort+2)+0
  1763  0353  00AC               	movf	(setPort@bit_id),w
  1764  0354  082D               	andlw	07h
  1765  0355  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1766  0356  3E0C               	movwf	fsr0
  1767  0357  0084               	movf	(??_setPort+2)+0,w
  1768  0358  082C               	bcf	status, 7	;select IRP bank0
  1769  0359  1383               	iorwf	indf,f
  1770  035A  0480               	line	146
  1771                           	
  1772                           l110:	
  1773  035B                     	return
  1774  035B  0008               	opt stack 0
  1775                           GLOBAL	__end_of_setPort
  1776                           	__end_of_setPort:
  1777  035C                     	signat	_setPort,4217
  1778                           	global	_resetPort
  1779                           
  1780 ;; *************** function _resetPort *****************
  1781 ;; Defined at:
  1782 ;;		line 148 in file "main.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  bit_id          1    wreg     unsigned char 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  bit_id          1   10[BANK0 ] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0
  1796 ;;      Params:         0       0
  1797 ;;      Locals:         0       1
  1798 ;;      Temps:          0       3
  1799 ;;      Totals:         0       4
  1800 ;;Total ram usage:        4 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    1
  1803 ;; This function calls:
  1804 ;;		Nothing
  1805 ;; This function is called by:
  1806 ;;		_keyDown
  1807 ;;		_keyUp
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  1811                           	line	148
  1812                           global __ptext6
  1813                           __ptext6:	;psect for function _resetPort
  1814  031D                     psect	text6
  1815                           	file	"main.c"
  1816                           	line	148
  1817                           	global	__size_of_resetPort
  1818                           	__size_of_resetPort	equ	__end_of_resetPort-_resetPort
  1819  0020                     	
  1820                           _resetPort:	
  1821  031D                     ;incstack = 0
  1822                           	opt	stack 5
  1823                           ; Regs used in _resetPort: [wreg-fsr0h+status,2+status,0]
  1824                           ;resetPort@bit_id stored from wreg
  1825                           	bcf	status, 5	;RP0=0, select bank0
  1826  031D  1283               	movwf	(resetPort@bit_id)
  1827  031E  00AD               	line	150
  1828                           	
  1829                           l1021:	
  1830  031F                     ;main.c: 148: void resetPort(uint8_t bit_id);main.c: 149: {;main.c: 150:     outPorts[bi
                                 t_id & 7] &= ~(1 << ((bit_id >> 3) & 7));
  1831                           	movlw	low(01h)
  1832  031F  3001               	movwf	(??_resetPort+0)+0
  1833  0320  00AA               	movf	(resetPort@bit_id),w
  1834  0321  082D               	movwf	(??_resetPort+1)+0
  1835  0322  00AB               	movlw	03h
  1836  0323  3003               u485:
  1837  0324                     	clrc
  1838  0324  1003               	rrf	(??_resetPort+1)+0,f
  1839  0325  0CAB               	addlw	-1
  1840  0326  3EFF               	skipz
  1841  0327  1D03               	goto	u485
  1842  0328  2B24               	movf	0+(??_resetPort+1)+0,w
  1843  0329  082B               	andlw	07h
  1844  032A  3907               	addlw	1
  1845  032B  3E01               	goto	u494
  1846  032C  2B2F               u495:
  1847  032D                     	clrc
  1848  032D  1003               	rlf	(??_resetPort+0)+0,f
  1849  032E  0DAA               u494:
  1850  032F                     	addlw	-1
  1851  032F  3EFF               	skipz
  1852  0330  1D03               	goto	u495
  1853  0331  2B2D               	movf	0+(??_resetPort+0)+0,w
  1854  0332  082A               	xorlw	0ffh
  1855  0333  3AFF               	movwf	(??_resetPort+2)+0
  1856  0334  00AC               	movf	(resetPort@bit_id),w
  1857  0335  082D               	andlw	07h
  1858  0336  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1859  0337  3E0C               	movwf	fsr0
  1860  0338  0084               	movf	(??_resetPort+2)+0,w
  1861  0339  082C               	bcf	status, 7	;select IRP bank0
  1862  033A  1383               	andwf	indf,f
  1863  033B  0580               	line	151
  1864                           	
  1865                           l113:	
  1866  033C                     	return
  1867  033C  0008               	opt stack 0
  1868                           GLOBAL	__end_of_resetPort
  1869                           	__end_of_resetPort:
  1870  033D                     	signat	_resetPort,4217
  1871                           	global	_myIsr
  1872                           
  1873 ;; *************** function _myIsr *****************
  1874 ;; Defined at:
  1875 ;;		line 69 in file "main.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;		None
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;		None
  1880 ;; Return value:  Size  Location     Type
  1881 ;;                  1    wreg      void 
  1882 ;; Registers used:
  1883 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1884 ;; Tracked objects:
  1885 ;;		On entry : 0/0
  1886 ;;		On exit  : 0/0
  1887 ;;		Unchanged: 0/0
  1888 ;; Data sizes:     COMMON   BANK0
  1889 ;;      Params:         0       0
  1890 ;;      Locals:         0       2
  1891 ;;      Temps:          0       5
  1892 ;;      Totals:         0       7
  1893 ;;Total ram usage:        7 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; This function calls:
  1896 ;;		Nothing
  1897 ;; This function is called by:
  1898 ;;		Interrupt level 1
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  1902                           	line	69
  1903                           global __ptext7
  1904                           __ptext7:	;psect for function _myIsr
  1905  0015                     psect	text7
  1906                           	file	"main.c"
  1907                           	line	69
  1908                           	global	__size_of_myIsr
  1909                           	__size_of_myIsr	equ	__end_of_myIsr-_myIsr
  1910  0111                     	
  1911                           _myIsr:	
  1912  0015                     ;incstack = 0
  1913                           	opt	stack 5
  1914                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0]
  1915                           psect	intentry,class=CODE,delta=2
  1916                           global __pintentry
  1917                           __pintentry:
  1918  0004                     global interrupt_function
  1919                           interrupt_function:
  1920  0004                     	global saved_w
  1921                           	saved_w	set	btemp+0
  1922  004E                     	movwf	saved_w
  1923  0004  00CE               	swapf	status,w
  1924  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
  1925  0006  1283               	movwf	(??_myIsr+2)
  1926  0007  00A5               	movf	fsr0,w
  1927  0008  0804               	movwf	(??_myIsr+3)
  1928  0009  00A6               	movf	pclath,w
  1929  000A  080A               	movwf	(??_myIsr+4)
  1930  000B  00A7               	ljmp	_myIsr
  1931  000C  2815               psect	text7
  1932                           	line	71
  1933                           	
  1934                           i1l1091:	
  1935  0015                     ;main.c: 71:     if(T0IE && T0IF){
  1936                           	btfss	(93/8),(93)&7	;volatile
  1937  0015  1E8B               	goto	u61_21
  1938  0016  2818               	goto	u61_20
  1939  0017  2819               u61_21:
  1940  0018                     	goto	i1l1177
  1941  0018  291C               u61_20:
  1942  0019                     	
  1943                           i1l1093:	
  1944  0019                     	btfss	(90/8),(90)&7	;volatile
  1945  0019  1D0B               	goto	u62_21
  1946  001A  281C               	goto	u62_20
  1947  001B  281D               u62_21:
  1948  001C                     	goto	i1l1177
  1949  001C  291C               u62_20:
  1950  001D                     	line	73
  1951                           	
  1952                           i1l1095:	
  1953  001D                     ;main.c: 73:         T0IF=0;
  1954                           	bcf	(90/8),(90)&7	;volatile
  1955  001D  110B               	line	74
  1956                           	
  1957                           i1l1097:	
  1958  001E                     ;main.c: 74:         TMR0 = 255;
  1959                           	movlw	low(0FFh)
  1960  001E  30FF               	movwf	(1)	;volatile
  1961  001F  0081               	line	78
  1962                           	
  1963                           i1l1099:	
  1964  0020                     ;main.c: 78:         if ( ps2DataState == 0 ) {
  1965                           	movf	((_ps2DataState)),w
  1966  0020  0822               	btfss	status,2
  1967  0021  1D03               	goto	u63_21
  1968  0022  2824               	goto	u63_20
  1969  0023  2825               u63_21:
  1970  0024                     	goto	i1l1109
  1971  0024  2833               u63_20:
  1972  0025                     	line	79
  1973                           	
  1974                           i1l1101:	
  1975  0025                     ;main.c: 79:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  1976                           	btfsc	(5),4	;volatile
  1977  0025  1A05               	goto	u64_21
  1978  0026  2828               	goto	u64_20
  1979  0027  2829               u64_21:
  1980  0028                     	goto	i1l1177
  1981  0028  291C               u64_20:
  1982  0029                     	
  1983                           i1l1103:	
  1984  0029                     	btfsc	(5),3	;volatile
  1985  0029  1985               	goto	u65_21
  1986  002A  282C               	goto	u65_20
  1987  002B  282D               u65_21:
  1988  002C                     	goto	i1l1177
  1989  002C  291C               u65_20:
  1990  002D                     	line	80
  1991                           	
  1992                           i1l1105:	
  1993  002D                     ;main.c: 80:                 ps2BitsCount = 0;
  1994                           	clrf	(_ps2BitsCount)
  1995  002D  01A0               	line	81
  1996                           ;main.c: 81:                 ps2Bits = 0;
  1997                           	clrf	(_ps2Bits)
  1998  002E  01A1               	line	82
  1999                           	
  2000                           i1l1107:	
  2001  002F                     ;main.c: 82:                 ps2DataState = 1;
  2002                           	clrf	(_ps2DataState)
  2003  002F  01A2               	incf	(_ps2DataState),f
  2004  0030  0AA2               	goto	i1l1177
  2005  0031  291C               	line	83
  2006                           ;main.c: 83:             }
  2007                           	
  2008                           i1l73:	
  2009  0032                     	line	84
  2010                           ;main.c: 84:         } else if ( ps2DataState == 1 ) {
  2011                           	goto	i1l1177
  2012  0032  291C               	
  2013                           i1l72:	
  2014  0033                     	
  2015                           i1l1109:	
  2016  0033                     		decf	((_ps2DataState)),w
  2017  0033  0322               	btfss	status,2
  2018  0034  1D03               	goto	u66_21
  2019  0035  2837               	goto	u66_20
  2020  0036  2838               u66_21:
  2021  0037                     	goto	i1l1177
  2022  0037  291C               u66_20:
  2023  0038                     	line	85
  2024                           	
  2025                           i1l1111:	
  2026  0038                     ;main.c: 85:             if ( ps2BitsCount < 8 ) {
  2027                           	movf	(_ps2BitsCount),w
  2028  0038  0820               	xorlw	80h
  2029  0039  3A80               	addlw	-((08h)^80h)
  2030  003A  3E78               	skipnc
  2031  003B  1803               	goto	u67_21
  2032  003C  283E               	goto	u67_20
  2033  003D  283F               u67_21:
  2034  003E                     	goto	i1l1117
  2035  003E  2855               u67_20:
  2036  003F                     	line	86
  2037                           	
  2038                           i1l1113:	
  2039  003F                     ;main.c: 86:                 if ( PORTAbits.RA3 ) {
  2040                           	btfss	(5),3	;volatile
  2041  003F  1D85               	goto	u68_21
  2042  0040  2842               	goto	u68_20
  2043  0041  2843               u68_21:
  2044  0042                     	goto	i1l77
  2045  0042  2850               u68_20:
  2046  0043                     	line	87
  2047                           	
  2048                           i1l1115:	
  2049  0043                     ;main.c: 87:                     ps2Bits |= ( 1 << ps2BitsCount );
  2050                           	movlw	low(01h)
  2051  0043  3001               	movwf	(??_myIsr+0)+0
  2052  0044  00A3               	incf	(_ps2BitsCount),w
  2053  0045  0A20               	goto	u69_24
  2054  0046  2849               u69_25:
  2055  0047                     	clrc
  2056  0047  1003               	rlf	(??_myIsr+0)+0,f
  2057  0048  0DA3               u69_24:
  2058  0049                     	addlw	-1
  2059  0049  3EFF               	skipz
  2060  004A  1D03               	goto	u69_25
  2061  004B  2847               	movf	0+(??_myIsr+0)+0,w
  2062  004C  0823               	movwf	(??_myIsr+1)+0
  2063  004D  00A4               	movf	(??_myIsr+1)+0,w
  2064  004E  0824               	iorwf	(_ps2Bits),f
  2065  004F  04A1               	line	88
  2066                           ;main.c: 88:                 }
  2067                           	
  2068                           i1l77:	
  2069  0050                     	line	89
  2070                           ;main.c: 89:                 ps2BitsCount++;
  2071                           	movlw	low(01h)
  2072  0050  3001               	movwf	(??_myIsr+0)+0
  2073  0051  00A3               	movf	(??_myIsr+0)+0,w
  2074  0052  0823               	addwf	(_ps2BitsCount),f
  2075  0053  07A0               	line	90
  2076                           ;main.c: 90:             } else if ( ps2BitsCount == 8 ) {
  2077                           	goto	i1l1177
  2078  0054  291C               	
  2079                           i1l76:	
  2080  0055                     	
  2081                           i1l1117:	
  2082  0055                     		movlw	8
  2083  0055  3008               	xorwf	((_ps2BitsCount)),w
  2084  0056  0620               	btfss	status,2
  2085  0057  1D03               	goto	u70_21
  2086  0058  285A               	goto	u70_20
  2087  0059  285B               u70_21:
  2088  005A                     	goto	i1l1121
  2089  005A  2860               u70_20:
  2090  005B                     	line	91
  2091                           	
  2092                           i1l1119:	
  2093  005B                     ;main.c: 91:                 ps2BitsCount++;
  2094                           	movlw	low(01h)
  2095  005B  3001               	movwf	(??_myIsr+0)+0
  2096  005C  00A3               	movf	(??_myIsr+0)+0,w
  2097  005D  0823               	addwf	(_ps2BitsCount),f
  2098  005E  07A0               	line	92
  2099                           ;main.c: 92:             } else if ( ps2BitsCount == 9 ) {
  2100                           	goto	i1l1177
  2101  005F  291C               	
  2102                           i1l79:	
  2103  0060                     	
  2104                           i1l1121:	
  2105  0060                     		movlw	9
  2106  0060  3009               	xorwf	((_ps2BitsCount)),w
  2107  0061  0620               	btfss	status,2
  2108  0062  1D03               	goto	u71_21
  2109  0063  2865               	goto	u71_20
  2110  0064  2866               u71_21:
  2111  0065                     	goto	i1l1177
  2112  0065  291C               u71_20:
  2113  0066                     	line	93
  2114                           	
  2115                           i1l1123:	
  2116  0066                     ;main.c: 93:                 ps2DataCount++;
  2117                           	movlw	low(01h)
  2118  0066  3001               	movwf	(??_myIsr+0)+0
  2119  0067  00A3               	movf	(??_myIsr+0)+0,w
  2120  0068  0823               	addwf	(_ps2DataCount),f
  2121  0069  079E               	line	94
  2122                           ;main.c: 94:                 if ( ps2NeedEncode ) {
  2123                           	movf	((_ps2NeedEncode)),w
  2124  006A  081B               	btfsc	status,2
  2125  006B  1903               	goto	u72_21
  2126  006C  286E               	goto	u72_20
  2127  006D  286F               u72_21:
  2128  006E                     	goto	i1l1157
  2129  006E  28E5               u72_20:
  2130  006F                     	goto	i1l1155
  2131  006F  28B3               	line	95
  2132                           	
  2133                           i1l1125:	
  2134  0070                     ;main.c: 95:                     switch(ps2Bits) {
  2135                           	goto	i1l1155
  2136  0070  28B3               	line	100
  2137                           ;main.c: 100:                         case 0x14: ps2Data = 19; break;
  2138                           	
  2139                           i1l84:	
  2140  0071                     	
  2141                           i1l1127:	
  2142  0071                     	movlw	low(013h)
  2143  0071  3013               	movwf	(??_myIsr+0)+0
  2144  0072  00A3               	movf	(??_myIsr+0)+0,w
  2145  0073  0823               	movwf	(_ps2Data)
  2146  0074  009F               	goto	i1l1163
  2147  0075  28FC               	line	101
  2148                           ;main.c: 101:                         case 0x70: ps2Data = 23; break;
  2149                           	
  2150                           i1l86:	
  2151  0076                     	
  2152                           i1l1129:	
  2153  0076                     	movlw	low(017h)
  2154  0076  3017               	movwf	(??_myIsr+0)+0
  2155  0077  00A3               	movf	(??_myIsr+0)+0,w
  2156  0078  0823               	movwf	(_ps2Data)
  2157  0079  009F               	goto	i1l1163
  2158  007A  28FC               	line	102
  2159                           ;main.c: 102:                         case 0x6c: ps2Data = 24; break;
  2160                           	
  2161                           i1l87:	
  2162  007B                     	
  2163                           i1l1131:	
  2164  007B                     	movlw	low(018h)
  2165  007B  3018               	movwf	(??_myIsr+0)+0
  2166  007C  00A3               	movf	(??_myIsr+0)+0,w
  2167  007D  0823               	movwf	(_ps2Data)
  2168  007E  009F               	goto	i1l1163
  2169  007F  28FC               	line	103
  2170                           ;main.c: 103:                         case 0x7d: ps2Data = 25; break;
  2171                           	
  2172                           i1l88:	
  2173  0080                     	
  2174                           i1l1133:	
  2175  0080                     	movlw	low(019h)
  2176  0080  3019               	movwf	(??_myIsr+0)+0
  2177  0081  00A3               	movf	(??_myIsr+0)+0,w
  2178  0082  0823               	movwf	(_ps2Data)
  2179  0083  009F               	goto	i1l1163
  2180  0084  28FC               	line	104
  2181                           ;main.c: 104:                         case 0x71: ps2Data = 31; break;
  2182                           	
  2183                           i1l89:	
  2184  0085                     	
  2185                           i1l1135:	
  2186  0085                     	movlw	low(01Fh)
  2187  0085  301F               	movwf	(??_myIsr+0)+0
  2188  0086  00A3               	movf	(??_myIsr+0)+0,w
  2189  0087  0823               	movwf	(_ps2Data)
  2190  0088  009F               	goto	i1l1163
  2191  0089  28FC               	line	105
  2192                           ;main.c: 105:                         case 0x69: ps2Data = 32; break;
  2193                           	
  2194                           i1l90:	
  2195  008A                     	
  2196                           i1l1137:	
  2197  008A                     	movlw	low(020h)
  2198  008A  3020               	movwf	(??_myIsr+0)+0
  2199  008B  00A3               	movf	(??_myIsr+0)+0,w
  2200  008C  0823               	movwf	(_ps2Data)
  2201  008D  009F               	goto	i1l1163
  2202  008E  28FC               	line	106
  2203                           ;main.c: 106:                         case 0x7a: ps2Data = 39; break;
  2204                           	
  2205                           i1l91:	
  2206  008F                     	
  2207                           i1l1139:	
  2208  008F                     	movlw	low(027h)
  2209  008F  3027               	movwf	(??_myIsr+0)+0
  2210  0090  00A3               	movf	(??_myIsr+0)+0,w
  2211  0091  0823               	movwf	(_ps2Data)
  2212  0092  009F               	goto	i1l1163
  2213  0093  28FC               	line	107
  2214                           ;main.c: 107:                         case 0x75: ps2Data = 40; break;
  2215                           	
  2216                           i1l92:	
  2217  0094                     	
  2218                           i1l1141:	
  2219  0094                     	movlw	low(028h)
  2220  0094  3028               	movwf	(??_myIsr+0)+0
  2221  0095  00A3               	movf	(??_myIsr+0)+0,w
  2222  0096  0823               	movwf	(_ps2Data)
  2223  0097  009F               	goto	i1l1163
  2224  0098  28FC               	line	108
  2225                           ;main.c: 108:                         case 0x6b: ps2Data = 47; break;
  2226                           	
  2227                           i1l93:	
  2228  0099                     	
  2229                           i1l1143:	
  2230  0099                     	movlw	low(02Fh)
  2231  0099  302F               	movwf	(??_myIsr+0)+0
  2232  009A  00A3               	movf	(??_myIsr+0)+0,w
  2233  009B  0823               	movwf	(_ps2Data)
  2234  009C  009F               	goto	i1l1163
  2235  009D  28FC               	line	109
  2236                           ;main.c: 109:                         case 0x72: ps2Data = 48; break;
  2237                           	
  2238                           i1l94:	
  2239  009E                     	
  2240                           i1l1145:	
  2241  009E                     	movlw	low(030h)
  2242  009E  3030               	movwf	(??_myIsr+0)+0
  2243  009F  00A3               	movf	(??_myIsr+0)+0,w
  2244  00A0  0823               	movwf	(_ps2Data)
  2245  00A1  009F               	goto	i1l1163
  2246  00A2  28FC               	line	110
  2247                           ;main.c: 110:                         case 0x74: ps2Data = 55; break;
  2248                           	
  2249                           i1l95:	
  2250  00A3                     	
  2251                           i1l1147:	
  2252  00A3                     	movlw	low(037h)
  2253  00A3  3037               	movwf	(??_myIsr+0)+0
  2254  00A4  00A3               	movf	(??_myIsr+0)+0,w
  2255  00A5  0823               	movwf	(_ps2Data)
  2256  00A6  009F               	goto	i1l1163
  2257  00A7  28FC               	line	111
  2258                           ;main.c: 111:                         case 0x4a: ps2Data = 56; break;
  2259                           	
  2260                           i1l96:	
  2261  00A8                     	
  2262                           i1l1149:	
  2263  00A8                     	movlw	low(038h)
  2264  00A8  3038               	movwf	(??_myIsr+0)+0
  2265  00A9  00A3               	movf	(??_myIsr+0)+0,w
  2266  00AA  0823               	movwf	(_ps2Data)
  2267  00AB  009F               	goto	i1l1163
  2268  00AC  28FC               	line	112
  2269                           ;main.c: 112:                         case 0x5a: ps2Data = 57; break;
  2270                           	
  2271                           i1l97:	
  2272  00AD                     	
  2273                           i1l1151:	
  2274  00AD                     	movlw	low(039h)
  2275  00AD  3039               	movwf	(??_myIsr+0)+0
  2276  00AE  00A3               	movf	(??_myIsr+0)+0,w
  2277  00AF  0823               	movwf	(_ps2Data)
  2278  00B0  009F               	goto	i1l1163
  2279  00B1  28FC               	line	113
  2280                           	
  2281                           i1l1153:	
  2282  00B2                     ;main.c: 113:                     }
  2283                           	goto	i1l1163
  2284  00B2  28FC               	
  2285                           i1l83:	
  2286  00B3                     	
  2287                           i1l1155:	
  2288  00B3                     	movf	(_ps2Bits),w
  2289  00B3  0821               	movwf	(??_myIsr+0)+0
  2290  00B4  00A3               	clrf	(??_myIsr+0)+0+1
  2291  00B5  01A4               	; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-s
                                 witches
  2292                           ; Switch size 1, requested type "space"
  2293                           ; Number of cases is 1, Range of values is 0 to 0
  2294                           ; switch strategies available:
  2295                           ; Name         Instructions Cycles
  2296                           ; simple_byte            4     3 (average)
  2297                           ; direct_byte            7     6 (fixed)
  2298                           ; jumptable            260     6 (fixed)
  2299                           ;	Chosen strategy is simple_byte
  2300                           
  2301                           	movf 1+(??_myIsr+0)+0,w
  2302  00B6  0824               	opt asmopt_push
  2303                           	opt asmopt_off
  2304                           	xorlw	0^0	; case 0
  2305  00B7  3A00               	skipnz
  2306  00B8  1903               	goto	i1l1309
  2307  00B9  28BB               	goto	i1l1163
  2308  00BA  28FC               	opt asmopt_pop
  2309                           	
  2310                           i1l1309:	
  2311  00BB                     ; Switch size 1, requested type "space"
  2312                           ; Number of cases is 13, Range of values is 20 to 125
  2313                           ; switch strategies available:
  2314                           ; Name         Instructions Cycles
  2315                           ; simple_byte           40    21 (average)
  2316                           ; direct_byte          115     9 (fixed)
  2317                           ; jumptable            263     9 (fixed)
  2318                           ;	Chosen strategy is simple_byte
  2319                           
  2320                           	movf 0+(??_myIsr+0)+0,w
  2321  00BB  0823               	opt asmopt_push
  2322                           	opt asmopt_off
  2323                           	xorlw	20^0	; case 20
  2324  00BC  3A14               	skipnz
  2325  00BD  1903               	goto	i1l1127
  2326  00BE  2871               	xorlw	74^20	; case 74
  2327  00BF  3A5E               	skipnz
  2328  00C0  1903               	goto	i1l1149
  2329  00C1  28A8               	xorlw	90^74	; case 90
  2330  00C2  3A10               	skipnz
  2331  00C3  1903               	goto	i1l1151
  2332  00C4  28AD               	xorlw	105^90	; case 105
  2333  00C5  3A33               	skipnz
  2334  00C6  1903               	goto	i1l1137
  2335  00C7  288A               	xorlw	107^105	; case 107
  2336  00C8  3A02               	skipnz
  2337  00C9  1903               	goto	i1l1143
  2338  00CA  2899               	xorlw	108^107	; case 108
  2339  00CB  3A07               	skipnz
  2340  00CC  1903               	goto	i1l1131
  2341  00CD  287B               	xorlw	112^108	; case 112
  2342  00CE  3A1C               	skipnz
  2343  00CF  1903               	goto	i1l1129
  2344  00D0  2876               	xorlw	113^112	; case 113
  2345  00D1  3A01               	skipnz
  2346  00D2  1903               	goto	i1l1135
  2347  00D3  2885               	xorlw	114^113	; case 114
  2348  00D4  3A03               	skipnz
  2349  00D5  1903               	goto	i1l1145
  2350  00D6  289E               	xorlw	116^114	; case 116
  2351  00D7  3A06               	skipnz
  2352  00D8  1903               	goto	i1l1147
  2353  00D9  28A3               	xorlw	117^116	; case 117
  2354  00DA  3A01               	skipnz
  2355  00DB  1903               	goto	i1l1141
  2356  00DC  2894               	xorlw	122^117	; case 122
  2357  00DD  3A0F               	skipnz
  2358  00DE  1903               	goto	i1l1139
  2359  00DF  288F               	xorlw	125^122	; case 125
  2360  00E0  3A07               	skipnz
  2361  00E1  1903               	goto	i1l1133
  2362  00E2  2880               	goto	i1l1163
  2363  00E3  28FC               	opt asmopt_pop
  2364                           
  2365                           	
  2366                           i1l85:	
  2367  00E4                     	line	114
  2368                           ;main.c: 114:                 } else {
  2369                           	goto	i1l1163
  2370  00E4  28FC               	
  2371                           i1l82:	
  2372  00E5                     	line	115
  2373                           	
  2374                           i1l1157:	
  2375  00E5                     ;main.c: 115:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2376                           		movlw	131
  2377  00E5  3083               	xorwf	((_ps2Bits)),w
  2378  00E6  0621               	btfsc	status,2
  2379  00E7  1903               	goto	u73_21
  2380  00E8  28EA               	goto	u73_20
  2381  00E9  28EB               u73_21:
  2382  00EA                     	goto	i1l1161
  2383  00EA  28F3               u73_20:
  2384  00EB                     	
  2385                           i1l1159:	
  2386  00EB                     	movf	(_ps2Bits),w
  2387  00EB  0821               	movwf	(??_myIsr+0)+0
  2388  00EC  00A3               	clrf	(??_myIsr+0)+0+1
  2389  00ED  01A4               	movf	0+(??_myIsr+0)+0,w
  2390  00EE  0823               	movwf	(_myIsr$79)
  2391  00EF  00A8               	movf	1+(??_myIsr+0)+0,w
  2392  00F0  0824               	movwf	(_myIsr$79+1)
  2393  00F1  00A9               	goto	i1l102
  2394  00F2  28F7               	
  2395                           i1l100:	
  2396  00F3                     	
  2397                           i1l1161:	
  2398  00F3                     	movlw	03Fh
  2399  00F3  303F               	movwf	(_myIsr$79)
  2400  00F4  00A8               	movlw	0
  2401  00F5  3000               	movwf	((_myIsr$79))+1
  2402  00F6  00A9               	
  2403                           i1l102:	
  2404  00F7                     	movf	(_myIsr$79),w
  2405  00F7  0828               	movwf	(??_myIsr+0)+0
  2406  00F8  00A3               	movf	(??_myIsr+0)+0,w
  2407  00F9  0823               	movwf	(_ps2Data)
  2408  00FA  009F               	goto	i1l1163
  2409  00FB  28FC               	line	116
  2410                           ;main.c: 116:                 }
  2411                           	
  2412                           i1l98:	
  2413  00FC                     	line	117
  2414                           	
  2415                           i1l1163:	
  2416  00FC                     ;main.c: 117:                 if ( ps2Bits == 0xF0 ) {
  2417                           		movlw	240
  2418  00FC  30F0               	xorwf	((_ps2Bits)),w
  2419  00FD  0621               	btfss	status,2
  2420  00FE  1D03               	goto	u74_21
  2421  00FF  2901               	goto	u74_20
  2422  0100  2902               u74_21:
  2423  0101                     	goto	i1l1169
  2424  0101  2906               u74_20:
  2425  0102                     	line	118
  2426                           	
  2427                           i1l1165:	
  2428  0102                     ;main.c: 118:                     ps2DataState = 0;
  2429                           	clrf	(_ps2DataState)
  2430  0102  01A2               	line	119
  2431                           	
  2432                           i1l1167:	
  2433  0103                     ;main.c: 119:                     ps2Up = 1;
  2434                           	clrf	(_ps2Up)
  2435  0103  019C               	incf	(_ps2Up),f
  2436  0104  0A9C               	line	120
  2437                           ;main.c: 120:                 } else if ( ps2Bits == 0xE0 ) {
  2438                           	goto	i1l1177
  2439  0105  291C               	
  2440                           i1l103:	
  2441  0106                     	
  2442                           i1l1169:	
  2443  0106                     		movlw	224
  2444  0106  30E0               	xorwf	((_ps2Bits)),w
  2445  0107  0621               	btfss	status,2
  2446  0108  1D03               	goto	u75_21
  2447  0109  290B               	goto	u75_20
  2448  010A  290C               u75_21:
  2449  010B                     	goto	i1l1175
  2450  010B  2910               u75_20:
  2451  010C                     	line	121
  2452                           	
  2453                           i1l1171:	
  2454  010C                     ;main.c: 121:                     ps2DataState = 0;
  2455                           	clrf	(_ps2DataState)
  2456  010C  01A2               	line	122
  2457                           	
  2458                           i1l1173:	
  2459  010D                     ;main.c: 122:                     ps2NeedEncode = 1;
  2460                           	clrf	(_ps2NeedEncode)
  2461  010D  019B               	incf	(_ps2NeedEncode),f
  2462  010E  0A9B               	line	123
  2463                           ;main.c: 123:                 } else {
  2464                           	goto	i1l1177
  2465  010F  291C               	line	131
  2466                           	
  2467                           i1l105:	
  2468  0110                     	line	132
  2469                           	
  2470                           i1l1175:	
  2471  0110                     ;main.c: 132:                     ps2DataState = 2;
  2472                           	movlw	low(02h)
  2473  0110  3002               	movwf	(??_myIsr+0)+0
  2474  0111  00A3               	movf	(??_myIsr+0)+0,w
  2475  0112  0823               	movwf	(_ps2DataState)
  2476  0113  00A2               	goto	i1l1177
  2477  0114  291C               	line	133
  2478                           ;main.c: 133:                 }
  2479                           	
  2480                           i1l106:	
  2481  0115                     	goto	i1l1177
  2482  0115  291C               	
  2483                           i1l104:	
  2484  0116                     	goto	i1l1177
  2485  0116  291C               	line	135
  2486                           ;main.c: 135:             }
  2487                           	
  2488                           i1l81:	
  2489  0117                     	goto	i1l1177
  2490  0117  291C               	
  2491                           i1l80:	
  2492  0118                     	goto	i1l1177
  2493  0118  291C               	
  2494                           i1l78:	
  2495  0119                     	goto	i1l1177
  2496  0119  291C               	line	136
  2497                           ;main.c: 136:         }
  2498                           	
  2499                           i1l75:	
  2500  011A                     	goto	i1l1177
  2501  011A  291C               	
  2502                           i1l74:	
  2503  011B                     	goto	i1l1177
  2504  011B  291C               	line	137
  2505                           ;main.c: 137:     }
  2506                           	
  2507                           i1l71:	
  2508  011C                     	line	138
  2509                           	
  2510                           i1l1177:	
  2511  011C                     ;main.c: 138:     GIE = 1;
  2512                           	bsf	(95/8),(95)&7	;volatile
  2513  011C  178B               	line	139
  2514                           	
  2515                           i1l107:	
  2516  011D                     	movf	(??_myIsr+4),w
  2517  011D  0827               	movwf	pclath
  2518  011E  008A               	movf	(??_myIsr+3),w
  2519  011F  0826               	movwf	fsr0
  2520  0120  0084               	swapf	(??_myIsr+2)^00h,w
  2521  0121  0E25               	movwf	status
  2522  0122  0083               	swapf	saved_w,f
  2523  0123  0ECE               	swapf	saved_w,w
  2524  0124  0E4E               	retfie
  2525  0125  0009               	opt stack 0
  2526                           GLOBAL	__end_of_myIsr
  2527                           	__end_of_myIsr:
  2528  0126                     	signat	_myIsr,89
  2529                           global	___latbits
  2530                           ___latbits	equ	0
  2531  0000                     	global	btemp
  2532                           	btemp set 04Eh
  2533  004E                     
  2534                           	DABS	1,78,2	;btemp
  2535                           	global	wtemp0
  2536                           	wtemp0 set btemp+0
  2537  004E                     	end


Data Sizes:
    Strings     0
    Constant    164
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     14      37

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_keyDown
    _main->_keyUp
    _keyUp->_resetPort
    _keyDown->_resetPort
    _keyDown->_setPort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     220
                                             13 BANK0      1     1      0
                            _keyDown
                              _keyUp
                   _sendDataToAltera
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     1     1      0       0
                                              7 BANK0      1     1      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyUp                                                2     2      0      88
                                             11 BANK0      2     2      0
                          _resetPort
 ---------------------------------------------------------------------------------
 (1) _keyDown                                              2     2      0     132
                                             11 BANK0      2     2      0
                          _resetPort
                            _setPort
 ---------------------------------------------------------------------------------
 (2) _setPort                                              4     4      0      44
                                              7 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _resetPort                                            4     4      0      44
                                              7 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myIsr                                                7     7      0      24
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keyDown
     _resetPort
     _setPort
   _keyUp
     _resetPort
   _sendDataToAltera
     _myDelay

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      E      25       3       56.1%
ABS                  0      0      25       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      25       6        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Aug 24 19:19:38 2018

                            _i 001A                              pc 0002                             fsr 0004  
                          l110 035B                            l113 033C                            l121 02D2  
                          l123 02CD                            l131 0366                            l124 02D8  
                          l116 02B4                            l132 0375                            l140 031A  
                          l125 02E6                            l117 02EA                            l133 0375  
                          l141 031C                            l118 02EA                            l150 017D  
                          l127 02E3                            l119 02D5                            l151 0172  
                          l128 02E9                            l136 037E                            l160 01B4  
                          l152 01A5                            l153 0195                            l162 01B2  
                          l146 0143                            l139 0302                            l163 01C3  
                          l155 0192                            l147 01CE                            l156 01A4  
                          l148 017E                            l165 01C1                            l149 015E  
                          l166 01D0                            l158 01A1                            l167 01D1  
                          l159 01C6                            l168 01D1                            _GIE 005F  
                          _RA1 0029                            _RA2 002A                            u500 02B2  
                          u501 02B1                            u510 02C0                            u511 02BF  
                          u520 02C8                            u600 031A                            u521 02C7  
                          u601 0319                            u530 02CD                            u531 02CC  
                          u540 02D1                            u541 02D0                            u550 02DE  
                          u551 02DD                            u560 02E2                            u800 0167  
                          u465 0344                            u561 02E1                            u801 0166  
                          u474 034F                            u570 0364                            u810 017C  
                          u475 034D                            u571 0363                            u811 017B  
                          u580 0372                            u900 01C0                            u820 0183  
                          u485 0324                            u581 0371                            u901 01BF  
                          u821 0182                            u494 032F                            u590 0300  
                          u830 018C                            u495 032D                            u591 02FF  
                          u831 018B                            _PSA 040B                            u840 0192  
                          u760 014A                            u841 0191                            u761 0149  
                          u850 019B                            u770 0150                            u851 019A  
                          u771 014F                            u860 01A1                            u780 0155  
                          u861 01A0                            u781 0154                            u870 01AB  
                          u790 015C                            u871 01AA                            u791 015B  
                          u880 01B1                            u881 01B0                            u890 01BA  
                          u891 01B9                            fsr0 0004                            indf 0000  
                         l1021 031F                           l1031 02C0                           l1023 02AC  
                         l1041 02D8                           l1033 02C2                           l1025 02B3  
                         l1201 0139                           l1019 033F                           l1043 02DE  
                         l1035 02C8                           l1027 02B4                           l1051 0365  
                         l1211 0140                           l1203 013C                           l1045 02E3  
                         l1037 02D2                           l1029 02BB                           l1053 0366  
                         l1061 02EE                           l1221 0150                           l1213 0141  
                         l1205 013D                           l1047 02E6                           l1039 02D5  
                         l1055 036D                           l1071 02FA                           l1063 02EF  
                         l1231 0167                           l1223 0155                           l1215 0143  
                         l1207 013E                           l1057 0372                           l1049 035E  
                         l1081 030C                           l1073 0301                           l1065 02F2  
                         l1241 0183                           l1233 0169                           l1225 0156  
                         l1217 014A                           l1209 013F                           l1083 030E  
                         l1075 0303                           l1067 02F5                           l1059 02EB  
                         l1243 0185                           l1251 01A5                           l1235 0172  
                         l1227 015D                           l1219 014B                           l1085 030F  
                         l1077 0304                           l1069 02F8                           l1261 01C1  
                         l1253 01AB                           l1245 018C                           l1237 0176  
                         l1229 015E                           l1087 0314                           l1079 030B  
                         l1271 01CA                           l1263 01C3                           l1255 01B2  
                         l1247 0195                           l1239 017E                           l1191 0134  
                         l1089 031B                           l1273 01CB                           l1257 01B4  
                         l1265 01C6                           l1249 019B                           l1193 0135  
                         l1185 0126                           l1275 01CC                           l1267 01C8  
                         l1259 01BA                           l1195 0136                           l1187 012C  
                         l1277 01CD                           l1269 01C9                           l1197 0137  
                         l1189 0132                           l1199 0138                           _T0IE 005D  
                         _T0IF 005A                           _T0CS 040D                           _T0SE 040C  
                         i1l71 011C                           i1l80 0118                           i1l72 0033  
                         i1l81 0117                           i1l73 0032                           i1l74 011B  
                         i1l82 00E5                           i1l90 008A                           i1l75 011A  
                         i1l83 00B3                           i1l91 008F                           i1l92 0094  
                         i1l84 0071                           i1l76 0055                           i1l85 00E4  
                         i1l93 0099                           i1l77 0050                           i1l78 0119  
                         i1l94 009E                           i1l86 0076                           i1l95 00A3  
                         i1l87 007B                           i1l79 0060                           i1l96 00A8  
                         i1l88 0080                           i1l97 00AD                           i1l89 0085  
                         i1l98 00FC                           _TMR0 0001                           _main 0126  
                         _ctrl 0018                           btemp 004E                           start 000D  
                        ?_main 0023                          i1l100 00F3                          i1l102 00F7  
                        i1l103 0106                          i1l104 0116                          i1l105 0110  
                        i1l106 0115                          i1l107 011D                          _PORTA 0005  
                        _PORTB 0006                          u61_20 0019                          u61_21 0018  
         __end_of_codeToMatrix 0286                          u70_20 005B                          u62_20 001D  
                        u70_21 005A                          u62_21 001C                          u71_20 0066  
                        u63_20 0025                          u71_21 0065                          u63_21 0024  
                        u72_20 006F                          u64_20 0029                          u72_21 006E  
                        u64_21 0028                          u73_20 00EB                          u65_20 002D  
                        u73_21 00EA                          u65_21 002C                          _TRISB 0086  
                        u74_20 0102                          u66_20 0038                          u74_21 0101  
                        u66_21 0037                          u75_20 010C                          u67_20 003F  
                        u75_21 010B                          u67_21 003E                          u68_20 0043  
                        u68_21 0042                          u69_24 0049                          u69_25 0047  
              __end_of_keyDown 02EB                          _ps2Up 001C                __end_of_myDelay 037F  
                        _keyUp 035C                          _myIsr 0015                          _shift 0019  
              __end_of_setPort 035C                          pclath 000A                          status 0003  
                        wtemp0 004E                __initialization 000E                   __end_of_main 01D2  
                       ??_main 0030                         ?_keyUp 0023                         ?_myIsr 0023  
                       i1l1101 0025                         i1l1111 0038                         i1l1103 0029  
                       i1l1121 0060                         i1l1113 003F                         i1l1105 002D  
                       i1l1131 007B                         i1l1123 0066                         i1l1115 0043  
                       i1l1107 002F                         i1l1141 0094                         i1l1133 0080  
                       i1l1125 0070                         i1l1117 0055                         i1l1109 0033  
                       i1l1151 00AD                         i1l1143 0099                         i1l1135 0085  
                       i1l1127 0071                         i1l1119 005B                         i1l1161 00F3  
                       i1l1153 00B2                         i1l1145 009E                         i1l1137 008A  
                       i1l1129 0076                         i1l1171 010C                         i1l1147 00A3  
                       i1l1139 008F                         i1l1163 00FC                         i1l1155 00B3  
                       i1l1091 0015                         i1l1173 010D                         i1l1165 0102  
                       i1l1309 00BB                         i1l1149 00A8                         i1l1157 00E5  
                       i1l1093 0019                         i1l1175 0110                         i1l1167 0103  
                       i1l1159 00EB                         i1l1095 001D                         i1l1169 0106  
                       i1l1097 001E                         i1l1177 011C                         i1l1099 0020  
                       _TRISA0 0428                         _TRISA1 0429                         _TRISA2 042A  
                       _TRISA3 042B                         _TRISA4 042C       __end_of_sendDataToAltera 031D  
                    ??_keyDown 002E                      ??_myDelay 0000                         saved_w 004E  
                    ??_setPort 002A        __end_of__initialization 0013                 __pcstackCOMMON 0000  
                __end_of_keyUp 0376                  __end_of_myIsr 0126                        ??_keyUp 002E  
                      ??_myIsr 0023                   _ps2DataCount 001E                   _ps2DataState 0022  
                   __pbssBANK0 000C                   _ps2BitsCount 0020                   _codeToMatrix 0206  
                   __pmaintext 0126                     __pintentry 0004             __size_of_resetPort 0020  
                   __stringtab 0200  __end_of_replaceOnShiftKeyDown 02AA                        _ps2Data 001F  
                      _ps2Bits 0021                        __ptext1 02EB                        __ptext2 037E  
                      __ptext3 035C                        __ptext4 02AA                        __ptext5 033D  
                      __ptext6 031D                        __ptext7 0015                        _keyDown 02AA  
                      _myDelay 037E                        _setPort 033D                        clrloop0 0377  
         end_of_initialization 0013              __end_of_resetPort 033D              ?_sendDataToAltera 0023  
           ??_sendDataToAltera 002A                      _PORTAbits 0005                  setPort@bit_id 002D  
                   keyDown@key 002F            start_initialization 000E                      ___latbits 0000  
                __pcstackBANK0 0023                resetPort@bit_id 002D                      __pstrings 0200  
                _ps2NeedEncode 001B                       ?_keyDown 0023                       ?_myDelay 0023  
                  _ps2WaitCode 001D                       ?_setPort 0023                 __size_of_keyUp 001A  
               __size_of_myIsr 0111              interrupt_function 0004                      clear_ram0 0376  
                    _resetPort 031D          _replaceOnShiftKeyDown 0286                    __stringbase 0205  
    __size_of_sendDataToAltera 0032                     ?_resetPort 0023             __end_of__stringtab 0206  
             __size_of_keyDown 0041               __size_of_myDelay 0001               __size_of_setPort 001F  
                     _myIsr$79 0028                  __size_of_main 00AC                       _replaced 0017  
                     _outPorts 000C                       keyUp@key 002F                       intlevel1 0000  
                    stringcode 0200                    ??_resetPort 002A               _sendDataToAltera 02EB  
                     stringdir 0200                       stringtab 0200  
