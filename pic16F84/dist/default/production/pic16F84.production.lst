

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 06 11:15:58 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F84A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   102                           EEDATA equ 08h ;# 
   103  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   104                           EEADR equ 09h ;# 
   105  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   106                           PCLATH equ 0Ah ;# 
   107  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   108                           INTCON equ 0Bh ;# 
   109  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   110                           OPTION_REG equ 081h ;# 
   111  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   112                           TRISA equ 085h ;# 
   113  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   114                           TRISB equ 086h ;# 
   115  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   116                           EECON1 equ 088h ;# 
   117  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   118                           EECON2 equ 089h ;# 
   119  0089                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   120                           INDF equ 00h ;# 
   121  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   122                           TMR0 equ 01h ;# 
   123  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   124                           PCL equ 02h ;# 
   125  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   126                           STATUS equ 03h ;# 
   127  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   128                           FSR equ 04h ;# 
   129  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   130                           PORTA equ 05h ;# 
   131  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   132                           PORTB equ 06h ;# 
   133  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   134                           EEDATA equ 08h ;# 
   135  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   136                           EEADR equ 09h ;# 
   137  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   138                           PCLATH equ 0Ah ;# 
   139  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   140                           INTCON equ 0Bh ;# 
   141  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   142                           OPTION_REG equ 081h ;# 
   143  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   144                           TRISA equ 085h ;# 
   145  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   146                           TRISB equ 086h ;# 
   147  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   148                           EECON1 equ 088h ;# 
   149  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   150                           EECON2 equ 089h ;# 
   151  0089                     	FNROOT	_main
   152                           	FNCALL	intlevel1,_myIsr
   153                           	global	intlevel1
   154                           	FNROOT	intlevel1
   155                           	global	_ps2DataArray
   156                           	global	_pa
   157                           	global	_ps2DataCount
   158                           	global	_ps2DataBitsCount
   159                           	global	_ps2DataStarted
   160                           	global	_ps2Data
   161                           	global	_PORTB
   162                           _PORTB	set	0x6
   163  0006                     	global	_PORTA
   164                           _PORTA	set	0x5
   165  0005                     	global	_PORTAbits
   166                           _PORTAbits	set	0x5
   167  0005                     	global	_TMR0
   168                           _TMR0	set	0x1
   169  0001                     	global	_GIE
   170                           _GIE	set	0x5F
   171  005F                     	global	_T0IF
   172                           _T0IF	set	0x5A
   173  005A                     	global	_T0IE
   174                           _T0IE	set	0x5D
   175  005D                     	global	_TRISB
   176                           _TRISB	set	0x86
   177  0086                     	global	_PSA
   178                           _PSA	set	0x40B
   179  040B                     	global	_T0SE
   180                           _T0SE	set	0x40C
   181  040C                     	global	_T0CS
   182                           _T0CS	set	0x40D
   183  040D                     	global	_TRISA4
   184                           _TRISA4	set	0x42C
   185  042C                     	global	_TRISA3
   186                           _TRISA3	set	0x42B
   187  042B                     	global	_TRISA2
   188                           _TRISA2	set	0x42A
   189  042A                     	global	_TRISA1
   190                           _TRISA1	set	0x429
   191  0429                     	global	_TRISA0
   192                           _TRISA0	set	0x428
   193  0428                     ; #config settings
   194                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sj14."
   195                           	line	#
   196                           psect cinit,class=CODE,delta=2
   197                           global start_initialization
   198                           start_initialization:
   199  000E                     
   200                           global __initialization
   201                           __initialization:
   202  000E                     psect	bssBANK0,class=BANK0,space=1,noexec
   203                           global __pbssBANK0
   204                           __pbssBANK0:
   205  000C                     _ps2DataArray:
   206  000C                            ds      10
   207  000C                     
   208                           _pa:
   209  0016                            ds      2
   210  0016                     
   211                           _ps2DataCount:
   212  0018                            ds      1
   213  0018                     
   214                           _ps2DataBitsCount:
   215  0019                            ds      1
   216  0019                     
   217                           _ps2DataStarted:
   218  001A                            ds      1
   219  001A                     
   220                           _ps2Data:
   221  001B                            ds      1
   222  001B                     
   223                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sj14."
   224                           	line	#
   225                           psect clrtext,class=CODE,delta=2
   226                           global clear_ram0
   227                           ;	Called with FSR containing the base address, and
   228                           ;	W with the last address+1
   229                           clear_ram0:
   230  0118                     	clrwdt			;clear the watchdog before getting into this loop
   231  0118  0064               clrloop0:
   232  0119                     	clrf	indf		;clear RAM location pointed to by FSR
   233  0119  0180               	incf	fsr,f		;increment pointer
   234  011A  0A84               	xorwf	fsr,w		;XOR with final address
   235  011B  0604               	btfsc	status,2	;have we reached the end yet?
   236  011C  1903               	retlw	0		;all done for this memory range, return
   237  011D  3400               	xorwf	fsr,w		;XOR again to restore value
   238  011E  0604               	goto	clrloop0		;do the next byte
   239  011F  2919               
   240                           ; Clear objects allocated to BANK0
   241                           psect cinit,class=CODE,delta=2,merge=1
   242                           	bcf	status, 7	;select IRP bank0
   243  000E  1383               	movlw	low(__pbssBANK0)
   244  000F  300C               	movwf	fsr
   245  0010  0084               	movlw	low((__pbssBANK0)+010h)
   246  0011  301C               	fcall	clear_ram0
   247  0012  2118               psect cinit,class=CODE,delta=2,merge=1
   248                           global end_of_initialization,__end_of__initialization
   249                           
   250                           ;End of C runtime variable initialization code
   251                           
   252                           end_of_initialization:
   253  0013                     __end_of__initialization:
   254  0013                     clrf status
   255  0013  0183               ljmp _main	;jump to C main() function
   256  0014  2815               psect	cstackBANK0,class=BANK0,space=1,noexec
   257                           global __pcstackBANK0
   258                           __pcstackBANK0:
   259  001C                     ?_myIsr:	; 1 bytes @ 0x0
   260  001C                     ??_myIsr:	; 1 bytes @ 0x0
   261  001C                     ?_main:	; 1 bytes @ 0x0
   262  001C                     	ds	5
   263  001C                     ??_main:	; 1 bytes @ 0x5
   264  0021                     	ds	4
   265  0021                     	global	main@keyCode
   266                           main@keyCode:	; 2 bytes @ 0x9
   267  0025                     	ds	2
   268  0025                     	global	main@delay
   269                           main@delay:	; 4 bytes @ 0xB
   270  0027                     	ds	4
   271  0027                     	global	main@i
   272                           main@i:	; 1 bytes @ 0xF
   273  002B                     	ds	1
   274  002B                     ;!
   275                           ;!Data Sizes:
   276                           ;!    Strings     0
   277                           ;!    Constant    0
   278                           ;!    Data        0
   279                           ;!    BSS         16
   280                           ;!    Persistent  0
   281                           ;!    Stack       0
   282                           ;!
   283                           ;!Auto Spaces:
   284                           ;!    Space          Size  Autos    Used
   285                           ;!    COMMON            0      0       0
   286                           ;!    BANK0            66     16      32
   287                           
   288                           ;!
   289                           ;!Pointer List with Targets:
   290                           ;!
   291                           ;!    None.
   292                           
   293                           
   294                           ;!
   295                           ;!Critical Paths under _main in COMMON
   296                           ;!
   297                           ;!    None.
   298                           ;!
   299                           ;!Critical Paths under _myIsr in COMMON
   300                           ;!
   301                           ;!    None.
   302                           ;!
   303                           ;!Critical Paths under _main in BANK0
   304                           ;!
   305                           ;!    None.
   306                           ;!
   307                           ;!Critical Paths under _myIsr in BANK0
   308                           ;!
   309                           ;!    None.
   310                           
   311 ;;
   312 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   313 ;;
   314                           
   315                           ;!
   316                           ;!Call Graph Tables:
   317                           ;!
   318                           ;! ---------------------------------------------------------------------------------
   319                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   320                           ;! ---------------------------------------------------------------------------------
   321                           ;! (0) _main                                                11    11      0     115
   322                           ;!                                              5 BANK0     11    11      0
   323                           ;! ---------------------------------------------------------------------------------
   324                           ;! Estimated maximum stack depth 0
   325                           ;! ---------------------------------------------------------------------------------
   326                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   327                           ;! ---------------------------------------------------------------------------------
   328                           ;! (1) _myIsr                                                5     5      0       0
   329                           ;!                                              0 BANK0      5     5      0
   330                           ;! ---------------------------------------------------------------------------------
   331                           ;! Estimated maximum stack depth 1
   332                           ;! ---------------------------------------------------------------------------------
   333                           ;!
   334                           ;! Call Graph Graphs:
   335                           ;!
   336                           ;! _main (ROOT)
   337                           ;!
   338                           ;! _myIsr (ROOT)
   339                           ;!
   340                           
   341                           ;! Address spaces:
   342                           
   343                           ;!Name               Size   Autos  Total    Cost      Usage
   344                           ;!BITCOMMON            0      0       0       0        0.0%
   345                           ;!EEDATA              40      0       0       0        0.0%
   346                           ;!NULL                 0      0       0       0        0.0%
   347                           ;!CODE                 0      0       0       0        0.0%
   348                           ;!BITSFR0              0      0       0       1        0.0%
   349                           ;!SFR0                 0      0       0       1        0.0%
   350                           ;!COMMON               0      0       0       1        0.0%
   351                           ;!BITSFR1              0      0       0       2        0.0%
   352                           ;!SFR1                 0      0       0       2        0.0%
   353                           ;!STACK                0      0       0       2        0.0%
   354                           ;!BANK0               42     10      20       3       48.5%
   355                           ;!ABS                  0      0      20       4        0.0%
   356                           ;!BITBANK0            42      0       0       5        0.0%
   357                           ;!DATA                 0      0      20       6        0.0%
   358                           
   359                           	global	_main
   360                           
   361 ;; *************** function _main *****************
   362 ;; Defined at:
   363 ;;		line 85 in file "main.c"
   364 ;; Parameters:    Size  Location     Type
   365 ;;		None
   366 ;; Auto vars:     Size  Location     Type
   367 ;;  i               1   15[BANK0 ] char 
   368 ;;  keyCode         2    9[BANK0 ] int 
   369 ;;  delay           4   11[BANK0 ] unsigned long 
   370 ;; Return value:  Size  Location     Type
   371 ;;                  1    wreg      void 
   372 ;; Registers used:
   373 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   374 ;; Tracked objects:
   375 ;;		On entry : B00/0
   376 ;;		On exit  : 0/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMMON   BANK0
   379 ;;      Params:         0       0
   380 ;;      Locals:         0       7
   381 ;;      Temps:          0       4
   382 ;;      Totals:         0      11
   383 ;;Total ram usage:       11 bytes
   384 ;; Hardware stack levels required when called:    1
   385 ;; This function calls:
   386 ;;		Nothing
   387 ;; This function is called by:
   388 ;;		Startup code after reset
   389 ;; This function uses a non-reentrant model
   390 ;;
   391                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   392                           	file	"main.c"
   393                           	line	85
   394                           global __pmaintext
   395                           __pmaintext:	;psect for function _main
   396  0015                     psect	maintext
   397                           	file	"main.c"
   398                           	line	85
   399                           	global	__size_of_main
   400                           	__size_of_main	equ	__end_of_main-_main
   401  009B                     	
   402                           _main:	
   403  0015                     ;incstack = 0
   404                           	opt	stack 7
   405                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0]
   406                           	line	90
   407                           	
   408                           l780:	
   409  0015                     ;main.c: 90:     TRISA0 = 1;
   410                           	bsf	status, 5	;RP0=1, select bank1
   411  0015  1683               	bsf	(1064/8)^080h,(1064)&7	;volatile
   412  0016  1405               	line	91
   413                           ;main.c: 91:     TRISA1 = 0;
   414                           	bcf	(1065/8)^080h,(1065)&7	;volatile
   415  0017  1085               	line	92
   416                           ;main.c: 92:     TRISA2 = 0;
   417                           	bcf	(1066/8)^080h,(1066)&7	;volatile
   418  0018  1105               	line	93
   419                           ;main.c: 93:     TRISA3 = 1;
   420                           	bsf	(1067/8)^080h,(1067)&7	;volatile
   421  0019  1585               	line	94
   422                           ;main.c: 94:     TRISA4 = 1;
   423                           	bsf	(1068/8)^080h,(1068)&7	;volatile
   424  001A  1605               	line	96
   425                           	
   426                           l782:	
   427  001B                     ;main.c: 96:     PORTA = 0b00000000;
   428                           	bcf	status, 5	;RP0=0, select bank0
   429  001B  1283               	clrf	(5)	;volatile
   430  001C  0185               	line	98
   431                           ;main.c: 98:     TRISB = 0b00000000;
   432                           	bsf	status, 5	;RP0=1, select bank1
   433  001D  1683               	clrf	(134)^080h	;volatile
   434  001E  0186               	line	99
   435                           	
   436                           l784:	
   437  001F                     ;main.c: 99:     PORTB = 0b00000010;
   438                           	movlw	low(02h)
   439  001F  3002               	bcf	status, 5	;RP0=0, select bank0
   440  0020  1283               	movwf	(6)	;volatile
   441  0021  0086               	line	123
   442                           	
   443                           l786:	
   444  0022                     ;main.c: 123:     T0CS = 1;
   445                           	bsf	status, 5	;RP0=1, select bank1
   446  0022  1683               	bsf	(1037/8)^080h,(1037)&7	;volatile
   447  0023  1681               	line	124
   448                           	
   449                           l788:	
   450  0024                     ;main.c: 124:     T0SE = 1;
   451                           	bsf	(1036/8)^080h,(1036)&7	;volatile
   452  0024  1601               	line	125
   453                           	
   454                           l790:	
   455  0025                     ;main.c: 125:     GIE = 1;
   456                           	bsf	(95/8),(95)&7	;volatile
   457  0025  178B               	line	126
   458                           	
   459                           l792:	
   460  0026                     ;main.c: 126:     T0IE = 1;
   461                           	bsf	(93/8),(93)&7	;volatile
   462  0026  168B               	line	127
   463                           	
   464                           l794:	
   465  0027                     ;main.c: 127:     PSA = 1;
   466                           	bsf	(1035/8)^080h,(1035)&7	;volatile
   467  0027  1581               	line	128
   468                           	
   469                           l796:	
   470  0028                     ;main.c: 128:     T0IF = 0;
   471                           	bcf	(90/8),(90)&7	;volatile
   472  0028  110B               	line	129
   473                           	
   474                           l798:	
   475  0029                     ;main.c: 129:     TMR0 = 255;
   476                           	movlw	low(0FFh)
   477  0029  30FF               	bcf	status, 5	;RP0=0, select bank0
   478  002A  1283               	movwf	(1)	;volatile
   479  002B  0081               	line	132
   480                           ;main.c: 132:     ps2DataStarted = 0;
   481                           	clrf	(_ps2DataStarted)
   482  002C  019A               	line	133
   483                           ;main.c: 133:     ps2DataBitsCount = 0;
   484                           	clrf	(_ps2DataBitsCount)
   485  002D  0199               	line	134
   486                           ;main.c: 134:     ps2Data = 0;
   487                           	clrf	(_ps2Data)
   488  002E  019B               	goto	l800
   489  002F  2830               	line	136
   490                           ;main.c: 136:     while(1)
   491                           	
   492                           l64:	
   493  0030                     	line	138
   494                           	
   495                           l800:	
   496  0030                     ;main.c: 137:     {;main.c: 138:         if ( ps2DataCount > 0 ) {
   497                           	movf	(_ps2DataCount),w
   498  0030  0818               	xorlw	80h
   499  0031  3A80               	addlw	-((01h)^80h)
   500  0032  3E7F               	skipc
   501  0033  1C03               	goto	u261
   502  0034  2836               	goto	u260
   503  0035  2837               u261:
   504  0036                     	goto	l820
   505  0036  2875               u260:
   506  0037                     	line	139
   507                           	
   508                           l802:	
   509  0037                     ;main.c: 139:             int16_t keyCode = ps2DataArray[0];
   510                           	movf	(_ps2DataArray),w
   511  0037  080C               	movwf	(main@keyCode)
   512  0038  00A5               	clrf	(main@keyCode+1)
   513  0039  01A6               	btfsc	(main@keyCode),7
   514  003A  1BA5               	decf	(main@keyCode+1),f
   515  003B  03A6               	line	140
   516                           	
   517                           l804:	
   518  003C                     ;main.c: 140:             for(int8_t i = 0; i < ps2DataCount; i++) {
   519                           	clrf	(main@i)
   520  003C  01AB               	goto	l810
   521  003D  284F               	
   522                           l67:	
   523  003E                     	line	141
   524                           	
   525                           l806:	
   526  003E                     ;main.c: 141:                 ps2DataArray[i] = ps2DataArray[i-1];
   527                           	movf	(main@i),w
   528  003E  082B               	addlw	0FFh
   529  003F  3EFF               	addlw	low(_ps2DataArray|((0x0)<<8))&0ffh
   530  0040  3E0C               	movwf	fsr0
   531  0041  0084               	bcf	status, 7	;select IRP bank0
   532  0042  1383               	movf	indf,w
   533  0043  0800               	movwf	(??_main+0)+0
   534  0044  00A1               	movf	(main@i),w
   535  0045  082B               	addlw	low(_ps2DataArray|((0x0)<<8))&0ffh
   536  0046  3E0C               	movwf	fsr0
   537  0047  0084               	movf	(??_main+0)+0,w
   538  0048  0821               	movwf	indf
   539  0049  0080               	line	142
   540                           	
   541                           l808:	
   542  004A                     ;main.c: 142:             }
   543                           	movlw	low(01h)
   544  004A  3001               	movwf	(??_main+0)+0
   545  004B  00A1               	movf	(??_main+0)+0,w
   546  004C  0821               	addwf	(main@i),f
   547  004D  07AB               	goto	l810
   548  004E  284F               	
   549                           l66:	
   550  004F                     	
   551                           l810:	
   552  004F                     	movf	(main@i),w
   553  004F  082B               	xorlw	80h
   554  0050  3A80               	movwf	(??_main+0)+0
   555  0051  00A1               	movf	(_ps2DataCount),w
   556  0052  0818               	xorlw	80h
   557  0053  3A80               	subwf	(??_main+0)+0
   558  0054  02A1               	skipc
   559  0055  1C03               	goto	u271
   560  0056  2858               	goto	u270
   561  0057  2859               u271:
   562  0058                     	goto	l806
   563  0058  283E               u270:
   564  0059                     	goto	l812
   565  0059  285A               	
   566                           l68:	
   567  005A                     	line	143
   568                           	
   569                           l812:	
   570  005A                     ;main.c: 143:             ps2DataCount--;
   571                           	movlw	low(-1)
   572  005A  30FF               	movwf	(??_main+0)+0
   573  005B  00A1               	movf	(??_main+0)+0,w
   574  005C  0821               	addwf	(_ps2DataCount),f
   575  005D  0798               	line	145
   576                           ;main.c: 145:             if ( keyCode == 0x1a ) {
   577                           		movlw	26
   578  005E  301A               	xorwf	((main@keyCode)),w
   579  005F  0625               iorwf	((main@keyCode+1)),w
   580  0060  0426               	btfss	status,2
   581  0061  1D03               	goto	u281
   582  0062  2864               	goto	u280
   583  0063  2865               u281:
   584  0064                     	goto	l820
   585  0064  2875               u280:
   586  0065                     	line	146
   587                           	
   588                           l814:	
   589  0065                     ;main.c: 146:                if (pa) {
   590                           	movf	((_pa)),w
   591  0065  0816               iorwf	((_pa+1)),w
   592  0066  0417               	btfsc	status,2
   593  0067  1903               	goto	u291
   594  0068  286A               	goto	u290
   595  0069  286B               u291:
   596  006A                     	goto	l818
   597  006A  286E               u290:
   598  006B                     	line	147
   599                           	
   600                           l816:	
   601  006B                     ;main.c: 147:                     pa = 0;
   602                           	clrf	(_pa)
   603  006B  0196               	clrf	(_pa+1)
   604  006C  0197               	line	148
   605                           ;main.c: 148:                 } else {
   606                           	goto	l820
   607  006D  2875               	
   608                           l70:	
   609  006E                     	line	149
   610                           	
   611                           l818:	
   612  006E                     ;main.c: 149:                     pa = 1;
   613                           	movlw	01h
   614  006E  3001               	movwf	(_pa)
   615  006F  0096               	movlw	0
   616  0070  3000               	movwf	((_pa))+1
   617  0071  0097               	goto	l820
   618  0072  2875               	line	150
   619                           ;main.c: 150:                 }
   620                           	
   621                           l71:	
   622  0073                     	goto	l820
   623  0073  2875               	line	151
   624                           ;main.c: 151:             }
   625                           	
   626                           l69:	
   627  0074                     	goto	l820
   628  0074  2875               	line	152
   629                           ;main.c: 152:         }
   630                           	
   631                           l65:	
   632  0075                     	line	155
   633                           	
   634                           l820:	
   635  0075                     ;main.c: 155:         if ( pa ) {
   636                           	movf	((_pa)),w
   637  0075  0816               iorwf	((_pa+1)),w
   638  0076  0417               	btfsc	status,2
   639  0077  1903               	goto	u301
   640  0078  287A               	goto	u300
   641  0079  287B               u301:
   642  007A                     	goto	l824
   643  007A  287D               u300:
   644  007B                     	line	156
   645                           	
   646                           l822:	
   647  007B                     ;main.c: 156:             PORTB = 0b00000000;
   648                           	clrf	(6)	;volatile
   649  007B  0186               	line	157
   650                           ;main.c: 157:         } else {
   651                           	goto	l73
   652  007C  287F               	
   653                           l72:	
   654  007D                     	line	158
   655                           	
   656                           l824:	
   657  007D                     ;main.c: 158:             PORTB = 0b00000010;
   658                           	movlw	low(02h)
   659  007D  3002               	movwf	(6)	;volatile
   660  007E  0086               	line	159
   661                           ;main.c: 159:         }
   662                           	
   663                           l73:	
   664  007F                     	line	162
   665                           ;main.c: 162:         uint32_t delay = 30000;
   666                           	movlw	0
   667  007F  3000               	movwf	(main@delay+3)
   668  0080  00AA               	movlw	0
   669  0081  3000               	movwf	(main@delay+2)
   670  0082  00A9               	movlw	075h
   671  0083  3075               	movwf	(main@delay+1)
   672  0084  00A8               	movlw	030h
   673  0085  3030               	movwf	(main@delay)
   674  0086  00A7               
   675                           	line	163
   676                           ;main.c: 163:         while(delay > 0 ) {
   677                           	goto	l74
   678  0087  28A4               	
   679                           l75:	
   680  0088                     	line	164
   681                           	
   682                           l826:	
   683  0088                     ;main.c: 164:             delay--;
   684                           	movlw	01h
   685  0088  3001               	movwf	((??_main+0)+0)
   686  0089  00A1               	movlw	0
   687  008A  3000               	movwf	((??_main+0)+0+1)
   688  008B  00A2               	movlw	0
   689  008C  3000               	movwf	((??_main+0)+0+2)
   690  008D  00A3               	movlw	0
   691  008E  3000               	movwf	((??_main+0)+0+3)
   692  008F  00A4               	movf	0+(??_main+0)+0,w
   693  0090  0821               	subwf	(main@delay),f
   694  0091  02A7               	movf	1+(??_main+0)+0,w
   695  0092  0822               	skipc
   696  0093  1C03               	incfsz	1+(??_main+0)+0,w
   697  0094  0F22               	goto	u315
   698  0095  2897               	goto	u316
   699  0096  2898               u315:
   700  0097                     	subwf	(main@delay+1),f
   701  0097  02A8               u316:
   702  0098                     	movf	2+(??_main+0)+0,w
   703  0098  0823               	skipc
   704  0099  1C03               	incfsz	2+(??_main+0)+0,w
   705  009A  0F23               	goto	u317
   706  009B  289D               	goto	u318
   707  009C  289E               u317:
   708  009D                     	subwf	(main@delay+2),f
   709  009D  02A9               u318:
   710  009E                     	movf	3+(??_main+0)+0,w
   711  009E  0824               	skipc
   712  009F  1C03               	incfsz	3+(??_main+0)+0,w
   713  00A0  0F24               	goto	u319
   714  00A1  28A3               	goto	u310
   715  00A2  28A4               u319:
   716  00A3                     	subwf	(main@delay+3),f
   717  00A3  02AA               u310:
   718  00A4                     
   719                           	line	165
   720                           ;main.c: 165:         }
   721                           	
   722                           l74:	
   723  00A4                     	line	163
   724                           ;main.c: 163:         while(delay > 0 ) {
   725                           	movf	(main@delay+3),w
   726  00A4  082A               	iorwf	(main@delay+2),w
   727  00A5  0429               	iorwf	(main@delay+1),w
   728  00A6  0428               	iorwf	(main@delay),w
   729  00A7  0427               	skipz
   730  00A8  1D03               	goto	u321
   731  00A9  28AB               	goto	u320
   732  00AA  28AC               u321:
   733  00AB                     	goto	l826
   734  00AB  2888               u320:
   735  00AC                     	goto	l800
   736  00AC  2830               	
   737                           l76:	
   738  00AD                     	goto	l800
   739  00AD  2830               	line	167
   740                           ;main.c: 167:     }
   741                           	
   742                           l77:	
   743  00AE                     	goto	l800
   744  00AE  2830               	
   745                           l78:	
   746  00AF                     	line	169
   747                           	
   748                           l79:	
   749  00AF                     	global	start
   750                           	ljmp	start
   751  00AF  280D               	opt stack 0
   752                           GLOBAL	__end_of_main
   753                           	__end_of_main:
   754  00B0                     	signat	_main,89
   755                           	global	_myIsr
   756                           
   757 ;; *************** function _myIsr *****************
   758 ;; Defined at:
   759 ;;		line 39 in file "main.c"
   760 ;; Parameters:    Size  Location     Type
   761 ;;		None
   762 ;; Auto vars:     Size  Location     Type
   763 ;;		None
   764 ;; Return value:  Size  Location     Type
   765 ;;                  1    wreg      void 
   766 ;; Registers used:
   767 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   768 ;; Tracked objects:
   769 ;;		On entry : 0/0
   770 ;;		On exit  : 0/0
   771 ;;		Unchanged: 0/0
   772 ;; Data sizes:     COMMON   BANK0
   773 ;;      Params:         0       0
   774 ;;      Locals:         0       0
   775 ;;      Temps:          0       5
   776 ;;      Totals:         0       5
   777 ;;Total ram usage:        5 bytes
   778 ;; Hardware stack levels used:    1
   779 ;; This function calls:
   780 ;;		Nothing
   781 ;; This function is called by:
   782 ;;		Interrupt level 1
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
   786                           	line	39
   787                           global __ptext1
   788                           __ptext1:	;psect for function _myIsr
   789  00B0                     psect	text1
   790                           	file	"main.c"
   791                           	line	39
   792                           	global	__size_of_myIsr
   793                           	__size_of_myIsr	equ	__end_of_myIsr-_myIsr
   794  0068                     	
   795                           _myIsr:	
   796  00B0                     ;incstack = 0
   797                           	opt	stack 7
   798                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0]
   799                           psect	intentry,class=CODE,delta=2
   800                           global __pintentry
   801                           __pintentry:
   802  0004                     global interrupt_function
   803                           interrupt_function:
   804  0004                     	global saved_w
   805                           	saved_w	set	btemp+0
   806  004E                     	movwf	saved_w
   807  0004  00CE               	swapf	status,w
   808  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
   809  0006  1283               	movwf	(??_myIsr+2)
   810  0007  009E               	movf	fsr0,w
   811  0008  0804               	movwf	(??_myIsr+3)
   812  0009  009F               	movf	pclath,w
   813  000A  080A               	movwf	(??_myIsr+4)
   814  000B  00A0               	ljmp	_myIsr
   815  000C  28B0               psect	text1
   816                           	line	42
   817                           	
   818                           i1l740:	
   819  00B0                     ;main.c: 42:     if(T0IE && T0IF){
   820                           	btfss	(93/8),(93)&7	;volatile
   821  00B0  1E8B               	goto	u17_21
   822  00B1  28B3               	goto	u17_20
   823  00B2  28B4               u17_21:
   824  00B3                     	goto	i1l52
   825  00B3  290F               u17_20:
   826  00B4                     	
   827                           i1l742:	
   828  00B4                     	btfss	(90/8),(90)&7	;volatile
   829  00B4  1D0B               	goto	u18_21
   830  00B5  28B7               	goto	u18_20
   831  00B6  28B8               u18_21:
   832  00B7                     	goto	i1l52
   833  00B7  290F               u18_20:
   834  00B8                     	line	44
   835                           	
   836                           i1l744:	
   837  00B8                     ;main.c: 44:         T0IF=0;
   838                           	bcf	(90/8),(90)&7	;volatile
   839  00B8  110B               	line	45
   840                           	
   841                           i1l746:	
   842  00B9                     ;main.c: 45:         TMR0 = 255;
   843                           	movlw	low(0FFh)
   844  00B9  30FF               	movwf	(1)	;volatile
   845  00BA  0081               	line	47
   846                           	
   847                           i1l748:	
   848  00BB                     ;main.c: 47:         if ( !ps2DataStarted ) {
   849                           	movf	((_ps2DataStarted)),w
   850  00BB  081A               	btfss	status,2
   851  00BC  1D03               	goto	u19_21
   852  00BD  28BF               	goto	u19_20
   853  00BE  28C0               u19_21:
   854  00BF                     	goto	i1l758
   855  00BF  28CB               u19_20:
   856  00C0                     	line	48
   857                           	
   858                           i1l750:	
   859  00C0                     ;main.c: 48:             if ( !PORTAbits.RA4 ) {
   860                           	btfsc	(5),4	;volatile
   861  00C0  1A05               	goto	u20_21
   862  00C1  28C3               	goto	u20_20
   863  00C2  28C4               u20_21:
   864  00C3                     	goto	i1l52
   865  00C3  290F               u20_20:
   866  00C4                     	line	49
   867                           	
   868                           i1l752:	
   869  00C4                     ;main.c: 49:                 ps2DataBitsCount = 0;
   870                           	clrf	(_ps2DataBitsCount)
   871  00C4  0199               	line	50
   872                           ;main.c: 50:                 ps2Data = 0;
   873                           	clrf	(_ps2Data)
   874  00C5  019B               	line	51
   875                           	
   876                           i1l754:	
   877  00C6                     ;main.c: 51:                 ps2DataStarted = 1;
   878                           	clrf	(_ps2DataStarted)
   879  00C6  019A               	incf	(_ps2DataStarted),f
   880  00C7  0A9A               	goto	i1l52
   881  00C8  290F               	line	52
   882                           	
   883                           i1l756:	
   884  00C9                     ;main.c: 52:                 return;
   885                           	goto	i1l52
   886  00C9  290F               	line	53
   887                           ;main.c: 53:             }
   888                           	
   889                           i1l51:	
   890  00CA                     	line	54
   891                           ;main.c: 54:         } else if ( ps2DataBitsCount < 8 ) {
   892                           	goto	i1l52
   893  00CA  290F               	
   894                           i1l50:	
   895  00CB                     	
   896                           i1l758:	
   897  00CB                     	movf	(_ps2DataBitsCount),w
   898  00CB  0819               	xorlw	80h
   899  00CC  3A80               	addlw	-((08h)^80h)
   900  00CD  3E78               	skipnc
   901  00CE  1803               	goto	u21_21
   902  00CF  28D1               	goto	u21_20
   903  00D0  28D2               u21_21:
   904  00D1                     	goto	i1l768
   905  00D1  28EA               u21_20:
   906  00D2                     	line	55
   907                           	
   908                           i1l760:	
   909  00D2                     ;main.c: 55:             if ( PORTAbits.RA3 ) {
   910                           	btfss	(5),3	;volatile
   911  00D2  1D85               	goto	u22_21
   912  00D3  28D5               	goto	u22_20
   913  00D4  28D6               u22_21:
   914  00D5                     	goto	i1l55
   915  00D5  28E3               u22_20:
   916  00D6                     	line	56
   917                           	
   918                           i1l762:	
   919  00D6                     ;main.c: 56:                 ps2Data |= ( 1 << ps2DataBitsCount );
   920                           	movlw	low(01h)
   921  00D6  3001               	movwf	(??_myIsr+0)+0
   922  00D7  009C               	incf	(_ps2DataBitsCount),w
   923  00D8  0A19               	goto	u23_24
   924  00D9  28DC               u23_25:
   925  00DA                     	clrc
   926  00DA  1003               	rlf	(??_myIsr+0)+0,f
   927  00DB  0D9C               u23_24:
   928  00DC                     	addlw	-1
   929  00DC  3EFF               	skipz
   930  00DD  1D03               	goto	u23_25
   931  00DE  28DA               	movf	0+(??_myIsr+0)+0,w
   932  00DF  081C               	movwf	(??_myIsr+1)+0
   933  00E0  009D               	movf	(??_myIsr+1)+0,w
   934  00E1  081D               	iorwf	(_ps2Data),f
   935  00E2  049B               	line	57
   936                           ;main.c: 57:             }
   937                           	
   938                           i1l55:	
   939  00E3                     	line	58
   940                           ;main.c: 58:             ps2DataBitsCount++;
   941                           	movlw	low(01h)
   942  00E3  3001               	movwf	(??_myIsr+0)+0
   943  00E4  009C               	movf	(??_myIsr+0)+0,w
   944  00E5  081C               	addwf	(_ps2DataBitsCount),f
   945  00E6  0799               	goto	i1l52
   946  00E7  290F               	line	59
   947                           	
   948                           i1l764:	
   949  00E8                     ;main.c: 59:             return;
   950                           	goto	i1l52
   951  00E8  290F               	line	60
   952                           	
   953                           i1l766:	
   954  00E9                     ;main.c: 60:         } else if ( ps2DataBitsCount == 8 ) {
   955                           	goto	i1l52
   956  00E9  290F               	
   957                           i1l54:	
   958  00EA                     	
   959                           i1l768:	
   960  00EA                     		movlw	8
   961  00EA  3008               	xorwf	((_ps2DataBitsCount)),w
   962  00EB  0619               	btfss	status,2
   963  00EC  1D03               	goto	u24_21
   964  00ED  28EF               	goto	u24_20
   965  00EE  28F0               u24_21:
   966  00EF                     	goto	i1l778
   967  00EF  2909               u24_20:
   968  00F0                     	line	61
   969                           	
   970                           i1l770:	
   971  00F0                     ;main.c: 61:             ps2DataBitsCount++;
   972                           	movlw	low(01h)
   973  00F0  3001               	movwf	(??_myIsr+0)+0
   974  00F1  009C               	movf	(??_myIsr+0)+0,w
   975  00F2  081C               	addwf	(_ps2DataBitsCount),f
   976  00F3  0799               	line	62
   977                           	
   978                           i1l772:	
   979  00F4                     ;main.c: 62:             if ( ps2DataCount < 10 ) {
   980                           	movf	(_ps2DataCount),w
   981  00F4  0818               	xorlw	80h
   982  00F5  3A80               	addlw	-((0Ah)^80h)
   983  00F6  3E76               	skipnc
   984  00F7  1803               	goto	u25_21
   985  00F8  28FA               	goto	u25_20
   986  00F9  28FB               u25_21:
   987  00FA                     	goto	i1l52
   988  00FA  290F               u25_20:
   989  00FB                     	line	63
   990                           	
   991                           i1l774:	
   992  00FB                     ;main.c: 63:                 ps2DataArray[ps2DataCount] = ps2Data;
   993                           	movf	(_ps2Data),w
   994  00FB  081B               	movwf	(??_myIsr+0)+0
   995  00FC  009C               	movf	(_ps2DataCount),w
   996  00FD  0818               	addlw	low(_ps2DataArray|((0x0)<<8))&0ffh
   997  00FE  3E0C               	movwf	fsr0
   998  00FF  0084               	movf	(??_myIsr+0)+0,w
   999  0100  081C               	bcf	status, 7	;select IRP bank0
  1000  0101  1383               	movwf	indf
  1001  0102  0080               	line	64
  1002                           	
  1003                           i1l776:	
  1004  0103                     ;main.c: 64:                 ps2DataCount++;
  1005                           	movlw	low(01h)
  1006  0103  3001               	movwf	(??_myIsr+0)+0
  1007  0104  009C               	movf	(??_myIsr+0)+0,w
  1008  0105  081C               	addwf	(_ps2DataCount),f
  1009  0106  0798               	goto	i1l52
  1010  0107  290F               	line	65
  1011                           ;main.c: 65:             }
  1012                           	
  1013                           i1l58:	
  1014  0108                     	line	66
  1015                           ;main.c: 66:         } else {
  1016                           	goto	i1l52
  1017  0108  290F               	
  1018                           i1l57:	
  1019  0109                     	line	67
  1020                           	
  1021                           i1l778:	
  1022  0109                     ;main.c: 67:             ps2DataStarted = 0;
  1023                           	clrf	(_ps2DataStarted)
  1024  0109  019A               	line	68
  1025                           ;main.c: 68:             ps2DataBitsCount = 0;
  1026                           	clrf	(_ps2DataBitsCount)
  1027  010A  0199               	goto	i1l52
  1028  010B  290F               	line	69
  1029                           ;main.c: 69:         }
  1030                           	
  1031                           i1l59:	
  1032  010C                     	goto	i1l52
  1033  010C  290F               	
  1034                           i1l56:	
  1035  010D                     	goto	i1l52
  1036  010D  290F               	
  1037                           i1l53:	
  1038  010E                     	goto	i1l52
  1039  010E  290F               	line	71
  1040                           ;main.c: 71:     }
  1041                           	
  1042                           i1l49:	
  1043  010F                     	line	73
  1044                           	
  1045                           i1l52:	
  1046  010F                     	movf	(??_myIsr+4),w
  1047  010F  0820               	movwf	pclath
  1048  0110  008A               	movf	(??_myIsr+3),w
  1049  0111  081F               	movwf	fsr0
  1050  0112  0084               	swapf	(??_myIsr+2)^00h,w
  1051  0113  0E1E               	movwf	status
  1052  0114  0083               	swapf	saved_w,f
  1053  0115  0ECE               	swapf	saved_w,w
  1054  0116  0E4E               	retfie
  1055  0117  0009               	opt stack 0
  1056                           GLOBAL	__end_of_myIsr
  1057                           	__end_of_myIsr:
  1058  0118                     	signat	_myIsr,89
  1059                           global	___latbits
  1060                           ___latbits	equ	0
  1061  0000                     	global	btemp
  1062                           	btemp set 04Eh
  1063  004E                     
  1064                           	DABS	1,78,2	;btemp
  1065                           	global	wtemp0
  1066                           	wtemp0 set btemp+0
  1067  004E                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     16      32

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0     115
                                              5 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _myIsr                                                5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     10      20       3       48.5%
ABS                  0      0      20       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      20       6        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 06 11:15:58 2018

                     l70 006E                       l71 0073                       l72 007D  
                     l64 0030                       l73 007F                       l65 0075  
                     l74 00A4                       l66 004F                       l75 0088  
                     l67 003E                       l76 00AD                       l68 005A  
                     l77 00AE                       l69 0074                       l78 00AF  
                     l79 00AF                       _pa 0016                       fsr 0004  
                    l800 0030                      l810 004F                      l802 0037  
                    l812 005A                      l804 003C                      l820 0075  
                    l822 007B                      l814 0065                      l806 003E  
                    l824 007D                      l816 006B                      l808 004A  
                    l826 0088                      l818 006E                      l780 0015  
                    l790 0025                      l782 001B                      l792 0026  
                    l784 001F                      l794 0027                      l786 0022  
                    l796 0028                      l788 0024                      l798 0029  
                    _GIE 005F                      u300 007B                      u301 007A  
                    u310 00A4                      u320 00AC                      u321 00AB  
                    u315 0097                      u316 0098                      u260 0037  
                    u317 009D                      u261 0036                      u318 009E  
                    u270 0059                      u319 00A3                      u271 0058  
                    u280 0065                      u281 0064                      u290 006B  
                    u291 006A                      _PSA 040B                      fsr0 0004  
                    indf 0000              main@keyCode 0025                     _T0IE 005D  
                   _T0IF 005A                     _T0CS 040D                     _T0SE 040C  
                   i1l50 00CB                     i1l51 00CA                     i1l52 010F  
                   i1l53 010E                     i1l54 00EA                     i1l55 00E3  
                   i1l56 010D                     i1l49 010F                     i1l57 0109  
                   i1l58 0108                     i1l59 010C                     _TMR0 0001  
                   _main 0015                     btemp 004E                     start 000D  
                  ?_main 001C                    i1l740 00B0                    i1l750 00C0  
                  i1l742 00B4                    i1l760 00D2                    i1l752 00C4  
                  i1l744 00B8                    i1l770 00F0                    i1l762 00D6  
                  i1l754 00C6                    i1l746 00B9                    i1l772 00F4  
                  i1l764 00E8                    i1l756 00C9                    i1l748 00BB  
                  i1l774 00FB                    i1l766 00E9                    i1l758 00CB  
                  i1l776 0103                    i1l768 00EA                    i1l778 0109  
                  u20_20 00C4                    u20_21 00C3                    u21_20 00D2  
                  u21_21 00D1                    u22_20 00D6                    u22_21 00D5  
                  u23_24 00DC                    u23_25 00DA                    u24_20 00F0  
                  u24_21 00EF                    u25_20 00FB                    u17_20 00B4  
                  u25_21 00FA                    u17_21 00B3                    u18_20 00B8  
                  u18_21 00B7                    u19_20 00C0                    u19_21 00BF  
                  _PORTA 0005                    _PORTB 0006                    _TRISB 0086  
                  _myIsr 00B0                    main@i 002B                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000E  
           __end_of_main 00B0                   ??_main 0021                   ?_myIsr 001C  
                 _TRISA0 0428                   _TRISA1 0429                   _TRISA2 042A  
                 _TRISA3 042B                   _TRISA4 042C                   saved_w 004E  
         _ps2DataStarted 001A  __end_of__initialization 0013            __end_of_myIsr 0118  
                ??_myIsr 001C             _ps2DataArray 000C             _ps2DataCount 0018  
             __pbssBANK0 000C               __pmaintext 0015               __pintentry 0004  
                _ps2Data 001B                  __ptext1 00B0                  clrloop0 0119  
   end_of_initialization 0013                _PORTAbits 0005      start_initialization 000E  
              ___latbits 0000            __pcstackBANK0 001C           __size_of_myIsr 0068  
      interrupt_function 0004                clear_ram0 0118                main@delay 0027  
          __size_of_main 009B         _ps2DataBitsCount 0019                 intlevel1 0000  
