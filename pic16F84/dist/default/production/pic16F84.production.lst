

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 06 14:35:09 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F84A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   102                           EEDATA equ 08h ;# 
   103  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   104                           EEADR equ 09h ;# 
   105  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   106                           PCLATH equ 0Ah ;# 
   107  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   108                           INTCON equ 0Bh ;# 
   109  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   110                           OPTION_REG equ 081h ;# 
   111  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   112                           TRISA equ 085h ;# 
   113  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   114                           TRISB equ 086h ;# 
   115  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   116                           EECON1 equ 088h ;# 
   117  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   118                           EECON2 equ 089h ;# 
   119  0089                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   120                           INDF equ 00h ;# 
   121  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   122                           TMR0 equ 01h ;# 
   123  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   124                           PCL equ 02h ;# 
   125  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   126                           STATUS equ 03h ;# 
   127  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   128                           FSR equ 04h ;# 
   129  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   130                           PORTA equ 05h ;# 
   131  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   132                           PORTB equ 06h ;# 
   133  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   134                           EEDATA equ 08h ;# 
   135  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   136                           EEADR equ 09h ;# 
   137  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   138                           PCLATH equ 0Ah ;# 
   139  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   140                           INTCON equ 0Bh ;# 
   141  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   142                           OPTION_REG equ 081h ;# 
   143  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   144                           TRISA equ 085h ;# 
   145  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   146                           TRISB equ 086h ;# 
   147  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   148                           EECON1 equ 088h ;# 
   149  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   150                           EECON2 equ 089h ;# 
   151  0089                     	FNROOT	_main
   152                           	FNCALL	intlevel1,_myIsr
   153                           	global	intlevel1
   154                           	FNROOT	intlevel1
   155                           	global	_ps2Data
   156                           	global	_pa
   157                           	global	_ps2DataCount
   158                           	global	_ps2BitsCount
   159                           	global	_ps2Bits
   160                           	global	_ps2DataState
   161                           	global	_PORTB
   162                           _PORTB	set	0x6
   163  0006                     	global	_PORTA
   164                           _PORTA	set	0x5
   165  0005                     	global	_PORTAbits
   166                           _PORTAbits	set	0x5
   167  0005                     	global	_TMR0
   168                           _TMR0	set	0x1
   169  0001                     	global	_GIE
   170                           _GIE	set	0x5F
   171  005F                     	global	_T0IF
   172                           _T0IF	set	0x5A
   173  005A                     	global	_T0IE
   174                           _T0IE	set	0x5D
   175  005D                     	global	_TRISB
   176                           _TRISB	set	0x86
   177  0086                     	global	_PSA
   178                           _PSA	set	0x40B
   179  040B                     	global	_T0SE
   180                           _T0SE	set	0x40C
   181  040C                     	global	_T0CS
   182                           _T0CS	set	0x40D
   183  040D                     	global	_TRISA4
   184                           _TRISA4	set	0x42C
   185  042C                     	global	_TRISA3
   186                           _TRISA3	set	0x42B
   187  042B                     	global	_TRISA2
   188                           _TRISA2	set	0x42A
   189  042A                     	global	_TRISA1
   190                           _TRISA1	set	0x429
   191  0429                     	global	_TRISA0
   192                           _TRISA0	set	0x428
   193  0428                     ; #config settings
   194                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sevo."
   195                           	line	#
   196                           psect cinit,class=CODE,delta=2
   197                           global start_initialization
   198                           start_initialization:
   199  000E                     
   200                           global __initialization
   201                           __initialization:
   202  000E                     psect	bssBANK0,class=BANK0,space=1,noexec
   203                           global __pbssBANK0
   204                           __pbssBANK0:
   205  000C                     _ps2Data:
   206  000C                            ds      8
   207  000C                     
   208                           _delay:
   209  0014                            ds      4
   210  0014                     
   211                           _pa:
   212  0018                            ds      2
   213  0018                     
   214                           _keyCode:
   215  001A                            ds      2
   216  001A                     
   217                           _i:
   218  001C                            ds      1
   219  001C                     
   220                           _ps2DataCount:
   221  001D                            ds      1
   222  001D                     
   223                           _ps2BitsCount:
   224  001E                            ds      1
   225  001E                     
   226                           _ps2Bits:
   227  001F                            ds      1
   228  001F                     
   229                           _ps2DataState:
   230  0020                            ds      1
   231  0020                     
   232                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sevo."
   233                           	line	#
   234                           psect clrtext,class=CODE,delta=2
   235                           global clear_ram0
   236                           ;	Called with FSR containing the base address, and
   237                           ;	W with the last address+1
   238                           clear_ram0:
   239  00FB                     	clrwdt			;clear the watchdog before getting into this loop
   240  00FB  0064               clrloop0:
   241  00FC                     	clrf	indf		;clear RAM location pointed to by FSR
   242  00FC  0180               	incf	fsr,f		;increment pointer
   243  00FD  0A84               	xorwf	fsr,w		;XOR with final address
   244  00FE  0604               	btfsc	status,2	;have we reached the end yet?
   245  00FF  1903               	retlw	0		;all done for this memory range, return
   246  0100  3400               	xorwf	fsr,w		;XOR again to restore value
   247  0101  0604               	goto	clrloop0		;do the next byte
   248  0102  28FC               
   249                           ; Clear objects allocated to BANK0
   250                           psect cinit,class=CODE,delta=2,merge=1
   251                           	bcf	status, 7	;select IRP bank0
   252  000E  1383               	movlw	low(__pbssBANK0)
   253  000F  300C               	movwf	fsr
   254  0010  0084               	movlw	low((__pbssBANK0)+015h)
   255  0011  3021               	fcall	clear_ram0
   256  0012  20FB               psect cinit,class=CODE,delta=2,merge=1
   257                           global end_of_initialization,__end_of__initialization
   258                           
   259                           ;End of C runtime variable initialization code
   260                           
   261                           end_of_initialization:
   262  0013                     __end_of__initialization:
   263  0013                     clrf status
   264  0013  0183               ljmp _main	;jump to C main() function
   265  0014  28A0               psect	cstackCOMMON,class=COMMON,space=1,noexec
   266                           global __pcstackCOMMON
   267                           __pcstackCOMMON:
   268  0000                     ??_main:	; 1 bytes @ 0x0
   269  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   270                           global __pcstackBANK0
   271                           __pcstackBANK0:
   272  0021                     ?_myIsr:	; 1 bytes @ 0x0
   273  0021                     ??_myIsr:	; 1 bytes @ 0x0
   274  0021                     ?_main:	; 1 bytes @ 0x0
   275  0021                     	ds	5
   276  0021                     ;!
   277                           ;!Data Sizes:
   278                           ;!    Strings     0
   279                           ;!    Constant    0
   280                           ;!    Data        0
   281                           ;!    BSS         21
   282                           ;!    Persistent  0
   283                           ;!    Stack       0
   284                           ;!
   285                           ;!Auto Spaces:
   286                           ;!    Space          Size  Autos    Used
   287                           ;!    COMMON            0      0       0
   288                           ;!    BANK0            66      5      26
   289                           
   290                           ;!
   291                           ;!Pointer List with Targets:
   292                           ;!
   293                           ;!    None.
   294                           
   295                           
   296                           ;!
   297                           ;!Critical Paths under _main in COMMON
   298                           ;!
   299                           ;!    None.
   300                           ;!
   301                           ;!Critical Paths under _myIsr in COMMON
   302                           ;!
   303                           ;!    None.
   304                           ;!
   305                           ;!Critical Paths under _main in BANK0
   306                           ;!
   307                           ;!    None.
   308                           ;!
   309                           ;!Critical Paths under _myIsr in BANK0
   310                           ;!
   311                           ;!    None.
   312                           
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   315 ;;
   316                           
   317                           ;!
   318                           ;!Call Graph Tables:
   319                           ;!
   320                           ;! ---------------------------------------------------------------------------------
   321                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   322                           ;! ---------------------------------------------------------------------------------
   323                           ;! (0) _main                                                 0     0      0       0
   324                           ;! ---------------------------------------------------------------------------------
   325                           ;! Estimated maximum stack depth 0
   326                           ;! ---------------------------------------------------------------------------------
   327                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   328                           ;! ---------------------------------------------------------------------------------
   329                           ;! (1) _myIsr                                                5     5      0       0
   330                           ;!                                              0 BANK0      5     5      0
   331                           ;! ---------------------------------------------------------------------------------
   332                           ;! Estimated maximum stack depth 1
   333                           ;! ---------------------------------------------------------------------------------
   334                           ;!
   335                           ;! Call Graph Graphs:
   336                           ;!
   337                           ;! _main (ROOT)
   338                           ;!
   339                           ;! _myIsr (ROOT)
   340                           ;!
   341                           
   342                           ;! Address spaces:
   343                           
   344                           ;!Name               Size   Autos  Total    Cost      Usage
   345                           ;!BITCOMMON            0      0       0       0        0.0%
   346                           ;!EEDATA              40      0       0       0        0.0%
   347                           ;!NULL                 0      0       0       0        0.0%
   348                           ;!CODE                 0      0       0       0        0.0%
   349                           ;!BITSFR0              0      0       0       1        0.0%
   350                           ;!SFR0                 0      0       0       1        0.0%
   351                           ;!COMMON               0      0       0       1        0.0%
   352                           ;!BITSFR1              0      0       0       2        0.0%
   353                           ;!SFR1                 0      0       0       2        0.0%
   354                           ;!STACK                0      0       0       2        0.0%
   355                           ;!BANK0               42      5      1A       3       39.4%
   356                           ;!ABS                  0      0      1A       4        0.0%
   357                           ;!BITBANK0            42      0       0       5        0.0%
   358                           ;!DATA                 0      0      1A       6        0.0%
   359                           
   360                           	global	_main
   361                           
   362 ;; *************** function _main *****************
   363 ;; Defined at:
   364 ;;		line 88 in file "main.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;		None
   367 ;; Auto vars:     Size  Location     Type
   368 ;;		None
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, status,2, status,0
   373 ;; Tracked objects:
   374 ;;		On entry : B00/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMMON   BANK0
   378 ;;      Params:         0       0
   379 ;;      Locals:         0       0
   380 ;;      Temps:          0       0
   381 ;;      Totals:         0       0
   382 ;;Total ram usage:        0 bytes
   383 ;; Hardware stack levels required when called:    1
   384 ;; This function calls:
   385 ;;		Nothing
   386 ;; This function is called by:
   387 ;;		Startup code after reset
   388 ;; This function uses a non-reentrant model
   389 ;;
   390                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   391                           	file	"main.c"
   392                           	line	88
   393                           global __pmaintext
   394                           __pmaintext:	;psect for function _main
   395  00A0                     psect	maintext
   396                           	file	"main.c"
   397                           	line	88
   398                           	global	__size_of_main
   399                           	__size_of_main	equ	__end_of_main-_main
   400  005B                     	
   401                           _main:	
   402  00A0                     ;incstack = 0
   403                           	opt	stack 7
   404                           ; Regs used in _main: [wreg+status,2+status,0]
   405                           	line	93
   406                           	
   407                           l795:	
   408  00A0                     ;main.c: 93:     TRISA0 = 1;
   409                           	bsf	status, 5	;RP0=1, select bank1
   410  00A0  1683               	bsf	(1064/8)^080h,(1064)&7	;volatile
   411  00A1  1405               	line	94
   412                           ;main.c: 94:     TRISA1 = 0;
   413                           	bcf	(1065/8)^080h,(1065)&7	;volatile
   414  00A2  1085               	line	95
   415                           ;main.c: 95:     TRISA2 = 0;
   416                           	bcf	(1066/8)^080h,(1066)&7	;volatile
   417  00A3  1105               	line	96
   418                           ;main.c: 96:     TRISA3 = 1;
   419                           	bsf	(1067/8)^080h,(1067)&7	;volatile
   420  00A4  1585               	line	97
   421                           ;main.c: 97:     TRISA4 = 1;
   422                           	bsf	(1068/8)^080h,(1068)&7	;volatile
   423  00A5  1605               	line	99
   424                           	
   425                           l797:	
   426  00A6                     ;main.c: 99:     PORTA = 0b00000000;
   427                           	bcf	status, 5	;RP0=0, select bank0
   428  00A6  1283               	clrf	(5)	;volatile
   429  00A7  0185               	line	101
   430                           ;main.c: 101:     TRISB = 0b00000000;
   431                           	bsf	status, 5	;RP0=1, select bank1
   432  00A8  1683               	clrf	(134)^080h	;volatile
   433  00A9  0186               	line	102
   434                           	
   435                           l799:	
   436  00AA                     ;main.c: 102:     PORTB = 0b00000010;
   437                           	movlw	low(02h)
   438  00AA  3002               	bcf	status, 5	;RP0=0, select bank0
   439  00AB  1283               	movwf	(6)	;volatile
   440  00AC  0086               	line	124
   441                           	
   442                           l801:	
   443  00AD                     ;main.c: 124:     T0CS = 1;
   444                           	bsf	status, 5	;RP0=1, select bank1
   445  00AD  1683               	bsf	(1037/8)^080h,(1037)&7	;volatile
   446  00AE  1681               	line	125
   447                           	
   448                           l803:	
   449  00AF                     ;main.c: 125:     T0SE = 1;
   450                           	bsf	(1036/8)^080h,(1036)&7	;volatile
   451  00AF  1601               	line	126
   452                           	
   453                           l805:	
   454  00B0                     ;main.c: 126:     GIE = 1;
   455                           	bsf	(95/8),(95)&7	;volatile
   456  00B0  178B               	line	127
   457                           	
   458                           l807:	
   459  00B1                     ;main.c: 127:     T0IE = 1;
   460                           	bsf	(93/8),(93)&7	;volatile
   461  00B1  168B               	line	128
   462                           	
   463                           l809:	
   464  00B2                     ;main.c: 128:     PSA = 1;
   465                           	bsf	(1035/8)^080h,(1035)&7	;volatile
   466  00B2  1581               	line	129
   467                           	
   468                           l811:	
   469  00B3                     ;main.c: 129:     T0IF = 0;
   470                           	bcf	(90/8),(90)&7	;volatile
   471  00B3  110B               	line	130
   472                           	
   473                           l813:	
   474  00B4                     ;main.c: 130:     TMR0 = 255;
   475                           	movlw	low(0FFh)
   476  00B4  30FF               	bcf	status, 5	;RP0=0, select bank0
   477  00B5  1283               	movwf	(1)	;volatile
   478  00B6  0081               	line	133
   479                           ;main.c: 133:     ps2DataState = 0;
   480                           	clrf	(_ps2DataState)
   481  00B7  01A0               	line	134
   482                           ;main.c: 134:     ps2BitsCount = 0;
   483                           	clrf	(_ps2BitsCount)
   484  00B8  019E               	line	135
   485                           ;main.c: 135:     ps2Bits = 0;
   486                           	clrf	(_ps2Bits)
   487  00B9  019F               	line	136
   488                           ;main.c: 136:     pa = 0;
   489                           	clrf	(_pa)
   490  00BA  0198               	clrf	(_pa+1)
   491  00BB  0199               	goto	l815
   492  00BC  28BD               	line	138
   493                           ;main.c: 138:     while(1)
   494                           	
   495                           l76:	
   496  00BD                     	line	140
   497                           	
   498                           l815:	
   499  00BD                     ;main.c: 139:     {;main.c: 140:         if ( ps2DataState == 3 ) {
   500                           		movlw	3
   501  00BD  3003               	bcf	status, 5	;RP0=0, select bank0
   502  00BE  1283               	xorwf	((_ps2DataState)),w
   503  00BF  0620               	btfss	status,2
   504  00C0  1D03               	goto	u351
   505  00C1  28C3               	goto	u350
   506  00C2  28C4               u351:
   507  00C3                     	goto	l831
   508  00C3  28ED               u350:
   509  00C4                     	line	143
   510                           	
   511                           l817:	
   512  00C4                     ;main.c: 143:             if ( ps2DataCount > 1 ) {
   513                           	movf	(_ps2DataCount),w
   514  00C4  081D               	xorlw	80h
   515  00C5  3A80               	addlw	-((02h)^80h)
   516  00C6  3E7E               	skipc
   517  00C7  1C03               	goto	u361
   518  00C8  28CA               	goto	u360
   519  00C9  28CB               u361:
   520  00CA                     	goto	l825
   521  00CA  28DC               u360:
   522  00CB                     	line	145
   523                           	
   524                           l819:	
   525  00CB                     ;main.c: 145:                 if ( ps2Data[0] == 0xF0 && ps2Data[1] == 0x1a ) {
   526                           		movlw	240
   527  00CB  30F0               	xorwf	((_ps2Data)),w
   528  00CC  060C               	btfss	status,2
   529  00CD  1D03               	goto	u371
   530  00CE  28D0               	goto	u370
   531  00CF  28D1               u371:
   532  00D0                     	goto	l81
   533  00D0  28EA               u370:
   534  00D1                     	
   535                           l821:	
   536  00D1                     		movlw	26
   537  00D1  301A               	xorwf	(0+(_ps2Data)+01h),w
   538  00D2  060D               	btfss	status,2
   539  00D3  1D03               	goto	u381
   540  00D4  28D6               	goto	u380
   541  00D5  28D7               u381:
   542  00D6                     	goto	l81
   543  00D6  28EA               u380:
   544  00D7                     	line	146
   545                           	
   546                           l823:	
   547  00D7                     ;main.c: 146:                    pa = 0;
   548                           	clrf	(_pa)
   549  00D7  0198               	clrf	(_pa+1)
   550  00D8  0199               	line	147
   551                           ;main.c: 147:                 } else {
   552                           	goto	l81
   553  00D9  28EA               	
   554                           l79:	
   555  00DA                     	goto	l81
   556  00DA  28EA               	line	149
   557                           ;main.c: 149:                 }
   558                           	
   559                           l80:	
   560  00DB                     	line	151
   561                           ;main.c: 151:             } else {
   562                           	goto	l81
   563  00DB  28EA               	
   564                           l78:	
   565  00DC                     	line	153
   566                           	
   567                           l825:	
   568  00DC                     ;main.c: 153:                 if ( ps2Data[0] == 0x1a ) {
   569                           		movlw	26
   570  00DC  301A               	xorwf	((_ps2Data)),w
   571  00DD  060C               	btfss	status,2
   572  00DE  1D03               	goto	u391
   573  00DF  28E1               	goto	u390
   574  00E0  28E2               u391:
   575  00E1                     	goto	l829
   576  00E1  28E7               u390:
   577  00E2                     	line	154
   578                           	
   579                           l827:	
   580  00E2                     ;main.c: 154:                     pa = 1;
   581                           	movlw	01h
   582  00E2  3001               	movwf	(_pa)
   583  00E3  0098               	movlw	0
   584  00E4  3000               	movwf	((_pa))+1
   585  00E5  0099               	line	155
   586                           ;main.c: 155:                 } else {
   587                           	goto	l81
   588  00E6  28EA               	
   589                           l82:	
   590  00E7                     	line	156
   591                           	
   592                           l829:	
   593  00E7                     ;main.c: 156:                     pa = 0;
   594                           	clrf	(_pa)
   595  00E7  0198               	clrf	(_pa+1)
   596  00E8  0199               	goto	l81
   597  00E9  28EA               	line	157
   598                           ;main.c: 157:                 }
   599                           	
   600                           l83:	
   601  00EA                     	line	159
   602                           ;main.c: 159:             }
   603                           	
   604                           l81:	
   605  00EA                     	line	160
   606                           ;main.c: 160:             ps2DataCount = 0;
   607                           	clrf	(_ps2DataCount)
   608  00EA  019D               	line	161
   609                           ;main.c: 161:             ps2DataState = 0;
   610                           	clrf	(_ps2DataState)
   611  00EB  01A0               	goto	l831
   612  00EC  28ED               	line	162
   613                           ;main.c: 162:         }
   614                           	
   615                           l77:	
   616  00ED                     	line	165
   617                           	
   618                           l831:	
   619  00ED                     ;main.c: 165:         if ( pa ) {
   620                           	movf	((_pa)),w
   621  00ED  0818               iorwf	((_pa+1)),w
   622  00EE  0419               	btfsc	status,2
   623  00EF  1903               	goto	u401
   624  00F0  28F2               	goto	u400
   625  00F1  28F3               u401:
   626  00F2                     	goto	l835
   627  00F2  28F5               u400:
   628  00F3                     	line	166
   629                           	
   630                           l833:	
   631  00F3                     ;main.c: 166:             PORTB = 0b00000000;
   632                           	clrf	(6)	;volatile
   633  00F3  0186               	line	167
   634                           ;main.c: 167:         } else {
   635                           	goto	l85
   636  00F4  28F7               	
   637                           l84:	
   638  00F5                     	line	168
   639                           	
   640                           l835:	
   641  00F5                     ;main.c: 168:             PORTB = 0b00000010;
   642                           	movlw	low(02h)
   643  00F5  3002               	movwf	(6)	;volatile
   644  00F6  0086               	line	169
   645                           ;main.c: 169:         }
   646                           	
   647                           l85:	
   648  00F7                     	line	170
   649                           # 170 "main.c"
   650                           clrwdt ;# 
   651  00F7  0064               psect	maintext
   652                           	goto	l815
   653  00F8  28BD               	line	177
   654                           ;main.c: 177:     }
   655                           	
   656                           l86:	
   657  00F9                     	goto	l815
   658  00F9  28BD               	
   659                           l87:	
   660  00FA                     	line	179
   661                           	
   662                           l88:	
   663  00FA                     	global	start
   664                           	ljmp	start
   665  00FA  280D               	opt stack 0
   666                           GLOBAL	__end_of_main
   667                           	__end_of_main:
   668  00FB                     	signat	_main,89
   669                           	global	_myIsr
   670                           
   671 ;; *************** function _myIsr *****************
   672 ;; Defined at:
   673 ;;		line 48 in file "main.c"
   674 ;; Parameters:    Size  Location     Type
   675 ;;		None
   676 ;; Auto vars:     Size  Location     Type
   677 ;;		None
   678 ;; Return value:  Size  Location     Type
   679 ;;                  1    wreg      void 
   680 ;; Registers used:
   681 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMMON   BANK0
   687 ;;      Params:         0       0
   688 ;;      Locals:         0       0
   689 ;;      Temps:          0       5
   690 ;;      Totals:         0       5
   691 ;;Total ram usage:        5 bytes
   692 ;; Hardware stack levels used:    1
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		Interrupt level 1
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
   700                           	line	48
   701                           global __ptext1
   702                           __ptext1:	;psect for function _myIsr
   703  0015                     psect	text1
   704                           	file	"main.c"
   705                           	line	48
   706                           	global	__size_of_myIsr
   707                           	__size_of_myIsr	equ	__end_of_myIsr-_myIsr
   708  008B                     	
   709                           _myIsr:	
   710  0015                     ;incstack = 0
   711                           	opt	stack 7
   712                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0]
   713                           psect	intentry,class=CODE,delta=2
   714                           global __pintentry
   715                           __pintentry:
   716  0004                     global interrupt_function
   717                           interrupt_function:
   718  0004                     	global saved_w
   719                           	saved_w	set	btemp+0
   720  004E                     	movwf	saved_w
   721  0004  00CE               	swapf	status,w
   722  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
   723  0006  1283               	movwf	(??_myIsr+2)
   724  0007  00A3               	movf	fsr0,w
   725  0008  0804               	movwf	(??_myIsr+3)
   726  0009  00A4               	movf	pclath,w
   727  000A  080A               	movwf	(??_myIsr+4)
   728  000B  00A5               	ljmp	_myIsr
   729  000C  2815               psect	text1
   730                           	line	50
   731                           	
   732                           i1l749:	
   733  0015                     ;main.c: 50:     if(T0IE && T0IF){
   734                           	btfss	(93/8),(93)&7	;volatile
   735  0015  1E8B               	goto	u21_21
   736  0016  2818               	goto	u21_20
   737  0017  2819               u21_21:
   738  0018                     	goto	i1l793
   739  0018  2896               u21_20:
   740  0019                     	
   741                           i1l751:	
   742  0019                     	btfss	(90/8),(90)&7	;volatile
   743  0019  1D0B               	goto	u22_21
   744  001A  281C               	goto	u22_20
   745  001B  281D               u22_21:
   746  001C                     	goto	i1l793
   747  001C  2896               u22_20:
   748  001D                     	line	52
   749                           	
   750                           i1l753:	
   751  001D                     ;main.c: 52:         T0IF=0;
   752                           	bcf	(90/8),(90)&7	;volatile
   753  001D  110B               	line	53
   754                           	
   755                           i1l755:	
   756  001E                     ;main.c: 53:         TMR0 = 255;
   757                           	movlw	low(0FFh)
   758  001E  30FF               	movwf	(1)	;volatile
   759  001F  0081               	line	55
   760                           	
   761                           i1l757:	
   762  0020                     ;main.c: 55:         if ( ps2DataState == 0 || ps2DataState == 1 ) {
   763                           	movf	((_ps2DataState)),w
   764  0020  0820               	btfsc	status,2
   765  0021  1903               	goto	u23_21
   766  0022  2824               	goto	u23_20
   767  0023  2825               u23_21:
   768  0024                     	goto	i1l58
   769  0024  282A               u23_20:
   770  0025                     	
   771                           i1l759:	
   772  0025                     		decf	((_ps2DataState)),w
   773  0025  0320               	btfss	status,2
   774  0026  1D03               	goto	u24_21
   775  0027  2829               	goto	u24_20
   776  0028  282A               u24_21:
   777  0029                     	goto	i1l767
   778  0029  283A               u24_20:
   779  002A                     	
   780                           i1l58:	
   781  002A                     	line	56
   782                           ;main.c: 56:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
   783                           	btfsc	(5),4	;volatile
   784  002A  1A05               	goto	u25_21
   785  002B  282D               	goto	u25_20
   786  002C  282E               u25_21:
   787  002D                     	goto	i1l793
   788  002D  2896               u25_20:
   789  002E                     	
   790                           i1l761:	
   791  002E                     	btfsc	(5),3	;volatile
   792  002E  1985               	goto	u26_21
   793  002F  2831               	goto	u26_20
   794  0030  2832               u26_21:
   795  0031                     	goto	i1l793
   796  0031  2896               u26_20:
   797  0032                     	line	57
   798                           	
   799                           i1l763:	
   800  0032                     ;main.c: 57:                 ps2BitsCount = 0;
   801                           	clrf	(_ps2BitsCount)
   802  0032  019E               	line	58
   803                           ;main.c: 58:                 ps2Bits = 0;
   804                           	clrf	(_ps2Bits)
   805  0033  019F               	line	59
   806                           	
   807                           i1l765:	
   808  0034                     ;main.c: 59:                 ps2DataState = 2;
   809                           	movlw	low(02h)
   810  0034  3002               	movwf	(??_myIsr+0)+0
   811  0035  00A1               	movf	(??_myIsr+0)+0,w
   812  0036  0821               	movwf	(_ps2DataState)
   813  0037  00A0               	goto	i1l793
   814  0038  2896               	line	60
   815                           ;main.c: 60:             }
   816                           	
   817                           i1l59:	
   818  0039                     	line	61
   819                           ;main.c: 61:         } else if ( ps2DataState == 2 ) {
   820                           	goto	i1l793
   821  0039  2896               	
   822                           i1l56:	
   823  003A                     	
   824                           i1l767:	
   825  003A                     		movlw	2
   826  003A  3002               	xorwf	((_ps2DataState)),w
   827  003B  0620               	btfss	status,2
   828  003C  1D03               	goto	u27_21
   829  003D  283F               	goto	u27_20
   830  003E  2840               u27_21:
   831  003F                     	goto	i1l793
   832  003F  2896               u27_20:
   833  0040                     	line	62
   834                           	
   835                           i1l769:	
   836  0040                     ;main.c: 62:             if ( ps2BitsCount < 8 ) {
   837                           	movf	(_ps2BitsCount),w
   838  0040  081E               	xorlw	80h
   839  0041  3A80               	addlw	-((08h)^80h)
   840  0042  3E78               	skipnc
   841  0043  1803               	goto	u28_21
   842  0044  2846               	goto	u28_20
   843  0045  2847               u28_21:
   844  0046                     	goto	i1l775
   845  0046  285D               u28_20:
   846  0047                     	line	63
   847                           	
   848                           i1l771:	
   849  0047                     ;main.c: 63:                 if ( PORTAbits.RA3 ) {
   850                           	btfss	(5),3	;volatile
   851  0047  1D85               	goto	u29_21
   852  0048  284A               	goto	u29_20
   853  0049  284B               u29_21:
   854  004A                     	goto	i1l63
   855  004A  2858               u29_20:
   856  004B                     	line	64
   857                           	
   858                           i1l773:	
   859  004B                     ;main.c: 64:                     ps2Bits |= ( 1 << ps2BitsCount );
   860                           	movlw	low(01h)
   861  004B  3001               	movwf	(??_myIsr+0)+0
   862  004C  00A1               	incf	(_ps2BitsCount),w
   863  004D  0A1E               	goto	u30_24
   864  004E  2851               u30_25:
   865  004F                     	clrc
   866  004F  1003               	rlf	(??_myIsr+0)+0,f
   867  0050  0DA1               u30_24:
   868  0051                     	addlw	-1
   869  0051  3EFF               	skipz
   870  0052  1D03               	goto	u30_25
   871  0053  284F               	movf	0+(??_myIsr+0)+0,w
   872  0054  0821               	movwf	(??_myIsr+1)+0
   873  0055  00A2               	movf	(??_myIsr+1)+0,w
   874  0056  0822               	iorwf	(_ps2Bits),f
   875  0057  049F               	line	65
   876                           ;main.c: 65:                 }
   877                           	
   878                           i1l63:	
   879  0058                     	line	66
   880                           ;main.c: 66:                 ps2BitsCount++;
   881                           	movlw	low(01h)
   882  0058  3001               	movwf	(??_myIsr+0)+0
   883  0059  00A1               	movf	(??_myIsr+0)+0,w
   884  005A  0821               	addwf	(_ps2BitsCount),f
   885  005B  079E               	line	67
   886                           ;main.c: 67:             } else if ( ps2BitsCount == 8 ) {
   887                           	goto	i1l793
   888  005C  2896               	
   889                           i1l62:	
   890  005D                     	
   891                           i1l775:	
   892  005D                     		movlw	8
   893  005D  3008               	xorwf	((_ps2BitsCount)),w
   894  005E  061E               	btfss	status,2
   895  005F  1D03               	goto	u31_21
   896  0060  2862               	goto	u31_20
   897  0061  2863               u31_21:
   898  0062                     	goto	i1l779
   899  0062  2868               u31_20:
   900  0063                     	line	68
   901                           	
   902                           i1l777:	
   903  0063                     ;main.c: 68:                 ps2BitsCount++;
   904                           	movlw	low(01h)
   905  0063  3001               	movwf	(??_myIsr+0)+0
   906  0064  00A1               	movf	(??_myIsr+0)+0,w
   907  0065  0821               	addwf	(_ps2BitsCount),f
   908  0066  079E               	line	69
   909                           ;main.c: 69:             } else if ( ps2BitsCount == 9 ) {
   910                           	goto	i1l793
   911  0067  2896               	
   912                           i1l65:	
   913  0068                     	
   914                           i1l779:	
   915  0068                     		movlw	9
   916  0068  3009               	xorwf	((_ps2BitsCount)),w
   917  0069  061E               	btfss	status,2
   918  006A  1D03               	goto	u32_21
   919  006B  286D               	goto	u32_20
   920  006C  286E               u32_21:
   921  006D                     	goto	i1l793
   922  006D  2896               u32_20:
   923  006E                     	line	70
   924                           	
   925                           i1l781:	
   926  006E                     ;main.c: 70:                 if ( ps2DataCount < 8 ) {
   927                           	movf	(_ps2DataCount),w
   928  006E  081D               	xorlw	80h
   929  006F  3A80               	addlw	-((08h)^80h)
   930  0070  3E78               	skipnc
   931  0071  1803               	goto	u33_21
   932  0072  2874               	goto	u33_20
   933  0073  2875               u33_21:
   934  0074                     	goto	i1l787
   935  0074  2882               u33_20:
   936  0075                     	line	71
   937                           	
   938                           i1l783:	
   939  0075                     ;main.c: 71:                     ps2Data[ps2DataCount] = ps2Bits;
   940                           	movf	(_ps2Bits),w
   941  0075  081F               	movwf	(??_myIsr+0)+0
   942  0076  00A1               	movf	(_ps2DataCount),w
   943  0077  081D               	addlw	low(_ps2Data|((0x0)<<8))&0ffh
   944  0078  3E0C               	movwf	fsr0
   945  0079  0084               	movf	(??_myIsr+0)+0,w
   946  007A  0821               	bcf	status, 7	;select IRP bank0
   947  007B  1383               	movwf	indf
   948  007C  0080               	line	72
   949                           	
   950                           i1l785:	
   951  007D                     ;main.c: 72:                     ps2DataCount++;
   952                           	movlw	low(01h)
   953  007D  3001               	movwf	(??_myIsr+0)+0
   954  007E  00A1               	movf	(??_myIsr+0)+0,w
   955  007F  0821               	addwf	(_ps2DataCount),f
   956  0080  079D               	goto	i1l787
   957  0081  2882               	line	73
   958                           ;main.c: 73:                 }
   959                           	
   960                           i1l68:	
   961  0082                     	line	74
   962                           	
   963                           i1l787:	
   964  0082                     ;main.c: 74:                 if ( ps2Bits == 0xF0 ) {
   965                           		movlw	240
   966  0082  30F0               	xorwf	((_ps2Bits)),w
   967  0083  061F               	btfss	status,2
   968  0084  1D03               	goto	u34_21
   969  0085  2887               	goto	u34_20
   970  0086  2888               u34_21:
   971  0087                     	goto	i1l791
   972  0087  288B               u34_20:
   973  0088                     	line	75
   974                           	
   975                           i1l789:	
   976  0088                     ;main.c: 75:                     ps2DataState = 1;
   977                           	clrf	(_ps2DataState)
   978  0088  01A0               	incf	(_ps2DataState),f
   979  0089  0AA0               	line	76
   980                           ;main.c: 76:                 } else {
   981                           	goto	i1l793
   982  008A  2896               	
   983                           i1l69:	
   984  008B                     	line	77
   985                           	
   986                           i1l791:	
   987  008B                     ;main.c: 77:                     ps2DataState = 3;
   988                           	movlw	low(03h)
   989  008B  3003               	movwf	(??_myIsr+0)+0
   990  008C  00A1               	movf	(??_myIsr+0)+0,w
   991  008D  0821               	movwf	(_ps2DataState)
   992  008E  00A0               	goto	i1l793
   993  008F  2896               	line	78
   994                           ;main.c: 78:                 }
   995                           	
   996                           i1l70:	
   997  0090                     	goto	i1l793
   998  0090  2896               	line	79
   999                           ;main.c: 79:             }
  1000                           	
  1001                           i1l67:	
  1002  0091                     	goto	i1l793
  1003  0091  2896               	
  1004                           i1l66:	
  1005  0092                     	goto	i1l793
  1006  0092  2896               	
  1007                           i1l64:	
  1008  0093                     	goto	i1l793
  1009  0093  2896               	line	80
  1010                           ;main.c: 80:         }
  1011                           	
  1012                           i1l61:	
  1013  0094                     	goto	i1l793
  1014  0094  2896               	
  1015                           i1l60:	
  1016  0095                     	goto	i1l793
  1017  0095  2896               	line	81
  1018                           ;main.c: 81:     }
  1019                           	
  1020                           i1l55:	
  1021  0096                     	line	82
  1022                           	
  1023                           i1l793:	
  1024  0096                     ;main.c: 82:     GIE = 1;
  1025                           	bsf	(95/8),(95)&7	;volatile
  1026  0096  178B               	line	83
  1027                           	
  1028                           i1l71:	
  1029  0097                     	movf	(??_myIsr+4),w
  1030  0097  0825               	movwf	pclath
  1031  0098  008A               	movf	(??_myIsr+3),w
  1032  0099  0824               	movwf	fsr0
  1033  009A  0084               	swapf	(??_myIsr+2)^00h,w
  1034  009B  0E23               	movwf	status
  1035  009C  0083               	swapf	saved_w,f
  1036  009D  0ECE               	swapf	saved_w,w
  1037  009E  0E4E               	retfie
  1038  009F  0009               	opt stack 0
  1039                           GLOBAL	__end_of_myIsr
  1040                           	__end_of_myIsr:
  1041  00A0                     	signat	_myIsr,89
  1042                           global	___latbits
  1043                           ___latbits	equ	0
  1044  0000                     	global	btemp
  1045                           	btemp set 04Eh
  1046  004E                     
  1047                           	DABS	1,78,2	;btemp
  1048                           	global	wtemp0
  1049                           	wtemp0 set btemp+0
  1050  004E                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66      5      26

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _myIsr                                                5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      5      1A       3       39.4%
ABS                  0      0      1A       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      1A       6        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 06 14:35:09 2018

                      _i 001C                       l80 00DB                       l81 00EA  
                     l82 00E7                       l83 00EA                       l84 00F5  
                     l76 00BD                       l85 00F7                       l77 00ED  
                     l86 00F9                       l78 00DC                       l87 00FA  
                     l79 00DA                       l88 00FA                       _pa 0018  
                     fsr 0004                      l801 00AD                      l811 00B3  
                    l803 00AF                      l821 00D1                      l813 00B4  
                    l805 00B0                      l823 00D7                      l831 00ED  
                    l815 00BD                      l807 00B1                      l833 00F3  
                    l825 00DC                      l817 00C4                      l809 00B2  
                    l835 00F5                      l827 00E2                      l819 00CB  
                    l829 00E7                      l795 00A0                      l797 00A6  
                    l799 00AA                      _GIE 005F                      u400 00F3  
                    u401 00F2                      u350 00C4                      u351 00C3  
                    u360 00CB                      u361 00CA                      u370 00D1  
                    u371 00D0                      u380 00D7                      u381 00D6  
                    u390 00E2                      u391 00E1                      _PSA 040B  
                    fsr0 0004                      indf 0000                     _T0IE 005D  
                   _T0IF 005A                     _T0CS 040D                     _T0SE 040C  
                   i1l60 0095                     i1l61 0094                     i1l70 0090  
                   i1l62 005D                     i1l71 0097                     i1l55 0096  
                   i1l63 0058                     i1l64 0093                     i1l56 003A  
                   i1l65 0068                     i1l66 0092                     i1l58 002A  
                   i1l67 0091                     i1l59 0039                     i1l68 0082  
                   i1l69 008B                     _TMR0 0001                     _main 00A0  
                   btemp 004E                     start 000D                    ?_main 0021  
                  i1l751 0019                    i1l761 002E                    i1l753 001D  
                  i1l771 0047                    i1l763 0032                    i1l755 001E  
                  i1l781 006E                    i1l773 004B                    i1l765 0034  
                  i1l757 0020                    i1l749 0015                    i1l791 008B  
                  i1l783 0075                    i1l775 005D                    i1l767 003A  
                  i1l759 0025                    i1l785 007D                    i1l777 0063  
                  i1l769 0040                    i1l793 0096                    i1l787 0082  
                  i1l779 0068                    i1l789 0088                    u21_20 0019  
                  u21_21 0018                    u22_20 001D                    u22_21 001C  
                  u30_24 0051                    u30_25 004F                    u31_20 0063  
                  u23_20 0025                    u31_21 0062                    u23_21 0024  
                  u32_20 006E                    u24_20 002A                    u32_21 006D  
                  u24_21 0029                    u33_20 0075                    u25_20 002E  
                  u33_21 0074                    u25_21 002D                    u34_20 0088  
                  u26_20 0032                    u34_21 0087                    u26_21 0031  
                  u27_20 0040                    u27_21 003F                    _PORTA 0005  
                  _PORTB 0006                    u28_20 0047                    u28_21 0046  
                  u29_20 004B                    u29_21 004A                    _TRISB 0086  
                  _delay 0014                    _myIsr 0015                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000E  
           __end_of_main 00FB                   ??_main 0000                   ?_myIsr 0021  
                 _TRISA0 0428                   _TRISA1 0429                   _TRISA2 042A  
                 _TRISA3 042B                   _TRISA4 042C                   saved_w 004E  
__end_of__initialization 0013           __pcstackCOMMON 0000            __end_of_myIsr 00A0  
                ??_myIsr 0021             _ps2DataCount 001D             _ps2DataState 0020  
             __pbssBANK0 000C             _ps2BitsCount 001E               __pmaintext 00A0  
             __pintentry 0004                  _ps2Data 000C                  _ps2Bits 001F  
                __ptext1 0015                  _keyCode 001A                  clrloop0 00FC  
   end_of_initialization 0013                _PORTAbits 0005      start_initialization 000E  
              ___latbits 0000            __pcstackBANK0 0021           __size_of_myIsr 008B  
      interrupt_function 0004                clear_ram0 00FB            __size_of_main 005B  
               intlevel1 0000  
