

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 27 14:37:48 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x4E,2
    19  0000                     
    20                           ; Version 2.00
    21                           ; Generated 27/05/2018 GMT
    22                           ; 
    23                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F84A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  0088                     	;# 
    69  0089                     	;# 
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0088                     	;# 
    85  0089                     	;# 
    86                           
    87                           	psect	idataBANK0
    88  02DE                     __pidataBANK0:	
    89                           
    90                           ;initializer for _outPorts
    91  02DE  3400               	retlw	0
    92  02DF  3400               	retlw	0
    93  02E0  3400               	retlw	0
    94  02E1  3400               	retlw	0
    95  02E2  3400               	retlw	0
    96  02E3  3400               	retlw	0
    97  02E4  3400               	retlw	0
    98  02E5  3400               	retlw	0
    99  02E6  3407               	retlw	7
   100  02E7  34F5               	retlw	245
   101  02E8  34DA               	retlw	218
   102                           
   103                           ;initializer for _mouseY
   104  02E9  346E               	retlw	110
   105                           
   106                           ;initializer for _mouseX
   107  02EA  34DC               	retlw	220
   108                           
   109                           	psect	strings
   110  0031                     __pstrings:	
   111  0031                     stringtab:	
   112  0031                     __stringtab:	
   113  0031                     stringcode:	
   114                           ;	String table - string pointers are 1 byte each
   115                           
   116  0031                     stringdir:	
   117  0031  3000               	movlw	high stringdir
   118  0032  008A               	movwf	10
   119  0033  0804               	movf	4,w
   120  0034  0A84               	incf	4,f
   121  0035  0782               	addwf	2,f
   122  0036                     __stringbase:	
   123  0036  3400               	retlw	0
   124  0037                     __end_of__stringtab:	
   125  0037                     _codeToMatrix:	
   126  0037  34FF               	retlw	255
   127  0038  34FF               	retlw	255
   128  0039  34FF               	retlw	255
   129  003A  34FF               	retlw	255
   130  003B  34FF               	retlw	255
   131  003C  34FF               	retlw	255
   132  003D  34FF               	retlw	255
   133  003E  34FF               	retlw	255
   134  003F  34FF               	retlw	255
   135  0040  34FF               	retlw	255
   136  0041  34FF               	retlw	255
   137  0042  34FF               	retlw	255
   138  0043  34FF               	retlw	255
   139  0044  34FF               	retlw	255
   140  0045  349C               	retlw	156
   141  0046  34FF               	retlw	255
   142  0047  34FF               	retlw	255
   143  0048  34FF               	retlw	255
   144  0049  34FF               	retlw	255
   145  004A  34FF               	retlw	255
   146  004B  34FF               	retlw	255
   147  004C  3402               	retlw	2
   148  004D  3403               	retlw	3
   149  004E  34FF               	retlw	255
   150  004F  34FF               	retlw	255
   151  0050  34FF               	retlw	255
   152  0051  3408               	retlw	8
   153  0052  3409               	retlw	9
   154  0053  3401               	retlw	1
   155  0054  340A               	retlw	10
   156  0055  340B               	retlw	11
   157  0056  3444               	retlw	68
   158  0057  34FF               	retlw	255
   159  0058  3418               	retlw	24
   160  0059  3410               	retlw	16
   161  005A  3411               	retlw	17
   162  005B  3412               	retlw	18
   163  005C  341B               	retlw	27
   164  005D  3413               	retlw	19
   165  005E  34FF               	retlw	255
   166  005F  345C               	retlw	92
   167  0060  3407               	retlw	7
   168  0061  3420               	retlw	32
   169  0062  3419               	retlw	25
   170  0063  3422               	retlw	34
   171  0064  341A               	retlw	26
   172  0065  3423               	retlw	35
   173  0066  3463               	retlw	99
   174  0067  3464               	retlw	100
   175  0068  341F               	retlw	31
   176  0069  3427               	retlw	39
   177  006A  3426               	retlw	38
   178  006B  3421               	retlw	33
   179  006C  3425               	retlw	37
   180  006D  3424               	retlw	36
   181  006E  3454               	retlw	84
   182  006F  34A0               	retlw	160
   183  0070  3406               	retlw	6
   184  0071  3417               	retlw	23
   185  0072  341E               	retlw	30
   186  0073  341D               	retlw	29
   187  0074  341C               	retlw	28
   188  0075  3414               	retlw	20
   189  0076  34FF               	retlw	255
   190  0077  34FF               	retlw	255
   191  0078  349F               	retlw	159
   192  0079  3416               	retlw	22
   193  007A  3415               	retlw	21
   194  007B  340D               	retlw	13
   195  007C  3404               	retlw	4
   196  007D  340C               	retlw	12
   197  007E  34FF               	retlw	255
   198  007F  34FF               	retlw	255
   199  0080  3497               	retlw	151
   200  0081  34A0               	retlw	160
   201  0082  340E               	retlw	14
   202  0083  348D               	retlw	141
   203  0084  3405               	retlw	5
   204  0085  349E               	retlw	158
   205  0086  3483               	retlw	131
   206  0087  348B               	retlw	139
   207  0088  3493               	retlw	147
   208  0089  349C               	retlw	156
   209  008A  349B               	retlw	155
   210  008B  34E5               	retlw	229
   211  008C  348E               	retlw	142
   212  008D  34A3               	retlw	163
   213  008E  34A6               	retlw	166
   214  008F  344B               	retlw	75
   215  0090  34FF               	retlw	255
   216  0091  3406               	retlw	6
   217  0092  34DD               	retlw	221
   218  0093  34A4               	retlw	164
   219  0094  34FF               	retlw	255
   220  0095  34A7               	retlw	167
   221  0096  3494               	retlw	148
   222  0097  348C               	retlw	140
   223  0098  3484               	retlw	132
   224  0099  3496               	retlw	150
   225  009A  3490               	retlw	144
   226  009B  34FF               	retlw	255
   227  009C  34FF               	retlw	255
   228  009D  3444               	retlw	68
   229  009E  3488               	retlw	136
   230  009F  3485               	retlw	133
   231  00A0  3403               	retlw	3
   232  00A1  349A               	retlw	154
   233  00A2  341B               	retlw	27
   234  00A3  341C               	retlw	28
   235  00A4  34A2               	retlw	162
   236  00A5  3498               	retlw	152
   237  00A6  34FF               	retlw	255
   238  00A7  3404               	retlw	4
   239  00A8  3497               	retlw	151
   240  00A9  340B               	retlw	11
   241  00AA  3423               	retlw	35
   242  00AB  3424               	retlw	36
   243  00AC  3414               	retlw	20
   244  00AD  3443               	retlw	67
   245  00AE  34FF               	retlw	255
   246  00AF  34FF               	retlw	255
   247  00B0  3496               	retlw	150
   248  00B1  3413               	retlw	19
   249  00B2  349E               	retlw	158
   250  00B3  34A7               	retlw	167
   251  00B4  340C               	retlw	12
   252  00B5  34FF               	retlw	255
   253  00B6  34FF               	retlw	255
   254  00B7                     __end_of_codeToMatrix:	
   255  00B7                     _replaceOnShiftKeyDown:	
   256  00B7  3416               	retlw	22
   257  00B8  344F               	retlw	79
   258  00B9  341E               	retlw	30
   259  00BA  3450               	retlw	80
   260  00BB  3426               	retlw	38
   261  00BC  3451               	retlw	81
   262  00BD  3425               	retlw	37
   263  00BE  3453               	retlw	83
   264  00BF  342E               	retlw	46
   265  00C0  3456               	retlw	86
   266  00C1  3436               	retlw	54
   267  00C2  3457               	retlw	87
   268  00C3  343D               	retlw	61
   269  00C4  345C               	retlw	92
   270  00C5  343E               	retlw	62
   271  00C6  345E               	retlw	94
   272  00C7  3446               	retlw	70
   273  00C8  345F               	retlw	95
   274  00C9  3445               	retlw	69
   275  00CA  3460               	retlw	96
   276  00CB  344E               	retlw	78
   277  00CC  3461               	retlw	97
   278  00CD  3455               	retlw	85
   279  00CE  3462               	retlw	98
   280  00CF  345D               	retlw	93
   281  00D0  3463               	retlw	99
   282  00D1  344C               	retlw	76
   283  00D2  3467               	retlw	103
   284  00D3  3452               	retlw	82
   285  00D4  3468               	retlw	104
   286  00D5  3441               	retlw	65
   287  00D6  346A               	retlw	106
   288  00D7  3449               	retlw	73
   289  00D8  346D               	retlw	109
   290  00D9  344A               	retlw	74
   291  00DA  346E               	retlw	110
   292  00DB                     __end_of_replaceOnShiftKeyDown:	
   293  00DB                     _replaceTwoBytesCodes:	
   294  00DB  3414               	retlw	20
   295  00DC  3413               	retlw	19
   296  00DD  3470               	retlw	112
   297  00DE  3417               	retlw	23
   298  00DF  346C               	retlw	108
   299  00E0  3418               	retlw	24
   300  00E1  347D               	retlw	125
   301  00E2  3419               	retlw	25
   302  00E3  3471               	retlw	113
   303  00E4  341F               	retlw	31
   304  00E5  3469               	retlw	105
   305  00E6  3420               	retlw	32
   306  00E7  347A               	retlw	122
   307  00E8  3427               	retlw	39
   308  00E9  3475               	retlw	117
   309  00EA  3428               	retlw	40
   310  00EB  346B               	retlw	107
   311  00EC  342F               	retlw	47
   312  00ED  3472               	retlw	114
   313  00EE  3430               	retlw	48
   314  00EF  3474               	retlw	116
   315  00F0  3437               	retlw	55
   316  00F1  344A               	retlw	74
   317  00F2  3438               	retlw	56
   318  00F3  345A               	retlw	90
   319  00F4  3439               	retlw	57
   320  00F5                     __end_of_replaceTwoBytesCodes:	
   321                           
   322                           	psect	nvBANK0
   323  0040                     __pnvBANK0:	
   324  0040                     _ps2Down:	
   325  0040                     	ds	1
   326  0005                     _PORTA	set	5
   327  0006                     _PORTB	set	6
   328  0005                     _PORTAbits	set	5
   329  0001                     _TMR0	set	1
   330  0029                     _RA1	set	41
   331  002A                     _RA2	set	42
   332  005F                     _GIE	set	95
   333  005A                     _T0IF	set	90
   334  005D                     _T0IE	set	93
   335  0086                     _TRISB	set	134
   336  040B                     _PSA	set	1035
   337  040C                     _T0SE	set	1036
   338  040D                     _T0CS	set	1037
   339  042C                     _TRISA4	set	1068
   340  042B                     _TRISA3	set	1067
   341  042A                     _TRISA2	set	1066
   342  0429                     _TRISA1	set	1065
   343  0428                     _TRISA0	set	1064
   344                           
   345                           	psect	cinit
   346  0010                     start_initialization:	
   347                           ; #config settings
   348                           
   349  0010                     __initialization:	
   350                           
   351                           ; Initialize objects allocated to BANK0
   352  0010  22DE               	fcall	__pidataBANK0	;fetch initializer
   353  0011  00B3               	movwf	__pdataBANK0& (0+127)
   354  0012  22DF               	fcall	__pidataBANK0+1	;fetch initializer
   355  0013  00B4               	movwf	(__pdataBANK0+1)& (0+127)
   356  0014  22E0               	fcall	__pidataBANK0+2	;fetch initializer
   357  0015  00B5               	movwf	(__pdataBANK0+2)& (0+127)
   358  0016  22E1               	fcall	__pidataBANK0+3	;fetch initializer
   359  0017  00B6               	movwf	(__pdataBANK0+3)& (0+127)
   360  0018  22E2               	fcall	__pidataBANK0+4	;fetch initializer
   361  0019  00B7               	movwf	(__pdataBANK0+4)& (0+127)
   362  001A  22E3               	fcall	__pidataBANK0+5	;fetch initializer
   363  001B  00B8               	movwf	(__pdataBANK0+5)& (0+127)
   364  001C  22E4               	fcall	__pidataBANK0+6	;fetch initializer
   365  001D  00B9               	movwf	(__pdataBANK0+6)& (0+127)
   366  001E  22E5               	fcall	__pidataBANK0+7	;fetch initializer
   367  001F  00BA               	movwf	(__pdataBANK0+7)& (0+127)
   368  0020  22E6               	fcall	__pidataBANK0+8	;fetch initializer
   369  0021  00BB               	movwf	(__pdataBANK0+8)& (0+127)
   370  0022  22E7               	fcall	__pidataBANK0+9	;fetch initializer
   371  0023  00BC               	movwf	(__pdataBANK0+9)& (0+127)
   372  0024  22E8               	fcall	__pidataBANK0+10	;fetch initializer
   373  0025  00BD               	movwf	(__pdataBANK0+10)& (0+127)
   374  0026  22E9               	fcall	__pidataBANK0+11	;fetch initializer
   375  0027  00BE               	movwf	(__pdataBANK0+11)& (0+127)
   376  0028  22EA               	fcall	__pidataBANK0+12	;fetch initializer
   377  0029  00BF               	movwf	(__pdataBANK0+12)& (0+127)
   378                           
   379                           ; Clear objects allocated to BANK0
   380  002A  1383               	bcf	3,7	;select IRP bank0
   381  002B  3026               	movlw	low __pbssBANK0
   382  002C  0084               	movwf	4
   383  002D  3033               	movlw	low (__pbssBANK0+13)
   384  002E  22EB               	fcall	clear_ram0
   385  002F                     end_of_initialization:	
   386                           ;End of C runtime variable initialization code
   387                           
   388  002F                     __end_of__initialization:	
   389  002F  0183               	clrf	3
   390  0030  28F5               	ljmp	_main	;jump to C main() function
   391                           
   392                           	psect	bssBANK0
   393  0026                     __pbssBANK0:	
   394  0026                     _mouseDelay:	
   395  0026                     	ds	2
   396  0028                     _replaced:	
   397  0028                     	ds	1
   398  0029                     _ctrl:	
   399  0029                     	ds	1
   400  002A                     _shift:	
   401  002A                     	ds	1
   402  002B                     _i:	
   403  002B                     	ds	1
   404  002C                     _ps2NeedEncode:	
   405  002C                     	ds	1
   406  002D                     _ps2WaitCode:	
   407  002D                     	ds	1
   408  002E                     _ps2DataCount:	
   409  002E                     	ds	1
   410  002F                     _ps2Data:	
   411  002F                     	ds	1
   412  0030                     _ps2BitsCount:	
   413  0030                     	ds	1
   414  0031                     _ps2Bits:	
   415  0031                     	ds	1
   416  0032                     _ps2DataState:	
   417  0032                     	ds	1
   418                           
   419                           	psect	dataBANK0
   420  0033                     __pdataBANK0:	
   421  0033                     _outPorts:	
   422  0033                     	ds	11
   423  003E                     _mouseY:	
   424  003E                     	ds	1
   425  003F                     _mouseX:	
   426  003F                     	ds	1
   427                           
   428                           	psect	clrtext
   429  02EB                     clear_ram0:	
   430                           ;	Called with FSR containing the base address, and
   431                           ;	W with the last address+1
   432                           
   433  02EB  0064               	clrwdt	;clear the watchdog before getting into this loop
   434  02EC                     clrloop0:	
   435  02EC  0180               	clrf	0	;clear RAM location pointed to by FSR
   436  02ED  0A84               	incf	4,f	;increment pointer
   437  02EE  0604               	xorwf	4,w	;XOR with final address
   438  02EF  1903               	btfsc	3,2	;have we reached the end yet?
   439  02F0  3400               	retlw	0	;all done for this memory range, return
   440  02F1  0604               	xorwf	4,w	;XOR again to restore value
   441  02F2  2AEC               	goto	clrloop0	;do the next byte
   442                           
   443                           	psect	cstackBANK0
   444  000C                     __pcstackBANK0:	
   445  000C                     ?_myIsr:	
   446  000C                     ??_myIsr:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  000C                     ?_sendDataToAltera:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  000C                     ?_main:	
   453                           ; 1 bytes @ 0x0
   454                           
   455                           
   456                           ; 1 bytes @ 0x0
   457  000C                     	ds	6
   458  0012                     _myIsr$84:	
   459                           
   460                           ; 2 bytes @ 0x6
   461  0012                     	ds	2
   462  0014                     myIsr@ii:	
   463                           
   464                           ; 2 bytes @ 0x8
   465  0014                     	ds	2
   466  0016                     ?_updatePort:	
   467  0016                     ??_sendDataToAltera:	
   468                           ; 1 bytes @ 0xA
   469                           
   470  0016                     updatePort@set:	
   471                           ; 1 bytes @ 0xA
   472                           
   473                           
   474                           ; 1 bytes @ 0xA
   475  0016                     	ds	1
   476  0017                     ??_updatePort:	
   477                           
   478                           ; 1 bytes @ 0xB
   479  0017                     	ds	3
   480  001A                     updatePort@b:	
   481                           
   482                           ; 1 bytes @ 0xE
   483  001A                     	ds	1
   484  001B                     updatePort@a:	
   485                           
   486                           ; 1 bytes @ 0xF
   487  001B                     	ds	1
   488  001C                     updatePort@bit_id:	
   489                           
   490                           ; 1 bytes @ 0x10
   491  001C                     	ds	1
   492  001D                     ?_updateKey:	
   493  001D                     updateKey@set:	
   494                           ; 1 bytes @ 0x11
   495                           
   496                           
   497                           ; 1 bytes @ 0x11
   498  001D                     	ds	1
   499  001E                     ??_updateKey:	
   500                           
   501                           ; 1 bytes @ 0x12
   502  001E                     	ds	1
   503  001F                     updateKey@localShift:	
   504                           
   505                           ; 1 bytes @ 0x13
   506  001F                     	ds	1
   507  0020                     _updateKey$94:	
   508                           
   509                           ; 1 bytes @ 0x14
   510  0020                     	ds	1
   511  0021                     updateKey@localCtrl:	
   512                           
   513                           ; 1 bytes @ 0x15
   514  0021                     	ds	1
   515  0022                     _updateKey$97:	
   516                           
   517                           ; 1 bytes @ 0x16
   518  0022                     	ds	1
   519  0023                     _updateKey$98:	
   520                           
   521                           ; 1 bytes @ 0x17
   522  0023                     	ds	1
   523  0024                     updateKey@key:	
   524                           
   525                           ; 1 bytes @ 0x18
   526  0024                     	ds	1
   527  0025                     ??_main:	
   528                           
   529                           ; 1 bytes @ 0x19
   530  0025                     	ds	1
   531                           
   532                           	psect	maintext
   533  00F5                     __pmaintext:	
   534 ;;
   535 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   536 ;;
   537 ;; *************** function _main *****************
   538 ;; Defined at:
   539 ;;		line 216 in file "main.c"
   540 ;; Parameters:    Size  Location     Type
   541 ;;		None
   542 ;; Auto vars:     Size  Location     Type
   543 ;;		None
   544 ;; Return value:  Size  Location     Type
   545 ;;                  1    wreg      void 
   546 ;; Registers used:
   547 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   548 ;; Tracked objects:
   549 ;;		On entry : B00/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMMON   BANK0
   553 ;;      Params:         0       0
   554 ;;      Locals:         0       0
   555 ;;      Temps:          0       1
   556 ;;      Totals:         0       1
   557 ;;Total ram usage:        1 bytes
   558 ;; Hardware stack levels required when called:    4
   559 ;; This function calls:
   560 ;;		_sendDataToAltera
   561 ;;		_updateKey
   562 ;; This function is called by:
   563 ;;		Startup code after reset
   564 ;; This function uses a non-reentrant model
   565 ;;
   566                           
   567                           
   568                           ;psect for function _main
   569  00F5                     _main:	
   570                           
   571                           ;main.c: 218:     TRISA0 = 1;
   572                           
   573                           ;incstack = 0
   574                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   575  00F5  1683               	bsf	3,5	;RP0=1, select bank1
   576  00F6  1405               	bsf	5,0	;volatile
   577                           
   578                           ;main.c: 219:     TRISA1 = 0;
   579  00F7  1085               	bcf	5,1	;volatile
   580                           
   581                           ;main.c: 220:     TRISA2 = 0;
   582  00F8  1105               	bcf	5,2	;volatile
   583                           
   584                           ;main.c: 221:     TRISA3 = 1;
   585  00F9  1585               	bsf	5,3	;volatile
   586                           
   587                           ;main.c: 222:     TRISA4 = 1;
   588  00FA  1605               	bsf	5,4	;volatile
   589                           
   590                           ;main.c: 224:     PORTA = 0b00000000;
   591  00FB  1283               	bcf	3,5	;RP0=0, select bank0
   592  00FC  0185               	clrf	5	;volatile
   593                           
   594                           ;main.c: 226:     TRISB = 0b00000000;
   595  00FD  1683               	bsf	3,5	;RP0=1, select bank1
   596  00FE  0186               	clrf	6	;volatile
   597                           
   598                           ;main.c: 227:     PORTB = 0b00000000;
   599  00FF  1283               	bcf	3,5	;RP0=0, select bank0
   600  0100  0186               	clrf	6	;volatile
   601                           
   602                           ;main.c: 247:     T0CS = 1;
   603  0101  1683               	bsf	3,5	;RP0=1, select bank1
   604  0102  1681               	bsf	1,5	;volatile
   605                           
   606                           ;main.c: 248:     T0SE = 1;
   607  0103  1601               	bsf	1,4	;volatile
   608                           
   609                           ;main.c: 249:     GIE = 1;
   610  0104  178B               	bsf	11,7	;volatile
   611                           
   612                           ;main.c: 250:     T0IE = 1;
   613  0105  168B               	bsf	11,5	;volatile
   614                           
   615                           ;main.c: 251:     PSA = 1;
   616  0106  1581               	bsf	1,3	;volatile
   617                           
   618                           ;main.c: 252:     T0IF = 0;
   619  0107  110B               	bcf	11,2	;volatile
   620                           
   621                           ;main.c: 253:     TMR0 = 255;
   622  0108  30FF               	movlw	255
   623  0109  1283               	bcf	3,5	;RP0=0, select bank0
   624  010A  0081               	movwf	1	;volatile
   625                           
   626                           ;main.c: 255:     ps2Data = 0;
   627  010B  01AF               	clrf	_ps2Data
   628                           
   629                           ;main.c: 256:     ps2DataCount = 0;
   630  010C  01AE               	clrf	_ps2DataCount
   631                           
   632                           ;main.c: 257:     ps2WaitCode = 0;
   633  010D  01AD               	clrf	_ps2WaitCode
   634                           
   635                           ;main.c: 258:     ps2Down = 1;
   636  010E  01C0               	clrf	_ps2Down
   637  010F  0AC0               	incf	_ps2Down,f
   638                           
   639                           ;main.c: 259:     ps2NeedEncode = 0;
   640  0110  01AC               	clrf	_ps2NeedEncode
   641                           
   642                           ;main.c: 260:     ps2DataState = 0;
   643  0111  01B2               	clrf	_ps2DataState
   644  0112                     l1146:	
   645                           ;main.c: 262:     while(1)
   646                           
   647                           
   648                           ;main.c: 263:     {;main.c: 264:         if ( ps2DataState == 2 ) {
   649  0112  3002               	movlw	2
   650  0113  1283               	bcf	3,5	;RP0=0, select bank0
   651  0114  0632               	xorwf	_ps2DataState,w
   652  0115  1D03               	btfss	3,2
   653  0116  2964               	goto	l1198
   654                           
   655                           ;main.c: 266:             replaced = 0;
   656  0117  01A8               	clrf	_replaced
   657                           
   658                           ;main.c: 267:             if ( shift && !ctrl ) {
   659  0118  082A               	movf	_shift,w
   660  0119  1903               	btfsc	3,2
   661  011A  293D               	goto	l1170
   662  011B  0829               	movf	_ctrl,w
   663  011C  1D03               	btfss	3,2
   664  011D  293D               	goto	l1170
   665                           
   666                           ;main.c: 269:                 for(i = 0; i < 35 ;i+=2) {
   667  011E  01AB               	clrf	_i
   668  011F  3023               	movlw	35
   669  0120  022B               	subwf	_i,w
   670  0121  1803               	btfsc	3,0
   671  0122  293D               	goto	l1170
   672  0123                     l1160:	
   673                           
   674                           ;main.c: 270:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   675  0123  082B               	movf	_i,w
   676  0124  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   677  0125  0084               	movwf	4
   678  0126  2031               	fcall	stringdir
   679  0127  062F               	xorwf	_ps2Data,w
   680  0128  1D03               	skipz
   681  0129  2935               	goto	l1166
   682                           
   683                           ;main.c: 271:                         replaced = 1;
   684  012A  01A8               	clrf	_replaced
   685  012B  0AA8               	incf	_replaced,f
   686                           
   687                           ;main.c: 272:                         ps2Data = replaceOnShiftKeyDown[i+1];
   688  012C  082B               	movf	_i,w
   689  012D  3E01               	addlw	1
   690  012E  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   691  012F  0084               	movwf	4
   692  0130  2031               	fcall	stringdir
   693  0131  00A5               	movwf	??_main
   694  0132  0825               	movf	??_main,w
   695  0133  00AF               	movwf	_ps2Data
   696                           
   697                           ;main.c: 273:                         break;
   698  0134  293D               	goto	l1170
   699  0135                     l1166:	
   700                           ;main.c: 274:                     }
   701                           
   702                           
   703                           ;main.c: 275:                 }
   704  0135  3002               	movlw	2
   705  0136  00A5               	movwf	??_main
   706  0137  0825               	movf	??_main,w
   707  0138  07AB               	addwf	_i,f
   708  0139  3023               	movlw	35
   709  013A  022B               	subwf	_i,w
   710  013B  1C03               	skipc
   711  013C  2923               	goto	l1160
   712  013D                     l1170:	
   713                           ;main.c: 276:             }
   714                           
   715                           
   716                           ;main.c: 278:             if ( ps2Data == 18 || ps2Data == 89) shift = ps2Down;
   717  013D  3012               	movlw	18
   718  013E  062F               	xorwf	_ps2Data,w
   719  013F  1903               	btfsc	3,2
   720  0140  2945               	goto	l1174
   721  0141  3059               	movlw	89
   722  0142  062F               	xorwf	_ps2Data,w
   723  0143  1D03               	btfss	3,2
   724  0144  2949               	goto	l1176
   725  0145                     l1174:	
   726  0145  0840               	movf	_ps2Down,w
   727  0146  00A5               	movwf	??_main
   728  0147  0825               	movf	??_main,w
   729  0148  00AA               	movwf	_shift
   730  0149                     l1176:	
   731                           
   732                           ;main.c: 279:             if ( ps2Data == 20 || ps2Data == 19) ctrl = ps2Down;
   733  0149  3014               	movlw	20
   734  014A  062F               	xorwf	_ps2Data,w
   735  014B  1903               	btfsc	3,2
   736  014C  2951               	goto	l1180
   737  014D  3013               	movlw	19
   738  014E  062F               	xorwf	_ps2Data,w
   739  014F  1D03               	btfss	3,2
   740  0150  2955               	goto	l1182
   741  0151                     l1180:	
   742  0151  0840               	movf	_ps2Down,w
   743  0152  00A5               	movwf	??_main
   744  0153  0825               	movf	??_main,w
   745  0154  00A9               	movwf	_ctrl
   746  0155                     l1182:	
   747                           
   748                           ;main.c: 280:             updateKey(ps2Data, ps2Down );
   749  0155  0840               	movf	_ps2Down,w
   750  0156  00A5               	movwf	??_main
   751  0157  0825               	movf	??_main,w
   752  0158  009D               	movwf	updateKey@set
   753  0159  082F               	movf	_ps2Data,w
   754  015A  2237               	fcall	_updateKey
   755                           
   756                           ;main.c: 283:             ps2Data = 0;
   757  015B  1283               	bcf	3,5	;RP0=0, select bank0
   758  015C  01AF               	clrf	_ps2Data
   759                           
   760                           ;main.c: 284:             ps2DataCount = 0;
   761  015D  01AE               	clrf	_ps2DataCount
   762                           
   763                           ;main.c: 285:             ps2WaitCode = 0;
   764  015E  01AD               	clrf	_ps2WaitCode
   765                           
   766                           ;main.c: 286:             ps2Down = 1;
   767  015F  01C0               	clrf	_ps2Down
   768  0160  0AC0               	incf	_ps2Down,f
   769                           
   770                           ;main.c: 287:             ps2NeedEncode = 0;
   771  0161  01AC               	clrf	_ps2NeedEncode
   772                           
   773                           ;main.c: 288:             ps2DataState = 0;
   774  0162  01B2               	clrf	_ps2DataState
   775                           
   776                           ;main.c: 291:             sendDataToAltera();
   777  0163  22C0               	fcall	_sendDataToAltera
   778  0164                     l1198:	
   779                           ;main.c: 292:         }
   780                           
   781                           
   782                           ;main.c: 297:         mouseDelay++;
   783  0164  3001               	movlw	1
   784  0165  1283               	bcf	3,5	;RP0=0, select bank0
   785  0166  07A6               	addwf	_mouseDelay,f
   786  0167  1803               	skipnc
   787  0168  0AA7               	incf	_mouseDelay+1,f
   788  0169  3000               	movlw	0
   789  016A  07A7               	addwf	_mouseDelay+1,f
   790                           
   791                           ;main.c: 298:         if ( mouseDelay > 2000 ) {
   792  016B  3007               	movlw	7
   793  016C  0227               	subwf	_mouseDelay+1,w
   794  016D  30D1               	movlw	209
   795  016E  1903               	skipnz
   796  016F  0226               	subwf	_mouseDelay,w
   797  0170  1C03               	skipc
   798  0171  29A2               	goto	l141
   799                           
   800                           ;main.c: 300:             if ( outPorts[9] > mouseX ) outPorts[9]--;
   801  0172  083C               	movf	_outPorts+9,w
   802  0173  023F               	subwf	_mouseX,w
   803  0174  1803               	skipnc
   804  0175  2979               	goto	l1206
   805  0176  3001               	movlw	1
   806  0177  02BC               	subwf	_outPorts+9,f
   807  0178  2981               	goto	l1210
   808  0179                     l1206:	
   809                           ;main.c: 301:             else if ( outPorts[9] < mouseX ) outPorts[9]++;
   810                           
   811  0179  083F               	movf	_mouseX,w
   812  017A  023C               	subwf	_outPorts+9,w
   813  017B  1803               	skipnc
   814  017C  2981               	goto	l1210
   815  017D  3001               	movlw	1
   816  017E  00A5               	movwf	??_main
   817  017F  0825               	movf	??_main,w
   818  0180  07BC               	addwf	_outPorts+9,f
   819  0181                     l1210:	
   820                           
   821                           ;main.c: 302:             if ( outPorts[10] > mouseY ) outPorts[10]--;
   822  0181  083D               	movf	_outPorts+10,w
   823  0182  023E               	subwf	_mouseY,w
   824  0183  1803               	skipnc
   825  0184  2988               	goto	l1214
   826  0185  3001               	movlw	1
   827  0186  02BD               	subwf	_outPorts+10,f
   828  0187  2990               	goto	l1218
   829  0188                     l1214:	
   830                           ;main.c: 303:             else if ( outPorts[10] < mouseY ) outPorts[10]++;
   831                           
   832  0188  083E               	movf	_mouseY,w
   833  0189  023D               	subwf	_outPorts+10,w
   834  018A  1803               	skipnc
   835  018B  2990               	goto	l1218
   836  018C  3001               	movlw	1
   837  018D  00A5               	movwf	??_main
   838  018E  0825               	movf	??_main,w
   839  018F  07BD               	addwf	_outPorts+10,f
   840  0190                     l1218:	
   841                           
   842                           ;main.c: 305:             if ( outPorts[9] == mouseX && outPorts[10] == mouseY ) {
   843  0190  083C               	movf	_outPorts+9,w
   844  0191  063F               	xorwf	_mouseX,w
   845  0192  1D03               	skipz
   846  0193  299E               	goto	l1224
   847  0194  083D               	movf	_outPorts+10,w
   848  0195  063E               	xorwf	_mouseY,w
   849  0196  1D03               	skipz
   850  0197  299E               	goto	l1224
   851                           
   852                           ;main.c: 306:                 mouseX -= 128;
   853  0198  3080               	movlw	128
   854  0199  02BF               	subwf	_mouseX,f
   855                           
   856                           ;main.c: 307:                 mouseY += 200;
   857  019A  30C8               	movlw	200
   858  019B  00A5               	movwf	??_main
   859  019C  0825               	movf	??_main,w
   860  019D  07BE               	addwf	_mouseY,f
   861  019E                     l1224:	
   862                           ;main.c: 308:             }
   863                           
   864                           
   865                           ;main.c: 309:             sendDataToAltera();
   866  019E  22C0               	fcall	_sendDataToAltera
   867                           
   868                           ;main.c: 311:             mouseDelay = 0;
   869  019F  1283               	bcf	3,5	;RP0=0, select bank0
   870  01A0  01A6               	clrf	_mouseDelay
   871  01A1  01A7               	clrf	_mouseDelay+1
   872  01A2                     l141:	
   873                           ;main.c: 312:         }
   874                           
   875  01A2  0064               	clrwdt	;# 
   876                           
   877                           ;main.c: 316:     }
   878  01A3  2912               	goto	l1146
   879  01A4                     __end_of_main:	
   880                           
   881                           	psect	text1
   882  0237                     __ptext1:	
   883 ;; *************** function _updateKey *****************
   884 ;; Defined at:
   885 ;;		line 146 in file "main.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;  key             1    wreg     unsigned char 
   888 ;;  set             1   17[BANK0 ] unsigned char 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  key             1   24[BANK0 ] unsigned char 
   891 ;;  localCtrl       1   21[BANK0 ] unsigned char 
   892 ;;  localShift      1   19[BANK0 ] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMMON   BANK0
   902 ;;      Params:         0       1
   903 ;;      Locals:         0       6
   904 ;;      Temps:          0       1
   905 ;;      Totals:         0       8
   906 ;;Total ram usage:        8 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    3
   909 ;; This function calls:
   910 ;;		_updatePort
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           
   917                           ;psect for function _updateKey
   918  0237                     _updateKey:	
   919                           
   920                           ;incstack = 0
   921                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   922                           ;updateKey@key stored from wreg
   923  0237  1283               	bcf	3,5	;RP0=0, select bank0
   924  0238  00A4               	movwf	updateKey@key
   925                           
   926                           ;main.c: 146: void updateKey(uint_fast8_t key, uint_fast8_t set);main.c: 147: {;main.c: 
      +                          148:     i = 0xFF;
   927  0239  30FF               	movlw	255
   928  023A  009E               	movwf	??_updateKey
   929  023B  081E               	movf	??_updateKey,w
   930  023C  00AB               	movwf	_i
   931                           
   932                           ;main.c: 149:     uint_fast8_t localShift = shift && !replaced;
   933  023D  01A0               	clrf	_updateKey$94
   934  023E  082A               	movf	_shift,w
   935  023F  1903               	btfsc	3,2
   936  0240  2A46               	goto	l998
   937  0241  0828               	movf	_replaced,w
   938  0242  1D03               	btfss	3,2
   939  0243  2A46               	goto	l998
   940  0244  01A0               	clrf	_updateKey$94
   941  0245  0AA0               	incf	_updateKey$94,f
   942  0246                     l998:	
   943  0246  0820               	movf	_updateKey$94,w
   944  0247  009E               	movwf	??_updateKey
   945  0248  081E               	movf	??_updateKey,w
   946  0249  009F               	movwf	updateKey@localShift
   947                           
   948                           ;main.c: 150:     uint_fast8_t localCtrl = ctrl;
   949  024A  0829               	movf	_ctrl,w
   950  024B  009E               	movwf	??_updateKey
   951  024C  081E               	movf	??_updateKey,w
   952  024D  00A1               	movwf	updateKey@localCtrl
   953                           
   954                           ;main.c: 151:     if ( key < 128 ) i = codeToMatrix[key];
   955  024E  3080               	movlw	128
   956  024F  0224               	subwf	updateKey@key,w
   957  0250  1803               	skipnc
   958  0251  2A59               	goto	l1002
   959  0252  0824               	movf	updateKey@key,w
   960  0253  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
   961  0254  0084               	movwf	4
   962  0255  2031               	fcall	stringdir
   963  0256  009E               	movwf	??_updateKey
   964  0257  081E               	movf	??_updateKey,w
   965  0258  00AB               	movwf	_i
   966  0259                     l1002:	
   967                           
   968                           ;main.c: 152:     if ( i != 0xFF ) {
   969  0259  0A2B               	incf	_i,w
   970  025A  1903               	btfsc	3,2
   971  025B  2A7B               	goto	l1026
   972                           
   973                           ;main.c: 153:         updatePort(i, set);
   974  025C  081D               	movf	updateKey@set,w
   975  025D  009E               	movwf	??_updateKey
   976  025E  081E               	movf	??_updateKey,w
   977  025F  0096               	movwf	updatePort@set
   978  0260  082B               	movf	_i,w
   979  0261  2289               	fcall	_updatePort
   980                           
   981                           ;main.c: 154:         localShift |= (i & 0b01000000) > 0 && set;
   982  0262  1283               	bcf	3,5	;RP0=0, select bank0
   983  0263  01A2               	clrf	_updateKey$97
   984  0264  1F2B               	btfss	_i,6
   985  0265  2A6B               	goto	l1014
   986  0266  081D               	movf	updateKey@set,w
   987  0267  1903               	btfsc	3,2
   988  0268  2A6B               	goto	l1014
   989  0269  01A2               	clrf	_updateKey$97
   990  026A  0AA2               	incf	_updateKey$97,f
   991  026B                     l1014:	
   992  026B  0822               	movf	_updateKey$97,w
   993  026C  009E               	movwf	??_updateKey
   994  026D  081E               	movf	??_updateKey,w
   995  026E  049F               	iorwf	updateKey@localShift,f
   996                           
   997                           ;main.c: 155:         localCtrl |= (i & 0b10000000) > 0 && set;
   998  026F  01A3               	clrf	_updateKey$98
   999  0270  1FAB               	btfss	_i,7
  1000  0271  2A77               	goto	l1024
  1001  0272  081D               	movf	updateKey@set,w
  1002  0273  1903               	btfsc	3,2
  1003  0274  2A77               	goto	l1024
  1004  0275  01A3               	clrf	_updateKey$98
  1005  0276  0AA3               	incf	_updateKey$98,f
  1006  0277                     l1024:	
  1007  0277  0823               	movf	_updateKey$98,w
  1008  0278  009E               	movwf	??_updateKey
  1009  0279  081E               	movf	??_updateKey,w
  1010  027A  04A1               	iorwf	updateKey@localCtrl,f
  1011  027B                     l1026:	
  1012                           ;main.c: 156:     }
  1013                           
  1014                           
  1015                           ;main.c: 157:     updatePort(0x00, localShift);
  1016  027B  081F               	movf	updateKey@localShift,w
  1017  027C  009E               	movwf	??_updateKey
  1018  027D  081E               	movf	??_updateKey,w
  1019  027E  0096               	movwf	updatePort@set
  1020  027F  3000               	movlw	0
  1021  0280  2289               	fcall	_updatePort
  1022                           
  1023                           ;main.c: 158:     updatePort(0x0F, localCtrl);
  1024  0281  1283               	bcf	3,5	;RP0=0, select bank0
  1025  0282  0821               	movf	updateKey@localCtrl,w
  1026  0283  009E               	movwf	??_updateKey
  1027  0284  081E               	movf	??_updateKey,w
  1028  0285  0096               	movwf	updatePort@set
  1029  0286  300F               	movlw	15
  1030  0287  2289               	fcall	_updatePort
  1031  0288  0008               	return
  1032  0289                     __end_of_updateKey:	
  1033                           
  1034                           	psect	text2
  1035  0289                     __ptext2:	
  1036 ;; *************** function _updatePort *****************
  1037 ;; Defined at:
  1038 ;;		line 135 in file "main.c"
  1039 ;; Parameters:    Size  Location     Type
  1040 ;;  bit_id          1    wreg     unsigned char 
  1041 ;;  set             1   10[BANK0 ] unsigned char 
  1042 ;; Auto vars:     Size  Location     Type
  1043 ;;  bit_id          1   16[BANK0 ] unsigned char 
  1044 ;;  a               1   15[BANK0 ] unsigned char 
  1045 ;;  b               1   14[BANK0 ] unsigned char 
  1046 ;; Return value:  Size  Location     Type
  1047 ;;                  1    wreg      void 
  1048 ;; Registers used:
  1049 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1050 ;; Tracked objects:
  1051 ;;		On entry : 0/0
  1052 ;;		On exit  : 0/0
  1053 ;;		Unchanged: 0/0
  1054 ;; Data sizes:     COMMON   BANK0
  1055 ;;      Params:         0       1
  1056 ;;      Locals:         0       3
  1057 ;;      Temps:          0       3
  1058 ;;      Totals:         0       7
  1059 ;;Total ram usage:        7 bytes
  1060 ;; Hardware stack levels used:    1
  1061 ;; Hardware stack levels required when called:    2
  1062 ;; This function calls:
  1063 ;;		Nothing
  1064 ;; This function is called by:
  1065 ;;		_updateKey
  1066 ;; This function uses a non-reentrant model
  1067 ;;
  1068                           
  1069                           
  1070                           ;psect for function _updatePort
  1071  0289                     _updatePort:	
  1072                           
  1073                           ;incstack = 0
  1074                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1075                           ;updatePort@bit_id stored from wreg
  1076  0289  1283               	bcf	3,5	;RP0=0, select bank0
  1077  028A  009C               	movwf	updatePort@bit_id
  1078                           
  1079                           ;main.c: 135: void updatePort(uint_fast8_t bit_id, uint_fast8_t set);main.c: 136: {;main
      +                          .c: 137:     uint_fast8_t b = outPorts[bit_id & 7];
  1080  028B  081C               	movf	updatePort@bit_id,w
  1081  028C  3907               	andlw	7
  1082  028D  3E33               	addlw	(low (_outPorts| 0))& (0+255)
  1083  028E  0084               	movwf	4
  1084  028F  1383               	bcf	3,7	;select IRP bank0
  1085  0290  0800               	movf	0,w
  1086  0291  0097               	movwf	??_updatePort
  1087  0292  0817               	movf	??_updatePort,w
  1088  0293  009A               	movwf	updatePort@b
  1089                           
  1090                           ;main.c: 138:     uint_fast8_t a = (1 << ((bit_id >> 3) & 7));
  1091  0294  3001               	movlw	1
  1092  0295  0097               	movwf	??_updatePort
  1093  0296  081C               	movf	updatePort@bit_id,w
  1094  0297  0098               	movwf	??_updatePort+1
  1095  0298  3003               	movlw	3
  1096  0299                     u495:	
  1097  0299  1003               	clrc
  1098  029A  0C98               	rrf	??_updatePort+1,f
  1099  029B  3EFF               	addlw	-1
  1100  029C  1D03               	skipz
  1101  029D  2A99               	goto	u495
  1102  029E  0818               	movf	??_updatePort+1,w
  1103  029F  3907               	andlw	7
  1104  02A0  3E01               	addlw	1
  1105  02A1  2AA4               	goto	u504
  1106  02A2                     u505:	
  1107  02A2  1003               	clrc
  1108  02A3  0D97               	rlf	??_updatePort,f
  1109  02A4                     u504:	
  1110  02A4  3EFF               	addlw	-1
  1111  02A5  1D03               	skipz
  1112  02A6  2AA2               	goto	u505
  1113  02A7  0817               	movf	??_updatePort,w
  1114  02A8  0099               	movwf	??_updatePort+2
  1115  02A9  0819               	movf	??_updatePort+2,w
  1116  02AA  009B               	movwf	updatePort@a
  1117                           
  1118                           ;main.c: 139:     if ( set ) b |= a;
  1119  02AB  0816               	movf	updatePort@set,w
  1120  02AC  1903               	btfsc	3,2
  1121  02AD  2AB3               	goto	l984
  1122  02AE  081B               	movf	updatePort@a,w
  1123  02AF  0097               	movwf	??_updatePort
  1124  02B0  0817               	movf	??_updatePort,w
  1125  02B1  049A               	iorwf	updatePort@b,f
  1126  02B2  2AB7               	goto	l986
  1127  02B3                     l984:	
  1128                           ;main.c: 140:     else b &= ~a;
  1129                           
  1130  02B3  091B               	comf	updatePort@a,w
  1131  02B4  0097               	movwf	??_updatePort
  1132  02B5  0817               	movf	??_updatePort,w
  1133  02B6  059A               	andwf	updatePort@b,f
  1134  02B7                     l986:	
  1135                           
  1136                           ;main.c: 141:     outPorts[bit_id & 7] = b;
  1137  02B7  081A               	movf	updatePort@b,w
  1138  02B8  0097               	movwf	??_updatePort
  1139  02B9  081C               	movf	updatePort@bit_id,w
  1140  02BA  3907               	andlw	7
  1141  02BB  3E33               	addlw	(low (_outPorts| 0))& (0+255)
  1142  02BC  0084               	movwf	4
  1143  02BD  0817               	movf	??_updatePort,w
  1144  02BE  0080               	movwf	0
  1145  02BF  0008               	return
  1146  02C0                     __end_of_updatePort:	
  1147                           
  1148                           	psect	text3
  1149  02C0                     __ptext3:	
  1150 ;; *************** function _sendDataToAltera *****************
  1151 ;; Defined at:
  1152 ;;		line 163 in file "main.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;                  1    wreg      void 
  1159 ;; Registers used:
  1160 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: 0/0
  1165 ;; Data sizes:     COMMON   BANK0
  1166 ;;      Params:         0       0
  1167 ;;      Locals:         0       0
  1168 ;;      Temps:          0       1
  1169 ;;      Totals:         0       1
  1170 ;;Total ram usage:        1 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    2
  1173 ;; This function calls:
  1174 ;;		Nothing
  1175 ;; This function is called by:
  1176 ;;		_main
  1177 ;; This function uses a non-reentrant model
  1178 ;;
  1179                           
  1180                           
  1181                           ;psect for function _sendDataToAltera
  1182  02C0                     _sendDataToAltera:	
  1183                           
  1184                           ;main.c: 165:     RA2 = 1;
  1185                           
  1186                           ;incstack = 0
  1187                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0]
  1188  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  1189  02C1  1505               	bsf	5,2	;volatile
  1190                           
  1191                           ;main.c: 166:     RA1 = 1;
  1192  02C2  1485               	bsf	5,1	;volatile
  1193                           
  1194                           ;main.c: 167:     RA2 = 0;
  1195  02C3  1105               	bcf	5,2	;volatile
  1196                           
  1197                           ;main.c: 168:     RA2 = 1;
  1198  02C4  1505               	bsf	5,2	;volatile
  1199                           
  1200                           ;main.c: 169:     RA1 = 0;
  1201  02C5  1085               	bcf	5,1	;volatile
  1202                           
  1203                           ;main.c: 170:     for(i=0;i<11;i++) {
  1204  02C6  01AB               	clrf	_i
  1205  02C7  300B               	movlw	11
  1206  02C8  022B               	subwf	_i,w
  1207  02C9  1803               	btfsc	3,0
  1208  02CA  2ADB               	goto	l123
  1209  02CB                     l122:	
  1210                           
  1211                           ;main.c: 171:         RA2 = 1;
  1212  02CB  1505               	bsf	5,2	;volatile
  1213                           
  1214                           ;main.c: 172:         PORTB = outPorts[i];
  1215  02CC  082B               	movf	_i,w
  1216  02CD  3E33               	addlw	(low (_outPorts| 0))& (0+255)
  1217  02CE  0084               	movwf	4
  1218  02CF  1383               	bcf	3,7	;select IRP bank0
  1219  02D0  0800               	movf	0,w
  1220  02D1  0086               	movwf	6	;volatile
  1221                           
  1222                           ;main.c: 173:         RA2 = 0;
  1223  02D2  1105               	bcf	5,2	;volatile
  1224                           
  1225                           ;main.c: 174:     }
  1226  02D3  3001               	movlw	1
  1227  02D4  0096               	movwf	??_sendDataToAltera
  1228  02D5  0816               	movf	??_sendDataToAltera,w
  1229  02D6  07AB               	addwf	_i,f
  1230  02D7  300B               	movlw	11
  1231  02D8  022B               	subwf	_i,w
  1232  02D9  1C03               	skipc
  1233  02DA  2ACB               	goto	l122
  1234  02DB                     l123:	
  1235                           
  1236                           ;main.c: 175:     RA2 = 1;
  1237  02DB  1505               	bsf	5,2	;volatile
  1238                           
  1239                           ;main.c: 176:     PORTB = 0;
  1240  02DC  0186               	clrf	6	;volatile
  1241  02DD  0008               	return
  1242  02DE                     __end_of_sendDataToAltera:	
  1243                           
  1244                           	psect	text4
  1245  01A4                     __ptext4:	
  1246 ;; *************** function _myIsr *****************
  1247 ;; Defined at:
  1248 ;;		line 74 in file "main.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;		None
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  ii              2    8[BANK0 ] int 
  1253 ;; Return value:  Size  Location     Type
  1254 ;;                  1    wreg      void 
  1255 ;; Registers used:
  1256 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1257 ;; Tracked objects:
  1258 ;;		On entry : 0/0
  1259 ;;		On exit  : 0/0
  1260 ;;		Unchanged: 0/0
  1261 ;; Data sizes:     COMMON   BANK0
  1262 ;;      Params:         0       0
  1263 ;;      Locals:         0       4
  1264 ;;      Temps:          0       6
  1265 ;;      Totals:         0      10
  1266 ;;Total ram usage:       10 bytes
  1267 ;; Hardware stack levels used:    2
  1268 ;; This function calls:
  1269 ;;		Nothing
  1270 ;; This function is called by:
  1271 ;;		Interrupt level 1
  1272 ;; This function uses a non-reentrant model
  1273 ;;
  1274                           
  1275                           
  1276                           ;psect for function _myIsr
  1277  01A4                     _myIsr:	
  1278                           
  1279                           ;main.c: 76:     if(T0IE && T0IF){
  1280  01A4  1A8B               	btfsc	11,5	;volatile
  1281  01A5  1D0B               	btfss	11,2	;volatile
  1282  01A6  2A2B               	goto	i1l1114
  1283                           
  1284                           ;main.c: 78:         T0IF=0;
  1285  01A7  110B               	bcf	11,2	;volatile
  1286                           
  1287                           ;main.c: 79:         TMR0 = 255;
  1288  01A8  30FF               	movlw	255
  1289  01A9  0081               	movwf	1	;volatile
  1290                           
  1291                           ;main.c: 83:         if ( ps2DataState == 0 ) {
  1292  01AA  0832               	movf	_ps2DataState,w
  1293  01AB  1D03               	btfss	3,2
  1294  01AC  29B5               	goto	i1l1066
  1295                           
  1296                           ;main.c: 84:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  1297  01AD  1E05               	btfss	5,4	;volatile
  1298  01AE  1985               	btfsc	5,3	;volatile
  1299  01AF  2A2B               	goto	i1l1114
  1300                           
  1301                           ;main.c: 85:                 ps2BitsCount = 0;
  1302  01B0  01B0               	clrf	_ps2BitsCount
  1303                           
  1304                           ;main.c: 86:                 ps2Bits = 0;
  1305  01B1  01B1               	clrf	_ps2Bits
  1306                           
  1307                           ;main.c: 87:                 ps2DataState = 1;
  1308  01B2  01B2               	clrf	_ps2DataState
  1309  01B3  0AB2               	incf	_ps2DataState,f
  1310                           
  1311                           ;main.c: 89:         } else if ( ps2DataState == 1 ) {
  1312                           
  1313                           ;main.c: 88:             }
  1314  01B4  2A2B               	goto	i1l1114
  1315  01B5                     i1l1066:	
  1316  01B5  0332               	decf	_ps2DataState,w
  1317  01B6  1D03               	btfss	3,2
  1318  01B7  2A2B               	goto	i1l1114
  1319                           
  1320                           ;main.c: 90:             if ( ps2BitsCount < 8 ) {
  1321  01B8  0830               	movf	_ps2BitsCount,w
  1322  01B9  3A80               	xorlw	128
  1323  01BA  3E78               	addlw	-136
  1324  01BB  1803               	skipnc
  1325  01BC  29CD               	goto	i1l1074
  1326                           
  1327                           ;main.c: 91:                 if ( PORTAbits.RA3 ) {
  1328  01BD  1D85               	btfss	5,3	;volatile
  1329  01BE  29D1               	goto	i1l1076
  1330                           
  1331                           ;main.c: 92:                     ps2Bits |= ( 1 << ps2BitsCount );
  1332  01BF  3001               	movlw	1
  1333  01C0  008C               	movwf	??_myIsr
  1334  01C1  0A30               	incf	_ps2BitsCount,w
  1335  01C2  29C5               	goto	u70_24
  1336  01C3                     u70_25:	
  1337  01C3  1003               	clrc
  1338  01C4  0D8C               	rlf	??_myIsr,f
  1339  01C5                     u70_24:	
  1340  01C5  3EFF               	addlw	-1
  1341  01C6  1D03               	skipz
  1342  01C7  29C3               	goto	u70_25
  1343  01C8  080C               	movf	??_myIsr,w
  1344  01C9  008D               	movwf	??_myIsr+1
  1345  01CA  080D               	movf	??_myIsr+1,w
  1346  01CB  04B1               	iorwf	_ps2Bits,f
  1347                           
  1348                           ;main.c: 93:                 }
  1349  01CC  29D1               	goto	i1l1076
  1350  01CD                     i1l1074:	
  1351                           ;main.c: 95:             } else if ( ps2BitsCount == 8 ) {
  1352                           
  1353                           ;main.c: 94:                 ps2BitsCount++;
  1354                           
  1355  01CD  3008               	movlw	8
  1356  01CE  0630               	xorwf	_ps2BitsCount,w
  1357  01CF  1D03               	btfss	3,2
  1358  01D0  29D6               	goto	i1l1078
  1359  01D1                     i1l1076:	
  1360                           
  1361                           ;main.c: 96:                 ps2BitsCount++;
  1362  01D1  3001               	movlw	1
  1363  01D2  008C               	movwf	??_myIsr
  1364  01D3  080C               	movf	??_myIsr,w
  1365  01D4  07B0               	addwf	_ps2BitsCount,f
  1366                           
  1367                           ;main.c: 97:             } else if ( ps2BitsCount == 9 ) {
  1368  01D5  2A2B               	goto	i1l1114
  1369  01D6                     i1l1078:	
  1370  01D6  3009               	movlw	9
  1371  01D7  0630               	xorwf	_ps2BitsCount,w
  1372  01D8  1D03               	btfss	3,2
  1373  01D9  2A2B               	goto	i1l1114
  1374                           
  1375                           ;main.c: 98:                 ps2DataCount++;
  1376  01DA  3001               	movlw	1
  1377  01DB  008C               	movwf	??_myIsr
  1378  01DC  080C               	movf	??_myIsr,w
  1379  01DD  07AE               	addwf	_ps2DataCount,f
  1380                           
  1381                           ;main.c: 99:                 if ( ps2NeedEncode ) {
  1382  01DE  082C               	movf	_ps2NeedEncode,w
  1383  01DF  1903               	btfsc	3,2
  1384  01E0  2A03               	goto	i1l1096
  1385                           
  1386                           ;main.c: 100:                     for (int ii=0; ii < 25; ii+=2) {
  1387  01E1  0194               	clrf	myIsr@ii
  1388  01E2  0195               	clrf	myIsr@ii+1
  1389  01E3                     L3:	
  1390  01E3  0815               	movf	myIsr@ii+1,w
  1391  01E4  3A80               	xorlw	128
  1392  01E5  00CF               	movwf	79
  1393  01E6  3080               	movlw	128
  1394  01E7  024F               	subwf	79,w
  1395  01E8  1D03               	skipz
  1396  01E9  29EC               	goto	u74_25
  1397  01EA  3019               	movlw	25
  1398  01EB  0214               	subwf	myIsr@ii,w
  1399  01EC                     u74_25:	
  1400  01EC  1803               	btfsc	3,0
  1401  01ED  2A17               	goto	i1l1102
  1402                           
  1403                           ;main.c: 101:                         if ( ps2Bits == replaceTwoBytesCodes[ii] ) {
  1404  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  1405  01EF  0814               	movf	myIsr@ii,w
  1406  01F0  3EA5               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1407  01F1  0084               	movwf	4
  1408  01F2  2031               	fcall	stringdir
  1409  01F3  0631               	xorwf	_ps2Bits,w
  1410  01F4  1D03               	skipz
  1411  01F5  29FC               	goto	i1l1092
  1412                           
  1413                           ;main.c: 102:                             ps2Data = replaceTwoBytesCodes[ii+1];
  1414  01F6  0814               	movf	myIsr@ii,w
  1415  01F7  3E01               	addlw	1
  1416  01F8  3EA5               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1417  01F9  0084               	movwf	4
  1418  01FA  2031               	fcall	stringdir
  1419  01FB  2A14               	goto	L1
  1420  01FC                     i1l1092:	
  1421                           ;main.c: 104:                         }
  1422                           
  1423                           ;main.c: 103:                             break;
  1424                           
  1425                           
  1426                           ;main.c: 105:                     }
  1427  01FC  3002               	movlw	2
  1428  01FD  0794               	addwf	myIsr@ii,f
  1429  01FE  1803               	skipnc
  1430  01FF  0A95               	incf	myIsr@ii+1,f
  1431  0200  3000               	movlw	0
  1432  0201  0795               	addwf	myIsr@ii+1,f
  1433  0202  29E3               	goto	L3
  1434  0203                     i1l1096:	
  1435                           ;main.c: 106:                 } else {
  1436                           
  1437                           
  1438                           ;main.c: 107:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  1439  0203  3083               	movlw	131
  1440  0204  1283               	bcf	3,5	;RP0=0, select bank0
  1441  0205  0631               	xorwf	_ps2Bits,w
  1442  0206  1903               	btfsc	3,2
  1443  0207  2A0F               	goto	i1l1100
  1444  0208  0831               	movf	_ps2Bits,w
  1445  0209  008C               	movwf	??_myIsr
  1446  020A  018D               	clrf	??_myIsr+1
  1447  020B  080C               	movf	??_myIsr,w
  1448  020C  0092               	movwf	_myIsr$84
  1449  020D  080D               	movf	??_myIsr+1,w
  1450  020E  2A12               	goto	L2
  1451  020F                     i1l1100:	
  1452  020F  303F               	movlw	63
  1453  0210  0092               	movwf	_myIsr$84
  1454  0211  3000               	movlw	0
  1455  0212                     L2:	
  1456  0212  0093               	movwf	_myIsr$84+1
  1457  0213  0812               	movf	_myIsr$84,w
  1458  0214                     L1:	
  1459  0214  008C               	movwf	??_myIsr
  1460  0215  080C               	movf	??_myIsr,w
  1461  0216  00AF               	movwf	_ps2Data
  1462  0217                     i1l1102:	
  1463                           ;main.c: 108:                 }
  1464                           
  1465                           
  1466                           ;main.c: 109:                 if ( ps2Bits == 0xF0 ) {
  1467  0217  30F0               	movlw	240
  1468  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1469  0219  0631               	xorwf	_ps2Bits,w
  1470  021A  1D03               	btfss	3,2
  1471  021B  2A1F               	goto	i1l1106
  1472                           
  1473                           ;main.c: 110:                     ps2DataState = 0;
  1474  021C  01B2               	clrf	_ps2DataState
  1475                           
  1476                           ;main.c: 111:                     ps2Down = 0;
  1477  021D  01C0               	clrf	_ps2Down
  1478                           
  1479                           ;main.c: 112:                 } else if ( ps2Bits == 0xE0 ) {
  1480  021E  2A2B               	goto	i1l1114
  1481  021F                     i1l1106:	
  1482  021F  30E0               	movlw	224
  1483  0220  0631               	xorwf	_ps2Bits,w
  1484  0221  1D03               	btfss	3,2
  1485  0222  2A27               	goto	i1l1112
  1486                           
  1487                           ;main.c: 113:                     ps2DataState = 0;
  1488  0223  01B2               	clrf	_ps2DataState
  1489                           
  1490                           ;main.c: 114:                     ps2NeedEncode = 1;
  1491  0224  01AC               	clrf	_ps2NeedEncode
  1492  0225  0AAC               	incf	_ps2NeedEncode,f
  1493                           
  1494                           ;main.c: 115:                 } else {
  1495  0226  2A2B               	goto	i1l1114
  1496  0227                     i1l1112:	
  1497                           
  1498                           ;main.c: 124:                     ps2DataState = 2;
  1499  0227  3002               	movlw	2
  1500  0228  008C               	movwf	??_myIsr
  1501  0229  080C               	movf	??_myIsr,w
  1502  022A  00B2               	movwf	_ps2DataState
  1503  022B                     i1l1114:	
  1504                           ;main.c: 129:     }
  1505                           
  1506                           ;main.c: 128:         }
  1507                           
  1508                           ;main.c: 127:             }
  1509                           
  1510                           ;main.c: 125:                 }
  1511                           
  1512                           
  1513                           ;main.c: 130:     GIE = 1;
  1514  022B  178B               	bsf	11,7	;volatile
  1515  022C  0811               	movf	??_myIsr+5,w
  1516  022D  00CF               	movwf	79
  1517  022E  0810               	movf	??_myIsr+4,w
  1518  022F  008A               	movwf	10
  1519  0230  080F               	movf	??_myIsr+3,w
  1520  0231  0084               	movwf	4
  1521  0232  0E0E               	swapf	(??_myIsr+2)^0,w
  1522  0233  0083               	movwf	3
  1523  0234  0ECE               	swapf	78,f
  1524  0235  0E4E               	swapf	78,w
  1525  0236  0009               	retfie
  1526  0237                     __end_of_myIsr:	
  1527  004E                     btemp	set	78	;btemp
  1528  004E                     wtemp0	set	78
  1529                           
  1530                           	psect	intentry
  1531  0004                     __pintentry:	
  1532                           ;incstack = 0
  1533                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1534                           
  1535  0004                     interrupt_function:	
  1536  004E                     saved_w	set	btemp
  1537  0004  00CE               	movwf	btemp
  1538  0005  0E03               	swapf	3,w
  1539  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1540  0007  008E               	movwf	??_myIsr+2
  1541  0008  0804               	movf	4,w
  1542  0009  008F               	movwf	??_myIsr+3
  1543  000A  080A               	movf	10,w
  1544  000B  0090               	movwf	??_myIsr+4
  1545  000C  084F               	movf	btemp+1,w
  1546  000D  0091               	movwf	??_myIsr+5
  1547  000E  29A4               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    190
    Data        13
    BSS         13
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     26      53

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     692
                                             25 BANK0      1     1      0
                   _sendDataToAltera
                          _updateKey
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            8     7      1     692
                                             17 BANK0      8     7      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (2) _updatePort                                           7     6      1     386
                                             10 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     1     1      0       0
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                               10    10      0     114
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sendDataToAltera
   _updateKey
     _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     1A      35       3       80.3%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      35       6        0.0%
ABS                  0      0      35       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 27 14:37:48 2018

                            _i 002B                              pc 0002                             fsr 0004  
                          l122 02CB                            l123 02DB                            l141 01A2  
                          l984 02B3                            l986 02B7                            _GIE 005F  
                          l998 0246                            _RA1 0029                            _RA2 002A  
                          u504 02A4                            u505 02A2                            u495 0299  
                          _PSA 040B                            fsr0 0004                            indf 0000  
                         l1002 0259                           l1014 026B                           l1024 0277  
                         l1026 027B                           l1210 0181                           l1214 0188  
                         l1206 0179                           l1224 019E                           l1160 0123  
                         l1218 0190                           l1170 013D                           l1146 0112  
                         l1180 0151                           l1182 0155                           l1174 0145  
                         l1166 0135                           l1176 0149                           l1198 0164  
                         _T0IE 005D                           _T0IF 005A                           _T0CS 040D  
                         _T0SE 040C                           _TMR0 0001                           _main 00F5  
                         _ctrl 0029                           btemp 004E                           start 000F  
                        ?_main 000C   __end_of_replaceTwoBytesCodes 00F5                          _PORTA 0005  
                        _PORTB 0006           __end_of_codeToMatrix 00B7                          u70_24 01C5  
                        u70_25 01C3                          _TRISB 0086                          u74_25 01EC  
                        _myIsr 01A4                          _shift 002A               updatePort@bit_id 001C  
                        pclath 000A                          status 0003                   updateKey@key 0024  
                 updateKey@set 001D                          wtemp0 004E                __initialization 0010  
                 __end_of_main 01A4                         ??_main 0025                         ?_myIsr 000C  
                       i1l1100 020F                         i1l1102 0217                         i1l1112 0227  
                       i1l1106 021F                         i1l1114 022B                         i1l1074 01CD  
                       i1l1066 01B5                         i1l1092 01FC                         i1l1076 01D1  
                       i1l1078 01D6                         i1l1096 0203                         _TRISA0 0428  
                       _TRISA1 0429                         _TRISA2 042A                         _TRISA3 042B  
                       _TRISA4 042C       __end_of_sendDataToAltera 02DE                         _mouseX 003F  
                       _mouseY 003E                         saved_w 004E        __end_of__initialization 002F  
         _replaceTwoBytesCodes 00DB                  updatePort@set 0016                   __pidataBANK0 02DE  
                __end_of_myIsr 0237            updateKey@localShift 001F                        ??_myIsr 000C  
                 _ps2DataCount 002E                   _ps2DataState 0032                     __pbssBANK0 0026  
                 _ps2BitsCount 0030                   _codeToMatrix 0037                     __pmaintext 00F5  
                   __pintentry 0004             __size_of_updateKey 0052                     __stringtab 0031  
__end_of_replaceOnShiftKeyDown 00DB                        _ps2Data 002F                        _ps2Bits 0031  
                      _ps2Down 0040                        __ptext1 0237                        __ptext2 0289  
                      __ptext3 02C0                        __ptext4 01A4                        clrloop0 02EC  
         end_of_initialization 002F                        myIsr@ii 0014              ?_sendDataToAltera 000C  
                   _mouseDelay 0026              __end_of_updateKey 0289             ??_sendDataToAltera 0016  
                    _PORTAbits 0005                     _updatePort 0289            start_initialization 0010  
                  updatePort@a 001B                    updatePort@b 001A                    __pdataBANK0 0033  
                    ___latbits 0000                  __pcstackBANK0 000C                    ?_updatePort 0016  
           updateKey@localCtrl 0021                      __pnvBANK0 0040                      __pstrings 0031  
                _ps2NeedEncode 002C                    _ps2WaitCode 002D                 __size_of_myIsr 0093  
            interrupt_function 0004                      clear_ram0 02EB            __size_of_updatePort 0037  
        _replaceOnShiftKeyDown 00B7                      _updateKey 0237                    __stringbase 0036  
    __size_of_sendDataToAltera 001E                     ?_updateKey 001D             __end_of__stringtab 0037  
                     _myIsr$84 0012                  __size_of_main 00AF                       _replaced 0028  
                     _outPorts 0033                   ??_updatePort 0017                       intlevel1 0000  
                    stringcode 0031             __end_of_updatePort 02C0                    ??_updateKey 001E  
             _sendDataToAltera 02C0                       stringdir 0031                       stringtab 0031  
                 _updateKey$94 0020                   _updateKey$97 0022                   _updateKey$98 0023  
