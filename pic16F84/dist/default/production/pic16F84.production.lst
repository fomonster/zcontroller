

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Aug 24 19:43:38 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F84A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   102                           EEDATA equ 08h ;# 
   103  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   104                           EEADR equ 09h ;# 
   105  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   106                           PCLATH equ 0Ah ;# 
   107  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   108                           INTCON equ 0Bh ;# 
   109  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   110                           OPTION_REG equ 081h ;# 
   111  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   112                           TRISA equ 085h ;# 
   113  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   114                           TRISB equ 086h ;# 
   115  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   116                           EECON1 equ 088h ;# 
   117  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   118                           EECON2 equ 089h ;# 
   119  0089                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   120                           INDF equ 00h ;# 
   121  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   122                           TMR0 equ 01h ;# 
   123  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   124                           PCL equ 02h ;# 
   125  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   126                           STATUS equ 03h ;# 
   127  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   128                           FSR equ 04h ;# 
   129  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   130                           PORTA equ 05h ;# 
   131  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   132                           PORTB equ 06h ;# 
   133  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   134                           EEDATA equ 08h ;# 
   135  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   136                           EEADR equ 09h ;# 
   137  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   138                           PCLATH equ 0Ah ;# 
   139  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   140                           INTCON equ 0Bh ;# 
   141  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   142                           OPTION_REG equ 081h ;# 
   143  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   144                           TRISA equ 085h ;# 
   145  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   146                           TRISB equ 086h ;# 
   147  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   148                           EECON1 equ 088h ;# 
   149  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   150                           EECON2 equ 089h ;# 
   151  0089                     	FNCALL	_main,_keyDown
   152                           	FNCALL	_main,_keyUp
   153                           	FNCALL	_main,_sendDataToAltera
   154                           	FNCALL	_sendDataToAltera,_myDelay
   155                           	FNCALL	_keyUp,_resetPort
   156                           	FNCALL	_keyDown,_resetPort
   157                           	FNCALL	_keyDown,_setPort
   158                           	FNROOT	_main
   159                           	FNCALL	intlevel1,_myIsr
   160                           	global	intlevel1
   161                           	FNROOT	intlevel1
   162                           	global	_codeToMatrix
   163                           psect	strings,class=STRING,delta=2,noexec
   164                           global __pstrings
   165                           __pstrings:
   166  0100                     stringtab:
   167  0100                     	global    __stringtab
   168                           __stringtab:
   169  0100                     ;	String table - string pointers are 1 byte each
   170                           stringcode:stringdir:
   171  0100                     movlw high(stringdir)
      + 0100                     stringdir:	
   172  0100  3001               movwf pclath
   173  0101  008A               movf fsr,w
   174  0102  0804               incf fsr
   175  0103  0A84               	addwf pc
   176  0104  0782               	global __stringbase
   177                           __stringbase:
   178  0105                     	retlw	0
   179  0105  3400               psect	strings
   180                           	global    __end_of__stringtab
   181                           __end_of__stringtab:
   182  0106                     	file	"./ps2tozxtable.h"
   183                           	line	47
   184                           _codeToMatrix:
   185  0106                     	retlw	0FFh
   186  0106  34FF               	retlw	0FFh
   187  0107  34FF               	retlw	0FFh
   188  0108  34FF               	retlw	0FFh
   189  0109  34FF               	retlw	0FFh
   190  010A  34FF               	retlw	0FFh
   191  010B  34FF               	retlw	0FFh
   192  010C  34FF               	retlw	0FFh
   193  010D  34FF               	retlw	0FFh
   194  010E  34FF               	retlw	0FFh
   195  010F  34FF               	retlw	0FFh
   196  0110  34FF               	retlw	0FFh
   197  0111  34FF               	retlw	0FFh
   198  0112  34FF               	retlw	0FFh
   199  0113  34FF               	retlw	09Ch
   200  0114  349C               	retlw	0FFh
   201  0115  34FF               	retlw	0FFh
   202  0116  34FF               	retlw	0FFh
   203  0117  34FF               	retlw	0FFh
   204  0118  34FF               	retlw	0FFh
   205  0119  34FF               	retlw	0FFh
   206  011A  34FF               	retlw	02h
   207  011B  3402               	retlw	03h
   208  011C  3403               	retlw	0FFh
   209  011D  34FF               	retlw	0FFh
   210  011E  34FF               	retlw	0FFh
   211  011F  34FF               	retlw	08h
   212  0120  3408               	retlw	09h
   213  0121  3409               	retlw	01h
   214  0122  3401               	retlw	0Ah
   215  0123  340A               	retlw	0Bh
   216  0124  340B               	retlw	044h
   217  0125  3444               	retlw	0FFh
   218  0126  34FF               	retlw	018h
   219  0127  3418               	retlw	010h
   220  0128  3410               	retlw	011h
   221  0129  3411               	retlw	012h
   222  012A  3412               	retlw	01Bh
   223  012B  341B               	retlw	013h
   224  012C  3413               	retlw	0FFh
   225  012D  34FF               	retlw	05Ch
   226  012E  345C               	retlw	07h
   227  012F  3407               	retlw	020h
   228  0130  3420               	retlw	019h
   229  0131  3419               	retlw	022h
   230  0132  3422               	retlw	01Ah
   231  0133  341A               	retlw	023h
   232  0134  3423               	retlw	063h
   233  0135  3463               	retlw	064h
   234  0136  3464               	retlw	01Fh
   235  0137  341F               	retlw	027h
   236  0138  3427               	retlw	026h
   237  0139  3426               	retlw	021h
   238  013A  3421               	retlw	025h
   239  013B  3425               	retlw	024h
   240  013C  3424               	retlw	054h
   241  013D  3454               	retlw	0A0h
   242  013E  34A0               	retlw	06h
   243  013F  3406               	retlw	017h
   244  0140  3417               	retlw	01Eh
   245  0141  341E               	retlw	01Dh
   246  0142  341D               	retlw	01Ch
   247  0143  341C               	retlw	014h
   248  0144  3414               	retlw	0FFh
   249  0145  34FF               	retlw	0FFh
   250  0146  34FF               	retlw	09Fh
   251  0147  349F               	retlw	016h
   252  0148  3416               	retlw	015h
   253  0149  3415               	retlw	0Dh
   254  014A  340D               	retlw	04h
   255  014B  3404               	retlw	0Ch
   256  014C  340C               	retlw	0FFh
   257  014D  34FF               	retlw	0FFh
   258  014E  34FF               	retlw	097h
   259  014F  3497               	retlw	0A0h
   260  0150  34A0               	retlw	0Eh
   261  0151  340E               	retlw	08Dh
   262  0152  348D               	retlw	05h
   263  0153  3405               	retlw	09Eh
   264  0154  349E               	retlw	083h
   265  0155  3483               	retlw	08Bh
   266  0156  348B               	retlw	093h
   267  0157  3493               	retlw	09Ch
   268  0158  349C               	retlw	09Bh
   269  0159  349B               	retlw	0E5h
   270  015A  34E5               	retlw	08Eh
   271  015B  348E               	retlw	0A3h
   272  015C  34A3               	retlw	0A6h
   273  015D  34A6               	retlw	04Bh
   274  015E  344B               	retlw	0FFh
   275  015F  34FF               	retlw	06h
   276  0160  3406               	retlw	0DDh
   277  0161  34DD               	retlw	0A4h
   278  0162  34A4               	retlw	0FFh
   279  0163  34FF               	retlw	0A7h
   280  0164  34A7               	retlw	094h
   281  0165  3494               	retlw	08Ch
   282  0166  348C               	retlw	084h
   283  0167  3484               	retlw	096h
   284  0168  3496               	retlw	090h
   285  0169  3490               	retlw	0FFh
   286  016A  34FF               	retlw	0FFh
   287  016B  34FF               	retlw	044h
   288  016C  3444               	retlw	088h
   289  016D  3488               	retlw	085h
   290  016E  3485               	retlw	03h
   291  016F  3403               	retlw	09Ah
   292  0170  349A               	retlw	01Bh
   293  0171  341B               	retlw	01Ch
   294  0172  341C               	retlw	0A2h
   295  0173  34A2               	retlw	098h
   296  0174  3498               	retlw	0FFh
   297  0175  34FF               	retlw	04h
   298  0176  3404               	retlw	097h
   299  0177  3497               	retlw	0Bh
   300  0178  340B               	retlw	023h
   301  0179  3423               	retlw	024h
   302  017A  3424               	retlw	014h
   303  017B  3414               	retlw	043h
   304  017C  3443               	retlw	0FFh
   305  017D  34FF               	retlw	0FFh
   306  017E  34FF               	retlw	096h
   307  017F  3496               	retlw	013h
   308  0180  3413               	retlw	09Eh
   309  0181  349E               	retlw	0A7h
   310  0182  34A7               	retlw	0Ch
   311  0183  340C               	retlw	0FFh
   312  0184  34FF               	retlw	0FFh
   313  0185  34FF               	global __end_of_codeToMatrix
   314                           __end_of_codeToMatrix:
   315  0186                     	global	_replaceOnShiftKeyDown
   316                           psect	strings
   317                           	file	"./ps2tozxtable.h"
   318                           	line	4
   319                           _replaceOnShiftKeyDown:
   320  0186                     	retlw	016h
   321  0186  3416               	retlw	04Fh
   322  0187  344F               	retlw	01Eh
   323  0188  341E               	retlw	050h
   324  0189  3450               	retlw	026h
   325  018A  3426               	retlw	051h
   326  018B  3451               	retlw	025h
   327  018C  3425               	retlw	053h
   328  018D  3453               	retlw	02Eh
   329  018E  342E               	retlw	056h
   330  018F  3456               	retlw	036h
   331  0190  3436               	retlw	057h
   332  0191  3457               	retlw	03Dh
   333  0192  343D               	retlw	05Ch
   334  0193  345C               	retlw	03Eh
   335  0194  343E               	retlw	05Eh
   336  0195  345E               	retlw	046h
   337  0196  3446               	retlw	05Fh
   338  0197  345F               	retlw	045h
   339  0198  3445               	retlw	060h
   340  0199  3460               	retlw	04Eh
   341  019A  344E               	retlw	061h
   342  019B  3461               	retlw	055h
   343  019C  3455               	retlw	062h
   344  019D  3462               	retlw	05Dh
   345  019E  345D               	retlw	063h
   346  019F  3463               	retlw	04Ch
   347  01A0  344C               	retlw	067h
   348  01A1  3467               	retlw	052h
   349  01A2  3452               	retlw	068h
   350  01A3  3468               	retlw	041h
   351  01A4  3441               	retlw	06Ah
   352  01A5  346A               	retlw	049h
   353  01A6  3449               	retlw	06Dh
   354  01A7  346D               	retlw	04Ah
   355  01A8  344A               	retlw	06Eh
   356  01A9  346E               	global __end_of_replaceOnShiftKeyDown
   357                           __end_of_replaceOnShiftKeyDown:
   358  01AA                     	global	_replaceTwoBytesCodes
   359                           psect	strings
   360                           	file	"./ps2tozxtable.h"
   361                           	line	26
   362                           _replaceTwoBytesCodes:
   363  01AA                     	retlw	014h
   364  01AA  3414               	retlw	013h
   365  01AB  3413               	retlw	070h
   366  01AC  3470               	retlw	017h
   367  01AD  3417               	retlw	06Ch
   368  01AE  346C               	retlw	018h
   369  01AF  3418               	retlw	07Dh
   370  01B0  347D               	retlw	019h
   371  01B1  3419               	retlw	071h
   372  01B2  3471               	retlw	01Fh
   373  01B3  341F               	retlw	069h
   374  01B4  3469               	retlw	020h
   375  01B5  3420               	retlw	07Ah
   376  01B6  347A               	retlw	027h
   377  01B7  3427               	retlw	075h
   378  01B8  3475               	retlw	028h
   379  01B9  3428               	retlw	06Bh
   380  01BA  346B               	retlw	02Fh
   381  01BB  342F               	retlw	072h
   382  01BC  3472               	retlw	030h
   383  01BD  3430               	retlw	074h
   384  01BE  3474               	retlw	037h
   385  01BF  3437               	retlw	04Ah
   386  01C0  344A               	retlw	038h
   387  01C1  3438               	retlw	05Ah
   388  01C2  345A               	retlw	039h
   389  01C3  3439               	global __end_of_replaceTwoBytesCodes
   390                           __end_of_replaceTwoBytesCodes:
   391  01C4                     	global	_codeToMatrix
   392                           	global	_replaceOnShiftKeyDown
   393                           	global	_replaceTwoBytesCodes
   394                           	global	_outPorts
   395                           	global	_replaced
   396                           	global	_ctrl
   397                           	global	_shift
   398                           	global	_i
   399                           	global	_ps2NeedEncode
   400                           	global	_ps2Up
   401                           	global	_ps2WaitCode
   402                           	global	_ps2DataCount
   403                           	global	_ps2Data
   404                           	global	_ps2BitsCount
   405                           	global	_ps2Bits
   406                           	global	_ps2DataState
   407                           	global	_PORTA
   408                           _PORTA	set	0x5
   409  0005                     	global	_PORTB
   410                           _PORTB	set	0x6
   411  0006                     	global	_PORTAbits
   412                           _PORTAbits	set	0x5
   413  0005                     	global	_TMR0
   414                           _TMR0	set	0x1
   415  0001                     	global	_RA1
   416                           _RA1	set	0x29
   417  0029                     	global	_RA2
   418                           _RA2	set	0x2A
   419  002A                     	global	_GIE
   420                           _GIE	set	0x5F
   421  005F                     	global	_T0IF
   422                           _T0IF	set	0x5A
   423  005A                     	global	_T0IE
   424                           _T0IE	set	0x5D
   425  005D                     	global	_TRISB
   426                           _TRISB	set	0x86
   427  0086                     	global	_PSA
   428                           _PSA	set	0x40B
   429  040B                     	global	_T0SE
   430                           _T0SE	set	0x40C
   431  040C                     	global	_T0CS
   432                           _T0CS	set	0x40D
   433  040D                     	global	_TRISA4
   434                           _TRISA4	set	0x42C
   435  042C                     	global	_TRISA3
   436                           _TRISA3	set	0x42B
   437  042B                     	global	_TRISA2
   438                           _TRISA2	set	0x42A
   439  042A                     	global	_TRISA1
   440                           _TRISA1	set	0x429
   441  0429                     	global	_TRISA0
   442                           _TRISA0	set	0x428
   443  0428                     ; #config settings
   444                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sdis."
   445                           	line	#
   446                           psect cinit,class=CODE,delta=2
   447                           global start_initialization
   448                           start_initialization:
   449  0010                     
   450                           global __initialization
   451                           __initialization:
   452  0010                     psect	bssBANK0,class=BANK0,space=1,noexec
   453                           global __pbssBANK0
   454                           __pbssBANK0:
   455  000C                     _outPorts:
   456  000C                            ds      11
   457  000C                     
   458                           _replaced:
   459  0017                            ds      1
   460  0017                     
   461                           _ctrl:
   462  0018                            ds      1
   463  0018                     
   464                           _shift:
   465  0019                            ds      1
   466  0019                     
   467                           _i:
   468  001A                            ds      1
   469  001A                     
   470                           _ps2NeedEncode:
   471  001B                            ds      1
   472  001B                     
   473                           _ps2Up:
   474  001C                            ds      1
   475  001C                     
   476                           _ps2WaitCode:
   477  001D                            ds      1
   478  001D                     
   479                           _ps2DataCount:
   480  001E                            ds      1
   481  001E                     
   482                           _ps2Data:
   483  001F                            ds      1
   484  001F                     
   485                           _ps2BitsCount:
   486  0020                            ds      1
   487  0020                     
   488                           _ps2Bits:
   489  0021                            ds      1
   490  0021                     
   491                           _ps2DataState:
   492  0022                            ds      1
   493  0022                     
   494                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sdis."
   495                           	line	#
   496                           psect clrtext,class=CODE,delta=2
   497                           global clear_ram0
   498                           ;	Called with FSR containing the base address, and
   499                           ;	W with the last address+1
   500                           clear_ram0:
   501  033C                     	clrwdt			;clear the watchdog before getting into this loop
   502  033C  0064               clrloop0:
   503  033D                     	clrf	indf		;clear RAM location pointed to by FSR
   504  033D  0180               	incf	fsr,f		;increment pointer
   505  033E  0A84               	xorwf	fsr,w		;XOR with final address
   506  033F  0604               	btfsc	status,2	;have we reached the end yet?
   507  0340  1903               	retlw	0		;all done for this memory range, return
   508  0341  3400               	xorwf	fsr,w		;XOR again to restore value
   509  0342  0604               	goto	clrloop0		;do the next byte
   510  0343  2B3D               
   511                           ; Clear objects allocated to BANK0
   512                           psect cinit,class=CODE,delta=2,merge=1
   513                           	bcf	status, 7	;select IRP bank0
   514  0010  1383               	movlw	low(__pbssBANK0)
   515  0011  300C               	movwf	fsr
   516  0012  0084               	movlw	low((__pbssBANK0)+017h)
   517  0013  3023               	fcall	clear_ram0
   518  0014  233C               psect cinit,class=CODE,delta=2,merge=1
   519                           global end_of_initialization,__end_of__initialization
   520                           
   521                           ;End of C runtime variable initialization code
   522                           
   523                           end_of_initialization:
   524  0015                     __end_of__initialization:
   525  0015                     clrf status
   526  0015  0183               ljmp _main	;jump to C main() function
   527  0016  29C4               psect	cstackCOMMON,class=COMMON,space=1,noexec
   528                           global __pcstackCOMMON
   529                           __pcstackCOMMON:
   530  0000                     ??_myDelay:	; 1 bytes @ 0x0
   531  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   532                           global __pcstackBANK0
   533                           __pcstackBANK0:
   534  0023                     ?_myIsr:	; 1 bytes @ 0x0
   535  0023                     ??_myIsr:	; 1 bytes @ 0x0
   536  0023                     ?_setPort:	; 1 bytes @ 0x0
   537  0023                     ?_resetPort:	; 1 bytes @ 0x0
   538  0023                     ?_keyDown:	; 1 bytes @ 0x0
   539  0023                     ?_keyUp:	; 1 bytes @ 0x0
   540  0023                     ?_myDelay:	; 1 bytes @ 0x0
   541  0023                     ?_sendDataToAltera:	; 1 bytes @ 0x0
   542  0023                     ?_main:	; 1 bytes @ 0x0
   543  0023                     	ds	6
   544  0023                     	global	_myIsr$81
   545                           _myIsr$81:	; 2 bytes @ 0x6
   546  0029                     	ds	2
   547  0029                     	global	myIsr@ii
   548                           myIsr@ii:	; 2 bytes @ 0x8
   549  002B                     	ds	2
   550  002B                     ??_setPort:	; 1 bytes @ 0xA
   551  002D                     ??_resetPort:	; 1 bytes @ 0xA
   552  002D                     ??_sendDataToAltera:	; 1 bytes @ 0xA
   553  002D                     	ds	3
   554  002D                     	global	setPort@bit_id
   555                           setPort@bit_id:	; 1 bytes @ 0xD
   556  0030                     	global	resetPort@bit_id
   557                           resetPort@bit_id:	; 1 bytes @ 0xD
   558  0030                     	ds	1
   559  0030                     ??_keyDown:	; 1 bytes @ 0xE
   560  0031                     ??_keyUp:	; 1 bytes @ 0xE
   561  0031                     	ds	1
   562  0031                     	global	keyDown@key
   563                           keyDown@key:	; 1 bytes @ 0xF
   564  0032                     	global	keyUp@key
   565                           keyUp@key:	; 1 bytes @ 0xF
   566  0032                     	ds	1
   567  0032                     ??_main:	; 1 bytes @ 0x10
   568  0033                     	ds	1
   569  0033                     ;!
   570                           ;!Data Sizes:
   571                           ;!    Strings     0
   572                           ;!    Constant    190
   573                           ;!    Data        0
   574                           ;!    BSS         23
   575                           ;!    Persistent  0
   576                           ;!    Stack       0
   577                           ;!
   578                           ;!Auto Spaces:
   579                           ;!    Space          Size  Autos    Used
   580                           ;!    COMMON            0      0       0
   581                           ;!    BANK0            66     17      40
   582                           
   583                           ;!
   584                           ;!Pointer List with Targets:
   585                           ;!
   586                           ;!    None.
   587                           
   588                           
   589                           ;!
   590                           ;!Critical Paths under _main in COMMON
   591                           ;!
   592                           ;!    None.
   593                           ;!
   594                           ;!Critical Paths under _myIsr in COMMON
   595                           ;!
   596                           ;!    None.
   597                           ;!
   598                           ;!Critical Paths under _main in BANK0
   599                           ;!
   600                           ;!    _main->_keyDown
   601                           ;!    _main->_keyUp
   602                           ;!    _keyUp->_resetPort
   603                           ;!    _keyDown->_resetPort
   604                           ;!    _keyDown->_setPort
   605                           ;!
   606                           ;!Critical Paths under _myIsr in BANK0
   607                           ;!
   608                           ;!    None.
   609                           
   610 ;;
   611 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   612 ;;
   613                           
   614                           ;!
   615                           ;!Call Graph Tables:
   616                           ;!
   617                           ;! ---------------------------------------------------------------------------------
   618                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   619                           ;! ---------------------------------------------------------------------------------
   620                           ;! (0) _main                                                 1     1      0     220
   621                           ;!                                             16 BANK0      1     1      0
   622                           ;!                            _keyDown
   623                           ;!                              _keyUp
   624                           ;!                   _sendDataToAltera
   625                           ;! ---------------------------------------------------------------------------------
   626                           ;! (1) _sendDataToAltera                                     1     1      0       0
   627                           ;!                                             10 BANK0      1     1      0
   628                           ;!                            _myDelay
   629                           ;! ---------------------------------------------------------------------------------
   630                           ;! (2) _myDelay                                              0     0      0       0
   631                           ;! ---------------------------------------------------------------------------------
   632                           ;! (1) _keyUp                                                2     2      0      88
   633                           ;!                                             14 BANK0      2     2      0
   634                           ;!                          _resetPort
   635                           ;! ---------------------------------------------------------------------------------
   636                           ;! (1) _keyDown                                              2     2      0     132
   637                           ;!                                             14 BANK0      2     2      0
   638                           ;!                          _resetPort
   639                           ;!                            _setPort
   640                           ;! ---------------------------------------------------------------------------------
   641                           ;! (2) _setPort                                              4     4      0      44
   642                           ;!                                             10 BANK0      4     4      0
   643                           ;! ---------------------------------------------------------------------------------
   644                           ;! (2) _resetPort                                            4     4      0      44
   645                           ;!                                             10 BANK0      4     4      0
   646                           ;! ---------------------------------------------------------------------------------
   647                           ;! Estimated maximum stack depth 2
   648                           ;! ---------------------------------------------------------------------------------
   649                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   650                           ;! ---------------------------------------------------------------------------------
   651                           ;! (4) _myIsr                                               10    10      0     114
   652                           ;!                                              0 BANK0     10    10      0
   653                           ;! ---------------------------------------------------------------------------------
   654                           ;! Estimated maximum stack depth 4
   655                           ;! ---------------------------------------------------------------------------------
   656                           ;!
   657                           ;! Call Graph Graphs:
   658                           ;!
   659                           ;! _main (ROOT)
   660                           ;!   _keyDown
   661                           ;!     _resetPort
   662                           ;!     _setPort
   663                           ;!   _keyUp
   664                           ;!     _resetPort
   665                           ;!   _sendDataToAltera
   666                           ;!     _myDelay
   667                           ;!
   668                           ;! _myIsr (ROOT)
   669                           ;!
   670                           
   671                           ;! Address spaces:
   672                           
   673                           ;!Name               Size   Autos  Total    Cost      Usage
   674                           ;!BITCOMMON            0      0       0       0        0.0%
   675                           ;!EEDATA              40      0       0       0        0.0%
   676                           ;!NULL                 0      0       0       0        0.0%
   677                           ;!CODE                 0      0       0       0        0.0%
   678                           ;!BITSFR0              0      0       0       1        0.0%
   679                           ;!SFR0                 0      0       0       1        0.0%
   680                           ;!COMMON               0      0       0       1        0.0%
   681                           ;!BITSFR1              0      0       0       2        0.0%
   682                           ;!SFR1                 0      0       0       2        0.0%
   683                           ;!STACK                0      0       0       2        0.0%
   684                           ;!BANK0               42     11      28       3       60.6%
   685                           ;!ABS                  0      0      28       4        0.0%
   686                           ;!BITBANK0            42      0       0       5        0.0%
   687                           ;!DATA                 0      0      28       6        0.0%
   688                           
   689                           	global	_main
   690                           
   691 ;; *************** function _main *****************
   692 ;; Defined at:
   693 ;;		line 257 in file "main.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;		None
   696 ;; Auto vars:     Size  Location     Type
   697 ;;		None
   698 ;; Return value:  Size  Location     Type
   699 ;;                  1    wreg      void 
   700 ;; Registers used:
   701 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   702 ;; Tracked objects:
   703 ;;		On entry : B00/0
   704 ;;		On exit  : 0/0
   705 ;;		Unchanged: 0/0
   706 ;; Data sizes:     COMMON   BANK0
   707 ;;      Params:         0       0
   708 ;;      Locals:         0       0
   709 ;;      Temps:          0       1
   710 ;;      Totals:         0       1
   711 ;;Total ram usage:        1 bytes
   712 ;; Hardware stack levels required when called:    4
   713 ;; This function calls:
   714 ;;		_keyDown
   715 ;;		_keyUp
   716 ;;		_sendDataToAltera
   717 ;; This function is called by:
   718 ;;		Startup code after reset
   719 ;; This function uses a non-reentrant model
   720 ;;
   721                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   722                           	file	"main.c"
   723                           	line	257
   724                           global __pmaintext
   725                           __pmaintext:	;psect for function _main
   726  01C4                     psect	maintext
   727                           	file	"main.c"
   728                           	line	257
   729                           	global	__size_of_main
   730                           	__size_of_main	equ	__end_of_main-_main
   731  00AC                     	
   732                           _main:	
   733  01C4                     ;incstack = 0
   734                           	opt	stack 4
   735                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   736                           	line	259
   737                           	
   738                           l1109:	
   739  01C4                     ;main.c: 259:     TRISA0 = 1;
   740                           	bsf	status, 5	;RP0=1, select bank1
   741  01C4  1683               	bsf	(1064/8)^080h,(1064)&7	;volatile
   742  01C5  1405               	line	260
   743                           ;main.c: 260:     TRISA1 = 0;
   744                           	bcf	(1065/8)^080h,(1065)&7	;volatile
   745  01C6  1085               	line	261
   746                           ;main.c: 261:     TRISA2 = 0;
   747                           	bcf	(1066/8)^080h,(1066)&7	;volatile
   748  01C7  1105               	line	262
   749                           ;main.c: 262:     TRISA3 = 1;
   750                           	bsf	(1067/8)^080h,(1067)&7	;volatile
   751  01C8  1585               	line	263
   752                           ;main.c: 263:     TRISA4 = 1;
   753                           	bsf	(1068/8)^080h,(1068)&7	;volatile
   754  01C9  1605               	line	265
   755                           	
   756                           l1111:	
   757  01CA                     ;main.c: 265:     PORTA = 0b00000000;
   758                           	bcf	status, 5	;RP0=0, select bank0
   759  01CA  1283               	clrf	(5)	;volatile
   760  01CB  0185               	line	267
   761                           ;main.c: 267:     TRISB = 0b00000000;
   762                           	bsf	status, 5	;RP0=1, select bank1
   763  01CC  1683               	clrf	(134)^080h	;volatile
   764  01CD  0186               	line	268
   765                           ;main.c: 268:     PORTB = 0b00000000;
   766                           	bcf	status, 5	;RP0=0, select bank0
   767  01CE  1283               	clrf	(6)	;volatile
   768  01CF  0186               	line	288
   769                           	
   770                           l1113:	
   771  01D0                     ;main.c: 288:     T0CS = 1;
   772                           	bsf	status, 5	;RP0=1, select bank1
   773  01D0  1683               	bsf	(1037/8)^080h,(1037)&7	;volatile
   774  01D1  1681               	line	289
   775                           	
   776                           l1115:	
   777  01D2                     ;main.c: 289:     T0SE = 1;
   778                           	bsf	(1036/8)^080h,(1036)&7	;volatile
   779  01D2  1601               	line	290
   780                           	
   781                           l1117:	
   782  01D3                     ;main.c: 290:     GIE = 1;
   783                           	bsf	(95/8),(95)&7	;volatile
   784  01D3  178B               	line	291
   785                           	
   786                           l1119:	
   787  01D4                     ;main.c: 291:     T0IE = 1;
   788                           	bsf	(93/8),(93)&7	;volatile
   789  01D4  168B               	line	292
   790                           	
   791                           l1121:	
   792  01D5                     ;main.c: 292:     PSA = 1;
   793                           	bsf	(1035/8)^080h,(1035)&7	;volatile
   794  01D5  1581               	line	293
   795                           	
   796                           l1123:	
   797  01D6                     ;main.c: 293:     T0IF = 0;
   798                           	bcf	(90/8),(90)&7	;volatile
   799  01D6  110B               	line	294
   800                           	
   801                           l1125:	
   802  01D7                     ;main.c: 294:     TMR0 = 255;
   803                           	movlw	low(0FFh)
   804  01D7  30FF               	bcf	status, 5	;RP0=0, select bank0
   805  01D8  1283               	movwf	(1)	;volatile
   806  01D9  0081               	line	296
   807                           	
   808                           l1127:	
   809  01DA                     ;main.c: 296:     ps2Data = 0;
   810                           	clrf	(_ps2Data)
   811  01DA  019F               	line	297
   812                           	
   813                           l1129:	
   814  01DB                     ;main.c: 297:     ps2DataCount = 0;
   815                           	clrf	(_ps2DataCount)
   816  01DB  019E               	line	298
   817                           	
   818                           l1131:	
   819  01DC                     ;main.c: 298:     ps2WaitCode = 0;
   820                           	clrf	(_ps2WaitCode)
   821  01DC  019D               	line	299
   822                           	
   823                           l1133:	
   824  01DD                     ;main.c: 299:     ps2Up = 0;
   825                           	clrf	(_ps2Up)
   826  01DD  019C               	line	300
   827                           	
   828                           l1135:	
   829  01DE                     ;main.c: 300:     ps2NeedEncode = 0;
   830                           	clrf	(_ps2NeedEncode)
   831  01DE  019B               	line	301
   832                           	
   833                           l1137:	
   834  01DF                     ;main.c: 301:     ps2DataState = 0;
   835                           	clrf	(_ps2DataState)
   836  01DF  01A2               	goto	l1139
   837  01E0  29E1               	line	303
   838                           ;main.c: 303:     while(1)
   839                           	
   840                           l136:	
   841  01E1                     	line	305
   842                           	
   843                           l1139:	
   844  01E1                     ;main.c: 304:     {;main.c: 305:         if ( ps2DataState == 2 ) {
   845                           		movlw	2
   846  01E1  3002               	bcf	status, 5	;RP0=0, select bank0
   847  01E2  1283               	xorwf	((_ps2DataState)),w
   848  01E3  0622               	btfss	status,2
   849  01E4  1D03               	goto	u821
   850  01E5  29E7               	goto	u820
   851  01E6  29E8               u821:
   852  01E7                     	goto	l137
   853  01E7  2A6C               u820:
   854  01E8                     	line	307
   855                           	
   856                           l1141:	
   857  01E8                     ;main.c: 307:             replaced = 0;
   858                           	clrf	(_replaced)
   859  01E8  0197               	line	308
   860                           	
   861                           l1143:	
   862  01E9                     ;main.c: 308:             if ( shift && !ctrl ) {
   863                           	movf	((_shift)),w
   864  01E9  0819               	btfsc	status,2
   865  01EA  1903               	goto	u831
   866  01EB  29ED               	goto	u830
   867  01EC  29EE               u831:
   868  01ED                     	goto	l1163
   869  01ED  2A1C               u830:
   870  01EE                     	
   871                           l1145:	
   872  01EE                     	movf	((_ctrl)),w
   873  01EE  0818               	btfss	status,2
   874  01EF  1D03               	goto	u841
   875  01F0  29F2               	goto	u840
   876  01F1  29F3               u841:
   877  01F2                     	goto	l1163
   878  01F2  2A1C               u840:
   879  01F3                     	line	330
   880                           	
   881                           l1147:	
   882  01F3                     ;main.c: 330:                 for(i = 0; i < 35 ;i+=2) {
   883                           	clrf	(_i)
   884  01F3  019A               	
   885                           l1149:	
   886  01F4                     	movlw	low(023h)
   887  01F4  3023               	subwf	(_i),w
   888  01F5  021A               	skipc
   889  01F6  1C03               	goto	u851
   890  01F7  29F9               	goto	u850
   891  01F8  29FA               u851:
   892  01F9                     	goto	l1153
   893  01F9  29FC               u850:
   894  01FA                     	goto	l1163
   895  01FA  2A1C               	
   896                           l1151:	
   897  01FB                     	goto	l1163
   898  01FB  2A1C               	
   899                           l139:	
   900  01FC                     	line	331
   901                           	
   902                           l1153:	
   903  01FC                     ;main.c: 331:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   904                           	movf	(_i),w
   905  01FC  081A               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
   906  01FD  3E81               	movwf	fsr0
   907  01FE  0084               	fcall	stringdir
   908  01FF  2100               	xorwf	(_ps2Data),w
   909  0200  061F               	skipz
   910  0201  1D03               	goto	u861
   911  0202  2A04               	goto	u860
   912  0203  2A05               u861:
   913  0204                     	goto	l1159
   914  0204  2A10               u860:
   915  0205                     	line	332
   916                           	
   917                           l1155:	
   918  0205                     ;main.c: 332:                         replaced = 1;
   919                           	clrf	(_replaced)
   920  0205  0197               	incf	(_replaced),f
   921  0206  0A97               	line	333
   922                           	
   923                           l1157:	
   924  0207                     ;main.c: 333:                         ps2Data = replaceOnShiftKeyDown[i+1];
   925                           	movf	(_i),w
   926  0207  081A               	addlw	01h
   927  0208  3E01               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
   928  0209  3E81               	movwf	fsr0
   929  020A  0084               	fcall	stringdir
   930  020B  2100               	movwf	(??_main+0)+0
   931  020C  00B3               	movf	(??_main+0)+0,w
   932  020D  0833               	movwf	(_ps2Data)
   933  020E  009F               	line	334
   934                           ;main.c: 334:                         break;
   935                           	goto	l1163
   936  020F  2A1C               	line	335
   937                           ;main.c: 335:                     }
   938                           	
   939                           l141:	
   940  0210                     	line	336
   941                           	
   942                           l1159:	
   943  0210                     ;main.c: 336:                 }
   944                           	movlw	low(02h)
   945  0210  3002               	movwf	(??_main+0)+0
   946  0211  00B3               	movf	(??_main+0)+0,w
   947  0212  0833               	addwf	(_i),f
   948  0213  079A               	
   949                           l1161:	
   950  0214                     	movlw	low(023h)
   951  0214  3023               	subwf	(_i),w
   952  0215  021A               	skipc
   953  0216  1C03               	goto	u871
   954  0217  2A19               	goto	u870
   955  0218  2A1A               u871:
   956  0219                     	goto	l1153
   957  0219  29FC               u870:
   958  021A                     	goto	l1163
   959  021A  2A1C               	
   960                           l140:	
   961  021B                     	goto	l1163
   962  021B  2A1C               	line	337
   963                           ;main.c: 337:             }
   964                           	
   965                           l138:	
   966  021C                     	line	339
   967                           	
   968                           l1163:	
   969  021C                     ;main.c: 339:             if ( ps2Up == 0) {
   970                           	movf	((_ps2Up)),w
   971  021C  081C               	btfss	status,2
   972  021D  1D03               	goto	u881
   973  021E  2A20               	goto	u880
   974  021F  2A21               u881:
   975  0220                     	goto	l1175
   976  0220  2A43               u880:
   977  0221                     	line	340
   978                           	
   979                           l1165:	
   980  0221                     ;main.c: 340:                 keyDown(ps2Data);
   981                           	movf	(_ps2Data),w
   982  0221  081F               	fcall	_keyDown
   983  0222  2270               	line	341
   984                           	
   985                           l1167:	
   986  0223                     ;main.c: 341:                 if ( ps2Data == 18 || ps2Data == 89) shift = 1;
   987                           		movlw	18
   988  0223  3012               	bcf	status, 5	;RP0=0, select bank0
   989  0224  1283               	xorwf	((_ps2Data)),w
   990  0225  061F               	btfsc	status,2
   991  0226  1903               	goto	u891
   992  0227  2A29               	goto	u890
   993  0228  2A2A               u891:
   994  0229                     	goto	l145
   995  0229  2A30               u890:
   996  022A                     	
   997                           l1169:	
   998  022A                     		movlw	89
   999  022A  3059               	xorwf	((_ps2Data)),w
  1000  022B  061F               	btfss	status,2
  1001  022C  1D03               	goto	u901
  1002  022D  2A2F               	goto	u900
  1003  022E  2A30               u901:
  1004  022F                     	goto	l1171
  1005  022F  2A33               u900:
  1006  0230                     	
  1007                           l145:	
  1008  0230                     	clrf	(_shift)
  1009  0230  0199               	incf	(_shift),f
  1010  0231  0A99               	goto	l1171
  1011  0232  2A33               	
  1012                           l143:	
  1013  0233                     	line	342
  1014                           	
  1015                           l1171:	
  1016  0233                     ;main.c: 342:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 1;
  1017                           		movlw	20
  1018  0233  3014               	xorwf	((_ps2Data)),w
  1019  0234  061F               	btfsc	status,2
  1020  0235  1903               	goto	u911
  1021  0236  2A38               	goto	u910
  1022  0237  2A39               u911:
  1023  0238                     	goto	l148
  1024  0238  2A3F               u910:
  1025  0239                     	
  1026                           l1173:	
  1027  0239                     		movlw	19
  1028  0239  3013               	xorwf	((_ps2Data)),w
  1029  023A  061F               	btfss	status,2
  1030  023B  1D03               	goto	u921
  1031  023C  2A3E               	goto	u920
  1032  023D  2A3F               u921:
  1033  023E                     	goto	l1189
  1034  023E  2A64               u920:
  1035  023F                     	
  1036                           l148:	
  1037  023F                     	clrf	(_ctrl)
  1038  023F  0198               	incf	(_ctrl),f
  1039  0240  0A98               	goto	l1189
  1040  0241  2A64               	
  1041                           l146:	
  1042  0242                     	line	344
  1043                           ;main.c: 344:             } else {
  1044                           	goto	l1189
  1045  0242  2A64               	
  1046                           l142:	
  1047  0243                     	line	345
  1048                           	
  1049                           l1175:	
  1050  0243                     ;main.c: 345:                 if ( ps2Data == 18 || ps2Data == 89) shift = 0;
  1051                           		movlw	18
  1052  0243  3012               	xorwf	((_ps2Data)),w
  1053  0244  061F               	btfsc	status,2
  1054  0245  1903               	goto	u931
  1055  0246  2A48               	goto	u930
  1056  0247  2A49               u931:
  1057  0248                     	goto	l1179
  1058  0248  2A50               u930:
  1059  0249                     	
  1060                           l1177:	
  1061  0249                     		movlw	89
  1062  0249  3059               	xorwf	((_ps2Data)),w
  1063  024A  061F               	btfss	status,2
  1064  024B  1D03               	goto	u941
  1065  024C  2A4E               	goto	u940
  1066  024D  2A4F               u941:
  1067  024E                     	goto	l1181
  1068  024E  2A52               u940:
  1069  024F                     	goto	l1179
  1070  024F  2A50               	
  1071                           l152:	
  1072  0250                     	
  1073                           l1179:	
  1074  0250                     	clrf	(_shift)
  1075  0250  0199               	goto	l1181
  1076  0251  2A52               	
  1077                           l150:	
  1078  0252                     	line	346
  1079                           	
  1080                           l1181:	
  1081  0252                     ;main.c: 346:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 0;
  1082                           		movlw	20
  1083  0252  3014               	xorwf	((_ps2Data)),w
  1084  0253  061F               	btfsc	status,2
  1085  0254  1903               	goto	u951
  1086  0255  2A57               	goto	u950
  1087  0256  2A58               u951:
  1088  0257                     	goto	l1185
  1089  0257  2A5F               u950:
  1090  0258                     	
  1091                           l1183:	
  1092  0258                     		movlw	19
  1093  0258  3013               	xorwf	((_ps2Data)),w
  1094  0259  061F               	btfss	status,2
  1095  025A  1D03               	goto	u961
  1096  025B  2A5D               	goto	u960
  1097  025C  2A5E               u961:
  1098  025D                     	goto	l1187
  1099  025D  2A61               u960:
  1100  025E                     	goto	l1185
  1101  025E  2A5F               	
  1102                           l155:	
  1103  025F                     	
  1104                           l1185:	
  1105  025F                     	clrf	(_ctrl)
  1106  025F  0198               	goto	l1187
  1107  0260  2A61               	
  1108                           l153:	
  1109  0261                     	line	347
  1110                           	
  1111                           l1187:	
  1112  0261                     ;main.c: 347:                 keyUp(ps2Data);
  1113                           	movf	(_ps2Data),w
  1114  0261  081F               	fcall	_keyUp
  1115  0262  2322               	goto	l1189
  1116  0263  2A64               	line	348
  1117                           ;main.c: 348:             }
  1118                           	
  1119                           l149:	
  1120  0264                     	line	351
  1121                           	
  1122                           l1189:	
  1123  0264                     ;main.c: 351:             ps2Data = 0;
  1124                           	bcf	status, 5	;RP0=0, select bank0
  1125  0264  1283               	clrf	(_ps2Data)
  1126  0265  019F               	line	352
  1127                           	
  1128                           l1191:	
  1129  0266                     ;main.c: 352:             ps2DataCount = 0;
  1130                           	clrf	(_ps2DataCount)
  1131  0266  019E               	line	353
  1132                           	
  1133                           l1193:	
  1134  0267                     ;main.c: 353:             ps2WaitCode = 0;
  1135                           	clrf	(_ps2WaitCode)
  1136  0267  019D               	line	354
  1137                           	
  1138                           l1195:	
  1139  0268                     ;main.c: 354:             ps2Up = 0;
  1140                           	clrf	(_ps2Up)
  1141  0268  019C               	line	355
  1142                           	
  1143                           l1197:	
  1144  0269                     ;main.c: 355:             ps2NeedEncode = 0;
  1145                           	clrf	(_ps2NeedEncode)
  1146  0269  019B               	line	356
  1147                           	
  1148                           l1199:	
  1149  026A                     ;main.c: 356:             ps2DataState = 0;
  1150                           	clrf	(_ps2DataState)
  1151  026A  01A2               	line	359
  1152                           	
  1153                           l1201:	
  1154  026B                     ;main.c: 359:             sendDataToAltera();
  1155                           	fcall	_sendDataToAltera
  1156  026B  22B1               	line	360
  1157                           ;main.c: 360:         }
  1158                           	
  1159                           l137:	
  1160  026C                     	line	364
  1161                           # 364 "main.c"
  1162                           clrwdt ;# 
  1163  026C  0064               psect	maintext
  1164                           	goto	l1139
  1165  026D  29E1               	line	365
  1166                           ;main.c: 365:     }
  1167                           	
  1168                           l156:	
  1169  026E                     	goto	l1139
  1170  026E  29E1               	
  1171                           l157:	
  1172  026F                     	line	367
  1173                           	
  1174                           l158:	
  1175  026F                     	global	start
  1176                           	ljmp	start
  1177  026F  280F               	opt stack 0
  1178                           GLOBAL	__end_of_main
  1179                           	__end_of_main:
  1180  0270                     	signat	_main,89
  1181                           	global	_sendDataToAltera
  1182                           
  1183 ;; *************** function _sendDataToAltera *****************
  1184 ;; Defined at:
  1185 ;;		line 197 in file "main.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMMON   BANK0
  1199 ;;      Params:         0       0
  1200 ;;      Locals:         0       0
  1201 ;;      Temps:          0       1
  1202 ;;      Totals:         0       1
  1203 ;;Total ram usage:        1 bytes
  1204 ;; Hardware stack levels used:    1
  1205 ;; Hardware stack levels required when called:    3
  1206 ;; This function calls:
  1207 ;;		_myDelay
  1208 ;; This function is called by:
  1209 ;;		_main
  1210 ;; This function uses a non-reentrant model
  1211 ;;
  1212                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
  1213                           	line	197
  1214                           global __ptext1
  1215                           __ptext1:	;psect for function _sendDataToAltera
  1216  02B1                     psect	text1
  1217                           	file	"main.c"
  1218                           	line	197
  1219                           	global	__size_of_sendDataToAltera
  1220                           	__size_of_sendDataToAltera	equ	__end_of_sendDataToAltera-_sendDataToAltera
  1221  0032                     	
  1222                           _sendDataToAltera:	
  1223  02B1                     ;incstack = 0
  1224                           	opt	stack 4
  1225                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1226                           	line	199
  1227                           	
  1228                           l1007:	
  1229  02B1                     ;main.c: 199:     RA2 = 1;
  1230                           	bcf	status, 5	;RP0=0, select bank0
  1231  02B1  1283               	bsf	(42/8),(42)&7	;volatile
  1232  02B2  1505               	line	200
  1233                           ;main.c: 200:     RA1 = 1;
  1234                           	bsf	(41/8),(41)&7	;volatile
  1235  02B3  1485               	line	201
  1236                           	
  1237                           l1009:	
  1238  02B4                     ;main.c: 201:     myDelay();
  1239                           	fcall	_myDelay
  1240  02B4  2344               	line	202
  1241                           	
  1242                           l1011:	
  1243  02B5                     ;main.c: 202:     RA2 = 0;
  1244                           	bcf	status, 5	;RP0=0, select bank0
  1245  02B5  1283               	bcf	(42/8),(42)&7	;volatile
  1246  02B6  1105               	line	203
  1247                           ;main.c: 203:     myDelay();
  1248                           	fcall	_myDelay
  1249  02B7  2344               	line	204
  1250                           	
  1251                           l1013:	
  1252  02B8                     ;main.c: 204:     RA2 = 1;
  1253                           	bcf	status, 5	;RP0=0, select bank0
  1254  02B8  1283               	bsf	(42/8),(42)&7	;volatile
  1255  02B9  1505               	line	205
  1256                           ;main.c: 205:     myDelay();
  1257                           	fcall	_myDelay
  1258  02BA  2344               	line	206
  1259                           	
  1260                           l1015:	
  1261  02BB                     ;main.c: 206:     RA1 = 0;
  1262                           	bcf	status, 5	;RP0=0, select bank0
  1263  02BB  1283               	bcf	(41/8),(41)&7	;volatile
  1264  02BC  1085               	line	207
  1265                           ;main.c: 207:     myDelay();
  1266                           	fcall	_myDelay
  1267  02BD  2344               	line	208
  1268                           	
  1269                           l1017:	
  1270  02BE                     ;main.c: 208:     for(i=0;i<8;i++) {
  1271                           	bcf	status, 5	;RP0=0, select bank0
  1272  02BE  1283               	clrf	(_i)
  1273  02BF  019A               	
  1274                           l1019:	
  1275  02C0                     	movlw	low(08h)
  1276  02C0  3008               	subwf	(_i),w
  1277  02C1  021A               	skipc
  1278  02C2  1C03               	goto	u621
  1279  02C3  2AC5               	goto	u620
  1280  02C4  2AC6               u621:
  1281  02C5                     	goto	l129
  1282  02C5  2AC8               u620:
  1283  02C6                     	goto	l130
  1284  02C6  2AE0               	
  1285                           l1021:	
  1286  02C7                     	goto	l130
  1287  02C7  2AE0               	
  1288                           l129:	
  1289  02C8                     	line	209
  1290                           ;main.c: 209:         RA2 = 1;
  1291                           	bsf	(42/8),(42)&7	;volatile
  1292  02C8  1505               	line	210
  1293                           	
  1294                           l1023:	
  1295  02C9                     ;main.c: 210:         myDelay();
  1296                           	fcall	_myDelay
  1297  02C9  2344               	line	211
  1298                           	
  1299                           l1025:	
  1300  02CA                     ;main.c: 211:         PORTB = outPorts[i];
  1301                           	bcf	status, 5	;RP0=0, select bank0
  1302  02CA  1283               	movf	(_i),w
  1303  02CB  081A               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1304  02CC  3E0C               	movwf	fsr0
  1305  02CD  0084               	bcf	status, 7	;select IRP bank0
  1306  02CE  1383               	movf	indf,w
  1307  02CF  0800               	movwf	(6)	;volatile
  1308  02D0  0086               	line	212
  1309                           	
  1310                           l1027:	
  1311  02D1                     ;main.c: 212:         myDelay();
  1312                           	fcall	_myDelay
  1313  02D1  2344               	line	213
  1314                           	
  1315                           l1029:	
  1316  02D2                     ;main.c: 213:         RA2 = 0;
  1317                           	bcf	status, 5	;RP0=0, select bank0
  1318  02D2  1283               	bcf	(42/8),(42)&7	;volatile
  1319  02D3  1105               	line	214
  1320                           	
  1321                           l1031:	
  1322  02D4                     ;main.c: 214:         myDelay();
  1323                           	fcall	_myDelay
  1324  02D4  2344               	line	215
  1325                           	
  1326                           l1033:	
  1327  02D5                     ;main.c: 215:     }
  1328                           	movlw	low(01h)
  1329  02D5  3001               	bcf	status, 5	;RP0=0, select bank0
  1330  02D6  1283               	movwf	(??_sendDataToAltera+0)+0
  1331  02D7  00AD               	movf	(??_sendDataToAltera+0)+0,w
  1332  02D8  082D               	addwf	(_i),f
  1333  02D9  079A               	
  1334                           l1035:	
  1335  02DA                     	movlw	low(08h)
  1336  02DA  3008               	subwf	(_i),w
  1337  02DB  021A               	skipc
  1338  02DC  1C03               	goto	u631
  1339  02DD  2ADF               	goto	u630
  1340  02DE  2AE0               u631:
  1341  02DF                     	goto	l129
  1342  02DF  2AC8               u630:
  1343  02E0                     	
  1344                           l130:	
  1345  02E0                     	line	216
  1346                           ;main.c: 216:     RA2 = 1;
  1347                           	bsf	(42/8),(42)&7	;volatile
  1348  02E0  1505               	line	217
  1349                           	
  1350                           l1037:	
  1351  02E1                     ;main.c: 217:     PORTB = 0;
  1352                           	clrf	(6)	;volatile
  1353  02E1  0186               	line	218
  1354                           	
  1355                           l131:	
  1356  02E2                     	return
  1357  02E2  0008               	opt stack 0
  1358                           GLOBAL	__end_of_sendDataToAltera
  1359                           	__end_of_sendDataToAltera:
  1360  02E3                     	signat	_sendDataToAltera,89
  1361                           	global	_myDelay
  1362                           
  1363 ;; *************** function _myDelay *****************
  1364 ;; Defined at:
  1365 ;;		line 189 in file "main.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;		None
  1370 ;; Return value:  Size  Location     Type
  1371 ;;                  1    wreg      void 
  1372 ;; Registers used:
  1373 ;;		None
  1374 ;; Tracked objects:
  1375 ;;		On entry : 0/0
  1376 ;;		On exit  : 0/0
  1377 ;;		Unchanged: 0/0
  1378 ;; Data sizes:     COMMON   BANK0
  1379 ;;      Params:         0       0
  1380 ;;      Locals:         0       0
  1381 ;;      Temps:          0       0
  1382 ;;      Totals:         0       0
  1383 ;;Total ram usage:        0 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    2
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_sendDataToAltera
  1390 ;; This function uses a non-reentrant model
  1391 ;;
  1392                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
  1393                           	line	189
  1394                           global __ptext2
  1395                           __ptext2:	;psect for function _myDelay
  1396  0344                     psect	text2
  1397                           	file	"main.c"
  1398                           	line	189
  1399                           	global	__size_of_myDelay
  1400                           	__size_of_myDelay	equ	__end_of_myDelay-_myDelay
  1401  0001                     	
  1402                           _myDelay:	
  1403  0344                     ;incstack = 0
  1404                           	opt	stack 4
  1405                           ; Regs used in _myDelay: []
  1406                           	line	192
  1407                           	
  1408                           l126:	
  1409  0344                     	return
  1410  0344  0008               	opt stack 0
  1411                           GLOBAL	__end_of_myDelay
  1412                           	__end_of_myDelay:
  1413  0345                     	signat	_myDelay,89
  1414                           	global	_keyUp
  1415                           
  1416 ;; *************** function _keyUp *****************
  1417 ;; Defined at:
  1418 ;;		line 182 in file "main.c"
  1419 ;; Parameters:    Size  Location     Type
  1420 ;;  key             1    wreg     unsigned char 
  1421 ;; Auto vars:     Size  Location     Type
  1422 ;;  key             1   15[BANK0 ] unsigned char 
  1423 ;; Return value:  Size  Location     Type
  1424 ;;                  1    wreg      void 
  1425 ;; Registers used:
  1426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1427 ;; Tracked objects:
  1428 ;;		On entry : 0/0
  1429 ;;		On exit  : 0/0
  1430 ;;		Unchanged: 0/0
  1431 ;; Data sizes:     COMMON   BANK0
  1432 ;;      Params:         0       0
  1433 ;;      Locals:         0       1
  1434 ;;      Temps:          0       1
  1435 ;;      Totals:         0       2
  1436 ;;Total ram usage:        2 bytes
  1437 ;; Hardware stack levels used:    1
  1438 ;; Hardware stack levels required when called:    3
  1439 ;; This function calls:
  1440 ;;		_resetPort
  1441 ;; This function is called by:
  1442 ;;		_main
  1443 ;; This function uses a non-reentrant model
  1444 ;;
  1445                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
  1446                           	line	182
  1447                           global __ptext3
  1448                           __ptext3:	;psect for function _keyUp
  1449  0322                     psect	text3
  1450                           	file	"main.c"
  1451                           	line	182
  1452                           	global	__size_of_keyUp
  1453                           	__size_of_keyUp	equ	__end_of_keyUp-_keyUp
  1454  001A                     	
  1455                           _keyUp:	
  1456  0322                     ;incstack = 0
  1457                           	opt	stack 4
  1458                           ; Regs used in _keyUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1459                           ;keyUp@key stored from wreg
  1460                           	bcf	status, 5	;RP0=0, select bank0
  1461  0322  1283               	movwf	(keyUp@key)
  1462  0323  00B2               	line	184
  1463                           	
  1464                           l997:	
  1465  0324                     ;main.c: 182: void keyUp(uint8_t key);main.c: 183: {;main.c: 184:     if ( key >= 128 ) 
                                 return;
  1466                           	movlw	low(080h)
  1467  0324  3080               	subwf	(keyUp@key),w
  1468  0325  0232               	skipc
  1469  0326  1C03               	goto	u601
  1470  0327  2B29               	goto	u600
  1471  0328  2B2A               u601:
  1472  0329                     	goto	l1001
  1473  0329  2B2C               u600:
  1474  032A                     	goto	l122
  1475  032A  2B3B               	
  1476                           l999:	
  1477  032B                     	goto	l122
  1478  032B  2B3B               	
  1479                           l121:	
  1480  032C                     	line	185
  1481                           	
  1482                           l1001:	
  1483  032C                     ;main.c: 185:     i = codeToMatrix[key];
  1484                           	movf	(keyUp@key),w
  1485  032C  0832               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1486  032D  3E01               	movwf	fsr0
  1487  032E  0084               	fcall	stringdir
  1488  032F  2100               	movwf	(??_keyUp+0)+0
  1489  0330  00B1               	movf	(??_keyUp+0)+0,w
  1490  0331  0831               	movwf	(_i)
  1491  0332  009A               	line	186
  1492                           	
  1493                           l1003:	
  1494  0333                     ;main.c: 186:     if ( i != 0xFF ) resetPort(i);
  1495                           		incf	((_i)),w
  1496  0333  0A1A               	btfsc	status,2
  1497  0334  1903               	goto	u611
  1498  0335  2B37               	goto	u610
  1499  0336  2B38               u611:
  1500  0337                     	goto	l122
  1501  0337  2B3B               u610:
  1502  0338                     	
  1503                           l1005:	
  1504  0338                     	movf	(_i),w
  1505  0338  081A               	fcall	_resetPort
  1506  0339  22E3               	goto	l122
  1507  033A  2B3B               	
  1508                           l123:	
  1509  033B                     	line	187
  1510                           	
  1511                           l122:	
  1512  033B                     	return
  1513  033B  0008               	opt stack 0
  1514                           GLOBAL	__end_of_keyUp
  1515                           	__end_of_keyUp:
  1516  033C                     	signat	_keyUp,4217
  1517                           	global	_keyDown
  1518                           
  1519 ;; *************** function _keyDown *****************
  1520 ;; Defined at:
  1521 ;;		line 161 in file "main.c"
  1522 ;; Parameters:    Size  Location     Type
  1523 ;;  key             1    wreg     unsigned char 
  1524 ;; Auto vars:     Size  Location     Type
  1525 ;;  key             1   15[BANK0 ] unsigned char 
  1526 ;; Return value:  Size  Location     Type
  1527 ;;                  1    wreg      void 
  1528 ;; Registers used:
  1529 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1530 ;; Tracked objects:
  1531 ;;		On entry : 0/0
  1532 ;;		On exit  : 0/0
  1533 ;;		Unchanged: 0/0
  1534 ;; Data sizes:     COMMON   BANK0
  1535 ;;      Params:         0       0
  1536 ;;      Locals:         0       1
  1537 ;;      Temps:          0       1
  1538 ;;      Totals:         0       2
  1539 ;;Total ram usage:        2 bytes
  1540 ;; Hardware stack levels used:    1
  1541 ;; Hardware stack levels required when called:    3
  1542 ;; This function calls:
  1543 ;;		_resetPort
  1544 ;;		_setPort
  1545 ;; This function is called by:
  1546 ;;		_main
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  1550                           	line	161
  1551                           global __ptext4
  1552                           __ptext4:	;psect for function _keyDown
  1553  0270                     psect	text4
  1554                           	file	"main.c"
  1555                           	line	161
  1556                           	global	__size_of_keyDown
  1557                           	__size_of_keyDown	equ	__end_of_keyDown-_keyDown
  1558  0041                     	
  1559                           _keyDown:	
  1560  0270                     ;incstack = 0
  1561                           	opt	stack 4
  1562                           ; Regs used in _keyDown: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1563                           ;keyDown@key stored from wreg
  1564                           	bcf	status, 5	;RP0=0, select bank0
  1565  0270  1283               	movwf	(keyDown@key)
  1566  0271  00B2               	line	163
  1567                           	
  1568                           l971:	
  1569  0272                     ;main.c: 161: void keyDown(uint8_t key);main.c: 162: {;main.c: 163:     if ( key >= 128 
                                 ) return;
  1570                           	movlw	low(080h)
  1571  0272  3080               	subwf	(keyDown@key),w
  1572  0273  0232               	skipc
  1573  0274  1C03               	goto	u531
  1574  0275  2A77               	goto	u530
  1575  0276  2A78               u531:
  1576  0277                     	goto	l975
  1577  0277  2A7A               u530:
  1578  0278                     	goto	l107
  1579  0278  2AB0               	
  1580                           l973:	
  1581  0279                     	goto	l107
  1582  0279  2AB0               	
  1583                           l106:	
  1584  027A                     	line	164
  1585                           	
  1586                           l975:	
  1587  027A                     ;main.c: 164:     i = codeToMatrix[key];
  1588                           	movf	(keyDown@key),w
  1589  027A  0832               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1590  027B  3E01               	movwf	fsr0
  1591  027C  0084               	fcall	stringdir
  1592  027D  2100               	movwf	(??_keyDown+0)+0
  1593  027E  00B1               	movf	(??_keyDown+0)+0,w
  1594  027F  0831               	movwf	(_i)
  1595  0280  009A               	line	165
  1596                           	
  1597                           l977:	
  1598  0281                     ;main.c: 165:     if ( i != 0xFF ) {
  1599                           		incf	((_i)),w
  1600  0281  0A1A               	btfsc	status,2
  1601  0282  1903               	goto	u541
  1602  0283  2A85               	goto	u540
  1603  0284  2A86               u541:
  1604  0285                     	goto	l107
  1605  0285  2AB0               u540:
  1606  0286                     	line	166
  1607                           	
  1608                           l979:	
  1609  0286                     ;main.c: 166:         setPort(i);
  1610                           	movf	(_i),w
  1611  0286  081A               	fcall	_setPort
  1612  0287  2303               	line	168
  1613                           	
  1614                           l981:	
  1615  0288                     ;main.c: 168:         if ( (shift &&!replaced) || (i & 0b01000000) ) {
  1616                           	bcf	status, 5	;RP0=0, select bank0
  1617  0288  1283               	movf	((_shift)),w
  1618  0289  0819               	btfsc	status,2
  1619  028A  1903               	goto	u551
  1620  028B  2A8D               	goto	u550
  1621  028C  2A8E               u551:
  1622  028D                     	goto	l113
  1623  028D  2A93               u550:
  1624  028E                     	
  1625                           l983:	
  1626  028E                     	movf	((_replaced)),w
  1627  028E  0817               	btfsc	status,2
  1628  028F  1903               	goto	u561
  1629  0290  2A92               	goto	u560
  1630  0291  2A93               u561:
  1631  0292                     	goto	l985
  1632  0292  2A98               u560:
  1633  0293                     	
  1634                           l113:	
  1635  0293                     	btfss	(_i),(6)&7
  1636  0293  1F1A               	goto	u571
  1637  0294  2A96               	goto	u570
  1638  0295  2A97               u571:
  1639  0296                     	goto	l987
  1640  0296  2A9B               u570:
  1641  0297                     	goto	l985
  1642  0297  2A98               	
  1643                           l111:	
  1644  0298                     	line	169
  1645                           	
  1646                           l985:	
  1647  0298                     ;main.c: 169:             setPort(0x00);
  1648                           	movlw	low(0)
  1649  0298  3000               	fcall	_setPort
  1650  0299  2303               	line	170
  1651                           ;main.c: 170:         } else {
  1652                           	goto	l989
  1653  029A  2A9E               	
  1654                           l109:	
  1655  029B                     	line	171
  1656                           	
  1657                           l987:	
  1658  029B                     ;main.c: 171:             resetPort(0x00);
  1659                           	movlw	low(0)
  1660  029B  3000               	fcall	_resetPort
  1661  029C  22E3               	goto	l989
  1662  029D  2A9E               	line	172
  1663                           ;main.c: 172:         }
  1664                           	
  1665                           l114:	
  1666  029E                     	line	174
  1667                           	
  1668                           l989:	
  1669  029E                     ;main.c: 174:         if ( ctrl || (i & 0b10000000) ) {
  1670                           	bcf	status, 5	;RP0=0, select bank0
  1671  029E  1283               	movf	((_ctrl)),w
  1672  029F  0818               	btfss	status,2
  1673  02A0  1D03               	goto	u581
  1674  02A1  2AA3               	goto	u580
  1675  02A2  2AA4               u581:
  1676  02A3                     	goto	l993
  1677  02A3  2AA9               u580:
  1678  02A4                     	
  1679                           l991:	
  1680  02A4                     	btfss	(_i),(7)&7
  1681  02A4  1F9A               	goto	u591
  1682  02A5  2AA7               	goto	u590
  1683  02A6  2AA8               u591:
  1684  02A7                     	goto	l995
  1685  02A7  2AAC               u590:
  1686  02A8                     	goto	l993
  1687  02A8  2AA9               	
  1688                           l117:	
  1689  02A9                     	line	175
  1690                           	
  1691                           l993:	
  1692  02A9                     ;main.c: 175:             setPort(0x0F);
  1693                           	movlw	low(0Fh)
  1694  02A9  300F               	fcall	_setPort
  1695  02AA  2303               	line	176
  1696                           ;main.c: 176:         } else {
  1697                           	goto	l107
  1698  02AB  2AB0               	
  1699                           l115:	
  1700  02AC                     	line	177
  1701                           	
  1702                           l995:	
  1703  02AC                     ;main.c: 177:             resetPort(0x0F);
  1704                           	movlw	low(0Fh)
  1705  02AC  300F               	fcall	_resetPort
  1706  02AD  22E3               	goto	l107
  1707  02AE  2AB0               	line	178
  1708                           ;main.c: 178:         }
  1709                           	
  1710                           l118:	
  1711  02AF                     	goto	l107
  1712  02AF  2AB0               	line	179
  1713                           ;main.c: 179:     }
  1714                           	
  1715                           l108:	
  1716  02B0                     	line	180
  1717                           	
  1718                           l107:	
  1719  02B0                     	return
  1720  02B0  0008               	opt stack 0
  1721                           GLOBAL	__end_of_keyDown
  1722                           	__end_of_keyDown:
  1723  02B1                     	signat	_keyDown,4217
  1724                           	global	_setPort
  1725                           
  1726 ;; *************** function _setPort *****************
  1727 ;; Defined at:
  1728 ;;		line 149 in file "main.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  bit_id          1    wreg     unsigned char 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  bit_id          1   13[BANK0 ] unsigned char 
  1733 ;; Return value:  Size  Location     Type
  1734 ;;                  1    wreg      void 
  1735 ;; Registers used:
  1736 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1737 ;; Tracked objects:
  1738 ;;		On entry : 0/0
  1739 ;;		On exit  : 0/0
  1740 ;;		Unchanged: 0/0
  1741 ;; Data sizes:     COMMON   BANK0
  1742 ;;      Params:         0       0
  1743 ;;      Locals:         0       1
  1744 ;;      Temps:          0       3
  1745 ;;      Totals:         0       4
  1746 ;;Total ram usage:        4 bytes
  1747 ;; Hardware stack levels used:    1
  1748 ;; Hardware stack levels required when called:    2
  1749 ;; This function calls:
  1750 ;;		Nothing
  1751 ;; This function is called by:
  1752 ;;		_keyDown
  1753 ;; This function uses a non-reentrant model
  1754 ;;
  1755                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  1756                           	line	149
  1757                           global __ptext5
  1758                           __ptext5:	;psect for function _setPort
  1759  0303                     psect	text5
  1760                           	file	"main.c"
  1761                           	line	149
  1762                           	global	__size_of_setPort
  1763                           	__size_of_setPort	equ	__end_of_setPort-_setPort
  1764  001F                     	
  1765                           _setPort:	
  1766  0303                     ;incstack = 0
  1767                           	opt	stack 4
  1768                           ; Regs used in _setPort: [wreg-fsr0h+status,2+status,0]
  1769                           ;setPort@bit_id stored from wreg
  1770                           	bcf	status, 5	;RP0=0, select bank0
  1771  0303  1283               	movwf	(setPort@bit_id)
  1772  0304  00B0               	line	151
  1773                           	
  1774                           l967:	
  1775  0305                     ;main.c: 149: void setPort(uint8_t bit_id);main.c: 150: {;main.c: 151:     outPorts[bit_
                                 id & 7] |= (1 << ((bit_id >> 3) & 7));
  1776                           	movlw	low(01h)
  1777  0305  3001               	movwf	(??_setPort+0)+0
  1778  0306  00AD               	movf	(setPort@bit_id),w
  1779  0307  0830               	movwf	(??_setPort+1)+0
  1780  0308  00AE               	movlw	03h
  1781  0309  3003               u495:
  1782  030A                     	clrc
  1783  030A  1003               	rrf	(??_setPort+1)+0,f
  1784  030B  0CAE               	addlw	-1
  1785  030C  3EFF               	skipz
  1786  030D  1D03               	goto	u495
  1787  030E  2B0A               	movf	0+(??_setPort+1)+0,w
  1788  030F  082E               	andlw	07h
  1789  0310  3907               	addlw	1
  1790  0311  3E01               	goto	u504
  1791  0312  2B15               u505:
  1792  0313                     	clrc
  1793  0313  1003               	rlf	(??_setPort+0)+0,f
  1794  0314  0DAD               u504:
  1795  0315                     	addlw	-1
  1796  0315  3EFF               	skipz
  1797  0316  1D03               	goto	u505
  1798  0317  2B13               	movf	0+(??_setPort+0)+0,w
  1799  0318  082D               	movwf	(??_setPort+2)+0
  1800  0319  00AF               	movf	(setPort@bit_id),w
  1801  031A  0830               	andlw	07h
  1802  031B  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1803  031C  3E0C               	movwf	fsr0
  1804  031D  0084               	movf	(??_setPort+2)+0,w
  1805  031E  082F               	bcf	status, 7	;select IRP bank0
  1806  031F  1383               	iorwf	indf,f
  1807  0320  0480               	line	152
  1808                           	
  1809                           l100:	
  1810  0321                     	return
  1811  0321  0008               	opt stack 0
  1812                           GLOBAL	__end_of_setPort
  1813                           	__end_of_setPort:
  1814  0322                     	signat	_setPort,4217
  1815                           	global	_resetPort
  1816                           
  1817 ;; *************** function _resetPort *****************
  1818 ;; Defined at:
  1819 ;;		line 154 in file "main.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;  bit_id          1    wreg     unsigned char 
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  bit_id          1   13[BANK0 ] unsigned char 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  1    wreg      void 
  1826 ;; Registers used:
  1827 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMMON   BANK0
  1833 ;;      Params:         0       0
  1834 ;;      Locals:         0       1
  1835 ;;      Temps:          0       3
  1836 ;;      Totals:         0       4
  1837 ;;Total ram usage:        4 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    2
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_keyDown
  1844 ;;		_keyUp
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  1848                           	line	154
  1849                           global __ptext6
  1850                           __ptext6:	;psect for function _resetPort
  1851  02E3                     psect	text6
  1852                           	file	"main.c"
  1853                           	line	154
  1854                           	global	__size_of_resetPort
  1855                           	__size_of_resetPort	equ	__end_of_resetPort-_resetPort
  1856  0020                     	
  1857                           _resetPort:	
  1858  02E3                     ;incstack = 0
  1859                           	opt	stack 4
  1860                           ; Regs used in _resetPort: [wreg-fsr0h+status,2+status,0]
  1861                           ;resetPort@bit_id stored from wreg
  1862                           	bcf	status, 5	;RP0=0, select bank0
  1863  02E3  1283               	movwf	(resetPort@bit_id)
  1864  02E4  00B0               	line	156
  1865                           	
  1866                           l969:	
  1867  02E5                     ;main.c: 154: void resetPort(uint8_t bit_id);main.c: 155: {;main.c: 156:     outPorts[bi
                                 t_id & 7] &= ~(1 << ((bit_id >> 3) & 7));
  1868                           	movlw	low(01h)
  1869  02E5  3001               	movwf	(??_resetPort+0)+0
  1870  02E6  00AD               	movf	(resetPort@bit_id),w
  1871  02E7  0830               	movwf	(??_resetPort+1)+0
  1872  02E8  00AE               	movlw	03h
  1873  02E9  3003               u515:
  1874  02EA                     	clrc
  1875  02EA  1003               	rrf	(??_resetPort+1)+0,f
  1876  02EB  0CAE               	addlw	-1
  1877  02EC  3EFF               	skipz
  1878  02ED  1D03               	goto	u515
  1879  02EE  2AEA               	movf	0+(??_resetPort+1)+0,w
  1880  02EF  082E               	andlw	07h
  1881  02F0  3907               	addlw	1
  1882  02F1  3E01               	goto	u524
  1883  02F2  2AF5               u525:
  1884  02F3                     	clrc
  1885  02F3  1003               	rlf	(??_resetPort+0)+0,f
  1886  02F4  0DAD               u524:
  1887  02F5                     	addlw	-1
  1888  02F5  3EFF               	skipz
  1889  02F6  1D03               	goto	u525
  1890  02F7  2AF3               	movf	0+(??_resetPort+0)+0,w
  1891  02F8  082D               	xorlw	0ffh
  1892  02F9  3AFF               	movwf	(??_resetPort+2)+0
  1893  02FA  00AF               	movf	(resetPort@bit_id),w
  1894  02FB  0830               	andlw	07h
  1895  02FC  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1896  02FD  3E0C               	movwf	fsr0
  1897  02FE  0084               	movf	(??_resetPort+2)+0,w
  1898  02FF  082F               	bcf	status, 7	;select IRP bank0
  1899  0300  1383               	andwf	indf,f
  1900  0301  0580               	line	157
  1901                           	
  1902                           l103:	
  1903  0302                     	return
  1904  0302  0008               	opt stack 0
  1905                           GLOBAL	__end_of_resetPort
  1906                           	__end_of_resetPort:
  1907  0303                     	signat	_resetPort,4217
  1908                           	global	_myIsr
  1909                           
  1910 ;; *************** function _myIsr *****************
  1911 ;; Defined at:
  1912 ;;		line 69 in file "main.c"
  1913 ;; Parameters:    Size  Location     Type
  1914 ;;		None
  1915 ;; Auto vars:     Size  Location     Type
  1916 ;;  ii              2    8[BANK0 ] int 
  1917 ;; Return value:  Size  Location     Type
  1918 ;;                  1    wreg      void 
  1919 ;; Registers used:
  1920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1921 ;; Tracked objects:
  1922 ;;		On entry : 0/0
  1923 ;;		On exit  : 0/0
  1924 ;;		Unchanged: 0/0
  1925 ;; Data sizes:     COMMON   BANK0
  1926 ;;      Params:         0       0
  1927 ;;      Locals:         0       4
  1928 ;;      Temps:          0       6
  1929 ;;      Totals:         0      10
  1930 ;;Total ram usage:       10 bytes
  1931 ;; Hardware stack levels used:    2
  1932 ;; This function calls:
  1933 ;;		Nothing
  1934 ;; This function is called by:
  1935 ;;		Interrupt level 1
  1936 ;; This function uses a non-reentrant model
  1937 ;;
  1938                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  1939                           	line	69
  1940                           global __ptext7
  1941                           __ptext7:	;psect for function _myIsr
  1942  0017                     psect	text7
  1943                           	file	"main.c"
  1944                           	line	69
  1945                           	global	__size_of_myIsr
  1946                           	__size_of_myIsr	equ	__end_of_myIsr-_myIsr
  1947  00D8                     	
  1948                           _myIsr:	
  1949  0017                     ;incstack = 0
  1950                           	opt	stack 4
  1951                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1952                           psect	intentry,class=CODE,delta=2
  1953                           global __pintentry
  1954                           __pintentry:
  1955  0004                     global interrupt_function
  1956                           interrupt_function:
  1957  0004                     	global saved_w
  1958                           	saved_w	set	btemp+0
  1959  004E                     	movwf	saved_w
  1960  0004  00CE               	swapf	status,w
  1961  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
  1962  0006  1283               	movwf	(??_myIsr+2)
  1963  0007  00A5               	movf	fsr0,w
  1964  0008  0804               	movwf	(??_myIsr+3)
  1965  0009  00A6               	movf	pclath,w
  1966  000A  080A               	movwf	(??_myIsr+4)
  1967  000B  00A7               	movf	btemp+1,w
  1968  000C  084F               	movwf	(??_myIsr+5)
  1969  000D  00A8               	ljmp	_myIsr
  1970  000E  2817               psect	text7
  1971                           	line	71
  1972                           	
  1973                           i1l1039:	
  1974  0017                     ;main.c: 71:     if(T0IE && T0IF){
  1975                           	btfss	(93/8),(93)&7	;volatile
  1976  0017  1E8B               	goto	u64_21
  1977  0018  281A               	goto	u64_20
  1978  0019  281B               u64_21:
  1979  001A                     	goto	i1l1107
  1980  001A  28E3               u64_20:
  1981  001B                     	
  1982                           i1l1041:	
  1983  001B                     	btfss	(90/8),(90)&7	;volatile
  1984  001B  1D0B               	goto	u65_21
  1985  001C  281E               	goto	u65_20
  1986  001D  281F               u65_21:
  1987  001E                     	goto	i1l1107
  1988  001E  28E3               u65_20:
  1989  001F                     	line	73
  1990                           	
  1991                           i1l1043:	
  1992  001F                     ;main.c: 73:         T0IF=0;
  1993                           	bcf	(90/8),(90)&7	;volatile
  1994  001F  110B               	line	74
  1995                           	
  1996                           i1l1045:	
  1997  0020                     ;main.c: 74:         TMR0 = 255;
  1998                           	movlw	low(0FFh)
  1999  0020  30FF               	movwf	(1)	;volatile
  2000  0021  0081               	line	78
  2001                           	
  2002                           i1l1047:	
  2003  0022                     ;main.c: 78:         if ( ps2DataState == 0 ) {
  2004                           	movf	((_ps2DataState)),w
  2005  0022  0822               	btfss	status,2
  2006  0023  1D03               	goto	u66_21
  2007  0024  2826               	goto	u66_20
  2008  0025  2827               u66_21:
  2009  0026                     	goto	i1l1057
  2010  0026  2835               u66_20:
  2011  0027                     	line	79
  2012                           	
  2013                           i1l1049:	
  2014  0027                     ;main.c: 79:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  2015                           	btfsc	(5),4	;volatile
  2016  0027  1A05               	goto	u67_21
  2017  0028  282A               	goto	u67_20
  2018  0029  282B               u67_21:
  2019  002A                     	goto	i1l1107
  2020  002A  28E3               u67_20:
  2021  002B                     	
  2022                           i1l1051:	
  2023  002B                     	btfsc	(5),3	;volatile
  2024  002B  1985               	goto	u68_21
  2025  002C  282E               	goto	u68_20
  2026  002D  282F               u68_21:
  2027  002E                     	goto	i1l1107
  2028  002E  28E3               u68_20:
  2029  002F                     	line	80
  2030                           	
  2031                           i1l1053:	
  2032  002F                     ;main.c: 80:                 ps2BitsCount = 0;
  2033                           	clrf	(_ps2BitsCount)
  2034  002F  01A0               	line	81
  2035                           ;main.c: 81:                 ps2Bits = 0;
  2036                           	clrf	(_ps2Bits)
  2037  0030  01A1               	line	82
  2038                           	
  2039                           i1l1055:	
  2040  0031                     ;main.c: 82:                 ps2DataState = 1;
  2041                           	clrf	(_ps2DataState)
  2042  0031  01A2               	incf	(_ps2DataState),f
  2043  0032  0AA2               	goto	i1l1107
  2044  0033  28E3               	line	83
  2045                           ;main.c: 83:             }
  2046                           	
  2047                           i1l75:	
  2048  0034                     	line	84
  2049                           ;main.c: 84:         } else if ( ps2DataState == 1 ) {
  2050                           	goto	i1l1107
  2051  0034  28E3               	
  2052                           i1l74:	
  2053  0035                     	
  2054                           i1l1057:	
  2055  0035                     		decf	((_ps2DataState)),w
  2056  0035  0322               	btfss	status,2
  2057  0036  1D03               	goto	u69_21
  2058  0037  2839               	goto	u69_20
  2059  0038  283A               u69_21:
  2060  0039                     	goto	i1l1107
  2061  0039  28E3               u69_20:
  2062  003A                     	line	85
  2063                           	
  2064                           i1l1059:	
  2065  003A                     ;main.c: 85:             if ( ps2BitsCount < 8 ) {
  2066                           	movf	(_ps2BitsCount),w
  2067  003A  0820               	xorlw	80h
  2068  003B  3A80               	addlw	-((08h)^80h)
  2069  003C  3E78               	skipnc
  2070  003D  1803               	goto	u70_21
  2071  003E  2840               	goto	u70_20
  2072  003F  2841               u70_21:
  2073  0040                     	goto	i1l1065
  2074  0040  2857               u70_20:
  2075  0041                     	line	86
  2076                           	
  2077                           i1l1061:	
  2078  0041                     ;main.c: 86:                 if ( PORTAbits.RA3 ) {
  2079                           	btfss	(5),3	;volatile
  2080  0041  1D85               	goto	u71_21
  2081  0042  2844               	goto	u71_20
  2082  0043  2845               u71_21:
  2083  0044                     	goto	i1l79
  2084  0044  2852               u71_20:
  2085  0045                     	line	87
  2086                           	
  2087                           i1l1063:	
  2088  0045                     ;main.c: 87:                     ps2Bits |= ( 1 << ps2BitsCount );
  2089                           	movlw	low(01h)
  2090  0045  3001               	movwf	(??_myIsr+0)+0
  2091  0046  00A3               	incf	(_ps2BitsCount),w
  2092  0047  0A20               	goto	u72_24
  2093  0048  284B               u72_25:
  2094  0049                     	clrc
  2095  0049  1003               	rlf	(??_myIsr+0)+0,f
  2096  004A  0DA3               u72_24:
  2097  004B                     	addlw	-1
  2098  004B  3EFF               	skipz
  2099  004C  1D03               	goto	u72_25
  2100  004D  2849               	movf	0+(??_myIsr+0)+0,w
  2101  004E  0823               	movwf	(??_myIsr+1)+0
  2102  004F  00A4               	movf	(??_myIsr+1)+0,w
  2103  0050  0824               	iorwf	(_ps2Bits),f
  2104  0051  04A1               	line	88
  2105                           ;main.c: 88:                 }
  2106                           	
  2107                           i1l79:	
  2108  0052                     	line	89
  2109                           ;main.c: 89:                 ps2BitsCount++;
  2110                           	movlw	low(01h)
  2111  0052  3001               	movwf	(??_myIsr+0)+0
  2112  0053  00A3               	movf	(??_myIsr+0)+0,w
  2113  0054  0823               	addwf	(_ps2BitsCount),f
  2114  0055  07A0               	line	90
  2115                           ;main.c: 90:             } else if ( ps2BitsCount == 8 ) {
  2116                           	goto	i1l1107
  2117  0056  28E3               	
  2118                           i1l78:	
  2119  0057                     	
  2120                           i1l1065:	
  2121  0057                     		movlw	8
  2122  0057  3008               	xorwf	((_ps2BitsCount)),w
  2123  0058  0620               	btfss	status,2
  2124  0059  1D03               	goto	u73_21
  2125  005A  285C               	goto	u73_20
  2126  005B  285D               u73_21:
  2127  005C                     	goto	i1l1069
  2128  005C  2862               u73_20:
  2129  005D                     	line	91
  2130                           	
  2131                           i1l1067:	
  2132  005D                     ;main.c: 91:                 ps2BitsCount++;
  2133                           	movlw	low(01h)
  2134  005D  3001               	movwf	(??_myIsr+0)+0
  2135  005E  00A3               	movf	(??_myIsr+0)+0,w
  2136  005F  0823               	addwf	(_ps2BitsCount),f
  2137  0060  07A0               	line	92
  2138                           ;main.c: 92:             } else if ( ps2BitsCount == 9 ) {
  2139                           	goto	i1l1107
  2140  0061  28E3               	
  2141                           i1l81:	
  2142  0062                     	
  2143                           i1l1069:	
  2144  0062                     		movlw	9
  2145  0062  3009               	xorwf	((_ps2BitsCount)),w
  2146  0063  0620               	btfss	status,2
  2147  0064  1D03               	goto	u74_21
  2148  0065  2867               	goto	u74_20
  2149  0066  2868               u74_21:
  2150  0067                     	goto	i1l1107
  2151  0067  28E3               u74_20:
  2152  0068                     	line	93
  2153                           	
  2154                           i1l1071:	
  2155  0068                     ;main.c: 93:                 ps2DataCount++;
  2156                           	movlw	low(01h)
  2157  0068  3001               	movwf	(??_myIsr+0)+0
  2158  0069  00A3               	movf	(??_myIsr+0)+0,w
  2159  006A  0823               	addwf	(_ps2DataCount),f
  2160  006B  079E               	line	94
  2161                           ;main.c: 94:                 if ( ps2NeedEncode ) {
  2162                           	movf	((_ps2NeedEncode)),w
  2163  006C  081B               	btfsc	status,2
  2164  006D  1903               	goto	u75_21
  2165  006E  2870               	goto	u75_20
  2166  006F  2871               u75_21:
  2167  0070                     	goto	i1l1087
  2168  0070  28AA               u75_20:
  2169  0071                     	line	95
  2170                           	
  2171                           i1l1073:	
  2172  0071                     ;main.c: 95:                     for (int ii=0; ii < 25; ii+=2) {
  2173                           	clrf	(myIsr@ii)
  2174  0071  01AB               	clrf	(myIsr@ii+1)
  2175  0072  01AC               	
  2176                           i1l1075:	
  2177  0073                     	movf	(myIsr@ii+1),w
  2178  0073  082C               	xorlw	80h
  2179  0074  3A80               	movwf	btemp+1
  2180  0075  00CF               	movlw	(0)^80h
  2181  0076  3080               	subwf	btemp+1,w
  2182  0077  024F               	skipz
  2183  0078  1D03               	goto	u76_25
  2184  0079  287C               	movlw	019h
  2185  007A  3019               	subwf	(myIsr@ii),w
  2186  007B  022B               u76_25:
  2187  007C                     
  2188                           	skipc
  2189  007C  1C03               	goto	u76_21
  2190  007D  287F               	goto	u76_20
  2191  007E  2880               u76_21:
  2192  007F                     	goto	i1l1079
  2193  007F  2882               u76_20:
  2194  0080                     	goto	i1l1093
  2195  0080  28C2               	
  2196                           i1l1077:	
  2197  0081                     	goto	i1l1093
  2198  0081  28C2               	
  2199                           i1l85:	
  2200  0082                     	line	96
  2201                           	
  2202                           i1l1079:	
  2203  0082                     ;main.c: 96:                         if ( ps2Bits == replaceTwoBytesCodes[ii] ) {
  2204                           	bcf	status, 5	;RP0=0, select bank0
  2205  0082  1283               	movf	(myIsr@ii),w
  2206  0083  082B               	addlw	low((((_replaceTwoBytesCodes)-__stringbase)|8000h))
  2207  0084  3EA5               	movwf	fsr0
  2208  0085  0084               	fcall	stringdir
  2209  0086  2100               	xorwf	(_ps2Bits),w
  2210  0087  0621               	skipz
  2211  0088  1D03               	goto	u77_21
  2212  0089  288B               	goto	u77_20
  2213  008A  288C               u77_21:
  2214  008B                     	goto	i1l1083
  2215  008B  2895               u77_20:
  2216  008C                     	line	97
  2217                           	
  2218                           i1l1081:	
  2219  008C                     ;main.c: 97:                             ps2Data = replaceTwoBytesCodes[ii+1];
  2220                           	movf	(myIsr@ii),w
  2221  008C  082B               	addlw	01h
  2222  008D  3E01               	addlw	low((((_replaceTwoBytesCodes)-__stringbase)|8000h))
  2223  008E  3EA5               	movwf	fsr0
  2224  008F  0084               	fcall	stringdir
  2225  0090  2100               	movwf	(??_myIsr+0)+0
  2226  0091  00A3               	movf	(??_myIsr+0)+0,w
  2227  0092  0823               	movwf	(_ps2Data)
  2228  0093  009F               	line	98
  2229                           ;main.c: 98:                             break;
  2230                           	goto	i1l1093
  2231  0094  28C2               	line	99
  2232                           ;main.c: 99:                         }
  2233                           	
  2234                           i1l87:	
  2235  0095                     	line	100
  2236                           	
  2237                           i1l1083:	
  2238  0095                     ;main.c: 100:                     }
  2239                           	movlw	02h
  2240  0095  3002               	addwf	(myIsr@ii),f
  2241  0096  07AB               	skipnc
  2242  0097  1803               	incf	(myIsr@ii+1),f
  2243  0098  0AAC               	movlw	0
  2244  0099  3000               	addwf	(myIsr@ii+1),f
  2245  009A  07AC               	
  2246                           i1l1085:	
  2247  009B                     	movf	(myIsr@ii+1),w
  2248  009B  082C               	xorlw	80h
  2249  009C  3A80               	movwf	btemp+1
  2250  009D  00CF               	movlw	(0)^80h
  2251  009E  3080               	subwf	btemp+1,w
  2252  009F  024F               	skipz
  2253  00A0  1D03               	goto	u78_25
  2254  00A1  28A4               	movlw	019h
  2255  00A2  3019               	subwf	(myIsr@ii),w
  2256  00A3  022B               u78_25:
  2257  00A4                     
  2258                           	skipc
  2259  00A4  1C03               	goto	u78_21
  2260  00A5  28A7               	goto	u78_20
  2261  00A6  28A8               u78_21:
  2262  00A7                     	goto	i1l1079
  2263  00A7  2882               u78_20:
  2264  00A8                     	goto	i1l1093
  2265  00A8  28C2               	
  2266                           i1l86:	
  2267  00A9                     	line	120
  2268                           ;main.c: 120:                 } else {
  2269                           	goto	i1l1093
  2270  00A9  28C2               	
  2271                           i1l84:	
  2272  00AA                     	line	121
  2273                           	
  2274                           i1l1087:	
  2275  00AA                     ;main.c: 121:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2276                           		movlw	131
  2277  00AA  3083               	bcf	status, 5	;RP0=0, select bank0
  2278  00AB  1283               	xorwf	((_ps2Bits)),w
  2279  00AC  0621               	btfsc	status,2
  2280  00AD  1903               	goto	u79_21
  2281  00AE  28B0               	goto	u79_20
  2282  00AF  28B1               u79_21:
  2283  00B0                     	goto	i1l1091
  2284  00B0  28B9               u79_20:
  2285  00B1                     	
  2286                           i1l1089:	
  2287  00B1                     	movf	(_ps2Bits),w
  2288  00B1  0821               	movwf	(??_myIsr+0)+0
  2289  00B2  00A3               	clrf	(??_myIsr+0)+0+1
  2290  00B3  01A4               	movf	0+(??_myIsr+0)+0,w
  2291  00B4  0823               	movwf	(_myIsr$81)
  2292  00B5  00A9               	movf	1+(??_myIsr+0)+0,w
  2293  00B6  0824               	movwf	(_myIsr$81+1)
  2294  00B7  00AA               	goto	i1l92
  2295  00B8  28BD               	
  2296                           i1l90:	
  2297  00B9                     	
  2298                           i1l1091:	
  2299  00B9                     	movlw	03Fh
  2300  00B9  303F               	movwf	(_myIsr$81)
  2301  00BA  00A9               	movlw	0
  2302  00BB  3000               	movwf	((_myIsr$81))+1
  2303  00BC  00AA               	
  2304                           i1l92:	
  2305  00BD                     	movf	(_myIsr$81),w
  2306  00BD  0829               	movwf	(??_myIsr+0)+0
  2307  00BE  00A3               	movf	(??_myIsr+0)+0,w
  2308  00BF  0823               	movwf	(_ps2Data)
  2309  00C0  009F               	goto	i1l1093
  2310  00C1  28C2               	line	122
  2311                           ;main.c: 122:                 }
  2312                           	
  2313                           i1l88:	
  2314  00C2                     	line	123
  2315                           	
  2316                           i1l1093:	
  2317  00C2                     ;main.c: 123:                 if ( ps2Bits == 0xF0 ) {
  2318                           		movlw	240
  2319  00C2  30F0               	bcf	status, 5	;RP0=0, select bank0
  2320  00C3  1283               	xorwf	((_ps2Bits)),w
  2321  00C4  0621               	btfss	status,2
  2322  00C5  1D03               	goto	u80_21
  2323  00C6  28C8               	goto	u80_20
  2324  00C7  28C9               u80_21:
  2325  00C8                     	goto	i1l1099
  2326  00C8  28CD               u80_20:
  2327  00C9                     	line	124
  2328                           	
  2329                           i1l1095:	
  2330  00C9                     ;main.c: 124:                     ps2DataState = 0;
  2331                           	clrf	(_ps2DataState)
  2332  00C9  01A2               	line	125
  2333                           	
  2334                           i1l1097:	
  2335  00CA                     ;main.c: 125:                     ps2Up = 1;
  2336                           	clrf	(_ps2Up)
  2337  00CA  019C               	incf	(_ps2Up),f
  2338  00CB  0A9C               	line	126
  2339                           ;main.c: 126:                 } else if ( ps2Bits == 0xE0 ) {
  2340                           	goto	i1l1107
  2341  00CC  28E3               	
  2342                           i1l93:	
  2343  00CD                     	
  2344                           i1l1099:	
  2345  00CD                     		movlw	224
  2346  00CD  30E0               	xorwf	((_ps2Bits)),w
  2347  00CE  0621               	btfss	status,2
  2348  00CF  1D03               	goto	u81_21
  2349  00D0  28D2               	goto	u81_20
  2350  00D1  28D3               u81_21:
  2351  00D2                     	goto	i1l1105
  2352  00D2  28D7               u81_20:
  2353  00D3                     	line	127
  2354                           	
  2355                           i1l1101:	
  2356  00D3                     ;main.c: 127:                     ps2DataState = 0;
  2357                           	clrf	(_ps2DataState)
  2358  00D3  01A2               	line	128
  2359                           	
  2360                           i1l1103:	
  2361  00D4                     ;main.c: 128:                     ps2NeedEncode = 1;
  2362                           	clrf	(_ps2NeedEncode)
  2363  00D4  019B               	incf	(_ps2NeedEncode),f
  2364  00D5  0A9B               	line	129
  2365                           ;main.c: 129:                 } else {
  2366                           	goto	i1l1107
  2367  00D6  28E3               	line	137
  2368                           	
  2369                           i1l95:	
  2370  00D7                     	line	138
  2371                           	
  2372                           i1l1105:	
  2373  00D7                     ;main.c: 138:                     ps2DataState = 2;
  2374                           	movlw	low(02h)
  2375  00D7  3002               	movwf	(??_myIsr+0)+0
  2376  00D8  00A3               	movf	(??_myIsr+0)+0,w
  2377  00D9  0823               	movwf	(_ps2DataState)
  2378  00DA  00A2               	goto	i1l1107
  2379  00DB  28E3               	line	139
  2380                           ;main.c: 139:                 }
  2381                           	
  2382                           i1l96:	
  2383  00DC                     	goto	i1l1107
  2384  00DC  28E3               	
  2385                           i1l94:	
  2386  00DD                     	goto	i1l1107
  2387  00DD  28E3               	line	141
  2388                           ;main.c: 141:             }
  2389                           	
  2390                           i1l83:	
  2391  00DE                     	goto	i1l1107
  2392  00DE  28E3               	
  2393                           i1l82:	
  2394  00DF                     	goto	i1l1107
  2395  00DF  28E3               	
  2396                           i1l80:	
  2397  00E0                     	goto	i1l1107
  2398  00E0  28E3               	line	142
  2399                           ;main.c: 142:         }
  2400                           	
  2401                           i1l77:	
  2402  00E1                     	goto	i1l1107
  2403  00E1  28E3               	
  2404                           i1l76:	
  2405  00E2                     	goto	i1l1107
  2406  00E2  28E3               	line	143
  2407                           ;main.c: 143:     }
  2408                           	
  2409                           i1l73:	
  2410  00E3                     	line	144
  2411                           	
  2412                           i1l1107:	
  2413  00E3                     ;main.c: 144:     GIE = 1;
  2414                           	bsf	(95/8),(95)&7	;volatile
  2415  00E3  178B               	line	145
  2416                           	
  2417                           i1l97:	
  2418  00E4                     	movf	(??_myIsr+5),w
  2419  00E4  0828               	movwf	btemp+1
  2420  00E5  00CF               	movf	(??_myIsr+4),w
  2421  00E6  0827               	movwf	pclath
  2422  00E7  008A               	movf	(??_myIsr+3),w
  2423  00E8  0826               	movwf	fsr0
  2424  00E9  0084               	swapf	(??_myIsr+2)^00h,w
  2425  00EA  0E25               	movwf	status
  2426  00EB  0083               	swapf	saved_w,f
  2427  00EC  0ECE               	swapf	saved_w,w
  2428  00ED  0E4E               	retfie
  2429  00EE  0009               	opt stack 0
  2430                           GLOBAL	__end_of_myIsr
  2431                           	__end_of_myIsr:
  2432  00EF                     	signat	_myIsr,89
  2433                           global	___latbits
  2434                           ___latbits	equ	0
  2435  0000                     	global	btemp
  2436                           	btemp set 04Eh
  2437  004E                     
  2438                           	DABS	1,78,2	;btemp
  2439                           	global	wtemp0
  2440                           	wtemp0 set btemp+0
  2441  004E                     	end


Data Sizes:
    Strings     0
    Constant    190
    Data        0
    BSS         23
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     17      40

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_keyDown
    _main->_keyUp
    _keyUp->_resetPort
    _keyDown->_resetPort
    _keyDown->_setPort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     220
                                             16 BANK0      1     1      0
                            _keyDown
                              _keyUp
                   _sendDataToAltera
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     1     1      0       0
                                             10 BANK0      1     1      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyUp                                                2     2      0      88
                                             14 BANK0      2     2      0
                          _resetPort
 ---------------------------------------------------------------------------------
 (1) _keyDown                                              2     2      0     132
                                             14 BANK0      2     2      0
                          _resetPort
                            _setPort
 ---------------------------------------------------------------------------------
 (2) _setPort                                              4     4      0      44
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _resetPort                                            4     4      0      44
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                               10    10      0     114
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keyDown
     _resetPort
     _setPort
   _keyUp
     _resetPort
   _sendDataToAltera
     _myDelay

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42     11      28       3       60.6%
ABS                  0      0      28       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      28       6        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Aug 24 19:43:38 2018

                            _i 001A                              pc 0002                             fsr 0004  
                          l100 0321                            l103 0302                            l111 0298  
                          l113 0293                            l121 032C                            l114 029E  
                          l106 027A                            l122 033B                            l130 02E0  
                          l115 02AC                            l107 02B0                            l123 033B  
                          l131 02E2                            l108 02B0                            l140 021B  
                          l117 02A9                            l109 029B                            l141 0210  
                          l118 02AF                            l126 0344                            l150 0252  
                          l142 0243                            l143 0233                            l152 0250  
                          l136 01E1                            l129 02C8                            l153 0261  
                          l145 0230                            l137 026C                            l146 0242  
                          l138 021C                            l155 025F                            l139 01FC  
                          l156 026E                            l148 023F                            l157 026F  
                          l149 0264                            l158 026F                            l971 0272  
                          l981 0288                            l973 0279                            l967 0305  
                          l991 02A4                            l983 028E                            l975 027A  
                          l969 02E5                            l993 02A9                            l985 0298  
                          l977 0281                            l995 02AC                            l987 029B  
                          l979 0286                            _GIE 005F                            l989 029E  
                          l997 0324                            l999 032B                            _RA1 0029  
                          _RA2 002A                            u504 0315                            u600 032A  
                          u505 0313                            u601 0329                            u530 0278  
                          u610 0338                            u515 02EA                            u531 0277  
                          u611 0337                            u524 02F5                            u540 0286  
                          u620 02C6                            u525 02F3                            u541 0285  
                          u621 02C5                            u550 028E                            u630 02E0  
                          u551 028D                            u631 02DF                            u560 0293  
                          u561 0292                            u570 0297                            u571 0296  
                          u580 02A4                            u900 0230                            u820 01E8  
                          u581 02A3                            u901 022F                            u821 01E7  
                          u590 02A8                            u910 0239                            u830 01EE  
                          u495 030A                            u591 02A7                            u911 0238  
                          u831 01ED                            _PSA 040B                            u920 023F  
                          u840 01F3                            u921 023E                            u841 01F2  
                          u930 0249                            u850 01FA                            u931 0248  
                          u851 01F9                            u940 024F                            u860 0205  
                          u941 024E                            u861 0204                            u950 0258  
                          u870 021A                            u951 0257                            u871 0219  
                          u960 025E                            u880 0221                            u961 025D  
                          u881 0220                            u890 022A                            u891 0229  
                          fsr0 0004                            indf 0000                           l1001 032C  
                         l1003 0333                           l1011 02B5                           l1005 0338  
                         l1021 02C7                           l1013 02B8                           l1031 02D4  
                         l1023 02C9                           l1015 02BB                           l1007 02B1  
                         l1111 01CA                           l1033 02D5                           l1025 02CA  
                         l1017 02BE                           l1009 02B4                           l1201 026B  
                         l1121 01D5                           l1113 01D0                           l1035 02DA  
                         l1027 02D1                           l1019 02C0                           l1131 01DC  
                         l1123 01D6                           l1115 01D2                           l1037 02E1  
                         l1029 02D2                           l1141 01E8                           l1133 01DD  
                         l1125 01D7                           l1117 01D3                           l1109 01C4  
                         l1151 01FB                           l1143 01E9                           l1135 01DE  
                         l1127 01DA                           l1119 01D4                           l1161 0214  
                         l1153 01FC                           l1145 01EE                           l1137 01DF  
                         l1129 01DB                           l1171 0233                           l1155 0205  
                         l1147 01F3                           l1163 021C                           l1139 01E1  
                         l1181 0252                           l1173 0239                           l1165 0221  
                         l1157 0207                           l1149 01F4                           l1191 0266  
                         l1183 0258                           l1167 0223                           l1175 0243  
                         l1159 0210                           l1193 0267                           l1185 025F  
                         l1177 0249                           l1169 022A                           l1195 0268  
                         l1187 0261                           l1179 0250                           l1197 0269  
                         l1189 0264                           l1199 026A                           _T0IE 005D  
                         _T0IF 005A                           _T0CS 040D                           _T0SE 040C  
                         i1l80 00E0                           i1l73 00E3                           i1l81 0062  
                         i1l82 00DF                           i1l90 00B9                           i1l74 0035  
                         i1l83 00DE                           i1l75 0034                           i1l76 00E2  
                         i1l92 00BD                           i1l84 00AA                           i1l77 00E1  
                         i1l93 00CD                           i1l85 0082                           i1l94 00DD  
                         i1l86 00A9                           i1l78 0057                           i1l95 00D7  
                         i1l87 0095                           i1l79 0052                           i1l96 00DC  
                         i1l88 00C2                           i1l97 00E4                           _TMR0 0001  
                         _main 01C4                           _ctrl 0018                           btemp 004E  
                         start 000F                          ?_main 0023   __end_of_replaceTwoBytesCodes 01C4  
                        _PORTA 0005                          _PORTB 0006           __end_of_codeToMatrix 0186  
                        u70_20 0041                          u70_21 0040                          u71_20 0045  
                        u71_21 0044                          u80_20 00C9                          u64_20 001B  
                        u80_21 00C8                          u64_21 001A                          u72_24 004B  
                        u72_25 0049                          u81_20 00D3                          u73_20 005D  
                        u65_20 001F                          u81_21 00D2                          u73_21 005C  
                        u65_21 001E                          _TRISB 0086                          u74_20 0068  
                        u66_20 0027                          u74_21 0067                          u66_21 0026  
                        u75_20 0071                          u67_20 002B                          u75_21 0070  
                        u67_21 002A                          u76_20 0080                          u68_20 002F  
                        u76_21 007F                          u68_21 002E                          u76_25 007C  
                        u77_20 008C                          u69_20 003A                          u77_21 008B  
                        u69_21 0039                          u78_20 00A8                          u78_21 00A7  
                        u78_25 00A4                          u79_20 00B1                          u79_21 00B0  
              __end_of_keyDown 02B1                          _ps2Up 001C                __end_of_myDelay 0345  
                        _keyUp 0322                          _myIsr 0017                          _shift 0019  
              __end_of_setPort 0322                          pclath 000A                          status 0003  
                        wtemp0 004E                __initialization 0010                   __end_of_main 0270  
                       ??_main 0033                         ?_keyUp 0023                         ?_myIsr 0023  
                       i1l1101 00D3                         i1l1103 00D4                         i1l1105 00D7  
                       i1l1041 001B                         i1l1051 002B                         i1l1043 001F  
                       i1l1107 00E3                         i1l1061 0041                         i1l1053 002F  
                       i1l1045 0020                         i1l1071 0068                         i1l1063 0045  
                       i1l1055 0031                         i1l1047 0022                         i1l1039 0017  
                       i1l1081 008C                         i1l1073 0071                         i1l1065 0057  
                       i1l1049 0027                         i1l1057 0035                         i1l1091 00B9  
                       i1l1083 0095                         i1l1075 0073                         i1l1067 005D  
                       i1l1059 003A                         i1l1085 009B                         i1l1077 0081  
                       i1l1093 00C2                         i1l1069 0062                         i1l1095 00C9  
                       i1l1079 0082                         i1l1087 00AA                         i1l1097 00CA  
                       i1l1089 00B1                         i1l1099 00CD                         _TRISA0 0428  
                       _TRISA1 0429                         _TRISA2 042A                         _TRISA3 042B  
                       _TRISA4 042C       __end_of_sendDataToAltera 02E3                      ??_keyDown 0031  
                    ??_myDelay 0000                         saved_w 004E                      ??_setPort 002D  
      __end_of__initialization 0015           _replaceTwoBytesCodes 01AA                 __pcstackCOMMON 0000  
                __end_of_keyUp 033C                  __end_of_myIsr 00EF                        ??_keyUp 0031  
                      ??_myIsr 0023                   _ps2DataCount 001E                   _ps2DataState 0022  
                   __pbssBANK0 000C                   _ps2BitsCount 0020                   _codeToMatrix 0106  
                   __pmaintext 01C4                     __pintentry 0004             __size_of_resetPort 0020  
                   __stringtab 0100  __end_of_replaceOnShiftKeyDown 01AA                        _ps2Data 001F  
                      _ps2Bits 0021                        __ptext1 02B1                        __ptext2 0344  
                      __ptext3 0322                        __ptext4 0270                        __ptext5 0303  
                      __ptext6 02E3                        __ptext7 0017                        _keyDown 0270  
                      _myDelay 0344                        _setPort 0303                        clrloop0 033D  
         end_of_initialization 0015              __end_of_resetPort 0303                        myIsr@ii 002B  
            ?_sendDataToAltera 0023             ??_sendDataToAltera 002D                      _PORTAbits 0005  
                setPort@bit_id 0030                     keyDown@key 0032            start_initialization 0010  
                    ___latbits 0000                  __pcstackBANK0 0023                resetPort@bit_id 0030  
                    __pstrings 0100                  _ps2NeedEncode 001B                       ?_keyDown 0023  
                     ?_myDelay 0023                    _ps2WaitCode 001D                       ?_setPort 0023  
               __size_of_keyUp 001A                 __size_of_myIsr 00D8              interrupt_function 0004  
                    clear_ram0 033C                      _resetPort 02E3          _replaceOnShiftKeyDown 0186  
                  __stringbase 0105      __size_of_sendDataToAltera 0032                     ?_resetPort 0023  
           __end_of__stringtab 0106               __size_of_keyDown 0041               __size_of_myDelay 0001  
             __size_of_setPort 001F                       _myIsr$81 0029                  __size_of_main 00AC  
                     _replaced 0017                       _outPorts 000C                       keyUp@key 0032  
                     intlevel1 0000                      stringcode 0100                    ??_resetPort 002D  
             _sendDataToAltera 02B1                       stringdir 0100                       stringtab 0100  
