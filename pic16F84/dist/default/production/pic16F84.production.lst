

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Aug 25 20:18:15 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F84A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   102                           EEDATA equ 08h ;# 
   103  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   104                           EEADR equ 09h ;# 
   105  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   106                           PCLATH equ 0Ah ;# 
   107  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   108                           INTCON equ 0Bh ;# 
   109  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   110                           OPTION_REG equ 081h ;# 
   111  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   112                           TRISA equ 085h ;# 
   113  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   114                           TRISB equ 086h ;# 
   115  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   116                           EECON1 equ 088h ;# 
   117  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   118                           EECON2 equ 089h ;# 
   119  0089                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   120                           INDF equ 00h ;# 
   121  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   122                           TMR0 equ 01h ;# 
   123  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   124                           PCL equ 02h ;# 
   125  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   126                           STATUS equ 03h ;# 
   127  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   128                           FSR equ 04h ;# 
   129  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   130                           PORTA equ 05h ;# 
   131  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   132                           PORTB equ 06h ;# 
   133  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   134                           EEDATA equ 08h ;# 
   135  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   136                           EEADR equ 09h ;# 
   137  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   138                           PCLATH equ 0Ah ;# 
   139  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   140                           INTCON equ 0Bh ;# 
   141  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   142                           OPTION_REG equ 081h ;# 
   143  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   144                           TRISA equ 085h ;# 
   145  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   146                           TRISB equ 086h ;# 
   147  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   148                           EECON1 equ 088h ;# 
   149  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   150                           EECON2 equ 089h ;# 
   151  0089                     	FNCALL	_main,_keyDown
   152                           	FNCALL	_main,_keyUp
   153                           	FNCALL	_main,_sendDataToAltera
   154                           	FNCALL	_sendDataToAltera,_myDelay
   155                           	FNCALL	_keyUp,_resetPort
   156                           	FNCALL	_keyDown,_resetPort
   157                           	FNCALL	_keyDown,_setPort
   158                           	FNROOT	_main
   159                           	FNCALL	intlevel1,_myIsr
   160                           	global	intlevel1
   161                           	FNROOT	intlevel1
   162                           	global	_outPorts
   163                           psect	idataBANK0,class=CODE,space=0,delta=2,noexec
   164                           global __pidataBANK0
   165                           __pidataBANK0:
   166  035B                     	file	"main.c"
   167                           	line	41
   168                           
   169                           ;initializer for _outPorts
   170                           	retlw	low(0)
   171  035B  3400               	retlw	low(0)
   172  035C  3400               	retlw	low(0)
   173  035D  3400               	retlw	low(0)
   174  035E  3400               	retlw	low(0)
   175  035F  3400               	retlw	low(0)
   176  0360  3400               	retlw	low(0)
   177  0361  3400               	retlw	low(0)
   178  0362  3400               	retlw	low(0)
   179  0363  3400               	retlw	0F5h
   180  0364  34F5               	retlw	0DAh
   181  0365  34DA               	line	66
   182                           
   183                           ;initializer for _mouseY
   184                           	retlw	06Eh
   185  0366  346E               	line	65
   186                           
   187                           ;initializer for _mouseX
   188                           	retlw	0DCh
   189  0367  34DC               	global	_codeToMatrix
   190                           psect	strings,class=STRING,delta=2,noexec
   191                           global __pstrings
   192                           __pstrings:
   193  0109                     stringtab:
   194  0109                     	global    __stringtab
   195                           __stringtab:
   196  0109                     ;	String table - string pointers are 1 byte each
   197                           stringcode:stringdir:
   198  0109                     movlw high(stringdir)
      + 0109                     stringdir:	
   199  0109  3001               movwf pclath
   200  010A  008A               movf fsr,w
   201  010B  0804               incf fsr
   202  010C  0A84               	addwf pc
   203  010D  0782               	global __stringbase
   204                           __stringbase:
   205  010E                     	retlw	0
   206  010E  3400               psect	strings
   207                           	global    __end_of__stringtab
   208                           __end_of__stringtab:
   209  010F                     	file	"./ps2tozxtable.h"
   210                           	line	47
   211                           _codeToMatrix:
   212  010F                     	retlw	0FFh
   213  010F  34FF               	retlw	0FFh
   214  0110  34FF               	retlw	0FFh
   215  0111  34FF               	retlw	0FFh
   216  0112  34FF               	retlw	0FFh
   217  0113  34FF               	retlw	0FFh
   218  0114  34FF               	retlw	0FFh
   219  0115  34FF               	retlw	0FFh
   220  0116  34FF               	retlw	0FFh
   221  0117  34FF               	retlw	0FFh
   222  0118  34FF               	retlw	0FFh
   223  0119  34FF               	retlw	0FFh
   224  011A  34FF               	retlw	0FFh
   225  011B  34FF               	retlw	0FFh
   226  011C  34FF               	retlw	09Ch
   227  011D  349C               	retlw	0FFh
   228  011E  34FF               	retlw	0FFh
   229  011F  34FF               	retlw	0FFh
   230  0120  34FF               	retlw	0FFh
   231  0121  34FF               	retlw	0FFh
   232  0122  34FF               	retlw	0FFh
   233  0123  34FF               	retlw	02h
   234  0124  3402               	retlw	03h
   235  0125  3403               	retlw	0FFh
   236  0126  34FF               	retlw	0FFh
   237  0127  34FF               	retlw	0FFh
   238  0128  34FF               	retlw	08h
   239  0129  3408               	retlw	09h
   240  012A  3409               	retlw	01h
   241  012B  3401               	retlw	0Ah
   242  012C  340A               	retlw	0Bh
   243  012D  340B               	retlw	044h
   244  012E  3444               	retlw	0FFh
   245  012F  34FF               	retlw	018h
   246  0130  3418               	retlw	010h
   247  0131  3410               	retlw	011h
   248  0132  3411               	retlw	012h
   249  0133  3412               	retlw	01Bh
   250  0134  341B               	retlw	013h
   251  0135  3413               	retlw	0FFh
   252  0136  34FF               	retlw	05Ch
   253  0137  345C               	retlw	07h
   254  0138  3407               	retlw	020h
   255  0139  3420               	retlw	019h
   256  013A  3419               	retlw	022h
   257  013B  3422               	retlw	01Ah
   258  013C  341A               	retlw	023h
   259  013D  3423               	retlw	063h
   260  013E  3463               	retlw	064h
   261  013F  3464               	retlw	01Fh
   262  0140  341F               	retlw	027h
   263  0141  3427               	retlw	026h
   264  0142  3426               	retlw	021h
   265  0143  3421               	retlw	025h
   266  0144  3425               	retlw	024h
   267  0145  3424               	retlw	054h
   268  0146  3454               	retlw	0A0h
   269  0147  34A0               	retlw	06h
   270  0148  3406               	retlw	017h
   271  0149  3417               	retlw	01Eh
   272  014A  341E               	retlw	01Dh
   273  014B  341D               	retlw	01Ch
   274  014C  341C               	retlw	014h
   275  014D  3414               	retlw	0FFh
   276  014E  34FF               	retlw	0FFh
   277  014F  34FF               	retlw	09Fh
   278  0150  349F               	retlw	016h
   279  0151  3416               	retlw	015h
   280  0152  3415               	retlw	0Dh
   281  0153  340D               	retlw	04h
   282  0154  3404               	retlw	0Ch
   283  0155  340C               	retlw	0FFh
   284  0156  34FF               	retlw	0FFh
   285  0157  34FF               	retlw	097h
   286  0158  3497               	retlw	0A0h
   287  0159  34A0               	retlw	0Eh
   288  015A  340E               	retlw	08Dh
   289  015B  348D               	retlw	05h
   290  015C  3405               	retlw	09Eh
   291  015D  349E               	retlw	083h
   292  015E  3483               	retlw	08Bh
   293  015F  348B               	retlw	093h
   294  0160  3493               	retlw	09Ch
   295  0161  349C               	retlw	09Bh
   296  0162  349B               	retlw	0E5h
   297  0163  34E5               	retlw	08Eh
   298  0164  348E               	retlw	0A3h
   299  0165  34A3               	retlw	0A6h
   300  0166  34A6               	retlw	04Bh
   301  0167  344B               	retlw	0FFh
   302  0168  34FF               	retlw	06h
   303  0169  3406               	retlw	0DDh
   304  016A  34DD               	retlw	0A4h
   305  016B  34A4               	retlw	0FFh
   306  016C  34FF               	retlw	0A7h
   307  016D  34A7               	retlw	094h
   308  016E  3494               	retlw	08Ch
   309  016F  348C               	retlw	084h
   310  0170  3484               	retlw	096h
   311  0171  3496               	retlw	090h
   312  0172  3490               	retlw	0FFh
   313  0173  34FF               	retlw	0FFh
   314  0174  34FF               	retlw	044h
   315  0175  3444               	retlw	088h
   316  0176  3488               	retlw	085h
   317  0177  3485               	retlw	03h
   318  0178  3403               	retlw	09Ah
   319  0179  349A               	retlw	01Bh
   320  017A  341B               	retlw	01Ch
   321  017B  341C               	retlw	0A2h
   322  017C  34A2               	retlw	098h
   323  017D  3498               	retlw	0FFh
   324  017E  34FF               	retlw	04h
   325  017F  3404               	retlw	097h
   326  0180  3497               	retlw	0Bh
   327  0181  340B               	retlw	023h
   328  0182  3423               	retlw	024h
   329  0183  3424               	retlw	014h
   330  0184  3414               	retlw	043h
   331  0185  3443               	retlw	0FFh
   332  0186  34FF               	retlw	0FFh
   333  0187  34FF               	retlw	096h
   334  0188  3496               	retlw	013h
   335  0189  3413               	retlw	09Eh
   336  018A  349E               	retlw	0A7h
   337  018B  34A7               	retlw	0Ch
   338  018C  340C               	retlw	0FFh
   339  018D  34FF               	retlw	0FFh
   340  018E  34FF               	global __end_of_codeToMatrix
   341                           __end_of_codeToMatrix:
   342  018F                     	global	_replaceOnShiftKeyDown
   343                           psect	strings
   344                           	file	"./ps2tozxtable.h"
   345                           	line	4
   346                           _replaceOnShiftKeyDown:
   347  018F                     	retlw	016h
   348  018F  3416               	retlw	04Fh
   349  0190  344F               	retlw	01Eh
   350  0191  341E               	retlw	050h
   351  0192  3450               	retlw	026h
   352  0193  3426               	retlw	051h
   353  0194  3451               	retlw	025h
   354  0195  3425               	retlw	053h
   355  0196  3453               	retlw	02Eh
   356  0197  342E               	retlw	056h
   357  0198  3456               	retlw	036h
   358  0199  3436               	retlw	057h
   359  019A  3457               	retlw	03Dh
   360  019B  343D               	retlw	05Ch
   361  019C  345C               	retlw	03Eh
   362  019D  343E               	retlw	05Eh
   363  019E  345E               	retlw	046h
   364  019F  3446               	retlw	05Fh
   365  01A0  345F               	retlw	045h
   366  01A1  3445               	retlw	060h
   367  01A2  3460               	retlw	04Eh
   368  01A3  344E               	retlw	061h
   369  01A4  3461               	retlw	055h
   370  01A5  3455               	retlw	062h
   371  01A6  3462               	retlw	05Dh
   372  01A7  345D               	retlw	063h
   373  01A8  3463               	retlw	04Ch
   374  01A9  344C               	retlw	067h
   375  01AA  3467               	retlw	052h
   376  01AB  3452               	retlw	068h
   377  01AC  3468               	retlw	041h
   378  01AD  3441               	retlw	06Ah
   379  01AE  346A               	retlw	049h
   380  01AF  3449               	retlw	06Dh
   381  01B0  346D               	retlw	04Ah
   382  01B1  344A               	retlw	06Eh
   383  01B2  346E               	global __end_of_replaceOnShiftKeyDown
   384                           __end_of_replaceOnShiftKeyDown:
   385  01B3                     	global	_replaceTwoBytesCodes
   386                           psect	strings
   387                           	file	"./ps2tozxtable.h"
   388                           	line	26
   389                           _replaceTwoBytesCodes:
   390  01B3                     	retlw	014h
   391  01B3  3414               	retlw	013h
   392  01B4  3413               	retlw	070h
   393  01B5  3470               	retlw	017h
   394  01B6  3417               	retlw	06Ch
   395  01B7  346C               	retlw	018h
   396  01B8  3418               	retlw	07Dh
   397  01B9  347D               	retlw	019h
   398  01BA  3419               	retlw	071h
   399  01BB  3471               	retlw	01Fh
   400  01BC  341F               	retlw	069h
   401  01BD  3469               	retlw	020h
   402  01BE  3420               	retlw	07Ah
   403  01BF  347A               	retlw	027h
   404  01C0  3427               	retlw	075h
   405  01C1  3475               	retlw	028h
   406  01C2  3428               	retlw	06Bh
   407  01C3  346B               	retlw	02Fh
   408  01C4  342F               	retlw	072h
   409  01C5  3472               	retlw	030h
   410  01C6  3430               	retlw	074h
   411  01C7  3474               	retlw	037h
   412  01C8  3437               	retlw	04Ah
   413  01C9  344A               	retlw	038h
   414  01CA  3438               	retlw	05Ah
   415  01CB  345A               	retlw	039h
   416  01CC  3439               	global __end_of_replaceTwoBytesCodes
   417                           __end_of_replaceTwoBytesCodes:
   418  01CD                     	global	_codeToMatrix
   419                           	global	_replaceOnShiftKeyDown
   420                           	global	_replaceTwoBytesCodes
   421                           	global	_replaced
   422                           	global	_ctrl
   423                           	global	_shift
   424                           	global	_i
   425                           	global	_ps2NeedEncode
   426                           	global	_ps2Up
   427                           	global	_ps2WaitCode
   428                           	global	_ps2DataCount
   429                           	global	_ps2Data
   430                           	global	_ps2BitsCount
   431                           	global	_ps2Bits
   432                           	global	_ps2DataState
   433                           	global	_PORTA
   434                           _PORTA	set	0x5
   435  0005                     	global	_PORTB
   436                           _PORTB	set	0x6
   437  0006                     	global	_PORTAbits
   438                           _PORTAbits	set	0x5
   439  0005                     	global	_TMR0
   440                           _TMR0	set	0x1
   441  0001                     	global	_RA1
   442                           _RA1	set	0x29
   443  0029                     	global	_RA2
   444                           _RA2	set	0x2A
   445  002A                     	global	_GIE
   446                           _GIE	set	0x5F
   447  005F                     	global	_T0IF
   448                           _T0IF	set	0x5A
   449  005A                     	global	_T0IE
   450                           _T0IE	set	0x5D
   451  005D                     	global	_TRISB
   452                           _TRISB	set	0x86
   453  0086                     	global	_PSA
   454                           _PSA	set	0x40B
   455  040B                     	global	_T0SE
   456                           _T0SE	set	0x40C
   457  040C                     	global	_T0CS
   458                           _T0CS	set	0x40D
   459  040D                     	global	_TRISA4
   460                           _TRISA4	set	0x42C
   461  042C                     	global	_TRISA3
   462                           _TRISA3	set	0x42B
   463  042B                     	global	_TRISA2
   464                           _TRISA2	set	0x42A
   465  042A                     	global	_TRISA1
   466                           _TRISA1	set	0x429
   467  0429                     	global	_TRISA0
   468                           _TRISA0	set	0x428
   469  0428                     ; #config settings
   470                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sgms."
   471                           	line	#
   472                           psect cinit,class=CODE,delta=2
   473                           global start_initialization
   474                           start_initialization:
   475  0010                     
   476                           global __initialization
   477                           __initialization:
   478  0010                     psect	bssBANK0,class=BANK0,space=1,noexec
   479                           global __pbssBANK0
   480                           __pbssBANK0:
   481  001D                     _mouseDelay:
   482  001D                            ds      2
   483  001D                     
   484                           _replaced:
   485  001F                            ds      1
   486  001F                     
   487                           _ctrl:
   488  0020                            ds      1
   489  0020                     
   490                           _shift:
   491  0021                            ds      1
   492  0021                     
   493                           _i:
   494  0022                            ds      1
   495  0022                     
   496                           _ps2NeedEncode:
   497  0023                            ds      1
   498  0023                     
   499                           _ps2Up:
   500  0024                            ds      1
   501  0024                     
   502                           _ps2WaitCode:
   503  0025                            ds      1
   504  0025                     
   505                           _ps2DataCount:
   506  0026                            ds      1
   507  0026                     
   508                           _ps2Data:
   509  0027                            ds      1
   510  0027                     
   511                           _ps2BitsCount:
   512  0028                            ds      1
   513  0028                     
   514                           _ps2Bits:
   515  0029                            ds      1
   516  0029                     
   517                           _ps2DataState:
   518  002A                            ds      1
   519  002A                     
   520                           psect	dataBANK0,class=BANK0,space=1,noexec
   521                           global __pdataBANK0
   522                           __pdataBANK0:
   523  002B                     	file	"main.c"
   524                           	line	41
   525                           _outPorts:
   526  002B                            ds      11
   527  002B                     
   528                           psect	dataBANK0
   529                           	file	"main.c"
   530                           	line	66
   531                           _mouseY:
   532  0036                            ds      1
   533  0036                     
   534                           psect	dataBANK0
   535                           	file	"main.c"
   536                           	line	65
   537                           _mouseX:
   538  0037                            ds      1
   539  0037                     
   540                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sgms."
   541                           	line	#
   542                           ; Initialize objects allocated to BANK0
   543                           	global __pidataBANK0
   544                           psect cinit,class=CODE,delta=2,merge=1
   545                           	fcall	__pidataBANK0+0		;fetch initializer
   546  0010  235B               	movwf	__pdataBANK0+0&07fh		
   547  0011  00AB               	fcall	__pidataBANK0+1		;fetch initializer
   548  0012  235C               	movwf	__pdataBANK0+1&07fh		
   549  0013  00AC               	fcall	__pidataBANK0+2		;fetch initializer
   550  0014  235D               	movwf	__pdataBANK0+2&07fh		
   551  0015  00AD               	fcall	__pidataBANK0+3		;fetch initializer
   552  0016  235E               	movwf	__pdataBANK0+3&07fh		
   553  0017  00AE               	fcall	__pidataBANK0+4		;fetch initializer
   554  0018  235F               	movwf	__pdataBANK0+4&07fh		
   555  0019  00AF               	fcall	__pidataBANK0+5		;fetch initializer
   556  001A  2360               	movwf	__pdataBANK0+5&07fh		
   557  001B  00B0               	fcall	__pidataBANK0+6		;fetch initializer
   558  001C  2361               	movwf	__pdataBANK0+6&07fh		
   559  001D  00B1               	fcall	__pidataBANK0+7		;fetch initializer
   560  001E  2362               	movwf	__pdataBANK0+7&07fh		
   561  001F  00B2               	fcall	__pidataBANK0+8		;fetch initializer
   562  0020  2363               	movwf	__pdataBANK0+8&07fh		
   563  0021  00B3               	fcall	__pidataBANK0+9		;fetch initializer
   564  0022  2364               	movwf	__pdataBANK0+9&07fh		
   565  0023  00B4               	fcall	__pidataBANK0+10		;fetch initializer
   566  0024  2365               	movwf	__pdataBANK0+10&07fh		
   567  0025  00B5               	fcall	__pidataBANK0+11		;fetch initializer
   568  0026  2366               	movwf	__pdataBANK0+11&07fh		
   569  0027  00B6               	fcall	__pidataBANK0+12		;fetch initializer
   570  0028  2367               	movwf	__pdataBANK0+12&07fh		
   571  0029  00B7               	line	#
   572                           psect clrtext,class=CODE,delta=2
   573                           global clear_ram0
   574                           ;	Called with FSR containing the base address, and
   575                           ;	W with the last address+1
   576                           clear_ram0:
   577  0368                     	clrwdt			;clear the watchdog before getting into this loop
   578  0368  0064               clrloop0:
   579  0369                     	clrf	indf		;clear RAM location pointed to by FSR
   580  0369  0180               	incf	fsr,f		;increment pointer
   581  036A  0A84               	xorwf	fsr,w		;XOR with final address
   582  036B  0604               	btfsc	status,2	;have we reached the end yet?
   583  036C  1903               	retlw	0		;all done for this memory range, return
   584  036D  3400               	xorwf	fsr,w		;XOR again to restore value
   585  036E  0604               	goto	clrloop0		;do the next byte
   586  036F  2B69               
   587                           ; Clear objects allocated to BANK0
   588                           psect cinit,class=CODE,delta=2,merge=1
   589                           	bcf	status, 7	;select IRP bank0
   590  002A  1383               	movlw	low(__pbssBANK0)
   591  002B  301D               	movwf	fsr
   592  002C  0084               	movlw	low((__pbssBANK0)+0Eh)
   593  002D  302B               	fcall	clear_ram0
   594  002E  2368               psect cinit,class=CODE,delta=2,merge=1
   595                           global end_of_initialization,__end_of__initialization
   596                           
   597                           ;End of C runtime variable initialization code
   598                           
   599                           end_of_initialization:
   600  002F                     __end_of__initialization:
   601  002F                     clrf status
   602  002F  0183               ljmp _main	;jump to C main() function
   603  0030  29CD               psect	cstackBANK0,class=BANK0,space=1,noexec
   604                           global __pcstackBANK0
   605                           __pcstackBANK0:
   606  000C                     ?_myIsr:	; 1 bytes @ 0x0
   607  000C                     ??_myIsr:	; 1 bytes @ 0x0
   608  000C                     ?_setPort:	; 1 bytes @ 0x0
   609  000C                     ?_resetPort:	; 1 bytes @ 0x0
   610  000C                     ?_keyDown:	; 1 bytes @ 0x0
   611  000C                     ?_keyUp:	; 1 bytes @ 0x0
   612  000C                     ?_myDelay:	; 1 bytes @ 0x0
   613  000C                     ?_sendDataToAltera:	; 1 bytes @ 0x0
   614  000C                     ?_main:	; 1 bytes @ 0x0
   615  000C                     	ds	6
   616  000C                     	global	_myIsr$84
   617                           _myIsr$84:	; 2 bytes @ 0x6
   618  0012                     	ds	2
   619  0012                     	global	myIsr@ii
   620                           myIsr@ii:	; 2 bytes @ 0x8
   621  0014                     	ds	2
   622  0014                     ??_setPort:	; 1 bytes @ 0xA
   623  0016                     ??_resetPort:	; 1 bytes @ 0xA
   624  0016                     ??_myDelay:	; 1 bytes @ 0xA
   625  0016                     	ds	1
   626  0016                     	global	myDelay@j
   627                           myDelay@j:	; 1 bytes @ 0xB
   628  0017                     	ds	1
   629  0017                     ??_sendDataToAltera:	; 1 bytes @ 0xC
   630  0018                     	ds	1
   631  0018                     	global	setPort@bit_id
   632                           setPort@bit_id:	; 1 bytes @ 0xD
   633  0019                     	global	resetPort@bit_id
   634                           resetPort@bit_id:	; 1 bytes @ 0xD
   635  0019                     	ds	1
   636  0019                     ??_keyDown:	; 1 bytes @ 0xE
   637  001A                     ??_keyUp:	; 1 bytes @ 0xE
   638  001A                     	ds	1
   639  001A                     	global	keyDown@key
   640                           keyDown@key:	; 1 bytes @ 0xF
   641  001B                     	global	keyUp@key
   642                           keyUp@key:	; 1 bytes @ 0xF
   643  001B                     	ds	1
   644  001B                     ??_main:	; 1 bytes @ 0x10
   645  001C                     	ds	1
   646  001C                     ;!
   647                           ;!Data Sizes:
   648                           ;!    Strings     0
   649                           ;!    Constant    190
   650                           ;!    Data        13
   651                           ;!    BSS         14
   652                           ;!    Persistent  0
   653                           ;!    Stack       0
   654                           ;!
   655                           ;!Auto Spaces:
   656                           ;!    Space          Size  Autos    Used
   657                           ;!    COMMON            0      0       0
   658                           ;!    BANK0            66     17      44
   659                           
   660                           ;!
   661                           ;!Pointer List with Targets:
   662                           ;!
   663                           ;!    None.
   664                           
   665                           
   666                           ;!
   667                           ;!Critical Paths under _main in COMMON
   668                           ;!
   669                           ;!    None.
   670                           ;!
   671                           ;!Critical Paths under _myIsr in COMMON
   672                           ;!
   673                           ;!    None.
   674                           ;!
   675                           ;!Critical Paths under _main in BANK0
   676                           ;!
   677                           ;!    _main->_keyDown
   678                           ;!    _main->_keyUp
   679                           ;!    _sendDataToAltera->_myDelay
   680                           ;!    _keyUp->_resetPort
   681                           ;!    _keyDown->_resetPort
   682                           ;!    _keyDown->_setPort
   683                           ;!
   684                           ;!Critical Paths under _myIsr in BANK0
   685                           ;!
   686                           ;!    None.
   687                           
   688 ;;
   689 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   690 ;;
   691                           
   692                           ;!
   693                           ;!Call Graph Tables:
   694                           ;!
   695                           ;! ---------------------------------------------------------------------------------
   696                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   697                           ;! ---------------------------------------------------------------------------------
   698                           ;! (0) _main                                                 1     1      0     266
   699                           ;!                                             16 BANK0      1     1      0
   700                           ;!                            _keyDown
   701                           ;!                              _keyUp
   702                           ;!                   _sendDataToAltera
   703                           ;! ---------------------------------------------------------------------------------
   704                           ;! (1) _sendDataToAltera                                     1     1      0      46
   705                           ;!                                             12 BANK0      1     1      0
   706                           ;!                            _myDelay
   707                           ;! ---------------------------------------------------------------------------------
   708                           ;! (2) _myDelay                                              2     2      0      46
   709                           ;!                                             10 BANK0      2     2      0
   710                           ;! ---------------------------------------------------------------------------------
   711                           ;! (1) _keyUp                                                2     2      0      88
   712                           ;!                                             14 BANK0      2     2      0
   713                           ;!                          _resetPort
   714                           ;! ---------------------------------------------------------------------------------
   715                           ;! (1) _keyDown                                              2     2      0     132
   716                           ;!                                             14 BANK0      2     2      0
   717                           ;!                          _resetPort
   718                           ;!                            _setPort
   719                           ;! ---------------------------------------------------------------------------------
   720                           ;! (2) _setPort                                              4     4      0      44
   721                           ;!                                             10 BANK0      4     4      0
   722                           ;! ---------------------------------------------------------------------------------
   723                           ;! (2) _resetPort                                            4     4      0      44
   724                           ;!                                             10 BANK0      4     4      0
   725                           ;! ---------------------------------------------------------------------------------
   726                           ;! Estimated maximum stack depth 2
   727                           ;! ---------------------------------------------------------------------------------
   728                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   729                           ;! ---------------------------------------------------------------------------------
   730                           ;! (4) _myIsr                                               10    10      0     114
   731                           ;!                                              0 BANK0     10    10      0
   732                           ;! ---------------------------------------------------------------------------------
   733                           ;! Estimated maximum stack depth 4
   734                           ;! ---------------------------------------------------------------------------------
   735                           ;!
   736                           ;! Call Graph Graphs:
   737                           ;!
   738                           ;! _main (ROOT)
   739                           ;!   _keyDown
   740                           ;!     _resetPort
   741                           ;!     _setPort
   742                           ;!   _keyUp
   743                           ;!     _resetPort
   744                           ;!   _sendDataToAltera
   745                           ;!     _myDelay
   746                           ;!
   747                           ;! _myIsr (ROOT)
   748                           ;!
   749                           
   750                           ;! Address spaces:
   751                           
   752                           ;!Name               Size   Autos  Total    Cost      Usage
   753                           ;!SFR1                 0      0       0       2        0.0%
   754                           ;!BITSFR1              0      0       0       2        0.0%
   755                           ;!BANK0               42     11      2C       3       66.7%
   756                           ;!BITBANK0            42      0       0       5        0.0%
   757                           ;!SFR0                 0      0       0       1        0.0%
   758                           ;!BITSFR0              0      0       0       1        0.0%
   759                           ;!COMMON               0      0       0       1        0.0%
   760                           ;!BITCOMMON            0      0       0       0        0.0%
   761                           ;!CODE                 0      0       0       0        0.0%
   762                           ;!DATA                 0      0      2C       6        0.0%
   763                           ;!ABS                  0      0      2C       4        0.0%
   764                           ;!NULL                 0      0       0       0        0.0%
   765                           ;!STACK                0      0       0       2        0.0%
   766                           ;!EEDATA              40      0       0       0        0.0%
   767                           
   768                           	global	_main
   769                           
   770 ;; *************** function _main *****************
   771 ;; Defined at:
   772 ;;		line 244 in file "main.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : B00/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMMON   BANK0
   786 ;;      Params:         0       0
   787 ;;      Locals:         0       0
   788 ;;      Temps:          0       1
   789 ;;      Totals:         0       1
   790 ;;Total ram usage:        1 bytes
   791 ;; Hardware stack levels required when called:    4
   792 ;; This function calls:
   793 ;;		_keyDown
   794 ;;		_keyUp
   795 ;;		_sendDataToAltera
   796 ;; This function is called by:
   797 ;;		Startup code after reset
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   801                           	file	"main.c"
   802                           	line	244
   803                           global __pmaintext
   804                           __pmaintext:	;psect for function _main
   805  01CD                     psect	maintext
   806                           	file	"main.c"
   807                           	line	244
   808                           	global	__size_of_main
   809                           	__size_of_main	equ	__end_of_main-_main
   810  00AC                     	
   811                           _main:	
   812  01CD                     ;incstack = 0
   813                           	opt	stack 4
   814                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   815                           	line	246
   816                           	
   817                           l1137:	
   818  01CD                     ;main.c: 246:     TRISA0 = 1;
   819                           	bsf	status, 5	;RP0=1, select bank1
   820  01CD  1683               	bsf	(1064/8)^080h,(1064)&7	;volatile
   821  01CE  1405               	line	247
   822                           ;main.c: 247:     TRISA1 = 0;
   823                           	bcf	(1065/8)^080h,(1065)&7	;volatile
   824  01CF  1085               	line	248
   825                           ;main.c: 248:     TRISA2 = 0;
   826                           	bcf	(1066/8)^080h,(1066)&7	;volatile
   827  01D0  1105               	line	249
   828                           ;main.c: 249:     TRISA3 = 1;
   829                           	bsf	(1067/8)^080h,(1067)&7	;volatile
   830  01D1  1585               	line	250
   831                           ;main.c: 250:     TRISA4 = 1;
   832                           	bsf	(1068/8)^080h,(1068)&7	;volatile
   833  01D2  1605               	line	252
   834                           	
   835                           l1139:	
   836  01D3                     ;main.c: 252:     PORTA = 0b00000000;
   837                           	bcf	status, 5	;RP0=0, select bank0
   838  01D3  1283               	clrf	(5)	;volatile
   839  01D4  0185               	line	254
   840                           ;main.c: 254:     TRISB = 0b00000000;
   841                           	bsf	status, 5	;RP0=1, select bank1
   842  01D5  1683               	clrf	(134)^080h	;volatile
   843  01D6  0186               	line	255
   844                           ;main.c: 255:     PORTB = 0b00000000;
   845                           	bcf	status, 5	;RP0=0, select bank0
   846  01D7  1283               	clrf	(6)	;volatile
   847  01D8  0186               	line	275
   848                           	
   849                           l1141:	
   850  01D9                     ;main.c: 275:     T0CS = 1;
   851                           	bsf	status, 5	;RP0=1, select bank1
   852  01D9  1683               	bsf	(1037/8)^080h,(1037)&7	;volatile
   853  01DA  1681               	line	276
   854                           	
   855                           l1143:	
   856  01DB                     ;main.c: 276:     T0SE = 1;
   857                           	bsf	(1036/8)^080h,(1036)&7	;volatile
   858  01DB  1601               	line	277
   859                           	
   860                           l1145:	
   861  01DC                     ;main.c: 277:     GIE = 1;
   862                           	bsf	(95/8),(95)&7	;volatile
   863  01DC  178B               	line	278
   864                           	
   865                           l1147:	
   866  01DD                     ;main.c: 278:     T0IE = 1;
   867                           	bsf	(93/8),(93)&7	;volatile
   868  01DD  168B               	line	279
   869                           	
   870                           l1149:	
   871  01DE                     ;main.c: 279:     PSA = 1;
   872                           	bsf	(1035/8)^080h,(1035)&7	;volatile
   873  01DE  1581               	line	280
   874                           	
   875                           l1151:	
   876  01DF                     ;main.c: 280:     T0IF = 0;
   877                           	bcf	(90/8),(90)&7	;volatile
   878  01DF  110B               	line	281
   879                           	
   880                           l1153:	
   881  01E0                     ;main.c: 281:     TMR0 = 255;
   882                           	movlw	low(0FFh)
   883  01E0  30FF               	bcf	status, 5	;RP0=0, select bank0
   884  01E1  1283               	movwf	(1)	;volatile
   885  01E2  0081               	line	283
   886                           	
   887                           l1155:	
   888  01E3                     ;main.c: 283:     ps2Data = 0;
   889                           	clrf	(_ps2Data)
   890  01E3  01A7               	line	284
   891                           	
   892                           l1157:	
   893  01E4                     ;main.c: 284:     ps2DataCount = 0;
   894                           	clrf	(_ps2DataCount)
   895  01E4  01A6               	line	285
   896                           	
   897                           l1159:	
   898  01E5                     ;main.c: 285:     ps2WaitCode = 0;
   899                           	clrf	(_ps2WaitCode)
   900  01E5  01A5               	line	286
   901                           	
   902                           l1161:	
   903  01E6                     ;main.c: 286:     ps2Up = 0;
   904                           	clrf	(_ps2Up)
   905  01E6  01A4               	line	287
   906                           	
   907                           l1163:	
   908  01E7                     ;main.c: 287:     ps2NeedEncode = 0;
   909                           	clrf	(_ps2NeedEncode)
   910  01E7  01A3               	line	288
   911                           	
   912                           l1165:	
   913  01E8                     ;main.c: 288:     ps2DataState = 0;
   914                           	clrf	(_ps2DataState)
   915  01E8  01AA               	goto	l1167
   916  01E9  29EA               	line	290
   917                           ;main.c: 290:     while(1)
   918                           	
   919                           l144:	
   920  01EA                     	line	292
   921                           	
   922                           l1167:	
   923  01EA                     ;main.c: 291:     {;main.c: 292:         if ( ps2DataState == 2 ) {
   924                           		movlw	2
   925  01EA  3002               	bcf	status, 5	;RP0=0, select bank0
   926  01EB  1283               	xorwf	((_ps2DataState)),w
   927  01EC  062A               	btfss	status,2
   928  01ED  1D03               	goto	u861
   929  01EE  29F0               	goto	u860
   930  01EF  29F1               u861:
   931  01F0                     	goto	l145
   932  01F0  2A75               u860:
   933  01F1                     	line	294
   934                           	
   935                           l1169:	
   936  01F1                     ;main.c: 294:             replaced = 0;
   937                           	clrf	(_replaced)
   938  01F1  019F               	line	295
   939                           	
   940                           l1171:	
   941  01F2                     ;main.c: 295:             if ( shift && !ctrl ) {
   942                           	movf	((_shift)),w
   943  01F2  0821               	btfsc	status,2
   944  01F3  1903               	goto	u871
   945  01F4  29F6               	goto	u870
   946  01F5  29F7               u871:
   947  01F6                     	goto	l1191
   948  01F6  2A25               u870:
   949  01F7                     	
   950                           l1173:	
   951  01F7                     	movf	((_ctrl)),w
   952  01F7  0820               	btfss	status,2
   953  01F8  1D03               	goto	u881
   954  01F9  29FB               	goto	u880
   955  01FA  29FC               u881:
   956  01FB                     	goto	l1191
   957  01FB  2A25               u880:
   958  01FC                     	line	297
   959                           	
   960                           l1175:	
   961  01FC                     ;main.c: 297:                 for(i = 0; i < 35 ;i+=2) {
   962                           	clrf	(_i)
   963  01FC  01A2               	
   964                           l1177:	
   965  01FD                     	movlw	low(023h)
   966  01FD  3023               	subwf	(_i),w
   967  01FE  0222               	skipc
   968  01FF  1C03               	goto	u891
   969  0200  2A02               	goto	u890
   970  0201  2A03               u891:
   971  0202                     	goto	l1181
   972  0202  2A05               u890:
   973  0203                     	goto	l1191
   974  0203  2A25               	
   975                           l1179:	
   976  0204                     	goto	l1191
   977  0204  2A25               	
   978                           l147:	
   979  0205                     	line	298
   980                           	
   981                           l1181:	
   982  0205                     ;main.c: 298:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   983                           	movf	(_i),w
   984  0205  0822               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
   985  0206  3E81               	movwf	fsr0
   986  0207  0084               	fcall	stringdir
   987  0208  2109               	xorwf	(_ps2Data),w
   988  0209  0627               	skipz
   989  020A  1D03               	goto	u901
   990  020B  2A0D               	goto	u900
   991  020C  2A0E               u901:
   992  020D                     	goto	l1187
   993  020D  2A19               u900:
   994  020E                     	line	299
   995                           	
   996                           l1183:	
   997  020E                     ;main.c: 299:                         replaced = 1;
   998                           	clrf	(_replaced)
   999  020E  019F               	incf	(_replaced),f
  1000  020F  0A9F               	line	300
  1001                           	
  1002                           l1185:	
  1003  0210                     ;main.c: 300:                         ps2Data = replaceOnShiftKeyDown[i+1];
  1004                           	movf	(_i),w
  1005  0210  0822               	addlw	01h
  1006  0211  3E01               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
  1007  0212  3E81               	movwf	fsr0
  1008  0213  0084               	fcall	stringdir
  1009  0214  2109               	movwf	(??_main+0)+0
  1010  0215  009C               	movf	(??_main+0)+0,w
  1011  0216  081C               	movwf	(_ps2Data)
  1012  0217  00A7               	line	301
  1013                           ;main.c: 301:                         break;
  1014                           	goto	l1191
  1015  0218  2A25               	line	302
  1016                           ;main.c: 302:                     }
  1017                           	
  1018                           l149:	
  1019  0219                     	line	303
  1020                           	
  1021                           l1187:	
  1022  0219                     ;main.c: 303:                 }
  1023                           	movlw	low(02h)
  1024  0219  3002               	movwf	(??_main+0)+0
  1025  021A  009C               	movf	(??_main+0)+0,w
  1026  021B  081C               	addwf	(_i),f
  1027  021C  07A2               	
  1028                           l1189:	
  1029  021D                     	movlw	low(023h)
  1030  021D  3023               	subwf	(_i),w
  1031  021E  0222               	skipc
  1032  021F  1C03               	goto	u911
  1033  0220  2A22               	goto	u910
  1034  0221  2A23               u911:
  1035  0222                     	goto	l1181
  1036  0222  2A05               u910:
  1037  0223                     	goto	l1191
  1038  0223  2A25               	
  1039                           l148:	
  1040  0224                     	goto	l1191
  1041  0224  2A25               	line	304
  1042                           ;main.c: 304:             }
  1043                           	
  1044                           l146:	
  1045  0225                     	line	306
  1046                           	
  1047                           l1191:	
  1048  0225                     ;main.c: 306:             if ( ps2Up == 0) {
  1049                           	movf	((_ps2Up)),w
  1050  0225  0824               	btfss	status,2
  1051  0226  1D03               	goto	u921
  1052  0227  2A29               	goto	u920
  1053  0228  2A2A               u921:
  1054  0229                     	goto	l1203
  1055  0229  2A4C               u920:
  1056  022A                     	line	307
  1057                           	
  1058                           l1193:	
  1059  022A                     ;main.c: 307:                 keyDown(ps2Data);
  1060                           	movf	(_ps2Data),w
  1061  022A  0827               	fcall	_keyDown
  1062  022B  2279               	line	308
  1063                           	
  1064                           l1195:	
  1065  022C                     ;main.c: 308:                 if ( ps2Data == 18 || ps2Data == 89) shift = 1;
  1066                           		movlw	18
  1067  022C  3012               	bcf	status, 5	;RP0=0, select bank0
  1068  022D  1283               	xorwf	((_ps2Data)),w
  1069  022E  0627               	btfsc	status,2
  1070  022F  1903               	goto	u931
  1071  0230  2A32               	goto	u930
  1072  0231  2A33               u931:
  1073  0232                     	goto	l153
  1074  0232  2A39               u930:
  1075  0233                     	
  1076                           l1197:	
  1077  0233                     		movlw	89
  1078  0233  3059               	xorwf	((_ps2Data)),w
  1079  0234  0627               	btfss	status,2
  1080  0235  1D03               	goto	u941
  1081  0236  2A38               	goto	u940
  1082  0237  2A39               u941:
  1083  0238                     	goto	l1199
  1084  0238  2A3C               u940:
  1085  0239                     	
  1086                           l153:	
  1087  0239                     	clrf	(_shift)
  1088  0239  01A1               	incf	(_shift),f
  1089  023A  0AA1               	goto	l1199
  1090  023B  2A3C               	
  1091                           l151:	
  1092  023C                     	line	309
  1093                           	
  1094                           l1199:	
  1095  023C                     ;main.c: 309:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 1;
  1096                           		movlw	20
  1097  023C  3014               	xorwf	((_ps2Data)),w
  1098  023D  0627               	btfsc	status,2
  1099  023E  1903               	goto	u951
  1100  023F  2A41               	goto	u950
  1101  0240  2A42               u951:
  1102  0241                     	goto	l156
  1103  0241  2A48               u950:
  1104  0242                     	
  1105                           l1201:	
  1106  0242                     		movlw	19
  1107  0242  3013               	xorwf	((_ps2Data)),w
  1108  0243  0627               	btfss	status,2
  1109  0244  1D03               	goto	u961
  1110  0245  2A47               	goto	u960
  1111  0246  2A48               u961:
  1112  0247                     	goto	l1217
  1113  0247  2A6D               u960:
  1114  0248                     	
  1115                           l156:	
  1116  0248                     	clrf	(_ctrl)
  1117  0248  01A0               	incf	(_ctrl),f
  1118  0249  0AA0               	goto	l1217
  1119  024A  2A6D               	
  1120                           l154:	
  1121  024B                     	line	311
  1122                           ;main.c: 311:             } else {
  1123                           	goto	l1217
  1124  024B  2A6D               	
  1125                           l150:	
  1126  024C                     	line	312
  1127                           	
  1128                           l1203:	
  1129  024C                     ;main.c: 312:                 if ( ps2Data == 18 || ps2Data == 89) shift = 0;
  1130                           		movlw	18
  1131  024C  3012               	xorwf	((_ps2Data)),w
  1132  024D  0627               	btfsc	status,2
  1133  024E  1903               	goto	u971
  1134  024F  2A51               	goto	u970
  1135  0250  2A52               u971:
  1136  0251                     	goto	l1207
  1137  0251  2A59               u970:
  1138  0252                     	
  1139                           l1205:	
  1140  0252                     		movlw	89
  1141  0252  3059               	xorwf	((_ps2Data)),w
  1142  0253  0627               	btfss	status,2
  1143  0254  1D03               	goto	u981
  1144  0255  2A57               	goto	u980
  1145  0256  2A58               u981:
  1146  0257                     	goto	l1209
  1147  0257  2A5B               u980:
  1148  0258                     	goto	l1207
  1149  0258  2A59               	
  1150                           l160:	
  1151  0259                     	
  1152                           l1207:	
  1153  0259                     	clrf	(_shift)
  1154  0259  01A1               	goto	l1209
  1155  025A  2A5B               	
  1156                           l158:	
  1157  025B                     	line	313
  1158                           	
  1159                           l1209:	
  1160  025B                     ;main.c: 313:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 0;
  1161                           		movlw	20
  1162  025B  3014               	xorwf	((_ps2Data)),w
  1163  025C  0627               	btfsc	status,2
  1164  025D  1903               	goto	u991
  1165  025E  2A60               	goto	u990
  1166  025F  2A61               u991:
  1167  0260                     	goto	l1213
  1168  0260  2A68               u990:
  1169  0261                     	
  1170                           l1211:	
  1171  0261                     		movlw	19
  1172  0261  3013               	xorwf	((_ps2Data)),w
  1173  0262  0627               	btfss	status,2
  1174  0263  1D03               	goto	u1001
  1175  0264  2A66               	goto	u1000
  1176  0265  2A67               u1001:
  1177  0266                     	goto	l1215
  1178  0266  2A6A               u1000:
  1179  0267                     	goto	l1213
  1180  0267  2A68               	
  1181                           l163:	
  1182  0268                     	
  1183                           l1213:	
  1184  0268                     	clrf	(_ctrl)
  1185  0268  01A0               	goto	l1215
  1186  0269  2A6A               	
  1187                           l161:	
  1188  026A                     	line	314
  1189                           	
  1190                           l1215:	
  1191  026A                     ;main.c: 314:                 keyUp(ps2Data);
  1192                           	movf	(_ps2Data),w
  1193  026A  0827               	fcall	_keyUp
  1194  026B  232D               	goto	l1217
  1195  026C  2A6D               	line	315
  1196                           ;main.c: 315:             }
  1197                           	
  1198                           l157:	
  1199  026D                     	line	318
  1200                           	
  1201                           l1217:	
  1202  026D                     ;main.c: 318:             ps2Data = 0;
  1203                           	bcf	status, 5	;RP0=0, select bank0
  1204  026D  1283               	clrf	(_ps2Data)
  1205  026E  01A7               	line	319
  1206                           	
  1207                           l1219:	
  1208  026F                     ;main.c: 319:             ps2DataCount = 0;
  1209                           	clrf	(_ps2DataCount)
  1210  026F  01A6               	line	320
  1211                           	
  1212                           l1221:	
  1213  0270                     ;main.c: 320:             ps2WaitCode = 0;
  1214                           	clrf	(_ps2WaitCode)
  1215  0270  01A5               	line	321
  1216                           	
  1217                           l1223:	
  1218  0271                     ;main.c: 321:             ps2Up = 0;
  1219                           	clrf	(_ps2Up)
  1220  0271  01A4               	line	322
  1221                           	
  1222                           l1225:	
  1223  0272                     ;main.c: 322:             ps2NeedEncode = 0;
  1224                           	clrf	(_ps2NeedEncode)
  1225  0272  01A3               	line	323
  1226                           	
  1227                           l1227:	
  1228  0273                     ;main.c: 323:             ps2DataState = 0;
  1229                           	clrf	(_ps2DataState)
  1230  0273  01AA               	line	326
  1231                           	
  1232                           l1229:	
  1233  0274                     ;main.c: 326:             sendDataToAltera();
  1234                           	fcall	_sendDataToAltera
  1235  0274  22BA               	line	327
  1236                           ;main.c: 327:         }
  1237                           	
  1238                           l145:	
  1239  0275                     	line	350
  1240                           # 350 "main.c"
  1241                           clrwdt ;# 
  1242  0275  0064               psect	maintext
  1243                           	goto	l1167
  1244  0276  29EA               	line	351
  1245                           ;main.c: 351:     }
  1246                           	
  1247                           l164:	
  1248  0277                     	goto	l1167
  1249  0277  29EA               	
  1250                           l165:	
  1251  0278                     	line	353
  1252                           	
  1253                           l166:	
  1254  0278                     	global	start
  1255                           	ljmp	start
  1256  0278  280F               	opt stack 0
  1257                           GLOBAL	__end_of_main
  1258                           	__end_of_main:
  1259  0279                     	signat	_main,89
  1260                           	global	_sendDataToAltera
  1261                           
  1262 ;; *************** function _sendDataToAltera *****************
  1263 ;; Defined at:
  1264 ;;		line 183 in file "main.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;		None
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;		None
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      void 
  1271 ;; Registers used:
  1272 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMMON   BANK0
  1278 ;;      Params:         0       0
  1279 ;;      Locals:         0       0
  1280 ;;      Temps:          0       1
  1281 ;;      Totals:         0       1
  1282 ;;Total ram usage:        1 bytes
  1283 ;; Hardware stack levels used:    1
  1284 ;; Hardware stack levels required when called:    3
  1285 ;; This function calls:
  1286 ;;		_myDelay
  1287 ;; This function is called by:
  1288 ;;		_main
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
  1292                           	line	183
  1293                           global __ptext1
  1294                           __ptext1:	;psect for function _sendDataToAltera
  1295  02BA                     psect	text1
  1296                           	file	"main.c"
  1297                           	line	183
  1298                           	global	__size_of_sendDataToAltera
  1299                           	__size_of_sendDataToAltera	equ	__end_of_sendDataToAltera-_sendDataToAltera
  1300  0034                     	
  1301                           _sendDataToAltera:	
  1302  02BA                     ;incstack = 0
  1303                           	opt	stack 4
  1304                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1305                           	line	185
  1306                           	
  1307                           l1033:	
  1308  02BA                     ;main.c: 185:     RA2 = 1;
  1309                           	bcf	status, 5	;RP0=0, select bank0
  1310  02BA  1283               	bsf	(42/8),(42)&7	;volatile
  1311  02BB  1505               	line	186
  1312                           ;main.c: 186:     RA1 = 1;
  1313                           	bsf	(41/8),(41)&7	;volatile
  1314  02BC  1485               	line	187
  1315                           	
  1316                           l1035:	
  1317  02BD                     ;main.c: 187:     myDelay();
  1318                           	fcall	_myDelay
  1319  02BD  2347               	line	188
  1320                           	
  1321                           l1037:	
  1322  02BE                     ;main.c: 188:     RA2 = 0;
  1323                           	bcf	status, 5	;RP0=0, select bank0
  1324  02BE  1283               	bcf	(42/8),(42)&7	;volatile
  1325  02BF  1105               	line	189
  1326                           ;main.c: 189:     myDelay();
  1327                           	fcall	_myDelay
  1328  02C0  2347               	line	190
  1329                           	
  1330                           l1039:	
  1331  02C1                     ;main.c: 190:     RA2 = 1;
  1332                           	bcf	status, 5	;RP0=0, select bank0
  1333  02C1  1283               	bsf	(42/8),(42)&7	;volatile
  1334  02C2  1505               	line	191
  1335                           ;main.c: 191:     myDelay();
  1336                           	fcall	_myDelay
  1337  02C3  2347               	line	192
  1338                           	
  1339                           l1041:	
  1340  02C4                     ;main.c: 192:     RA1 = 0;
  1341                           	bcf	status, 5	;RP0=0, select bank0
  1342  02C4  1283               	bcf	(41/8),(41)&7	;volatile
  1343  02C5  1085               	line	193
  1344                           ;main.c: 193:     myDelay();
  1345                           	fcall	_myDelay
  1346  02C6  2347               	line	194
  1347                           	
  1348                           l1043:	
  1349  02C7                     ;main.c: 194:     for(i=0;i<8;i++) {
  1350                           	bcf	status, 5	;RP0=0, select bank0
  1351  02C7  1283               	clrf	(_i)
  1352  02C8  01A2               	
  1353                           l1045:	
  1354  02C9                     	movlw	low(08h)
  1355  02C9  3008               	subwf	(_i),w
  1356  02CA  0222               	skipc
  1357  02CB  1C03               	goto	u661
  1358  02CC  2ACE               	goto	u660
  1359  02CD  2ACF               u661:
  1360  02CE                     	goto	l1049
  1361  02CE  2AD1               u660:
  1362  02CF                     	goto	l138
  1363  02CF  2AEB               	
  1364                           l1047:	
  1365  02D0                     	goto	l138
  1366  02D0  2AEB               	
  1367                           l137:	
  1368  02D1                     	line	195
  1369                           	
  1370                           l1049:	
  1371  02D1                     ;main.c: 195:         myDelay();
  1372                           	fcall	_myDelay
  1373  02D1  2347               	line	196
  1374                           	
  1375                           l1051:	
  1376  02D2                     ;main.c: 196:         RA2 = 1;
  1377                           	bcf	status, 5	;RP0=0, select bank0
  1378  02D2  1283               	bsf	(42/8),(42)&7	;volatile
  1379  02D3  1505               	line	197
  1380                           ;main.c: 197:         myDelay();
  1381                           	fcall	_myDelay
  1382  02D4  2347               	line	198
  1383                           	
  1384                           l1053:	
  1385  02D5                     ;main.c: 198:         PORTB = outPorts[i];
  1386                           	bcf	status, 5	;RP0=0, select bank0
  1387  02D5  1283               	movf	(_i),w
  1388  02D6  0822               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1389  02D7  3E2B               	movwf	fsr0
  1390  02D8  0084               	bcf	status, 7	;select IRP bank0
  1391  02D9  1383               	movf	indf,w
  1392  02DA  0800               	movwf	(6)	;volatile
  1393  02DB  0086               	line	199
  1394                           	
  1395                           l1055:	
  1396  02DC                     ;main.c: 199:         myDelay();
  1397                           	fcall	_myDelay
  1398  02DC  2347               	line	200
  1399                           	
  1400                           l1057:	
  1401  02DD                     ;main.c: 200:         RA2 = 0;
  1402                           	bcf	status, 5	;RP0=0, select bank0
  1403  02DD  1283               	bcf	(42/8),(42)&7	;volatile
  1404  02DE  1105               	line	201
  1405                           	
  1406                           l1059:	
  1407  02DF                     ;main.c: 201:         myDelay();
  1408                           	fcall	_myDelay
  1409  02DF  2347               	line	202
  1410                           	
  1411                           l1061:	
  1412  02E0                     ;main.c: 202:     }
  1413                           	movlw	low(01h)
  1414  02E0  3001               	bcf	status, 5	;RP0=0, select bank0
  1415  02E1  1283               	movwf	(??_sendDataToAltera+0)+0
  1416  02E2  0098               	movf	(??_sendDataToAltera+0)+0,w
  1417  02E3  0818               	addwf	(_i),f
  1418  02E4  07A2               	
  1419                           l1063:	
  1420  02E5                     	movlw	low(08h)
  1421  02E5  3008               	subwf	(_i),w
  1422  02E6  0222               	skipc
  1423  02E7  1C03               	goto	u671
  1424  02E8  2AEA               	goto	u670
  1425  02E9  2AEB               u671:
  1426  02EA                     	goto	l1049
  1427  02EA  2AD1               u670:
  1428  02EB                     	
  1429                           l138:	
  1430  02EB                     	line	203
  1431                           ;main.c: 203:     RA2 = 1;
  1432                           	bsf	(42/8),(42)&7	;volatile
  1433  02EB  1505               	line	204
  1434                           	
  1435                           l1065:	
  1436  02EC                     ;main.c: 204:     PORTB = 0;
  1437                           	clrf	(6)	;volatile
  1438  02EC  0186               	line	205
  1439                           	
  1440                           l139:	
  1441  02ED                     	return
  1442  02ED  0008               	opt stack 0
  1443                           GLOBAL	__end_of_sendDataToAltera
  1444                           	__end_of_sendDataToAltera:
  1445  02EE                     	signat	_sendDataToAltera,89
  1446                           	global	_myDelay
  1447                           
  1448 ;; *************** function _myDelay *****************
  1449 ;; Defined at:
  1450 ;;		line 175 in file "main.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;		None
  1453 ;; Auto vars:     Size  Location     Type
  1454 ;;  j               1   11[BANK0 ] unsigned char 
  1455 ;; Return value:  Size  Location     Type
  1456 ;;                  1    wreg      void 
  1457 ;; Registers used:
  1458 ;;		wreg, status,2, status,0
  1459 ;; Tracked objects:
  1460 ;;		On entry : 0/0
  1461 ;;		On exit  : 0/0
  1462 ;;		Unchanged: 0/0
  1463 ;; Data sizes:     COMMON   BANK0
  1464 ;;      Params:         0       0
  1465 ;;      Locals:         0       1
  1466 ;;      Temps:          0       1
  1467 ;;      Totals:         0       2
  1468 ;;Total ram usage:        2 bytes
  1469 ;; Hardware stack levels used:    1
  1470 ;; Hardware stack levels required when called:    2
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		_sendDataToAltera
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
  1478                           	line	175
  1479                           global __ptext2
  1480                           __ptext2:	;psect for function _myDelay
  1481  0347                     psect	text2
  1482                           	file	"main.c"
  1483                           	line	175
  1484                           	global	__size_of_myDelay
  1485                           	__size_of_myDelay	equ	__end_of_myDelay-_myDelay
  1486  0014                     	
  1487                           _myDelay:	
  1488  0347                     ;incstack = 0
  1489                           	opt	stack 4
  1490                           ; Regs used in _myDelay: [wreg+status,2+status,0]
  1491                           	line	177
  1492                           	
  1493                           l989:	
  1494  0347                     ;main.c: 177:     for(uint8_t j = 0; j < 1; j++) { };
  1495                           	bcf	status, 5	;RP0=0, select bank0
  1496  0347  1283               	clrf	(myDelay@j)
  1497  0348  0197               	
  1498                           l991:	
  1499  0349                     	movf	((myDelay@j)),w
  1500  0349  0817               	btfsc	status,2
  1501  034A  1903               	goto	u551
  1502  034B  2B4D               	goto	u550
  1503  034C  2B4E               u551:
  1504  034D                     	goto	l995
  1505  034D  2B50               u550:
  1506  034E                     	goto	l134
  1507  034E  2B5A               	
  1508                           l993:	
  1509  034F                     	goto	l134
  1510  034F  2B5A               	
  1511                           l132:	
  1512  0350                     	
  1513                           l995:	
  1514  0350                     	movlw	low(01h)
  1515  0350  3001               	movwf	(??_myDelay+0)+0
  1516  0351  0096               	movf	(??_myDelay+0)+0,w
  1517  0352  0816               	addwf	(myDelay@j),f
  1518  0353  0797               	movf	((myDelay@j)),w
  1519  0354  0817               	btfsc	status,2
  1520  0355  1903               	goto	u561
  1521  0356  2B58               	goto	u560
  1522  0357  2B59               u561:
  1523  0358                     	goto	l995
  1524  0358  2B50               u560:
  1525  0359                     	goto	l134
  1526  0359  2B5A               	
  1527                           l133:	
  1528  035A                     	line	178
  1529                           	
  1530                           l134:	
  1531  035A                     	return
  1532  035A  0008               	opt stack 0
  1533                           GLOBAL	__end_of_myDelay
  1534                           	__end_of_myDelay:
  1535  035B                     	signat	_myDelay,89
  1536                           	global	_keyUp
  1537                           
  1538 ;; *************** function _keyUp *****************
  1539 ;; Defined at:
  1540 ;;		line 168 in file "main.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;  key             1    wreg     unsigned char 
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;  key             1   15[BANK0 ] unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMMON   BANK0
  1554 ;;      Params:         0       0
  1555 ;;      Locals:         0       1
  1556 ;;      Temps:          0       1
  1557 ;;      Totals:         0       2
  1558 ;;Total ram usage:        2 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    3
  1561 ;; This function calls:
  1562 ;;		_resetPort
  1563 ;; This function is called by:
  1564 ;;		_main
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
  1568                           	line	168
  1569                           global __ptext3
  1570                           __ptext3:	;psect for function _keyUp
  1571  032D                     psect	text3
  1572                           	file	"main.c"
  1573                           	line	168
  1574                           	global	__size_of_keyUp
  1575                           	__size_of_keyUp	equ	__end_of_keyUp-_keyUp
  1576  001A                     	
  1577                           _keyUp:	
  1578  032D                     ;incstack = 0
  1579                           	opt	stack 4
  1580                           ; Regs used in _keyUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1581                           ;keyUp@key stored from wreg
  1582                           	bcf	status, 5	;RP0=0, select bank0
  1583  032D  1283               	movwf	(keyUp@key)
  1584  032E  009B               	line	170
  1585                           	
  1586                           l1023:	
  1587  032F                     ;main.c: 168: void keyUp(uint8_t key);main.c: 169: {;main.c: 170:     if ( key >= 128 ) 
                                 return;
  1588                           	movlw	low(080h)
  1589  032F  3080               	subwf	(keyUp@key),w
  1590  0330  021B               	skipc
  1591  0331  1C03               	goto	u641
  1592  0332  2B34               	goto	u640
  1593  0333  2B35               u641:
  1594  0334                     	goto	l1027
  1595  0334  2B37               u640:
  1596  0335                     	goto	l128
  1597  0335  2B46               	
  1598                           l1025:	
  1599  0336                     	goto	l128
  1600  0336  2B46               	
  1601                           l127:	
  1602  0337                     	line	171
  1603                           	
  1604                           l1027:	
  1605  0337                     ;main.c: 171:     i = codeToMatrix[key];
  1606                           	movf	(keyUp@key),w
  1607  0337  081B               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1608  0338  3E01               	movwf	fsr0
  1609  0339  0084               	fcall	stringdir
  1610  033A  2109               	movwf	(??_keyUp+0)+0
  1611  033B  009A               	movf	(??_keyUp+0)+0,w
  1612  033C  081A               	movwf	(_i)
  1613  033D  00A2               	line	172
  1614                           	
  1615                           l1029:	
  1616  033E                     ;main.c: 172:     if ( i != 0xFF ) resetPort(i);
  1617                           		incf	((_i)),w
  1618  033E  0A22               	btfsc	status,2
  1619  033F  1903               	goto	u651
  1620  0340  2B42               	goto	u650
  1621  0341  2B43               u651:
  1622  0342                     	goto	l128
  1623  0342  2B46               u650:
  1624  0343                     	
  1625                           l1031:	
  1626  0343                     	movf	(_i),w
  1627  0343  0822               	fcall	_resetPort
  1628  0344  22EE               	goto	l128
  1629  0345  2B46               	
  1630                           l129:	
  1631  0346                     	line	173
  1632                           	
  1633                           l128:	
  1634  0346                     	return
  1635  0346  0008               	opt stack 0
  1636                           GLOBAL	__end_of_keyUp
  1637                           	__end_of_keyUp:
  1638  0347                     	signat	_keyUp,4217
  1639                           	global	_keyDown
  1640                           
  1641 ;; *************** function _keyDown *****************
  1642 ;; Defined at:
  1643 ;;		line 147 in file "main.c"
  1644 ;; Parameters:    Size  Location     Type
  1645 ;;  key             1    wreg     unsigned char 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  key             1   15[BANK0 ] unsigned char 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;                  1    wreg      void 
  1650 ;; Registers used:
  1651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMMON   BANK0
  1657 ;;      Params:         0       0
  1658 ;;      Locals:         0       1
  1659 ;;      Temps:          0       1
  1660 ;;      Totals:         0       2
  1661 ;;Total ram usage:        2 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    3
  1664 ;; This function calls:
  1665 ;;		_resetPort
  1666 ;;		_setPort
  1667 ;; This function is called by:
  1668 ;;		_main
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  1672                           	line	147
  1673                           global __ptext4
  1674                           __ptext4:	;psect for function _keyDown
  1675  0279                     psect	text4
  1676                           	file	"main.c"
  1677                           	line	147
  1678                           	global	__size_of_keyDown
  1679                           	__size_of_keyDown	equ	__end_of_keyDown-_keyDown
  1680  0041                     	
  1681                           _keyDown:	
  1682  0279                     ;incstack = 0
  1683                           	opt	stack 4
  1684                           ; Regs used in _keyDown: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1685                           ;keyDown@key stored from wreg
  1686                           	bcf	status, 5	;RP0=0, select bank0
  1687  0279  1283               	movwf	(keyDown@key)
  1688  027A  009B               	line	149
  1689                           	
  1690                           l997:	
  1691  027B                     ;main.c: 147: void keyDown(uint8_t key);main.c: 148: {;main.c: 149:     if ( key >= 128 
                                 ) return;
  1692                           	movlw	low(080h)
  1693  027B  3080               	subwf	(keyDown@key),w
  1694  027C  021B               	skipc
  1695  027D  1C03               	goto	u571
  1696  027E  2A80               	goto	u570
  1697  027F  2A81               u571:
  1698  0280                     	goto	l1001
  1699  0280  2A83               u570:
  1700  0281                     	goto	l113
  1701  0281  2AB9               	
  1702                           l999:	
  1703  0282                     	goto	l113
  1704  0282  2AB9               	
  1705                           l112:	
  1706  0283                     	line	150
  1707                           	
  1708                           l1001:	
  1709  0283                     ;main.c: 150:     i = codeToMatrix[key];
  1710                           	movf	(keyDown@key),w
  1711  0283  081B               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1712  0284  3E01               	movwf	fsr0
  1713  0285  0084               	fcall	stringdir
  1714  0286  2109               	movwf	(??_keyDown+0)+0
  1715  0287  009A               	movf	(??_keyDown+0)+0,w
  1716  0288  081A               	movwf	(_i)
  1717  0289  00A2               	line	151
  1718                           	
  1719                           l1003:	
  1720  028A                     ;main.c: 151:     if ( i != 0xFF ) {
  1721                           		incf	((_i)),w
  1722  028A  0A22               	btfsc	status,2
  1723  028B  1903               	goto	u581
  1724  028C  2A8E               	goto	u580
  1725  028D  2A8F               u581:
  1726  028E                     	goto	l113
  1727  028E  2AB9               u580:
  1728  028F                     	line	152
  1729                           	
  1730                           l1005:	
  1731  028F                     ;main.c: 152:         setPort(i);
  1732                           	movf	(_i),w
  1733  028F  0822               	fcall	_setPort
  1734  0290  230E               	line	154
  1735                           	
  1736                           l1007:	
  1737  0291                     ;main.c: 154:         if ( (shift &&!replaced) || (i & 0b01000000) ) {
  1738                           	bcf	status, 5	;RP0=0, select bank0
  1739  0291  1283               	movf	((_shift)),w
  1740  0292  0821               	btfsc	status,2
  1741  0293  1903               	goto	u591
  1742  0294  2A96               	goto	u590
  1743  0295  2A97               u591:
  1744  0296                     	goto	l119
  1745  0296  2A9C               u590:
  1746  0297                     	
  1747                           l1009:	
  1748  0297                     	movf	((_replaced)),w
  1749  0297  081F               	btfsc	status,2
  1750  0298  1903               	goto	u601
  1751  0299  2A9B               	goto	u600
  1752  029A  2A9C               u601:
  1753  029B                     	goto	l1011
  1754  029B  2AA1               u600:
  1755  029C                     	
  1756                           l119:	
  1757  029C                     	btfss	(_i),(6)&7
  1758  029C  1F22               	goto	u611
  1759  029D  2A9F               	goto	u610
  1760  029E  2AA0               u611:
  1761  029F                     	goto	l1013
  1762  029F  2AA4               u610:
  1763  02A0                     	goto	l1011
  1764  02A0  2AA1               	
  1765                           l117:	
  1766  02A1                     	line	155
  1767                           	
  1768                           l1011:	
  1769  02A1                     ;main.c: 155:             setPort(0x00);
  1770                           	movlw	low(0)
  1771  02A1  3000               	fcall	_setPort
  1772  02A2  230E               	line	156
  1773                           ;main.c: 156:         } else {
  1774                           	goto	l1015
  1775  02A3  2AA7               	
  1776                           l115:	
  1777  02A4                     	line	157
  1778                           	
  1779                           l1013:	
  1780  02A4                     ;main.c: 157:             resetPort(0x00);
  1781                           	movlw	low(0)
  1782  02A4  3000               	fcall	_resetPort
  1783  02A5  22EE               	goto	l1015
  1784  02A6  2AA7               	line	158
  1785                           ;main.c: 158:         }
  1786                           	
  1787                           l120:	
  1788  02A7                     	line	160
  1789                           	
  1790                           l1015:	
  1791  02A7                     ;main.c: 160:         if ( ctrl || (i & 0b10000000) ) {
  1792                           	bcf	status, 5	;RP0=0, select bank0
  1793  02A7  1283               	movf	((_ctrl)),w
  1794  02A8  0820               	btfss	status,2
  1795  02A9  1D03               	goto	u621
  1796  02AA  2AAC               	goto	u620
  1797  02AB  2AAD               u621:
  1798  02AC                     	goto	l1019
  1799  02AC  2AB2               u620:
  1800  02AD                     	
  1801                           l1017:	
  1802  02AD                     	btfss	(_i),(7)&7
  1803  02AD  1FA2               	goto	u631
  1804  02AE  2AB0               	goto	u630
  1805  02AF  2AB1               u631:
  1806  02B0                     	goto	l1021
  1807  02B0  2AB5               u630:
  1808  02B1                     	goto	l1019
  1809  02B1  2AB2               	
  1810                           l123:	
  1811  02B2                     	line	161
  1812                           	
  1813                           l1019:	
  1814  02B2                     ;main.c: 161:             setPort(0x0F);
  1815                           	movlw	low(0Fh)
  1816  02B2  300F               	fcall	_setPort
  1817  02B3  230E               	line	162
  1818                           ;main.c: 162:         } else {
  1819                           	goto	l113
  1820  02B4  2AB9               	
  1821                           l121:	
  1822  02B5                     	line	163
  1823                           	
  1824                           l1021:	
  1825  02B5                     ;main.c: 163:             resetPort(0x0F);
  1826                           	movlw	low(0Fh)
  1827  02B5  300F               	fcall	_resetPort
  1828  02B6  22EE               	goto	l113
  1829  02B7  2AB9               	line	164
  1830                           ;main.c: 164:         }
  1831                           	
  1832                           l124:	
  1833  02B8                     	goto	l113
  1834  02B8  2AB9               	line	165
  1835                           ;main.c: 165:     }
  1836                           	
  1837                           l114:	
  1838  02B9                     	line	166
  1839                           	
  1840                           l113:	
  1841  02B9                     	return
  1842  02B9  0008               	opt stack 0
  1843                           GLOBAL	__end_of_keyDown
  1844                           	__end_of_keyDown:
  1845  02BA                     	signat	_keyDown,4217
  1846                           	global	_setPort
  1847                           
  1848 ;; *************** function _setPort *****************
  1849 ;; Defined at:
  1850 ;;		line 135 in file "main.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  bit_id          1    wreg     unsigned char 
  1853 ;; Auto vars:     Size  Location     Type
  1854 ;;  bit_id          1   13[BANK0 ] unsigned char 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  1    wreg      void 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMMON   BANK0
  1864 ;;      Params:         0       0
  1865 ;;      Locals:         0       1
  1866 ;;      Temps:          0       3
  1867 ;;      Totals:         0       4
  1868 ;;Total ram usage:        4 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:    2
  1871 ;; This function calls:
  1872 ;;		Nothing
  1873 ;; This function is called by:
  1874 ;;		_keyDown
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  1878                           	line	135
  1879                           global __ptext5
  1880                           __ptext5:	;psect for function _setPort
  1881  030E                     psect	text5
  1882                           	file	"main.c"
  1883                           	line	135
  1884                           	global	__size_of_setPort
  1885                           	__size_of_setPort	equ	__end_of_setPort-_setPort
  1886  001F                     	
  1887                           _setPort:	
  1888  030E                     ;incstack = 0
  1889                           	opt	stack 4
  1890                           ; Regs used in _setPort: [wreg-fsr0h+status,2+status,0]
  1891                           ;setPort@bit_id stored from wreg
  1892                           	bcf	status, 5	;RP0=0, select bank0
  1893  030E  1283               	movwf	(setPort@bit_id)
  1894  030F  0099               	line	137
  1895                           	
  1896                           l985:	
  1897  0310                     ;main.c: 135: void setPort(uint8_t bit_id);main.c: 136: {;main.c: 137:     outPorts[bit_
                                 id & 7] |= (1 << ((bit_id >> 3) & 7));
  1898                           	movlw	low(01h)
  1899  0310  3001               	movwf	(??_setPort+0)+0
  1900  0311  0096               	movf	(setPort@bit_id),w
  1901  0312  0819               	movwf	(??_setPort+1)+0
  1902  0313  0097               	movlw	03h
  1903  0314  3003               u515:
  1904  0315                     	clrc
  1905  0315  1003               	rrf	(??_setPort+1)+0,f
  1906  0316  0C97               	addlw	-1
  1907  0317  3EFF               	skipz
  1908  0318  1D03               	goto	u515
  1909  0319  2B15               	movf	0+(??_setPort+1)+0,w
  1910  031A  0817               	andlw	07h
  1911  031B  3907               	addlw	1
  1912  031C  3E01               	goto	u524
  1913  031D  2B20               u525:
  1914  031E                     	clrc
  1915  031E  1003               	rlf	(??_setPort+0)+0,f
  1916  031F  0D96               u524:
  1917  0320                     	addlw	-1
  1918  0320  3EFF               	skipz
  1919  0321  1D03               	goto	u525
  1920  0322  2B1E               	movf	0+(??_setPort+0)+0,w
  1921  0323  0816               	movwf	(??_setPort+2)+0
  1922  0324  0098               	movf	(setPort@bit_id),w
  1923  0325  0819               	andlw	07h
  1924  0326  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1925  0327  3E2B               	movwf	fsr0
  1926  0328  0084               	movf	(??_setPort+2)+0,w
  1927  0329  0818               	bcf	status, 7	;select IRP bank0
  1928  032A  1383               	iorwf	indf,f
  1929  032B  0480               	line	138
  1930                           	
  1931                           l106:	
  1932  032C                     	return
  1933  032C  0008               	opt stack 0
  1934                           GLOBAL	__end_of_setPort
  1935                           	__end_of_setPort:
  1936  032D                     	signat	_setPort,4217
  1937                           	global	_resetPort
  1938                           
  1939 ;; *************** function _resetPort *****************
  1940 ;; Defined at:
  1941 ;;		line 140 in file "main.c"
  1942 ;; Parameters:    Size  Location     Type
  1943 ;;  bit_id          1    wreg     unsigned char 
  1944 ;; Auto vars:     Size  Location     Type
  1945 ;;  bit_id          1   13[BANK0 ] unsigned char 
  1946 ;; Return value:  Size  Location     Type
  1947 ;;                  1    wreg      void 
  1948 ;; Registers used:
  1949 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1950 ;; Tracked objects:
  1951 ;;		On entry : 0/0
  1952 ;;		On exit  : 0/0
  1953 ;;		Unchanged: 0/0
  1954 ;; Data sizes:     COMMON   BANK0
  1955 ;;      Params:         0       0
  1956 ;;      Locals:         0       1
  1957 ;;      Temps:          0       3
  1958 ;;      Totals:         0       4
  1959 ;;Total ram usage:        4 bytes
  1960 ;; Hardware stack levels used:    1
  1961 ;; Hardware stack levels required when called:    2
  1962 ;; This function calls:
  1963 ;;		Nothing
  1964 ;; This function is called by:
  1965 ;;		_keyDown
  1966 ;;		_keyUp
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  1970                           	line	140
  1971                           global __ptext6
  1972                           __ptext6:	;psect for function _resetPort
  1973  02EE                     psect	text6
  1974                           	file	"main.c"
  1975                           	line	140
  1976                           	global	__size_of_resetPort
  1977                           	__size_of_resetPort	equ	__end_of_resetPort-_resetPort
  1978  0020                     	
  1979                           _resetPort:	
  1980  02EE                     ;incstack = 0
  1981                           	opt	stack 4
  1982                           ; Regs used in _resetPort: [wreg-fsr0h+status,2+status,0]
  1983                           ;resetPort@bit_id stored from wreg
  1984                           	bcf	status, 5	;RP0=0, select bank0
  1985  02EE  1283               	movwf	(resetPort@bit_id)
  1986  02EF  0099               	line	142
  1987                           	
  1988                           l987:	
  1989  02F0                     ;main.c: 140: void resetPort(uint8_t bit_id);main.c: 141: {;main.c: 142:     outPorts[bi
                                 t_id & 7] &= ~(1 << ((bit_id >> 3) & 7));
  1990                           	movlw	low(01h)
  1991  02F0  3001               	movwf	(??_resetPort+0)+0
  1992  02F1  0096               	movf	(resetPort@bit_id),w
  1993  02F2  0819               	movwf	(??_resetPort+1)+0
  1994  02F3  0097               	movlw	03h
  1995  02F4  3003               u535:
  1996  02F5                     	clrc
  1997  02F5  1003               	rrf	(??_resetPort+1)+0,f
  1998  02F6  0C97               	addlw	-1
  1999  02F7  3EFF               	skipz
  2000  02F8  1D03               	goto	u535
  2001  02F9  2AF5               	movf	0+(??_resetPort+1)+0,w
  2002  02FA  0817               	andlw	07h
  2003  02FB  3907               	addlw	1
  2004  02FC  3E01               	goto	u544
  2005  02FD  2B00               u545:
  2006  02FE                     	clrc
  2007  02FE  1003               	rlf	(??_resetPort+0)+0,f
  2008  02FF  0D96               u544:
  2009  0300                     	addlw	-1
  2010  0300  3EFF               	skipz
  2011  0301  1D03               	goto	u545
  2012  0302  2AFE               	movf	0+(??_resetPort+0)+0,w
  2013  0303  0816               	xorlw	0ffh
  2014  0304  3AFF               	movwf	(??_resetPort+2)+0
  2015  0305  0098               	movf	(resetPort@bit_id),w
  2016  0306  0819               	andlw	07h
  2017  0307  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  2018  0308  3E2B               	movwf	fsr0
  2019  0309  0084               	movf	(??_resetPort+2)+0,w
  2020  030A  0818               	bcf	status, 7	;select IRP bank0
  2021  030B  1383               	andwf	indf,f
  2022  030C  0580               	line	143
  2023                           	
  2024                           l109:	
  2025  030D                     	return
  2026  030D  0008               	opt stack 0
  2027                           GLOBAL	__end_of_resetPort
  2028                           	__end_of_resetPort:
  2029  030E                     	signat	_resetPort,4217
  2030                           	global	_myIsr
  2031                           
  2032 ;; *************** function _myIsr *****************
  2033 ;; Defined at:
  2034 ;;		line 74 in file "main.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;  ii              2    8[BANK0 ] int 
  2039 ;; Return value:  Size  Location     Type
  2040 ;;                  1    wreg      void 
  2041 ;; Registers used:
  2042 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2043 ;; Tracked objects:
  2044 ;;		On entry : 0/0
  2045 ;;		On exit  : 0/0
  2046 ;;		Unchanged: 0/0
  2047 ;; Data sizes:     COMMON   BANK0
  2048 ;;      Params:         0       0
  2049 ;;      Locals:         0       4
  2050 ;;      Temps:          0       6
  2051 ;;      Totals:         0      10
  2052 ;;Total ram usage:       10 bytes
  2053 ;; Hardware stack levels used:    2
  2054 ;; This function calls:
  2055 ;;		Nothing
  2056 ;; This function is called by:
  2057 ;;		Interrupt level 1
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  2061                           	line	74
  2062                           global __ptext7
  2063                           __ptext7:	;psect for function _myIsr
  2064  0031                     psect	text7
  2065                           	file	"main.c"
  2066                           	line	74
  2067                           	global	__size_of_myIsr
  2068                           	__size_of_myIsr	equ	__end_of_myIsr-_myIsr
  2069  00D8                     	
  2070                           _myIsr:	
  2071  0031                     ;incstack = 0
  2072                           	opt	stack 4
  2073                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2074                           psect	intentry,class=CODE,delta=2
  2075                           global __pintentry
  2076                           __pintentry:
  2077  0004                     global interrupt_function
  2078                           interrupt_function:
  2079  0004                     	global saved_w
  2080                           	saved_w	set	btemp+0
  2081  004E                     	movwf	saved_w
  2082  0004  00CE               	swapf	status,w
  2083  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
  2084  0006  1283               	movwf	(??_myIsr+2)
  2085  0007  008E               	movf	fsr0,w
  2086  0008  0804               	movwf	(??_myIsr+3)
  2087  0009  008F               	movf	pclath,w
  2088  000A  080A               	movwf	(??_myIsr+4)
  2089  000B  0090               	movf	btemp+1,w
  2090  000C  084F               	movwf	(??_myIsr+5)
  2091  000D  0091               	ljmp	_myIsr
  2092  000E  2831               psect	text7
  2093                           	line	76
  2094                           	
  2095                           i1l1067:	
  2096  0031                     ;main.c: 76:     if(T0IE && T0IF){
  2097                           	btfss	(93/8),(93)&7	;volatile
  2098  0031  1E8B               	goto	u68_21
  2099  0032  2834               	goto	u68_20
  2100  0033  2835               u68_21:
  2101  0034                     	goto	i1l1135
  2102  0034  28FD               u68_20:
  2103  0035                     	
  2104                           i1l1069:	
  2105  0035                     	btfss	(90/8),(90)&7	;volatile
  2106  0035  1D0B               	goto	u69_21
  2107  0036  2838               	goto	u69_20
  2108  0037  2839               u69_21:
  2109  0038                     	goto	i1l1135
  2110  0038  28FD               u69_20:
  2111  0039                     	line	78
  2112                           	
  2113                           i1l1071:	
  2114  0039                     ;main.c: 78:         T0IF=0;
  2115                           	bcf	(90/8),(90)&7	;volatile
  2116  0039  110B               	line	79
  2117                           	
  2118                           i1l1073:	
  2119  003A                     ;main.c: 79:         TMR0 = 255;
  2120                           	movlw	low(0FFh)
  2121  003A  30FF               	movwf	(1)	;volatile
  2122  003B  0081               	line	83
  2123                           	
  2124                           i1l1075:	
  2125  003C                     ;main.c: 83:         if ( ps2DataState == 0 ) {
  2126                           	movf	((_ps2DataState)),w
  2127  003C  082A               	btfss	status,2
  2128  003D  1D03               	goto	u70_21
  2129  003E  2840               	goto	u70_20
  2130  003F  2841               u70_21:
  2131  0040                     	goto	i1l1085
  2132  0040  284F               u70_20:
  2133  0041                     	line	84
  2134                           	
  2135                           i1l1077:	
  2136  0041                     ;main.c: 84:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  2137                           	btfsc	(5),4	;volatile
  2138  0041  1A05               	goto	u71_21
  2139  0042  2844               	goto	u71_20
  2140  0043  2845               u71_21:
  2141  0044                     	goto	i1l1135
  2142  0044  28FD               u71_20:
  2143  0045                     	
  2144                           i1l1079:	
  2145  0045                     	btfsc	(5),3	;volatile
  2146  0045  1985               	goto	u72_21
  2147  0046  2848               	goto	u72_20
  2148  0047  2849               u72_21:
  2149  0048                     	goto	i1l1135
  2150  0048  28FD               u72_20:
  2151  0049                     	line	85
  2152                           	
  2153                           i1l1081:	
  2154  0049                     ;main.c: 85:                 ps2BitsCount = 0;
  2155                           	clrf	(_ps2BitsCount)
  2156  0049  01A8               	line	86
  2157                           ;main.c: 86:                 ps2Bits = 0;
  2158                           	clrf	(_ps2Bits)
  2159  004A  01A9               	line	87
  2160                           	
  2161                           i1l1083:	
  2162  004B                     ;main.c: 87:                 ps2DataState = 1;
  2163                           	clrf	(_ps2DataState)
  2164  004B  01AA               	incf	(_ps2DataState),f
  2165  004C  0AAA               	goto	i1l1135
  2166  004D  28FD               	line	88
  2167                           ;main.c: 88:             }
  2168                           	
  2169                           i1l81:	
  2170  004E                     	line	89
  2171                           ;main.c: 89:         } else if ( ps2DataState == 1 ) {
  2172                           	goto	i1l1135
  2173  004E  28FD               	
  2174                           i1l80:	
  2175  004F                     	
  2176                           i1l1085:	
  2177  004F                     		decf	((_ps2DataState)),w
  2178  004F  032A               	btfss	status,2
  2179  0050  1D03               	goto	u73_21
  2180  0051  2853               	goto	u73_20
  2181  0052  2854               u73_21:
  2182  0053                     	goto	i1l1135
  2183  0053  28FD               u73_20:
  2184  0054                     	line	90
  2185                           	
  2186                           i1l1087:	
  2187  0054                     ;main.c: 90:             if ( ps2BitsCount < 8 ) {
  2188                           	movf	(_ps2BitsCount),w
  2189  0054  0828               	xorlw	80h
  2190  0055  3A80               	addlw	-((08h)^80h)
  2191  0056  3E78               	skipnc
  2192  0057  1803               	goto	u74_21
  2193  0058  285A               	goto	u74_20
  2194  0059  285B               u74_21:
  2195  005A                     	goto	i1l1093
  2196  005A  2871               u74_20:
  2197  005B                     	line	91
  2198                           	
  2199                           i1l1089:	
  2200  005B                     ;main.c: 91:                 if ( PORTAbits.RA3 ) {
  2201                           	btfss	(5),3	;volatile
  2202  005B  1D85               	goto	u75_21
  2203  005C  285E               	goto	u75_20
  2204  005D  285F               u75_21:
  2205  005E                     	goto	i1l85
  2206  005E  286C               u75_20:
  2207  005F                     	line	92
  2208                           	
  2209                           i1l1091:	
  2210  005F                     ;main.c: 92:                     ps2Bits |= ( 1 << ps2BitsCount );
  2211                           	movlw	low(01h)
  2212  005F  3001               	movwf	(??_myIsr+0)+0
  2213  0060  008C               	incf	(_ps2BitsCount),w
  2214  0061  0A28               	goto	u76_24
  2215  0062  2865               u76_25:
  2216  0063                     	clrc
  2217  0063  1003               	rlf	(??_myIsr+0)+0,f
  2218  0064  0D8C               u76_24:
  2219  0065                     	addlw	-1
  2220  0065  3EFF               	skipz
  2221  0066  1D03               	goto	u76_25
  2222  0067  2863               	movf	0+(??_myIsr+0)+0,w
  2223  0068  080C               	movwf	(??_myIsr+1)+0
  2224  0069  008D               	movf	(??_myIsr+1)+0,w
  2225  006A  080D               	iorwf	(_ps2Bits),f
  2226  006B  04A9               	line	93
  2227                           ;main.c: 93:                 }
  2228                           	
  2229                           i1l85:	
  2230  006C                     	line	94
  2231                           ;main.c: 94:                 ps2BitsCount++;
  2232                           	movlw	low(01h)
  2233  006C  3001               	movwf	(??_myIsr+0)+0
  2234  006D  008C               	movf	(??_myIsr+0)+0,w
  2235  006E  080C               	addwf	(_ps2BitsCount),f
  2236  006F  07A8               	line	95
  2237                           ;main.c: 95:             } else if ( ps2BitsCount == 8 ) {
  2238                           	goto	i1l1135
  2239  0070  28FD               	
  2240                           i1l84:	
  2241  0071                     	
  2242                           i1l1093:	
  2243  0071                     		movlw	8
  2244  0071  3008               	xorwf	((_ps2BitsCount)),w
  2245  0072  0628               	btfss	status,2
  2246  0073  1D03               	goto	u77_21
  2247  0074  2876               	goto	u77_20
  2248  0075  2877               u77_21:
  2249  0076                     	goto	i1l1097
  2250  0076  287C               u77_20:
  2251  0077                     	line	96
  2252                           	
  2253                           i1l1095:	
  2254  0077                     ;main.c: 96:                 ps2BitsCount++;
  2255                           	movlw	low(01h)
  2256  0077  3001               	movwf	(??_myIsr+0)+0
  2257  0078  008C               	movf	(??_myIsr+0)+0,w
  2258  0079  080C               	addwf	(_ps2BitsCount),f
  2259  007A  07A8               	line	97
  2260                           ;main.c: 97:             } else if ( ps2BitsCount == 9 ) {
  2261                           	goto	i1l1135
  2262  007B  28FD               	
  2263                           i1l87:	
  2264  007C                     	
  2265                           i1l1097:	
  2266  007C                     		movlw	9
  2267  007C  3009               	xorwf	((_ps2BitsCount)),w
  2268  007D  0628               	btfss	status,2
  2269  007E  1D03               	goto	u78_21
  2270  007F  2881               	goto	u78_20
  2271  0080  2882               u78_21:
  2272  0081                     	goto	i1l1135
  2273  0081  28FD               u78_20:
  2274  0082                     	line	98
  2275                           	
  2276                           i1l1099:	
  2277  0082                     ;main.c: 98:                 ps2DataCount++;
  2278                           	movlw	low(01h)
  2279  0082  3001               	movwf	(??_myIsr+0)+0
  2280  0083  008C               	movf	(??_myIsr+0)+0,w
  2281  0084  080C               	addwf	(_ps2DataCount),f
  2282  0085  07A6               	line	99
  2283                           ;main.c: 99:                 if ( ps2NeedEncode ) {
  2284                           	movf	((_ps2NeedEncode)),w
  2285  0086  0823               	btfsc	status,2
  2286  0087  1903               	goto	u79_21
  2287  0088  288A               	goto	u79_20
  2288  0089  288B               u79_21:
  2289  008A                     	goto	i1l1115
  2290  008A  28C4               u79_20:
  2291  008B                     	line	100
  2292                           	
  2293                           i1l1101:	
  2294  008B                     ;main.c: 100:                     for (int ii=0; ii < 25; ii+=2) {
  2295                           	clrf	(myIsr@ii)
  2296  008B  0194               	clrf	(myIsr@ii+1)
  2297  008C  0195               	
  2298                           i1l1103:	
  2299  008D                     	movf	(myIsr@ii+1),w
  2300  008D  0815               	xorlw	80h
  2301  008E  3A80               	movwf	btemp+1
  2302  008F  00CF               	movlw	(0)^80h
  2303  0090  3080               	subwf	btemp+1,w
  2304  0091  024F               	skipz
  2305  0092  1D03               	goto	u80_25
  2306  0093  2896               	movlw	019h
  2307  0094  3019               	subwf	(myIsr@ii),w
  2308  0095  0214               u80_25:
  2309  0096                     
  2310                           	skipc
  2311  0096  1C03               	goto	u80_21
  2312  0097  2899               	goto	u80_20
  2313  0098  289A               u80_21:
  2314  0099                     	goto	i1l1107
  2315  0099  289C               u80_20:
  2316  009A                     	goto	i1l1121
  2317  009A  28DC               	
  2318                           i1l1105:	
  2319  009B                     	goto	i1l1121
  2320  009B  28DC               	
  2321                           i1l91:	
  2322  009C                     	line	101
  2323                           	
  2324                           i1l1107:	
  2325  009C                     ;main.c: 101:                         if ( ps2Bits == replaceTwoBytesCodes[ii] ) {
  2326                           	bcf	status, 5	;RP0=0, select bank0
  2327  009C  1283               	movf	(myIsr@ii),w
  2328  009D  0814               	addlw	low((((_replaceTwoBytesCodes)-__stringbase)|8000h))
  2329  009E  3EA5               	movwf	fsr0
  2330  009F  0084               	fcall	stringdir
  2331  00A0  2109               	xorwf	(_ps2Bits),w
  2332  00A1  0629               	skipz
  2333  00A2  1D03               	goto	u81_21
  2334  00A3  28A5               	goto	u81_20
  2335  00A4  28A6               u81_21:
  2336  00A5                     	goto	i1l1111
  2337  00A5  28AF               u81_20:
  2338  00A6                     	line	102
  2339                           	
  2340                           i1l1109:	
  2341  00A6                     ;main.c: 102:                             ps2Data = replaceTwoBytesCodes[ii+1];
  2342                           	movf	(myIsr@ii),w
  2343  00A6  0814               	addlw	01h
  2344  00A7  3E01               	addlw	low((((_replaceTwoBytesCodes)-__stringbase)|8000h))
  2345  00A8  3EA5               	movwf	fsr0
  2346  00A9  0084               	fcall	stringdir
  2347  00AA  2109               	movwf	(??_myIsr+0)+0
  2348  00AB  008C               	movf	(??_myIsr+0)+0,w
  2349  00AC  080C               	movwf	(_ps2Data)
  2350  00AD  00A7               	line	103
  2351                           ;main.c: 103:                             break;
  2352                           	goto	i1l1121
  2353  00AE  28DC               	line	104
  2354                           ;main.c: 104:                         }
  2355                           	
  2356                           i1l93:	
  2357  00AF                     	line	105
  2358                           	
  2359                           i1l1111:	
  2360  00AF                     ;main.c: 105:                     }
  2361                           	movlw	02h
  2362  00AF  3002               	addwf	(myIsr@ii),f
  2363  00B0  0794               	skipnc
  2364  00B1  1803               	incf	(myIsr@ii+1),f
  2365  00B2  0A95               	movlw	0
  2366  00B3  3000               	addwf	(myIsr@ii+1),f
  2367  00B4  0795               	
  2368                           i1l1113:	
  2369  00B5                     	movf	(myIsr@ii+1),w
  2370  00B5  0815               	xorlw	80h
  2371  00B6  3A80               	movwf	btemp+1
  2372  00B7  00CF               	movlw	(0)^80h
  2373  00B8  3080               	subwf	btemp+1,w
  2374  00B9  024F               	skipz
  2375  00BA  1D03               	goto	u82_25
  2376  00BB  28BE               	movlw	019h
  2377  00BC  3019               	subwf	(myIsr@ii),w
  2378  00BD  0214               u82_25:
  2379  00BE                     
  2380                           	skipc
  2381  00BE  1C03               	goto	u82_21
  2382  00BF  28C1               	goto	u82_20
  2383  00C0  28C2               u82_21:
  2384  00C1                     	goto	i1l1107
  2385  00C1  289C               u82_20:
  2386  00C2                     	goto	i1l1121
  2387  00C2  28DC               	
  2388                           i1l92:	
  2389  00C3                     	line	106
  2390                           ;main.c: 106:                 } else {
  2391                           	goto	i1l1121
  2392  00C3  28DC               	
  2393                           i1l90:	
  2394  00C4                     	line	107
  2395                           	
  2396                           i1l1115:	
  2397  00C4                     ;main.c: 107:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2398                           		movlw	131
  2399  00C4  3083               	bcf	status, 5	;RP0=0, select bank0
  2400  00C5  1283               	xorwf	((_ps2Bits)),w
  2401  00C6  0629               	btfsc	status,2
  2402  00C7  1903               	goto	u83_21
  2403  00C8  28CA               	goto	u83_20
  2404  00C9  28CB               u83_21:
  2405  00CA                     	goto	i1l1119
  2406  00CA  28D3               u83_20:
  2407  00CB                     	
  2408                           i1l1117:	
  2409  00CB                     	movf	(_ps2Bits),w
  2410  00CB  0829               	movwf	(??_myIsr+0)+0
  2411  00CC  008C               	clrf	(??_myIsr+0)+0+1
  2412  00CD  018D               	movf	0+(??_myIsr+0)+0,w
  2413  00CE  080C               	movwf	(_myIsr$84)
  2414  00CF  0092               	movf	1+(??_myIsr+0)+0,w
  2415  00D0  080D               	movwf	(_myIsr$84+1)
  2416  00D1  0093               	goto	i1l98
  2417  00D2  28D7               	
  2418                           i1l96:	
  2419  00D3                     	
  2420                           i1l1119:	
  2421  00D3                     	movlw	03Fh
  2422  00D3  303F               	movwf	(_myIsr$84)
  2423  00D4  0092               	movlw	0
  2424  00D5  3000               	movwf	((_myIsr$84))+1
  2425  00D6  0093               	
  2426                           i1l98:	
  2427  00D7                     	movf	(_myIsr$84),w
  2428  00D7  0812               	movwf	(??_myIsr+0)+0
  2429  00D8  008C               	movf	(??_myIsr+0)+0,w
  2430  00D9  080C               	movwf	(_ps2Data)
  2431  00DA  00A7               	goto	i1l1121
  2432  00DB  28DC               	line	108
  2433                           ;main.c: 108:                 }
  2434                           	
  2435                           i1l94:	
  2436  00DC                     	line	109
  2437                           	
  2438                           i1l1121:	
  2439  00DC                     ;main.c: 109:                 if ( ps2Bits == 0xF0 ) {
  2440                           		movlw	240
  2441  00DC  30F0               	bcf	status, 5	;RP0=0, select bank0
  2442  00DD  1283               	xorwf	((_ps2Bits)),w
  2443  00DE  0629               	btfss	status,2
  2444  00DF  1D03               	goto	u84_21
  2445  00E0  28E2               	goto	u84_20
  2446  00E1  28E3               u84_21:
  2447  00E2                     	goto	i1l1127
  2448  00E2  28E7               u84_20:
  2449  00E3                     	line	110
  2450                           	
  2451                           i1l1123:	
  2452  00E3                     ;main.c: 110:                     ps2DataState = 0;
  2453                           	clrf	(_ps2DataState)
  2454  00E3  01AA               	line	111
  2455                           	
  2456                           i1l1125:	
  2457  00E4                     ;main.c: 111:                     ps2Up = 1;
  2458                           	clrf	(_ps2Up)
  2459  00E4  01A4               	incf	(_ps2Up),f
  2460  00E5  0AA4               	line	112
  2461                           ;main.c: 112:                 } else if ( ps2Bits == 0xE0 ) {
  2462                           	goto	i1l1135
  2463  00E6  28FD               	
  2464                           i1l99:	
  2465  00E7                     	
  2466                           i1l1127:	
  2467  00E7                     		movlw	224
  2468  00E7  30E0               	xorwf	((_ps2Bits)),w
  2469  00E8  0629               	btfss	status,2
  2470  00E9  1D03               	goto	u85_21
  2471  00EA  28EC               	goto	u85_20
  2472  00EB  28ED               u85_21:
  2473  00EC                     	goto	i1l1133
  2474  00EC  28F1               u85_20:
  2475  00ED                     	line	113
  2476                           	
  2477                           i1l1129:	
  2478  00ED                     ;main.c: 113:                     ps2DataState = 0;
  2479                           	clrf	(_ps2DataState)
  2480  00ED  01AA               	line	114
  2481                           	
  2482                           i1l1131:	
  2483  00EE                     ;main.c: 114:                     ps2NeedEncode = 1;
  2484                           	clrf	(_ps2NeedEncode)
  2485  00EE  01A3               	incf	(_ps2NeedEncode),f
  2486  00EF  0AA3               	line	115
  2487                           ;main.c: 115:                 } else {
  2488                           	goto	i1l1135
  2489  00F0  28FD               	line	123
  2490                           	
  2491                           i1l101:	
  2492  00F1                     	line	124
  2493                           	
  2494                           i1l1133:	
  2495  00F1                     ;main.c: 124:                     ps2DataState = 2;
  2496                           	movlw	low(02h)
  2497  00F1  3002               	movwf	(??_myIsr+0)+0
  2498  00F2  008C               	movf	(??_myIsr+0)+0,w
  2499  00F3  080C               	movwf	(_ps2DataState)
  2500  00F4  00AA               	goto	i1l1135
  2501  00F5  28FD               	line	125
  2502                           ;main.c: 125:                 }
  2503                           	
  2504                           i1l102:	
  2505  00F6                     	goto	i1l1135
  2506  00F6  28FD               	
  2507                           i1l100:	
  2508  00F7                     	goto	i1l1135
  2509  00F7  28FD               	line	127
  2510                           ;main.c: 127:             }
  2511                           	
  2512                           i1l89:	
  2513  00F8                     	goto	i1l1135
  2514  00F8  28FD               	
  2515                           i1l88:	
  2516  00F9                     	goto	i1l1135
  2517  00F9  28FD               	
  2518                           i1l86:	
  2519  00FA                     	goto	i1l1135
  2520  00FA  28FD               	line	128
  2521                           ;main.c: 128:         }
  2522                           	
  2523                           i1l83:	
  2524  00FB                     	goto	i1l1135
  2525  00FB  28FD               	
  2526                           i1l82:	
  2527  00FC                     	goto	i1l1135
  2528  00FC  28FD               	line	129
  2529                           ;main.c: 129:     }
  2530                           	
  2531                           i1l79:	
  2532  00FD                     	line	130
  2533                           	
  2534                           i1l1135:	
  2535  00FD                     ;main.c: 130:     GIE = 1;
  2536                           	bsf	(95/8),(95)&7	;volatile
  2537  00FD  178B               	line	131
  2538                           	
  2539                           i1l103:	
  2540  00FE                     	movf	(??_myIsr+5),w
  2541  00FE  0811               	movwf	btemp+1
  2542  00FF  00CF               	movf	(??_myIsr+4),w
  2543  0100  0810               	movwf	pclath
  2544  0101  008A               	movf	(??_myIsr+3),w
  2545  0102  080F               	movwf	fsr0
  2546  0103  0084               	swapf	(??_myIsr+2)^00h,w
  2547  0104  0E0E               	movwf	status
  2548  0105  0083               	swapf	saved_w,f
  2549  0106  0ECE               	swapf	saved_w,w
  2550  0107  0E4E               	retfie
  2551  0108  0009               	opt stack 0
  2552                           GLOBAL	__end_of_myIsr
  2553                           	__end_of_myIsr:
  2554  0109                     	signat	_myIsr,89
  2555                           global	___latbits
  2556                           ___latbits	equ	0
  2557  0000                     	global	btemp
  2558                           	btemp set 04Eh
  2559  004E                     
  2560                           	DABS	1,78,2	;btemp
  2561                           	global	wtemp0
  2562                           	wtemp0 set btemp+0
  2563  004E                     	end


Data Sizes:
    Strings     0
    Constant    190
    Data        13
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     17      44

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_keyDown
    _main->_keyUp
    _sendDataToAltera->_myDelay
    _keyUp->_resetPort
    _keyDown->_resetPort
    _keyDown->_setPort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     266
                                             16 BANK0      1     1      0
                            _keyDown
                              _keyUp
                   _sendDataToAltera
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     1     1      0      46
                                             12 BANK0      1     1      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              2     2      0      46
                                             10 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _keyUp                                                2     2      0      88
                                             14 BANK0      2     2      0
                          _resetPort
 ---------------------------------------------------------------------------------
 (1) _keyDown                                              2     2      0     132
                                             14 BANK0      2     2      0
                          _resetPort
                            _setPort
 ---------------------------------------------------------------------------------
 (2) _setPort                                              4     4      0      44
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _resetPort                                            4     4      0      44
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                               10    10      0     114
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keyDown
     _resetPort
     _setPort
   _keyUp
     _resetPort
   _sendDataToAltera
     _myDelay

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     11      2C       3       66.7%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2C       6        0.0%
ABS                  0      0      2C       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Aug 25 20:18:15 2018

                            _i 0022                              pc 0002                             fsr 0004  
                          l120 02A7                            l112 0283                            l121 02B5  
                          l113 02B9                            l106 032C                            l114 02B9  
                          l123 02B2                            l115 02A4                            l124 02B8  
                          l132 0350                            l109 030D                            l117 02A1  
                          l133 035A                            l134 035A                            l150 024C  
                          l119 029C                            l127 0337                            l151 023C  
                          l128 0346                            l160 0259                            l144 01EA  
                          l129 0346                            l137 02D1                            l161 026A  
                          l153 0239                            l145 0275                            l138 02EB  
                          l154 024B                            l146 0225                            l139 02ED  
                          l163 0268                            l147 0205                            l164 0277  
                          l156 0248                            l148 0224                            l165 0278  
                          l157 026D                            l149 0219                            l166 0278  
                          l158 025B                            l991 0349                            l985 0310  
                          l993 034F                            l987 02F0                            l995 0350  
                          _GIE 005F                            l997 027B                            l989 0347  
                          l999 0282                            _RA1 0029                            _RA2 002A  
                          u600 029C                            u601 029B                            u610 02A0  
                          u515 0315                            u611 029F                            u524 0320  
                          u620 02AD                            u525 031E                            u621 02AC  
                          u630 02B1                            u550 034E                            u535 02F5  
                          u631 02B0                            u551 034D                            u544 0300  
                          u640 0335                            u560 0359                            u545 02FE  
                          u641 0334                            u561 0358                            u570 0281  
                          u650 0343                            u571 0280                            u651 0342  
                          u580 028F                            u660 02CF                            u900 020E  
                          u581 028E                            u661 02CE                            u901 020D  
                          u590 0297                            u670 02EB                            u910 0223  
                          u591 0296                            u671 02EA                            u911 0222  
                          _PSA 040B                            u920 022A                            u921 0229  
                          u930 0233                            u931 0232                            u940 0239  
                          u860 01F1                            u941 0238                            u861 01F0  
                          u950 0242                            u870 01F7                            u951 0241  
                          u871 01F6                            u960 0248                            u880 01FC  
                          u961 0247                            u881 01FB                            u970 0252  
                          u890 0203                            u971 0251                            u891 0202  
                          u980 0258                            u981 0257                            u990 0261  
                          u991 0260                            fsr0 0004                            indf 0000  
                         l1001 0283                           l1011 02A1                           l1003 028A  
                         l1021 02B5                           l1013 02A4                           l1005 028F  
                         l1015 02A7                           l1007 0291                           l1031 0343  
                         l1023 032F                           l1017 02AD                           l1009 0297  
                         l1025 0336                           l1041 02C4                           l1033 02BA  
                         l1201 0242                           l1019 02B2                           l1027 0337  
                         l1051 02D2                           l1043 02C7                           l1035 02BD  
                         l1211 0261                           l1203 024C                           l1029 033E  
                         l1061 02E0                           l1053 02D5                           l1045 02C9  
                         l1037 02BE                           l1221 0270                           l1213 0268  
                         l1205 0252                           l1141 01D9                           l1063 02E5  
                         l1055 02DC                           l1047 02D0                           l1039 02C1  
                         l1223 0271                           l1215 026A                           l1207 0259  
                         l1151 01DF                           l1143 01DB                           l1065 02EC  
                         l1057 02DD                           l1049 02D1                           l1225 0272  
                         l1209 025B                           l1217 026D                           l1161 01E6  
                         l1153 01E0                           l1145 01DC                           l1137 01CD  
                         l1059 02DF                           l1227 0273                           l1219 026F  
                         l1171 01F2                           l1163 01E7                           l1155 01E3  
                         l1147 01DD                           l1139 01D3                           l1229 0274  
                         l1181 0205                           l1173 01F7                           l1165 01E8  
                         l1157 01E4                           l1149 01DE                           l1183 020E  
                         l1175 01FC                           l1191 0225                           l1167 01EA  
                         l1159 01E5                           l1193 022A                           l1185 0210  
                         l1177 01FD                           l1169 01F1                           l1195 022C  
                         l1187 0219                           l1179 0204                           l1197 0233  
                         l1189 021D                           l1199 023C                           _T0IE 005D  
                         u1000 0267                           _T0IF 005A                           u1001 0266  
                         _T0CS 040D                           _T0SE 040C                           i1l80 004F  
                         i1l81 004E                           i1l82 00FC                           i1l90 00C4  
                         i1l83 00FB                           i1l91 009C                           i1l92 00C3  
                         i1l84 0071                           i1l93 00AF                           i1l85 006C  
                         i1l86 00FA                           i1l94 00DC                           i1l79 00FD  
                         i1l87 007C                           i1l88 00F9                           i1l96 00D3  
                         i1l89 00F8                           i1l98 00D7                           i1l99 00E7  
                         _TMR0 0001                           _main 01CD                           _ctrl 0020  
                         btemp 004E                           start 000F                          ?_main 000C  
 __end_of_replaceTwoBytesCodes 01CD                          i1l100 00F7                          i1l101 00F1  
                        i1l102 00F6                          i1l103 00FE                          _PORTA 0005  
                        _PORTB 0006           __end_of_codeToMatrix 018F                          u70_20 0041  
                        u70_21 0040                          u71_20 0045                          u71_21 0044  
                        u80_20 009A                          u72_20 0049                          u80_21 0099  
                        u72_21 0048                          u80_25 0096                          u81_20 00A6  
                        u73_20 0054                          u81_21 00A5                          u73_21 0053  
                        _TRISB 0086                          u82_20 00C2                          u74_20 005B  
                        u82_21 00C1                          u74_21 005A                          u82_25 00BE  
                        u83_20 00CB                          u75_20 005F                          u83_21 00CA  
                        u75_21 005E                          u84_20 00E3                          u68_20 0035  
                        u84_21 00E2                          u68_21 0034                          u76_24 0065  
                        u76_25 0063                          u85_20 00ED                          u77_20 0077  
                        u69_20 0039                          u85_21 00EC                          u77_21 0076  
                        u69_21 0038                          u78_20 0082                          u78_21 0081  
                        u79_20 008B                          u79_21 008A                __end_of_keyDown 02BA  
                        _ps2Up 0024                __end_of_myDelay 035B                          _keyUp 032D  
                        _myIsr 0031                          _shift 0021                __end_of_setPort 032D  
                        pclath 000A                          status 0003                          wtemp0 004E  
              __initialization 0010                   __end_of_main 0279                         ??_main 001C  
                       ?_keyUp 000C                         ?_myIsr 000C                         i1l1101 008B  
                       i1l1111 00AF                         i1l1103 008D                         i1l1113 00B5  
                       i1l1105 009B                         i1l1121 00DC                         i1l1131 00EE  
                       i1l1123 00E3                         i1l1107 009C                         i1l1115 00C4  
                       i1l1133 00F1                         i1l1125 00E4                         i1l1117 00CB  
                       i1l1109 00A6                         i1l1127 00E7                         i1l1119 00D3  
                       i1l1071 0039                         i1l1135 00FD                         i1l1129 00ED  
                       i1l1081 0049                         i1l1073 003A                         i1l1091 005F  
                       i1l1083 004B                         i1l1075 003C                         i1l1067 0031  
                       i1l1093 0071                         i1l1077 0041                         i1l1085 004F  
                       i1l1069 0035                         i1l1095 0077                         i1l1087 0054  
                       i1l1079 0045                         i1l1097 007C                         i1l1089 005B  
                       i1l1099 0082                         _TRISA0 0428                         _TRISA1 0429  
                       _TRISA2 042A                         _TRISA3 042B                         _TRISA4 042C  
     __end_of_sendDataToAltera 02EE                         _mouseX 0037                         _mouseY 0036  
                    ??_keyDown 001A                      ??_myDelay 0016                         saved_w 004E  
                    ??_setPort 0016        __end_of__initialization 002F           _replaceTwoBytesCodes 01B3  
                 __pidataBANK0 035B                  __end_of_keyUp 0347                  __end_of_myIsr 0109  
                      ??_keyUp 001A                        ??_myIsr 000C                   _ps2DataCount 0026  
                 _ps2DataState 002A                     __pbssBANK0 001D                   _ps2BitsCount 0028  
                 _codeToMatrix 010F                     __pmaintext 01CD                     __pintentry 0004  
           __size_of_resetPort 0020                     __stringtab 0109  __end_of_replaceOnShiftKeyDown 01B3  
                      _ps2Data 0027                        _ps2Bits 0029                        __ptext1 02BA  
                      __ptext2 0347                        __ptext3 032D                        __ptext4 0279  
                      __ptext5 030E                        __ptext6 02EE                        __ptext7 0031  
                      _keyDown 0279                        _myDelay 0347                        _setPort 030E  
                      clrloop0 0369           end_of_initialization 002F              __end_of_resetPort 030E  
                      myIsr@ii 0014              ?_sendDataToAltera 000C                     _mouseDelay 001D  
           ??_sendDataToAltera 0018                      _PORTAbits 0005                  setPort@bit_id 0019  
                   keyDown@key 001B            start_initialization 0010                    __pdataBANK0 002B  
                    ___latbits 0000                  __pcstackBANK0 000C                resetPort@bit_id 0019  
                    __pstrings 0109                  _ps2NeedEncode 0023                       ?_keyDown 000C  
                     ?_myDelay 000C                    _ps2WaitCode 0025                       ?_setPort 000C  
               __size_of_keyUp 001A                 __size_of_myIsr 00D8              interrupt_function 0004  
                    clear_ram0 0368                      _resetPort 02EE          _replaceOnShiftKeyDown 018F  
                  __stringbase 010E      __size_of_sendDataToAltera 0034                     ?_resetPort 000C  
           __end_of__stringtab 010F               __size_of_keyDown 0041               __size_of_myDelay 0014  
             __size_of_setPort 001F                       _myIsr$84 0012                  __size_of_main 00AC  
                     _replaced 001F                       _outPorts 002B                       keyUp@key 001B  
                     myDelay@j 0017                       intlevel1 0000                      stringcode 0109  
                  ??_resetPort 0016               _sendDataToAltera 02BA                       stringdir 0109  
                     stringtab 0109  
