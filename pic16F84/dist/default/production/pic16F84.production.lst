

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 06 14:14:26 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F84A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   102                           EEDATA equ 08h ;# 
   103  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   104                           EEADR equ 09h ;# 
   105  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   106                           PCLATH equ 0Ah ;# 
   107  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   108                           INTCON equ 0Bh ;# 
   109  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   110                           OPTION_REG equ 081h ;# 
   111  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   112                           TRISA equ 085h ;# 
   113  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   114                           TRISB equ 086h ;# 
   115  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   116                           EECON1 equ 088h ;# 
   117  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   118                           EECON2 equ 089h ;# 
   119  0089                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   120                           INDF equ 00h ;# 
   121  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   122                           TMR0 equ 01h ;# 
   123  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   124                           PCL equ 02h ;# 
   125  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   126                           STATUS equ 03h ;# 
   127  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   128                           FSR equ 04h ;# 
   129  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   130                           PORTA equ 05h ;# 
   131  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   132                           PORTB equ 06h ;# 
   133  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   134                           EEDATA equ 08h ;# 
   135  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   136                           EEADR equ 09h ;# 
   137  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   138                           PCLATH equ 0Ah ;# 
   139  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   140                           INTCON equ 0Bh ;# 
   141  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   142                           OPTION_REG equ 081h ;# 
   143  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   144                           TRISA equ 085h ;# 
   145  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   146                           TRISB equ 086h ;# 
   147  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   148                           EECON1 equ 088h ;# 
   149  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   150                           EECON2 equ 089h ;# 
   151  0089                     	FNROOT	_main
   152                           	FNCALL	intlevel1,_myIsr
   153                           	global	intlevel1
   154                           	FNROOT	intlevel1
   155                           	global	_ps2DataArray
   156                           	global	_pa
   157                           	global	_ps2DataCount
   158                           	global	_ps2DataBitsCount
   159                           	global	_ps2Data
   160                           	global	_ps2DataState
   161                           	global	_PORTB
   162                           _PORTB	set	0x6
   163  0006                     	global	_PORTA
   164                           _PORTA	set	0x5
   165  0005                     	global	_PORTAbits
   166                           _PORTAbits	set	0x5
   167  0005                     	global	_TMR0
   168                           _TMR0	set	0x1
   169  0001                     	global	_GIE
   170                           _GIE	set	0x5F
   171  005F                     	global	_T0IF
   172                           _T0IF	set	0x5A
   173  005A                     	global	_T0IE
   174                           _T0IE	set	0x5D
   175  005D                     	global	_TRISB
   176                           _TRISB	set	0x86
   177  0086                     	global	_PSA
   178                           _PSA	set	0x40B
   179  040B                     	global	_T0SE
   180                           _T0SE	set	0x40C
   181  040C                     	global	_T0CS
   182                           _T0CS	set	0x40D
   183  040D                     	global	_TRISA4
   184                           _TRISA4	set	0x42C
   185  042C                     	global	_TRISA3
   186                           _TRISA3	set	0x42B
   187  042B                     	global	_TRISA2
   188                           _TRISA2	set	0x42A
   189  042A                     	global	_TRISA1
   190                           _TRISA1	set	0x429
   191  0429                     	global	_TRISA0
   192                           _TRISA0	set	0x428
   193  0428                     ; #config settings
   194                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sgns."
   195                           	line	#
   196                           psect cinit,class=CODE,delta=2
   197                           global start_initialization
   198                           start_initialization:
   199  000E                     
   200                           global __initialization
   201                           __initialization:
   202  000E                     psect	bssBANK0,class=BANK0,space=1,noexec
   203                           global __pbssBANK0
   204                           __pbssBANK0:
   205  000C                     _ps2DataArray:
   206  000C                            ds      8
   207  000C                     
   208                           _delay:
   209  0014                            ds      4
   210  0014                     
   211                           _pa:
   212  0018                            ds      2
   213  0018                     
   214                           _keyCode:
   215  001A                            ds      2
   216  001A                     
   217                           _i:
   218  001C                            ds      1
   219  001C                     
   220                           _ps2DataCount:
   221  001D                            ds      1
   222  001D                     
   223                           _ps2DataBitsCount:
   224  001E                            ds      1
   225  001E                     
   226                           _ps2Data:
   227  001F                            ds      1
   228  001F                     
   229                           _ps2DataState:
   230  0020                            ds      1
   231  0020                     
   232                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sgns."
   233                           	line	#
   234                           psect clrtext,class=CODE,delta=2
   235                           global clear_ram0
   236                           ;	Called with FSR containing the base address, and
   237                           ;	W with the last address+1
   238                           clear_ram0:
   239  00F0                     	clrwdt			;clear the watchdog before getting into this loop
   240  00F0  0064               clrloop0:
   241  00F1                     	clrf	indf		;clear RAM location pointed to by FSR
   242  00F1  0180               	incf	fsr,f		;increment pointer
   243  00F2  0A84               	xorwf	fsr,w		;XOR with final address
   244  00F3  0604               	btfsc	status,2	;have we reached the end yet?
   245  00F4  1903               	retlw	0		;all done for this memory range, return
   246  00F5  3400               	xorwf	fsr,w		;XOR again to restore value
   247  00F6  0604               	goto	clrloop0		;do the next byte
   248  00F7  28F1               
   249                           ; Clear objects allocated to BANK0
   250                           psect cinit,class=CODE,delta=2,merge=1
   251                           	bcf	status, 7	;select IRP bank0
   252  000E  1383               	movlw	low(__pbssBANK0)
   253  000F  300C               	movwf	fsr
   254  0010  0084               	movlw	low((__pbssBANK0)+015h)
   255  0011  3021               	fcall	clear_ram0
   256  0012  20F0               psect cinit,class=CODE,delta=2,merge=1
   257                           global end_of_initialization,__end_of__initialization
   258                           
   259                           ;End of C runtime variable initialization code
   260                           
   261                           end_of_initialization:
   262  0013                     __end_of__initialization:
   263  0013                     clrf status
   264  0013  0183               ljmp _main	;jump to C main() function
   265  0014  289C               psect	cstackCOMMON,class=COMMON,space=1,noexec
   266                           global __pcstackCOMMON
   267                           __pcstackCOMMON:
   268  0000                     ??_main:	; 1 bytes @ 0x0
   269  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   270                           global __pcstackBANK0
   271                           __pcstackBANK0:
   272  0021                     ?_myIsr:	; 1 bytes @ 0x0
   273  0021                     ??_myIsr:	; 1 bytes @ 0x0
   274  0021                     ?_main:	; 1 bytes @ 0x0
   275  0021                     	ds	5
   276  0021                     ;!
   277                           ;!Data Sizes:
   278                           ;!    Strings     0
   279                           ;!    Constant    0
   280                           ;!    Data        0
   281                           ;!    BSS         21
   282                           ;!    Persistent  0
   283                           ;!    Stack       0
   284                           ;!
   285                           ;!Auto Spaces:
   286                           ;!    Space          Size  Autos    Used
   287                           ;!    COMMON            0      0       0
   288                           ;!    BANK0            66      5      26
   289                           
   290                           ;!
   291                           ;!Pointer List with Targets:
   292                           ;!
   293                           ;!    None.
   294                           
   295                           
   296                           ;!
   297                           ;!Critical Paths under _main in COMMON
   298                           ;!
   299                           ;!    None.
   300                           ;!
   301                           ;!Critical Paths under _myIsr in COMMON
   302                           ;!
   303                           ;!    None.
   304                           ;!
   305                           ;!Critical Paths under _main in BANK0
   306                           ;!
   307                           ;!    None.
   308                           ;!
   309                           ;!Critical Paths under _myIsr in BANK0
   310                           ;!
   311                           ;!    None.
   312                           
   313 ;;
   314 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   315 ;;
   316                           
   317                           ;!
   318                           ;!Call Graph Tables:
   319                           ;!
   320                           ;! ---------------------------------------------------------------------------------
   321                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   322                           ;! ---------------------------------------------------------------------------------
   323                           ;! (0) _main                                                 0     0      0       0
   324                           ;! ---------------------------------------------------------------------------------
   325                           ;! Estimated maximum stack depth 0
   326                           ;! ---------------------------------------------------------------------------------
   327                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   328                           ;! ---------------------------------------------------------------------------------
   329                           ;! (1) _myIsr                                                5     5      0       0
   330                           ;!                                              0 BANK0      5     5      0
   331                           ;! ---------------------------------------------------------------------------------
   332                           ;! Estimated maximum stack depth 1
   333                           ;! ---------------------------------------------------------------------------------
   334                           ;!
   335                           ;! Call Graph Graphs:
   336                           ;!
   337                           ;! _main (ROOT)
   338                           ;!
   339                           ;! _myIsr (ROOT)
   340                           ;!
   341                           
   342                           ;! Address spaces:
   343                           
   344                           ;!Name               Size   Autos  Total    Cost      Usage
   345                           ;!BITCOMMON            0      0       0       0        0.0%
   346                           ;!EEDATA              40      0       0       0        0.0%
   347                           ;!NULL                 0      0       0       0        0.0%
   348                           ;!CODE                 0      0       0       0        0.0%
   349                           ;!BITSFR0              0      0       0       1        0.0%
   350                           ;!SFR0                 0      0       0       1        0.0%
   351                           ;!COMMON               0      0       0       1        0.0%
   352                           ;!BITSFR1              0      0       0       2        0.0%
   353                           ;!SFR1                 0      0       0       2        0.0%
   354                           ;!STACK                0      0       0       2        0.0%
   355                           ;!BANK0               42      5      1A       3       39.4%
   356                           ;!ABS                  0      0      1A       4        0.0%
   357                           ;!BITBANK0            42      0       0       5        0.0%
   358                           ;!DATA                 0      0      1A       6        0.0%
   359                           
   360                           	global	_main
   361                           
   362 ;; *************** function _main *****************
   363 ;; Defined at:
   364 ;;		line 92 in file "main.c"
   365 ;; Parameters:    Size  Location     Type
   366 ;;		None
   367 ;; Auto vars:     Size  Location     Type
   368 ;;		None
   369 ;; Return value:  Size  Location     Type
   370 ;;                  1    wreg      void 
   371 ;; Registers used:
   372 ;;		wreg, status,2, status,0
   373 ;; Tracked objects:
   374 ;;		On entry : B00/0
   375 ;;		On exit  : 0/0
   376 ;;		Unchanged: 0/0
   377 ;; Data sizes:     COMMON   BANK0
   378 ;;      Params:         0       0
   379 ;;      Locals:         0       0
   380 ;;      Temps:          0       0
   381 ;;      Totals:         0       0
   382 ;;Total ram usage:        0 bytes
   383 ;; Hardware stack levels required when called:    1
   384 ;; This function calls:
   385 ;;		Nothing
   386 ;; This function is called by:
   387 ;;		Startup code after reset
   388 ;; This function uses a non-reentrant model
   389 ;;
   390                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   391                           	file	"main.c"
   392                           	line	92
   393                           global __pmaintext
   394                           __pmaintext:	;psect for function _main
   395  009C                     psect	maintext
   396                           	file	"main.c"
   397                           	line	92
   398                           	global	__size_of_main
   399                           	__size_of_main	equ	__end_of_main-_main
   400  0054                     	
   401                           _main:	
   402  009C                     ;incstack = 0
   403                           	opt	stack 7
   404                           ; Regs used in _main: [wreg+status,2+status,0]
   405                           	line	97
   406                           	
   407                           l789:	
   408  009C                     ;main.c: 97:     TRISA0 = 1;
   409                           	bsf	status, 5	;RP0=1, select bank1
   410  009C  1683               	bsf	(1064/8)^080h,(1064)&7	;volatile
   411  009D  1405               	line	98
   412                           ;main.c: 98:     TRISA1 = 0;
   413                           	bcf	(1065/8)^080h,(1065)&7	;volatile
   414  009E  1085               	line	99
   415                           ;main.c: 99:     TRISA2 = 0;
   416                           	bcf	(1066/8)^080h,(1066)&7	;volatile
   417  009F  1105               	line	100
   418                           ;main.c: 100:     TRISA3 = 1;
   419                           	bsf	(1067/8)^080h,(1067)&7	;volatile
   420  00A0  1585               	line	101
   421                           ;main.c: 101:     TRISA4 = 1;
   422                           	bsf	(1068/8)^080h,(1068)&7	;volatile
   423  00A1  1605               	line	103
   424                           	
   425                           l791:	
   426  00A2                     ;main.c: 103:     PORTA = 0b00000000;
   427                           	bcf	status, 5	;RP0=0, select bank0
   428  00A2  1283               	clrf	(5)	;volatile
   429  00A3  0185               	line	105
   430                           ;main.c: 105:     TRISB = 0b00000000;
   431                           	bsf	status, 5	;RP0=1, select bank1
   432  00A4  1683               	clrf	(134)^080h	;volatile
   433  00A5  0186               	line	106
   434                           	
   435                           l793:	
   436  00A6                     ;main.c: 106:     PORTB = 0b00000010;
   437                           	movlw	low(02h)
   438  00A6  3002               	bcf	status, 5	;RP0=0, select bank0
   439  00A7  1283               	movwf	(6)	;volatile
   440  00A8  0086               	line	128
   441                           	
   442                           l795:	
   443  00A9                     ;main.c: 128:     T0CS = 1;
   444                           	bsf	status, 5	;RP0=1, select bank1
   445  00A9  1683               	bsf	(1037/8)^080h,(1037)&7	;volatile
   446  00AA  1681               	line	129
   447                           	
   448                           l797:	
   449  00AB                     ;main.c: 129:     T0SE = 1;
   450                           	bsf	(1036/8)^080h,(1036)&7	;volatile
   451  00AB  1601               	line	130
   452                           	
   453                           l799:	
   454  00AC                     ;main.c: 130:     GIE = 1;
   455                           	bsf	(95/8),(95)&7	;volatile
   456  00AC  178B               	line	131
   457                           	
   458                           l801:	
   459  00AD                     ;main.c: 131:     T0IE = 1;
   460                           	bsf	(93/8),(93)&7	;volatile
   461  00AD  168B               	line	132
   462                           	
   463                           l803:	
   464  00AE                     ;main.c: 132:     PSA = 1;
   465                           	bsf	(1035/8)^080h,(1035)&7	;volatile
   466  00AE  1581               	line	133
   467                           	
   468                           l805:	
   469  00AF                     ;main.c: 133:     T0IF = 0;
   470                           	bcf	(90/8),(90)&7	;volatile
   471  00AF  110B               	line	134
   472                           	
   473                           l807:	
   474  00B0                     ;main.c: 134:     TMR0 = 255;
   475                           	movlw	low(0FFh)
   476  00B0  30FF               	bcf	status, 5	;RP0=0, select bank0
   477  00B1  1283               	movwf	(1)	;volatile
   478  00B2  0081               	line	137
   479                           ;main.c: 137:     ps2DataState = 0;
   480                           	clrf	(_ps2DataState)
   481  00B3  01A0               	line	138
   482                           ;main.c: 138:     ps2DataBitsCount = 0;
   483                           	clrf	(_ps2DataBitsCount)
   484  00B4  019E               	line	139
   485                           ;main.c: 139:     ps2Data = 0;
   486                           	clrf	(_ps2Data)
   487  00B5  019F               	line	140
   488                           ;main.c: 140:     pa = 0;
   489                           	clrf	(_pa)
   490  00B6  0198               	clrf	(_pa+1)
   491  00B7  0199               	goto	l809
   492  00B8  28B9               	line	142
   493                           ;main.c: 142:     while(1)
   494                           	
   495                           l78:	
   496  00B9                     	line	144
   497                           	
   498                           l809:	
   499  00B9                     ;main.c: 143:     {;main.c: 144:         if ( ps2DataState == 3 ) {
   500                           		movlw	3
   501  00B9  3003               	xorwf	((_ps2DataState)),w
   502  00BA  0620               	btfss	status,2
   503  00BB  1D03               	goto	u311
   504  00BC  28BE               	goto	u310
   505  00BD  28BF               u311:
   506  00BE                     	goto	l825
   507  00BE  28E2               u310:
   508  00BF                     	line	147
   509                           	
   510                           l811:	
   511  00BF                     ;main.c: 147:             if ( ps2DataCount > 1 ) {
   512                           	movf	(_ps2DataCount),w
   513  00BF  081D               	xorlw	80h
   514  00C0  3A80               	addlw	-((02h)^80h)
   515  00C1  3E7E               	skipc
   516  00C2  1C03               	goto	u321
   517  00C3  28C5               	goto	u320
   518  00C4  28C6               u321:
   519  00C5                     	goto	l819
   520  00C5  28D1               u320:
   521  00C6                     	goto	l817
   522  00C6  28CD               	line	149
   523                           	
   524                           l813:	
   525  00C7                     ;main.c: 149:                 if ( ps2DataArray[0] == 0xF0 && ps2DataArray[1] == 0x1a ) 
                                 {
   526                           	goto	l817
   527  00C7  28CD               	line	150
   528                           	
   529                           l815:	
   530  00C8                     ;main.c: 150:                    pa = 1;
   531                           	movlw	01h
   532  00C8  3001               	movwf	(_pa)
   533  00C9  0098               	movlw	0
   534  00CA  3000               	movwf	((_pa))+1
   535  00CB  0099               	line	151
   536                           ;main.c: 151:                 } else {
   537                           	goto	l83
   538  00CC  28DF               	
   539                           l81:	
   540  00CD                     	line	152
   541                           	
   542                           l817:	
   543  00CD                     ;main.c: 152:                    pa = 0;
   544                           	clrf	(_pa)
   545  00CD  0198               	clrf	(_pa+1)
   546  00CE  0199               	goto	l83
   547  00CF  28DF               	line	153
   548                           ;main.c: 153:                 }
   549                           	
   550                           l82:	
   551  00D0                     	line	155
   552                           ;main.c: 155:             } else {
   553                           	goto	l83
   554  00D0  28DF               	
   555                           l80:	
   556  00D1                     	line	157
   557                           	
   558                           l819:	
   559  00D1                     ;main.c: 157:                 if ( ps2DataArray[0] == 0x1a ) {
   560                           		movlw	26
   561  00D1  301A               	xorwf	((_ps2DataArray)),w
   562  00D2  060C               	btfss	status,2
   563  00D3  1D03               	goto	u331
   564  00D4  28D6               	goto	u330
   565  00D5  28D7               u331:
   566  00D6                     	goto	l823
   567  00D6  28DC               u330:
   568  00D7                     	line	158
   569                           	
   570                           l821:	
   571  00D7                     ;main.c: 158:                     pa = 1;
   572                           	movlw	01h
   573  00D7  3001               	movwf	(_pa)
   574  00D8  0098               	movlw	0
   575  00D9  3000               	movwf	((_pa))+1
   576  00DA  0099               	line	159
   577                           ;main.c: 159:                 } else {
   578                           	goto	l83
   579  00DB  28DF               	
   580                           l84:	
   581  00DC                     	line	160
   582                           	
   583                           l823:	
   584  00DC                     ;main.c: 160:                     pa = 0;
   585                           	clrf	(_pa)
   586  00DC  0198               	clrf	(_pa+1)
   587  00DD  0199               	goto	l83
   588  00DE  28DF               	line	161
   589                           ;main.c: 161:                 }
   590                           	
   591                           l85:	
   592  00DF                     	line	163
   593                           ;main.c: 163:             }
   594                           	
   595                           l83:	
   596  00DF                     	line	164
   597                           ;main.c: 164:             ps2DataCount = 0;
   598                           	clrf	(_ps2DataCount)
   599  00DF  019D               	line	165
   600                           ;main.c: 165:             ps2DataState = 0;
   601                           	clrf	(_ps2DataState)
   602  00E0  01A0               	goto	l825
   603  00E1  28E2               	line	166
   604                           ;main.c: 166:         }
   605                           	
   606                           l79:	
   607  00E2                     	line	169
   608                           	
   609                           l825:	
   610  00E2                     ;main.c: 169:         if ( pa ) {
   611                           	movf	((_pa)),w
   612  00E2  0818               iorwf	((_pa+1)),w
   613  00E3  0419               	btfsc	status,2
   614  00E4  1903               	goto	u341
   615  00E5  28E7               	goto	u340
   616  00E6  28E8               u341:
   617  00E7                     	goto	l829
   618  00E7  28EA               u340:
   619  00E8                     	line	170
   620                           	
   621                           l827:	
   622  00E8                     ;main.c: 170:             PORTB = 0b00000000;
   623                           	clrf	(6)	;volatile
   624  00E8  0186               	line	171
   625                           ;main.c: 171:         } else {
   626                           	goto	l809
   627  00E9  28B9               	
   628                           l86:	
   629  00EA                     	line	172
   630                           	
   631                           l829:	
   632  00EA                     ;main.c: 172:             PORTB = 0b00000010;
   633                           	movlw	low(02h)
   634  00EA  3002               	movwf	(6)	;volatile
   635  00EB  0086               	goto	l809
   636  00EC  28B9               	line	173
   637                           ;main.c: 173:         }
   638                           	
   639                           l87:	
   640  00ED                     	goto	l809
   641  00ED  28B9               	line	181
   642                           ;main.c: 181:     }
   643                           	
   644                           l88:	
   645  00EE                     	goto	l809
   646  00EE  28B9               	
   647                           l89:	
   648  00EF                     	line	183
   649                           	
   650                           l90:	
   651  00EF                     	global	start
   652                           	ljmp	start
   653  00EF  280D               	opt stack 0
   654                           GLOBAL	__end_of_main
   655                           	__end_of_main:
   656  00F0                     	signat	_main,89
   657                           	global	_myIsr
   658                           
   659 ;; *************** function _myIsr *****************
   660 ;; Defined at:
   661 ;;		line 47 in file "main.c"
   662 ;; Parameters:    Size  Location     Type
   663 ;;		None
   664 ;; Auto vars:     Size  Location     Type
   665 ;;		None
   666 ;; Return value:  Size  Location     Type
   667 ;;                  1    wreg      void 
   668 ;; Registers used:
   669 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   670 ;; Tracked objects:
   671 ;;		On entry : 0/0
   672 ;;		On exit  : 0/0
   673 ;;		Unchanged: 0/0
   674 ;; Data sizes:     COMMON   BANK0
   675 ;;      Params:         0       0
   676 ;;      Locals:         0       0
   677 ;;      Temps:          0       5
   678 ;;      Totals:         0       5
   679 ;;Total ram usage:        5 bytes
   680 ;; Hardware stack levels used:    1
   681 ;; This function calls:
   682 ;;		Nothing
   683 ;; This function is called by:
   684 ;;		Interrupt level 1
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
   688                           	line	47
   689                           global __ptext1
   690                           __ptext1:	;psect for function _myIsr
   691  0015                     psect	text1
   692                           	file	"main.c"
   693                           	line	47
   694                           	global	__size_of_myIsr
   695                           	__size_of_myIsr	equ	__end_of_myIsr-_myIsr
   696  0087                     	
   697                           _myIsr:	
   698  0015                     ;incstack = 0
   699                           	opt	stack 7
   700                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0]
   701                           psect	intentry,class=CODE,delta=2
   702                           global __pintentry
   703                           __pintentry:
   704  0004                     global interrupt_function
   705                           interrupt_function:
   706  0004                     	global saved_w
   707                           	saved_w	set	btemp+0
   708  004E                     	movwf	saved_w
   709  0004  00CE               	swapf	status,w
   710  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
   711  0006  1283               	movwf	(??_myIsr+2)
   712  0007  00A3               	movf	fsr0,w
   713  0008  0804               	movwf	(??_myIsr+3)
   714  0009  00A4               	movf	pclath,w
   715  000A  080A               	movwf	(??_myIsr+4)
   716  000B  00A5               	ljmp	_myIsr
   717  000C  2815               psect	text1
   718                           	line	49
   719                           	
   720                           i1l747:	
   721  0015                     ;main.c: 49:     if(T0IE && T0IF){
   722                           	btfss	(93/8),(93)&7	;volatile
   723  0015  1E8B               	goto	u18_21
   724  0016  2818               	goto	u18_20
   725  0017  2819               u18_21:
   726  0018                     	goto	i1l55
   727  0018  2892               u18_20:
   728  0019                     	
   729                           i1l749:	
   730  0019                     	btfss	(90/8),(90)&7	;volatile
   731  0019  1D0B               	goto	u19_21
   732  001A  281C               	goto	u19_20
   733  001B  281D               u19_21:
   734  001C                     	goto	i1l55
   735  001C  2892               u19_20:
   736  001D                     	line	51
   737                           	
   738                           i1l751:	
   739  001D                     ;main.c: 51:         T0IF=0;
   740                           	bcf	(90/8),(90)&7	;volatile
   741  001D  110B               	line	52
   742                           	
   743                           i1l753:	
   744  001E                     ;main.c: 52:         TMR0 = 255;
   745                           	movlw	low(0FFh)
   746  001E  30FF               	movwf	(1)	;volatile
   747  001F  0081               	line	54
   748                           	
   749                           i1l755:	
   750  0020                     ;main.c: 54:         if ( ps2DataState == 0 || ps2DataState == 1 ) {
   751                           	movf	((_ps2DataState)),w
   752  0020  0820               	btfsc	status,2
   753  0021  1903               	goto	u20_21
   754  0022  2824               	goto	u20_20
   755  0023  2825               u20_21:
   756  0024                     	goto	i1l58
   757  0024  282A               u20_20:
   758  0025                     	
   759                           i1l757:	
   760  0025                     		decf	((_ps2DataState)),w
   761  0025  0320               	btfss	status,2
   762  0026  1D03               	goto	u21_21
   763  0027  2829               	goto	u21_20
   764  0028  282A               u21_21:
   765  0029                     	goto	i1l765
   766  0029  283A               u21_20:
   767  002A                     	
   768                           i1l58:	
   769  002A                     	line	55
   770                           ;main.c: 55:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
   771                           	btfsc	(5),4	;volatile
   772  002A  1A05               	goto	u22_21
   773  002B  282D               	goto	u22_20
   774  002C  282E               u22_21:
   775  002D                     	goto	i1l55
   776  002D  2892               u22_20:
   777  002E                     	
   778                           i1l759:	
   779  002E                     	btfsc	(5),3	;volatile
   780  002E  1985               	goto	u23_21
   781  002F  2831               	goto	u23_20
   782  0030  2832               u23_21:
   783  0031                     	goto	i1l55
   784  0031  2892               u23_20:
   785  0032                     	line	56
   786                           	
   787                           i1l761:	
   788  0032                     ;main.c: 56:                 ps2DataBitsCount = 0;
   789                           	clrf	(_ps2DataBitsCount)
   790  0032  019E               	line	57
   791                           ;main.c: 57:                 ps2Data = 0;
   792                           	clrf	(_ps2Data)
   793  0033  019F               	line	58
   794                           	
   795                           i1l763:	
   796  0034                     ;main.c: 58:                 ps2DataState = 2;
   797                           	movlw	low(02h)
   798  0034  3002               	movwf	(??_myIsr+0)+0
   799  0035  00A1               	movf	(??_myIsr+0)+0,w
   800  0036  0821               	movwf	(_ps2DataState)
   801  0037  00A0               	goto	i1l55
   802  0038  2892               	line	59
   803                           ;main.c: 59:             }
   804                           	
   805                           i1l59:	
   806  0039                     	line	60
   807                           ;main.c: 60:         } else if ( ps2DataState == 2 ) {
   808                           	goto	i1l55
   809  0039  2892               	
   810                           i1l56:	
   811  003A                     	
   812                           i1l765:	
   813  003A                     		movlw	2
   814  003A  3002               	xorwf	((_ps2DataState)),w
   815  003B  0620               	btfss	status,2
   816  003C  1D03               	goto	u24_21
   817  003D  283F               	goto	u24_20
   818  003E  2840               u24_21:
   819  003F                     	goto	i1l55
   820  003F  2892               u24_20:
   821  0040                     	line	61
   822                           	
   823                           i1l767:	
   824  0040                     ;main.c: 61:             if ( ps2DataBitsCount < 8 ) {
   825                           	movf	(_ps2DataBitsCount),w
   826  0040  081E               	xorlw	80h
   827  0041  3A80               	addlw	-((08h)^80h)
   828  0042  3E78               	skipnc
   829  0043  1803               	goto	u25_21
   830  0044  2846               	goto	u25_20
   831  0045  2847               u25_21:
   832  0046                     	goto	i1l773
   833  0046  285D               u25_20:
   834  0047                     	line	62
   835                           	
   836                           i1l769:	
   837  0047                     ;main.c: 62:                 if ( PORTAbits.RA3 ) {
   838                           	btfss	(5),3	;volatile
   839  0047  1D85               	goto	u26_21
   840  0048  284A               	goto	u26_20
   841  0049  284B               u26_21:
   842  004A                     	goto	i1l63
   843  004A  2858               u26_20:
   844  004B                     	line	63
   845                           	
   846                           i1l771:	
   847  004B                     ;main.c: 63:                     ps2Data |= ( 1 << ps2DataBitsCount );
   848                           	movlw	low(01h)
   849  004B  3001               	movwf	(??_myIsr+0)+0
   850  004C  00A1               	incf	(_ps2DataBitsCount),w
   851  004D  0A1E               	goto	u27_24
   852  004E  2851               u27_25:
   853  004F                     	clrc
   854  004F  1003               	rlf	(??_myIsr+0)+0,f
   855  0050  0DA1               u27_24:
   856  0051                     	addlw	-1
   857  0051  3EFF               	skipz
   858  0052  1D03               	goto	u27_25
   859  0053  284F               	movf	0+(??_myIsr+0)+0,w
   860  0054  0821               	movwf	(??_myIsr+1)+0
   861  0055  00A2               	movf	(??_myIsr+1)+0,w
   862  0056  0822               	iorwf	(_ps2Data),f
   863  0057  049F               	line	64
   864                           ;main.c: 64:                 }
   865                           	
   866                           i1l63:	
   867  0058                     	line	65
   868                           ;main.c: 65:                 ps2DataBitsCount++;
   869                           	movlw	low(01h)
   870  0058  3001               	movwf	(??_myIsr+0)+0
   871  0059  00A1               	movf	(??_myIsr+0)+0,w
   872  005A  0821               	addwf	(_ps2DataBitsCount),f
   873  005B  079E               	line	66
   874                           ;main.c: 66:             } else if ( ps2DataBitsCount == 8 ) {
   875                           	goto	i1l55
   876  005C  2892               	
   877                           i1l62:	
   878  005D                     	
   879                           i1l773:	
   880  005D                     		movlw	8
   881  005D  3008               	xorwf	((_ps2DataBitsCount)),w
   882  005E  061E               	btfss	status,2
   883  005F  1D03               	goto	u28_21
   884  0060  2862               	goto	u28_20
   885  0061  2863               u28_21:
   886  0062                     	goto	i1l777
   887  0062  2868               u28_20:
   888  0063                     	line	67
   889                           	
   890                           i1l775:	
   891  0063                     ;main.c: 67:                 ps2DataBitsCount++;
   892                           	movlw	low(01h)
   893  0063  3001               	movwf	(??_myIsr+0)+0
   894  0064  00A1               	movf	(??_myIsr+0)+0,w
   895  0065  0821               	addwf	(_ps2DataBitsCount),f
   896  0066  079E               	line	68
   897                           ;main.c: 68:             } else if ( ps2DataBitsCount == 9 ) {
   898                           	goto	i1l55
   899  0067  2892               	
   900                           i1l65:	
   901  0068                     	
   902                           i1l777:	
   903  0068                     		movlw	9
   904  0068  3009               	xorwf	((_ps2DataBitsCount)),w
   905  0069  061E               	btfss	status,2
   906  006A  1D03               	goto	u29_21
   907  006B  286D               	goto	u29_20
   908  006C  286E               u29_21:
   909  006D                     	goto	i1l55
   910  006D  2892               u29_20:
   911  006E                     	line	69
   912                           	
   913                           i1l779:	
   914  006E                     ;main.c: 69:                 if ( ps2DataCount < 8 ) {
   915                           	movf	(_ps2DataCount),w
   916  006E  081D               	xorlw	80h
   917  006F  3A80               	addlw	-((08h)^80h)
   918  0070  3E78               	skipnc
   919  0071  1803               	goto	u30_21
   920  0072  2874               	goto	u30_20
   921  0073  2875               u30_21:
   922  0074                     	goto	i1l787
   923  0074  2886               u30_20:
   924  0075                     	line	70
   925                           	
   926                           i1l781:	
   927  0075                     ;main.c: 70:                     ps2DataArray[ps2DataCount] = ps2Data;
   928                           	movf	(_ps2Data),w
   929  0075  081F               	movwf	(??_myIsr+0)+0
   930  0076  00A1               	movf	(_ps2DataCount),w
   931  0077  081D               	addlw	low(_ps2DataArray|((0x0)<<8))&0ffh
   932  0078  3E0C               	movwf	fsr0
   933  0079  0084               	movf	(??_myIsr+0)+0,w
   934  007A  0821               	bcf	status, 7	;select IRP bank0
   935  007B  1383               	movwf	indf
   936  007C  0080               	line	71
   937                           	
   938                           i1l783:	
   939  007D                     ;main.c: 71:                     ps2DataCount++;
   940                           	movlw	low(01h)
   941  007D  3001               	movwf	(??_myIsr+0)+0
   942  007E  00A1               	movf	(??_myIsr+0)+0,w
   943  007F  0821               	addwf	(_ps2DataCount),f
   944  0080  079D               	goto	i1l787
   945  0081  2886               	line	72
   946                           ;main.c: 72:                 }
   947                           	
   948                           i1l68:	
   949  0082                     	line	73
   950                           ;main.c: 73:                 if ( ps2Data == 0xF0 ) {
   951                           	goto	i1l787
   952  0082  2886               	line	74
   953                           	
   954                           i1l785:	
   955  0083                     ;main.c: 74:                     ps2DataState = 1;
   956                           	clrf	(_ps2DataState)
   957  0083  01A0               	incf	(_ps2DataState),f
   958  0084  0AA0               	line	75
   959                           ;main.c: 75:                 } else {
   960                           	goto	i1l55
   961  0085  2892               	
   962                           i1l69:	
   963  0086                     	line	76
   964                           	
   965                           i1l787:	
   966  0086                     ;main.c: 76:                     ps2DataState = 3;
   967                           	movlw	low(03h)
   968  0086  3003               	movwf	(??_myIsr+0)+0
   969  0087  00A1               	movf	(??_myIsr+0)+0,w
   970  0088  0821               	movwf	(_ps2DataState)
   971  0089  00A0               	goto	i1l55
   972  008A  2892               	line	77
   973                           ;main.c: 77:                 }
   974                           	
   975                           i1l70:	
   976  008B                     	line	78
   977                           ;main.c: 78:             } else {
   978                           	goto	i1l55
   979  008B  2892               	
   980                           i1l67:	
   981  008C                     	goto	i1l55
   982  008C  2892               	line	80
   983                           ;main.c: 80:             }
   984                           	
   985                           i1l71:	
   986  008D                     	goto	i1l55
   987  008D  2892               	
   988                           i1l66:	
   989  008E                     	goto	i1l55
   990  008E  2892               	
   991                           i1l64:	
   992  008F                     	line	81
   993                           ;main.c: 81:         } else {
   994                           	goto	i1l55
   995  008F  2892               	
   996                           i1l61:	
   997  0090                     	goto	i1l55
   998  0090  2892               	line	84
   999                           ;main.c: 84:         }
  1000                           	
  1001                           i1l72:	
  1002  0091                     	goto	i1l55
  1003  0091  2892               	
  1004                           i1l60:	
  1005  0092                     	line	85
  1006                           ;main.c: 85:     }
  1007                           	
  1008                           i1l55:	
  1009  0092                     	line	86
  1010                           ;main.c: 86:     GIE = 1;
  1011                           	bsf	(95/8),(95)&7	;volatile
  1012  0092  178B               	line	87
  1013                           	
  1014                           i1l73:	
  1015  0093                     	movf	(??_myIsr+4),w
  1016  0093  0825               	movwf	pclath
  1017  0094  008A               	movf	(??_myIsr+3),w
  1018  0095  0824               	movwf	fsr0
  1019  0096  0084               	swapf	(??_myIsr+2)^00h,w
  1020  0097  0E23               	movwf	status
  1021  0098  0083               	swapf	saved_w,f
  1022  0099  0ECE               	swapf	saved_w,w
  1023  009A  0E4E               	retfie
  1024  009B  0009               	opt stack 0
  1025                           GLOBAL	__end_of_myIsr
  1026                           	__end_of_myIsr:
  1027  009C                     	signat	_myIsr,89
  1028                           global	___latbits
  1029                           ___latbits	equ	0
  1030  0000                     	global	btemp
  1031                           	btemp set 04Eh
  1032  004E                     
  1033                           	DABS	1,78,2	;btemp
  1034                           	global	wtemp0
  1035                           	wtemp0 set btemp+0
  1036  004E                     	end


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         21
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66      5      26

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _myIsr                                                5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              40      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               42      5      1A       3       39.4%
ABS                  0      0      1A       4        0.0%
BITBANK0            42      0       0       5        0.0%
DATA                 0      0      1A       6        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 06 14:14:26 2018

                      _i 001C                       l80 00D1                       l81 00CD  
                     l90 00EF                       l82 00D0                       l83 00DF  
                     l84 00DC                       l85 00DF                       l86 00EA  
                     l78 00B9                       l87 00ED                       l79 00E2  
                     l88 00EE                       l89 00EF                       _pa 0018  
                     fsr 0004                      l801 00AD                      l811 00BF  
                    l803 00AE                      l821 00D7                      l813 00C7  
                    l805 00AF                      l823 00DC                      l815 00C8  
                    l807 00B0                      l817 00CD                      l825 00E2  
                    l809 00B9                      l827 00E8                      l819 00D1  
                    l829 00EA                      l791 00A2                      l793 00A6  
                    l795 00A9                      l797 00AB                      l789 009C  
                    l799 00AC                      _GIE 005F                      u310 00BF  
                    u311 00BE                      u320 00C6                      u321 00C5  
                    u330 00D7                      u331 00D6                      u340 00E8  
                    u341 00E7                      _PSA 040B                      fsr0 0004  
                    indf 0000                     _T0IE 005D                     _T0IF 005A  
                   _T0CS 040D                     _T0SE 040C                     i1l60 0092  
                   i1l61 0090                     i1l70 008B                     i1l62 005D  
                   i1l71 008D                     i1l63 0058                     i1l55 0092  
                   i1l72 0091                     i1l64 008F                     i1l56 003A  
                   i1l73 0093                     i1l65 0068                     i1l66 008E  
                   i1l58 002A                     i1l67 008C                     i1l59 0039  
                   i1l68 0082                     i1l69 0086                     _TMR0 0001  
                   _main 009C                     btemp 004E                     start 000D  
                  ?_main 0021                    i1l751 001D                    i1l761 0032  
                  i1l753 001E                    i1l771 004B                    i1l763 0034  
                  i1l755 0020                    i1l747 0015                    i1l781 0075  
                  i1l773 005D                    i1l765 003A                    i1l757 0025  
                  i1l749 0019                    i1l783 007D                    i1l775 0063  
                  i1l767 0040                    i1l759 002E                    i1l785 0083  
                  i1l777 0068                    i1l769 0047                    i1l787 0086  
                  i1l779 006E                    u20_20 0025                    u20_21 0024  
                  u21_20 002A                    u21_21 0029                    u30_20 0075  
                  u22_20 002E                    u30_21 0074                    u22_21 002D  
                  u23_20 0032                    u23_21 0031                    u24_20 0040  
                  u24_21 003F                    u25_20 0047                    u25_21 0046  
                  u26_20 004B                    u18_20 0019                    u26_21 004A  
                  u18_21 0018                    u19_20 001D                    u19_21 001C  
                  _PORTA 0005                    _PORTB 0006                    u27_24 0051  
                  u27_25 004F                    u28_20 0063                    u28_21 0062  
                  u29_20 006E                    u29_21 006D                    _TRISB 0086  
                  _delay 0014                    _myIsr 0015                    pclath 000A  
                  status 0003                    wtemp0 004E          __initialization 000E  
           __end_of_main 00F0                   ??_main 0000                   ?_myIsr 0021  
                 _TRISA0 0428                   _TRISA1 0429                   _TRISA2 042A  
                 _TRISA3 042B                   _TRISA4 042C                   saved_w 004E  
__end_of__initialization 0013           __pcstackCOMMON 0000            __end_of_myIsr 009C  
                ??_myIsr 0021             _ps2DataArray 000C             _ps2DataCount 001D  
           _ps2DataState 0020               __pbssBANK0 000C               __pmaintext 009C  
             __pintentry 0004                  _ps2Data 001F                  __ptext1 0015  
                _keyCode 001A                  clrloop0 00F1     end_of_initialization 0013  
              _PORTAbits 0005      start_initialization 000E                ___latbits 0000  
          __pcstackBANK0 0021           __size_of_myIsr 0087        interrupt_function 0004  
              clear_ram0 00F0            __size_of_main 0054         _ps2DataBitsCount 001E  
               intlevel1 0000  
