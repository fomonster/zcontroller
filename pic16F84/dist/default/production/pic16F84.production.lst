

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Aug 24 21:41:25 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F84A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   102                           EEDATA equ 08h ;# 
   103  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   104                           EEADR equ 09h ;# 
   105  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   106                           PCLATH equ 0Ah ;# 
   107  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   108                           INTCON equ 0Bh ;# 
   109  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   110                           OPTION_REG equ 081h ;# 
   111  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   112                           TRISA equ 085h ;# 
   113  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   114                           TRISB equ 086h ;# 
   115  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   116                           EECON1 equ 088h ;# 
   117  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   118                           EECON2 equ 089h ;# 
   119  0089                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   120                           INDF equ 00h ;# 
   121  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   122                           TMR0 equ 01h ;# 
   123  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   124                           PCL equ 02h ;# 
   125  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   126                           STATUS equ 03h ;# 
   127  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   128                           FSR equ 04h ;# 
   129  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   130                           PORTA equ 05h ;# 
   131  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   132                           PORTB equ 06h ;# 
   133  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   134                           EEDATA equ 08h ;# 
   135  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   136                           EEADR equ 09h ;# 
   137  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   138                           PCLATH equ 0Ah ;# 
   139  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   140                           INTCON equ 0Bh ;# 
   141  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   142                           OPTION_REG equ 081h ;# 
   143  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   144                           TRISA equ 085h ;# 
   145  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   146                           TRISB equ 086h ;# 
   147  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   148                           EECON1 equ 088h ;# 
   149  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   150                           EECON2 equ 089h ;# 
   151  0089                     	FNCALL	_main,_keyDown
   152                           	FNCALL	_main,_keyUp
   153                           	FNCALL	_main,_sendDataToAltera
   154                           	FNCALL	_sendDataToAltera,_myDelay
   155                           	FNCALL	_keyUp,_resetPort
   156                           	FNCALL	_keyDown,_resetPort
   157                           	FNCALL	_keyDown,_setPort
   158                           	FNROOT	_main
   159                           	FNCALL	intlevel1,_myIsr
   160                           	global	intlevel1
   161                           	FNROOT	intlevel1
   162                           	global	_outPorts
   163                           psect	idataBANK0,class=CODE,space=0,delta=2,noexec
   164                           global __pidataBANK0
   165                           __pidataBANK0:
   166  0345                     	file	"main.c"
   167                           	line	41
   168                           
   169                           ;initializer for _outPorts
   170                           	retlw	low(0)
   171  0345  3400               	retlw	low(0)
   172  0346  3400               	retlw	low(0)
   173  0347  3400               	retlw	low(0)
   174  0348  3400               	retlw	low(0)
   175  0349  3400               	retlw	low(0)
   176  034A  3400               	retlw	low(0)
   177  034B  3400               	retlw	low(0)
   178  034C  3400               	retlw	01h
   179  034D  3401               	retlw	02h
   180  034E  3402               	retlw	03h
   181  034F  3403               	line	66
   182                           
   183                           ;initializer for _mouseY
   184                           	retlw	06Eh
   185  0350  346E               	line	65
   186                           
   187                           ;initializer for _mouseX
   188                           	retlw	0DCh
   189  0351  34DC               	global	_codeToMatrix
   190                           psect	strings,class=STRING,delta=2,noexec
   191                           global __pstrings
   192                           __pstrings:
   193  0109                     stringtab:
   194  0109                     	global    __stringtab
   195                           __stringtab:
   196  0109                     ;	String table - string pointers are 1 byte each
   197                           stringcode:stringdir:
   198  0109                     movlw high(stringdir)
      + 0109                     stringdir:	
   199  0109  3001               movwf pclath
   200  010A  008A               movf fsr,w
   201  010B  0804               incf fsr
   202  010C  0A84               	addwf pc
   203  010D  0782               	global __stringbase
   204                           __stringbase:
   205  010E                     	retlw	0
   206  010E  3400               psect	strings
   207                           	global    __end_of__stringtab
   208                           __end_of__stringtab:
   209  010F                     	file	"./ps2tozxtable.h"
   210                           	line	47
   211                           _codeToMatrix:
   212  010F                     	retlw	0FFh
   213  010F  34FF               	retlw	0FFh
   214  0110  34FF               	retlw	0FFh
   215  0111  34FF               	retlw	0FFh
   216  0112  34FF               	retlw	0FFh
   217  0113  34FF               	retlw	0FFh
   218  0114  34FF               	retlw	0FFh
   219  0115  34FF               	retlw	0FFh
   220  0116  34FF               	retlw	0FFh
   221  0117  34FF               	retlw	0FFh
   222  0118  34FF               	retlw	0FFh
   223  0119  34FF               	retlw	0FFh
   224  011A  34FF               	retlw	0FFh
   225  011B  34FF               	retlw	0FFh
   226  011C  34FF               	retlw	09Ch
   227  011D  349C               	retlw	0FFh
   228  011E  34FF               	retlw	0FFh
   229  011F  34FF               	retlw	0FFh
   230  0120  34FF               	retlw	0FFh
   231  0121  34FF               	retlw	0FFh
   232  0122  34FF               	retlw	0FFh
   233  0123  34FF               	retlw	02h
   234  0124  3402               	retlw	03h
   235  0125  3403               	retlw	0FFh
   236  0126  34FF               	retlw	0FFh
   237  0127  34FF               	retlw	0FFh
   238  0128  34FF               	retlw	08h
   239  0129  3408               	retlw	09h
   240  012A  3409               	retlw	01h
   241  012B  3401               	retlw	0Ah
   242  012C  340A               	retlw	0Bh
   243  012D  340B               	retlw	044h
   244  012E  3444               	retlw	0FFh
   245  012F  34FF               	retlw	018h
   246  0130  3418               	retlw	010h
   247  0131  3410               	retlw	011h
   248  0132  3411               	retlw	012h
   249  0133  3412               	retlw	01Bh
   250  0134  341B               	retlw	013h
   251  0135  3413               	retlw	0FFh
   252  0136  34FF               	retlw	05Ch
   253  0137  345C               	retlw	07h
   254  0138  3407               	retlw	020h
   255  0139  3420               	retlw	019h
   256  013A  3419               	retlw	022h
   257  013B  3422               	retlw	01Ah
   258  013C  341A               	retlw	023h
   259  013D  3423               	retlw	063h
   260  013E  3463               	retlw	064h
   261  013F  3464               	retlw	01Fh
   262  0140  341F               	retlw	027h
   263  0141  3427               	retlw	026h
   264  0142  3426               	retlw	021h
   265  0143  3421               	retlw	025h
   266  0144  3425               	retlw	024h
   267  0145  3424               	retlw	054h
   268  0146  3454               	retlw	0A0h
   269  0147  34A0               	retlw	06h
   270  0148  3406               	retlw	017h
   271  0149  3417               	retlw	01Eh
   272  014A  341E               	retlw	01Dh
   273  014B  341D               	retlw	01Ch
   274  014C  341C               	retlw	014h
   275  014D  3414               	retlw	0FFh
   276  014E  34FF               	retlw	0FFh
   277  014F  34FF               	retlw	09Fh
   278  0150  349F               	retlw	016h
   279  0151  3416               	retlw	015h
   280  0152  3415               	retlw	0Dh
   281  0153  340D               	retlw	04h
   282  0154  3404               	retlw	0Ch
   283  0155  340C               	retlw	0FFh
   284  0156  34FF               	retlw	0FFh
   285  0157  34FF               	retlw	097h
   286  0158  3497               	retlw	0A0h
   287  0159  34A0               	retlw	0Eh
   288  015A  340E               	retlw	08Dh
   289  015B  348D               	retlw	05h
   290  015C  3405               	retlw	09Eh
   291  015D  349E               	retlw	083h
   292  015E  3483               	retlw	08Bh
   293  015F  348B               	retlw	093h
   294  0160  3493               	retlw	09Ch
   295  0161  349C               	retlw	09Bh
   296  0162  349B               	retlw	0E5h
   297  0163  34E5               	retlw	08Eh
   298  0164  348E               	retlw	0A3h
   299  0165  34A3               	retlw	0A6h
   300  0166  34A6               	retlw	04Bh
   301  0167  344B               	retlw	0FFh
   302  0168  34FF               	retlw	06h
   303  0169  3406               	retlw	0DDh
   304  016A  34DD               	retlw	0A4h
   305  016B  34A4               	retlw	0FFh
   306  016C  34FF               	retlw	0A7h
   307  016D  34A7               	retlw	094h
   308  016E  3494               	retlw	08Ch
   309  016F  348C               	retlw	084h
   310  0170  3484               	retlw	096h
   311  0171  3496               	retlw	090h
   312  0172  3490               	retlw	0FFh
   313  0173  34FF               	retlw	0FFh
   314  0174  34FF               	retlw	044h
   315  0175  3444               	retlw	088h
   316  0176  3488               	retlw	085h
   317  0177  3485               	retlw	03h
   318  0178  3403               	retlw	09Ah
   319  0179  349A               	retlw	01Bh
   320  017A  341B               	retlw	01Ch
   321  017B  341C               	retlw	0A2h
   322  017C  34A2               	retlw	098h
   323  017D  3498               	retlw	0FFh
   324  017E  34FF               	retlw	04h
   325  017F  3404               	retlw	097h
   326  0180  3497               	retlw	0Bh
   327  0181  340B               	retlw	023h
   328  0182  3423               	retlw	024h
   329  0183  3424               	retlw	014h
   330  0184  3414               	retlw	043h
   331  0185  3443               	retlw	0FFh
   332  0186  34FF               	retlw	0FFh
   333  0187  34FF               	retlw	096h
   334  0188  3496               	retlw	013h
   335  0189  3413               	retlw	09Eh
   336  018A  349E               	retlw	0A7h
   337  018B  34A7               	retlw	0Ch
   338  018C  340C               	retlw	0FFh
   339  018D  34FF               	retlw	0FFh
   340  018E  34FF               	global __end_of_codeToMatrix
   341                           __end_of_codeToMatrix:
   342  018F                     	global	_replaceOnShiftKeyDown
   343                           psect	strings
   344                           	file	"./ps2tozxtable.h"
   345                           	line	4
   346                           _replaceOnShiftKeyDown:
   347  018F                     	retlw	016h
   348  018F  3416               	retlw	04Fh
   349  0190  344F               	retlw	01Eh
   350  0191  341E               	retlw	050h
   351  0192  3450               	retlw	026h
   352  0193  3426               	retlw	051h
   353  0194  3451               	retlw	025h
   354  0195  3425               	retlw	053h
   355  0196  3453               	retlw	02Eh
   356  0197  342E               	retlw	056h
   357  0198  3456               	retlw	036h
   358  0199  3436               	retlw	057h
   359  019A  3457               	retlw	03Dh
   360  019B  343D               	retlw	05Ch
   361  019C  345C               	retlw	03Eh
   362  019D  343E               	retlw	05Eh
   363  019E  345E               	retlw	046h
   364  019F  3446               	retlw	05Fh
   365  01A0  345F               	retlw	045h
   366  01A1  3445               	retlw	060h
   367  01A2  3460               	retlw	04Eh
   368  01A3  344E               	retlw	061h
   369  01A4  3461               	retlw	055h
   370  01A5  3455               	retlw	062h
   371  01A6  3462               	retlw	05Dh
   372  01A7  345D               	retlw	063h
   373  01A8  3463               	retlw	04Ch
   374  01A9  344C               	retlw	067h
   375  01AA  3467               	retlw	052h
   376  01AB  3452               	retlw	068h
   377  01AC  3468               	retlw	041h
   378  01AD  3441               	retlw	06Ah
   379  01AE  346A               	retlw	049h
   380  01AF  3449               	retlw	06Dh
   381  01B0  346D               	retlw	04Ah
   382  01B1  344A               	retlw	06Eh
   383  01B2  346E               	global __end_of_replaceOnShiftKeyDown
   384                           __end_of_replaceOnShiftKeyDown:
   385  01B3                     	global	_replaceTwoBytesCodes
   386                           psect	strings
   387                           	file	"./ps2tozxtable.h"
   388                           	line	26
   389                           _replaceTwoBytesCodes:
   390  01B3                     	retlw	014h
   391  01B3  3414               	retlw	013h
   392  01B4  3413               	retlw	070h
   393  01B5  3470               	retlw	017h
   394  01B6  3417               	retlw	06Ch
   395  01B7  346C               	retlw	018h
   396  01B8  3418               	retlw	07Dh
   397  01B9  347D               	retlw	019h
   398  01BA  3419               	retlw	071h
   399  01BB  3471               	retlw	01Fh
   400  01BC  341F               	retlw	069h
   401  01BD  3469               	retlw	020h
   402  01BE  3420               	retlw	07Ah
   403  01BF  347A               	retlw	027h
   404  01C0  3427               	retlw	075h
   405  01C1  3475               	retlw	028h
   406  01C2  3428               	retlw	06Bh
   407  01C3  346B               	retlw	02Fh
   408  01C4  342F               	retlw	072h
   409  01C5  3472               	retlw	030h
   410  01C6  3430               	retlw	074h
   411  01C7  3474               	retlw	037h
   412  01C8  3437               	retlw	04Ah
   413  01C9  344A               	retlw	038h
   414  01CA  3438               	retlw	05Ah
   415  01CB  345A               	retlw	039h
   416  01CC  3439               	global __end_of_replaceTwoBytesCodes
   417                           __end_of_replaceTwoBytesCodes:
   418  01CD                     	global	_codeToMatrix
   419                           	global	_replaceOnShiftKeyDown
   420                           	global	_replaceTwoBytesCodes
   421                           	global	_replaced
   422                           	global	_ctrl
   423                           	global	_shift
   424                           	global	_i
   425                           	global	_ps2NeedEncode
   426                           	global	_ps2Up
   427                           	global	_ps2WaitCode
   428                           	global	_ps2DataCount
   429                           	global	_ps2Data
   430                           	global	_ps2BitsCount
   431                           	global	_ps2Bits
   432                           	global	_ps2DataState
   433                           	global	_PORTA
   434                           _PORTA	set	0x5
   435  0005                     	global	_PORTB
   436                           _PORTB	set	0x6
   437  0006                     	global	_PORTAbits
   438                           _PORTAbits	set	0x5
   439  0005                     	global	_TMR0
   440                           _TMR0	set	0x1
   441  0001                     	global	_RA1
   442                           _RA1	set	0x29
   443  0029                     	global	_RA2
   444                           _RA2	set	0x2A
   445  002A                     	global	_GIE
   446                           _GIE	set	0x5F
   447  005F                     	global	_T0IF
   448                           _T0IF	set	0x5A
   449  005A                     	global	_T0IE
   450                           _T0IE	set	0x5D
   451  005D                     	global	_TRISB
   452                           _TRISB	set	0x86
   453  0086                     	global	_PSA
   454                           _PSA	set	0x40B
   455  040B                     	global	_T0SE
   456                           _T0SE	set	0x40C
   457  040C                     	global	_T0CS
   458                           _T0CS	set	0x40D
   459  040D                     	global	_TRISA4
   460                           _TRISA4	set	0x42C
   461  042C                     	global	_TRISA3
   462                           _TRISA3	set	0x42B
   463  042B                     	global	_TRISA2
   464                           _TRISA2	set	0x42A
   465  042A                     	global	_TRISA1
   466                           _TRISA1	set	0x429
   467  0429                     	global	_TRISA0
   468                           _TRISA0	set	0x428
   469  0428                     ; #config settings
   470                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sl48."
   471                           	line	#
   472                           psect cinit,class=CODE,delta=2
   473                           global start_initialization
   474                           start_initialization:
   475  0010                     
   476                           global __initialization
   477                           __initialization:
   478  0010                     psect	bssBANK0,class=BANK0,space=1,noexec
   479                           global __pbssBANK0
   480                           __pbssBANK0:
   481  001D                     _mouseDelay:
   482  001D                            ds      2
   483  001D                     
   484                           _replaced:
   485  001F                            ds      1
   486  001F                     
   487                           _ctrl:
   488  0020                            ds      1
   489  0020                     
   490                           _shift:
   491  0021                            ds      1
   492  0021                     
   493                           _i:
   494  0022                            ds      1
   495  0022                     
   496                           _ps2NeedEncode:
   497  0023                            ds      1
   498  0023                     
   499                           _ps2Up:
   500  0024                            ds      1
   501  0024                     
   502                           _ps2WaitCode:
   503  0025                            ds      1
   504  0025                     
   505                           _ps2DataCount:
   506  0026                            ds      1
   507  0026                     
   508                           _ps2Data:
   509  0027                            ds      1
   510  0027                     
   511                           _ps2BitsCount:
   512  0028                            ds      1
   513  0028                     
   514                           _ps2Bits:
   515  0029                            ds      1
   516  0029                     
   517                           _ps2DataState:
   518  002A                            ds      1
   519  002A                     
   520                           psect	dataBANK0,class=BANK0,space=1,noexec
   521                           global __pdataBANK0
   522                           __pdataBANK0:
   523  002B                     	file	"main.c"
   524                           	line	41
   525                           _outPorts:
   526  002B                            ds      11
   527  002B                     
   528                           psect	dataBANK0
   529                           	file	"main.c"
   530                           	line	66
   531                           _mouseY:
   532  0036                            ds      1
   533  0036                     
   534                           psect	dataBANK0
   535                           	file	"main.c"
   536                           	line	65
   537                           _mouseX:
   538  0037                            ds      1
   539  0037                     
   540                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sl48."
   541                           	line	#
   542                           ; Initialize objects allocated to BANK0
   543                           	global __pidataBANK0
   544                           psect cinit,class=CODE,delta=2,merge=1
   545                           	fcall	__pidataBANK0+0		;fetch initializer
   546  0010  2345               	movwf	__pdataBANK0+0&07fh		
   547  0011  00AB               	fcall	__pidataBANK0+1		;fetch initializer
   548  0012  2346               	movwf	__pdataBANK0+1&07fh		
   549  0013  00AC               	fcall	__pidataBANK0+2		;fetch initializer
   550  0014  2347               	movwf	__pdataBANK0+2&07fh		
   551  0015  00AD               	fcall	__pidataBANK0+3		;fetch initializer
   552  0016  2348               	movwf	__pdataBANK0+3&07fh		
   553  0017  00AE               	fcall	__pidataBANK0+4		;fetch initializer
   554  0018  2349               	movwf	__pdataBANK0+4&07fh		
   555  0019  00AF               	fcall	__pidataBANK0+5		;fetch initializer
   556  001A  234A               	movwf	__pdataBANK0+5&07fh		
   557  001B  00B0               	fcall	__pidataBANK0+6		;fetch initializer
   558  001C  234B               	movwf	__pdataBANK0+6&07fh		
   559  001D  00B1               	fcall	__pidataBANK0+7		;fetch initializer
   560  001E  234C               	movwf	__pdataBANK0+7&07fh		
   561  001F  00B2               	fcall	__pidataBANK0+8		;fetch initializer
   562  0020  234D               	movwf	__pdataBANK0+8&07fh		
   563  0021  00B3               	fcall	__pidataBANK0+9		;fetch initializer
   564  0022  234E               	movwf	__pdataBANK0+9&07fh		
   565  0023  00B4               	fcall	__pidataBANK0+10		;fetch initializer
   566  0024  234F               	movwf	__pdataBANK0+10&07fh		
   567  0025  00B5               	fcall	__pidataBANK0+11		;fetch initializer
   568  0026  2350               	movwf	__pdataBANK0+11&07fh		
   569  0027  00B6               	fcall	__pidataBANK0+12		;fetch initializer
   570  0028  2351               	movwf	__pdataBANK0+12&07fh		
   571  0029  00B7               	line	#
   572                           psect clrtext,class=CODE,delta=2
   573                           global clear_ram0
   574                           ;	Called with FSR containing the base address, and
   575                           ;	W with the last address+1
   576                           clear_ram0:
   577  0352                     	clrwdt			;clear the watchdog before getting into this loop
   578  0352  0064               clrloop0:
   579  0353                     	clrf	indf		;clear RAM location pointed to by FSR
   580  0353  0180               	incf	fsr,f		;increment pointer
   581  0354  0A84               	xorwf	fsr,w		;XOR with final address
   582  0355  0604               	btfsc	status,2	;have we reached the end yet?
   583  0356  1903               	retlw	0		;all done for this memory range, return
   584  0357  3400               	xorwf	fsr,w		;XOR again to restore value
   585  0358  0604               	goto	clrloop0		;do the next byte
   586  0359  2B53               
   587                           ; Clear objects allocated to BANK0
   588                           psect cinit,class=CODE,delta=2,merge=1
   589                           	bcf	status, 7	;select IRP bank0
   590  002A  1383               	movlw	low(__pbssBANK0)
   591  002B  301D               	movwf	fsr
   592  002C  0084               	movlw	low((__pbssBANK0)+0Eh)
   593  002D  302B               	fcall	clear_ram0
   594  002E  2352               psect cinit,class=CODE,delta=2,merge=1
   595                           global end_of_initialization,__end_of__initialization
   596                           
   597                           ;End of C runtime variable initialization code
   598                           
   599                           end_of_initialization:
   600  002F                     __end_of__initialization:
   601  002F                     clrf status
   602  002F  0183               ljmp _main	;jump to C main() function
   603  0030  29CD               psect	cstackCOMMON,class=COMMON,space=1,noexec
   604                           global __pcstackCOMMON
   605                           __pcstackCOMMON:
   606  0000                     ??_myDelay:	; 1 bytes @ 0x0
   607  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   608                           global __pcstackBANK0
   609                           __pcstackBANK0:
   610  000C                     ?_myIsr:	; 1 bytes @ 0x0
   611  000C                     ??_myIsr:	; 1 bytes @ 0x0
   612  000C                     ?_setPort:	; 1 bytes @ 0x0
   613  000C                     ?_resetPort:	; 1 bytes @ 0x0
   614  000C                     ?_keyDown:	; 1 bytes @ 0x0
   615  000C                     ?_keyUp:	; 1 bytes @ 0x0
   616  000C                     ?_myDelay:	; 1 bytes @ 0x0
   617  000C                     ?_sendDataToAltera:	; 1 bytes @ 0x0
   618  000C                     ?_main:	; 1 bytes @ 0x0
   619  000C                     	ds	6
   620  000C                     	global	_myIsr$84
   621                           _myIsr$84:	; 2 bytes @ 0x6
   622  0012                     	ds	2
   623  0012                     	global	myIsr@ii
   624                           myIsr@ii:	; 2 bytes @ 0x8
   625  0014                     	ds	2
   626  0014                     ??_setPort:	; 1 bytes @ 0xA
   627  0016                     ??_resetPort:	; 1 bytes @ 0xA
   628  0016                     ??_sendDataToAltera:	; 1 bytes @ 0xA
   629  0016                     	ds	3
   630  0016                     	global	setPort@bit_id
   631                           setPort@bit_id:	; 1 bytes @ 0xD
   632  0019                     	global	resetPort@bit_id
   633                           resetPort@bit_id:	; 1 bytes @ 0xD
   634  0019                     	ds	1
   635  0019                     ??_keyDown:	; 1 bytes @ 0xE
   636  001A                     ??_keyUp:	; 1 bytes @ 0xE
   637  001A                     	ds	1
   638  001A                     	global	keyDown@key
   639                           keyDown@key:	; 1 bytes @ 0xF
   640  001B                     	global	keyUp@key
   641                           keyUp@key:	; 1 bytes @ 0xF
   642  001B                     	ds	1
   643  001B                     ??_main:	; 1 bytes @ 0x10
   644  001C                     	ds	1
   645  001C                     ;!
   646                           ;!Data Sizes:
   647                           ;!    Strings     0
   648                           ;!    Constant    190
   649                           ;!    Data        13
   650                           ;!    BSS         14
   651                           ;!    Persistent  0
   652                           ;!    Stack       0
   653                           ;!
   654                           ;!Auto Spaces:
   655                           ;!    Space          Size  Autos    Used
   656                           ;!    COMMON            0      0       0
   657                           ;!    BANK0            66     17      44
   658                           
   659                           ;!
   660                           ;!Pointer List with Targets:
   661                           ;!
   662                           ;!    None.
   663                           
   664                           
   665                           ;!
   666                           ;!Critical Paths under _main in COMMON
   667                           ;!
   668                           ;!    None.
   669                           ;!
   670                           ;!Critical Paths under _myIsr in COMMON
   671                           ;!
   672                           ;!    None.
   673                           ;!
   674                           ;!Critical Paths under _main in BANK0
   675                           ;!
   676                           ;!    _main->_keyDown
   677                           ;!    _main->_keyUp
   678                           ;!    _keyUp->_resetPort
   679                           ;!    _keyDown->_resetPort
   680                           ;!    _keyDown->_setPort
   681                           ;!
   682                           ;!Critical Paths under _myIsr in BANK0
   683                           ;!
   684                           ;!    None.
   685                           
   686 ;;
   687 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   688 ;;
   689                           
   690                           ;!
   691                           ;!Call Graph Tables:
   692                           ;!
   693                           ;! ---------------------------------------------------------------------------------
   694                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   695                           ;! ---------------------------------------------------------------------------------
   696                           ;! (0) _main                                                 1     1      0     220
   697                           ;!                                             16 BANK0      1     1      0
   698                           ;!                            _keyDown
   699                           ;!                              _keyUp
   700                           ;!                   _sendDataToAltera
   701                           ;! ---------------------------------------------------------------------------------
   702                           ;! (1) _sendDataToAltera                                     1     1      0       0
   703                           ;!                                             10 BANK0      1     1      0
   704                           ;!                            _myDelay
   705                           ;! ---------------------------------------------------------------------------------
   706                           ;! (2) _myDelay                                              0     0      0       0
   707                           ;! ---------------------------------------------------------------------------------
   708                           ;! (1) _keyUp                                                2     2      0      88
   709                           ;!                                             14 BANK0      2     2      0
   710                           ;!                          _resetPort
   711                           ;! ---------------------------------------------------------------------------------
   712                           ;! (1) _keyDown                                              2     2      0     132
   713                           ;!                                             14 BANK0      2     2      0
   714                           ;!                          _resetPort
   715                           ;!                            _setPort
   716                           ;! ---------------------------------------------------------------------------------
   717                           ;! (2) _setPort                                              4     4      0      44
   718                           ;!                                             10 BANK0      4     4      0
   719                           ;! ---------------------------------------------------------------------------------
   720                           ;! (2) _resetPort                                            4     4      0      44
   721                           ;!                                             10 BANK0      4     4      0
   722                           ;! ---------------------------------------------------------------------------------
   723                           ;! Estimated maximum stack depth 2
   724                           ;! ---------------------------------------------------------------------------------
   725                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   726                           ;! ---------------------------------------------------------------------------------
   727                           ;! (4) _myIsr                                               10    10      0     114
   728                           ;!                                              0 BANK0     10    10      0
   729                           ;! ---------------------------------------------------------------------------------
   730                           ;! Estimated maximum stack depth 4
   731                           ;! ---------------------------------------------------------------------------------
   732                           ;!
   733                           ;! Call Graph Graphs:
   734                           ;!
   735                           ;! _main (ROOT)
   736                           ;!   _keyDown
   737                           ;!     _resetPort
   738                           ;!     _setPort
   739                           ;!   _keyUp
   740                           ;!     _resetPort
   741                           ;!   _sendDataToAltera
   742                           ;!     _myDelay
   743                           ;!
   744                           ;! _myIsr (ROOT)
   745                           ;!
   746                           
   747                           ;! Address spaces:
   748                           
   749                           ;!Name               Size   Autos  Total    Cost      Usage
   750                           ;!SFR1                 0      0       0       2        0.0%
   751                           ;!BITSFR1              0      0       0       2        0.0%
   752                           ;!BANK0               42     11      2C       3       66.7%
   753                           ;!BITBANK0            42      0       0       5        0.0%
   754                           ;!SFR0                 0      0       0       1        0.0%
   755                           ;!BITSFR0              0      0       0       1        0.0%
   756                           ;!COMMON               0      0       0       1        0.0%
   757                           ;!BITCOMMON            0      0       0       0        0.0%
   758                           ;!CODE                 0      0       0       0        0.0%
   759                           ;!DATA                 0      0      2C       6        0.0%
   760                           ;!ABS                  0      0      2C       4        0.0%
   761                           ;!NULL                 0      0       0       0        0.0%
   762                           ;!STACK                0      0       0       2        0.0%
   763                           ;!EEDATA              40      0       0       0        0.0%
   764                           
   765                           	global	_main
   766                           
   767 ;; *************** function _main *****************
   768 ;; Defined at:
   769 ;;		line 243 in file "main.c"
   770 ;; Parameters:    Size  Location     Type
   771 ;;		None
   772 ;; Auto vars:     Size  Location     Type
   773 ;;		None
   774 ;; Return value:  Size  Location     Type
   775 ;;                  1    wreg      void 
   776 ;; Registers used:
   777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   778 ;; Tracked objects:
   779 ;;		On entry : B00/0
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMMON   BANK0
   783 ;;      Params:         0       0
   784 ;;      Locals:         0       0
   785 ;;      Temps:          0       1
   786 ;;      Totals:         0       1
   787 ;;Total ram usage:        1 bytes
   788 ;; Hardware stack levels required when called:    4
   789 ;; This function calls:
   790 ;;		_keyDown
   791 ;;		_keyUp
   792 ;;		_sendDataToAltera
   793 ;; This function is called by:
   794 ;;		Startup code after reset
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   798                           	file	"main.c"
   799                           	line	243
   800                           global __pmaintext
   801                           __pmaintext:	;psect for function _main
   802  01CD                     psect	maintext
   803                           	file	"main.c"
   804                           	line	243
   805                           	global	__size_of_main
   806                           	__size_of_main	equ	__end_of_main-_main
   807  00AC                     	
   808                           _main:	
   809  01CD                     ;incstack = 0
   810                           	opt	stack 4
   811                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   812                           	line	245
   813                           	
   814                           l1115:	
   815  01CD                     ;main.c: 245:     TRISA0 = 1;
   816                           	bsf	status, 5	;RP0=1, select bank1
   817  01CD  1683               	bsf	(1064/8)^080h,(1064)&7	;volatile
   818  01CE  1405               	line	246
   819                           ;main.c: 246:     TRISA1 = 0;
   820                           	bcf	(1065/8)^080h,(1065)&7	;volatile
   821  01CF  1085               	line	247
   822                           ;main.c: 247:     TRISA2 = 0;
   823                           	bcf	(1066/8)^080h,(1066)&7	;volatile
   824  01D0  1105               	line	248
   825                           ;main.c: 248:     TRISA3 = 1;
   826                           	bsf	(1067/8)^080h,(1067)&7	;volatile
   827  01D1  1585               	line	249
   828                           ;main.c: 249:     TRISA4 = 1;
   829                           	bsf	(1068/8)^080h,(1068)&7	;volatile
   830  01D2  1605               	line	251
   831                           	
   832                           l1117:	
   833  01D3                     ;main.c: 251:     PORTA = 0b00000000;
   834                           	bcf	status, 5	;RP0=0, select bank0
   835  01D3  1283               	clrf	(5)	;volatile
   836  01D4  0185               	line	253
   837                           ;main.c: 253:     TRISB = 0b00000000;
   838                           	bsf	status, 5	;RP0=1, select bank1
   839  01D5  1683               	clrf	(134)^080h	;volatile
   840  01D6  0186               	line	254
   841                           ;main.c: 254:     PORTB = 0b00000000;
   842                           	bcf	status, 5	;RP0=0, select bank0
   843  01D7  1283               	clrf	(6)	;volatile
   844  01D8  0186               	line	274
   845                           	
   846                           l1119:	
   847  01D9                     ;main.c: 274:     T0CS = 1;
   848                           	bsf	status, 5	;RP0=1, select bank1
   849  01D9  1683               	bsf	(1037/8)^080h,(1037)&7	;volatile
   850  01DA  1681               	line	275
   851                           	
   852                           l1121:	
   853  01DB                     ;main.c: 275:     T0SE = 1;
   854                           	bsf	(1036/8)^080h,(1036)&7	;volatile
   855  01DB  1601               	line	276
   856                           	
   857                           l1123:	
   858  01DC                     ;main.c: 276:     GIE = 1;
   859                           	bsf	(95/8),(95)&7	;volatile
   860  01DC  178B               	line	277
   861                           	
   862                           l1125:	
   863  01DD                     ;main.c: 277:     T0IE = 1;
   864                           	bsf	(93/8),(93)&7	;volatile
   865  01DD  168B               	line	278
   866                           	
   867                           l1127:	
   868  01DE                     ;main.c: 278:     PSA = 1;
   869                           	bsf	(1035/8)^080h,(1035)&7	;volatile
   870  01DE  1581               	line	279
   871                           	
   872                           l1129:	
   873  01DF                     ;main.c: 279:     T0IF = 0;
   874                           	bcf	(90/8),(90)&7	;volatile
   875  01DF  110B               	line	280
   876                           	
   877                           l1131:	
   878  01E0                     ;main.c: 280:     TMR0 = 255;
   879                           	movlw	low(0FFh)
   880  01E0  30FF               	bcf	status, 5	;RP0=0, select bank0
   881  01E1  1283               	movwf	(1)	;volatile
   882  01E2  0081               	line	282
   883                           	
   884                           l1133:	
   885  01E3                     ;main.c: 282:     ps2Data = 0;
   886                           	clrf	(_ps2Data)
   887  01E3  01A7               	line	283
   888                           	
   889                           l1135:	
   890  01E4                     ;main.c: 283:     ps2DataCount = 0;
   891                           	clrf	(_ps2DataCount)
   892  01E4  01A6               	line	284
   893                           	
   894                           l1137:	
   895  01E5                     ;main.c: 284:     ps2WaitCode = 0;
   896                           	clrf	(_ps2WaitCode)
   897  01E5  01A5               	line	285
   898                           	
   899                           l1139:	
   900  01E6                     ;main.c: 285:     ps2Up = 0;
   901                           	clrf	(_ps2Up)
   902  01E6  01A4               	line	286
   903                           	
   904                           l1141:	
   905  01E7                     ;main.c: 286:     ps2NeedEncode = 0;
   906                           	clrf	(_ps2NeedEncode)
   907  01E7  01A3               	line	287
   908                           	
   909                           l1143:	
   910  01E8                     ;main.c: 287:     ps2DataState = 0;
   911                           	clrf	(_ps2DataState)
   912  01E8  01AA               	goto	l1145
   913  01E9  29EA               	line	289
   914                           ;main.c: 289:     while(1)
   915                           	
   916                           l142:	
   917  01EA                     	line	291
   918                           	
   919                           l1145:	
   920  01EA                     ;main.c: 290:     {;main.c: 291:         if ( ps2DataState == 2 ) {
   921                           		movlw	2
   922  01EA  3002               	bcf	status, 5	;RP0=0, select bank0
   923  01EB  1283               	xorwf	((_ps2DataState)),w
   924  01EC  062A               	btfss	status,2
   925  01ED  1D03               	goto	u821
   926  01EE  29F0               	goto	u820
   927  01EF  29F1               u821:
   928  01F0                     	goto	l143
   929  01F0  2A75               u820:
   930  01F1                     	line	293
   931                           	
   932                           l1147:	
   933  01F1                     ;main.c: 293:             replaced = 0;
   934                           	clrf	(_replaced)
   935  01F1  019F               	line	294
   936                           	
   937                           l1149:	
   938  01F2                     ;main.c: 294:             if ( shift && !ctrl ) {
   939                           	movf	((_shift)),w
   940  01F2  0821               	btfsc	status,2
   941  01F3  1903               	goto	u831
   942  01F4  29F6               	goto	u830
   943  01F5  29F7               u831:
   944  01F6                     	goto	l1169
   945  01F6  2A25               u830:
   946  01F7                     	
   947                           l1151:	
   948  01F7                     	movf	((_ctrl)),w
   949  01F7  0820               	btfss	status,2
   950  01F8  1D03               	goto	u841
   951  01F9  29FB               	goto	u840
   952  01FA  29FC               u841:
   953  01FB                     	goto	l1169
   954  01FB  2A25               u840:
   955  01FC                     	line	296
   956                           	
   957                           l1153:	
   958  01FC                     ;main.c: 296:                 for(i = 0; i < 35 ;i+=2) {
   959                           	clrf	(_i)
   960  01FC  01A2               	
   961                           l1155:	
   962  01FD                     	movlw	low(023h)
   963  01FD  3023               	subwf	(_i),w
   964  01FE  0222               	skipc
   965  01FF  1C03               	goto	u851
   966  0200  2A02               	goto	u850
   967  0201  2A03               u851:
   968  0202                     	goto	l1159
   969  0202  2A05               u850:
   970  0203                     	goto	l1169
   971  0203  2A25               	
   972                           l1157:	
   973  0204                     	goto	l1169
   974  0204  2A25               	
   975                           l145:	
   976  0205                     	line	297
   977                           	
   978                           l1159:	
   979  0205                     ;main.c: 297:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   980                           	movf	(_i),w
   981  0205  0822               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
   982  0206  3E81               	movwf	fsr0
   983  0207  0084               	fcall	stringdir
   984  0208  2109               	xorwf	(_ps2Data),w
   985  0209  0627               	skipz
   986  020A  1D03               	goto	u861
   987  020B  2A0D               	goto	u860
   988  020C  2A0E               u861:
   989  020D                     	goto	l1165
   990  020D  2A19               u860:
   991  020E                     	line	298
   992                           	
   993                           l1161:	
   994  020E                     ;main.c: 298:                         replaced = 1;
   995                           	clrf	(_replaced)
   996  020E  019F               	incf	(_replaced),f
   997  020F  0A9F               	line	299
   998                           	
   999                           l1163:	
  1000  0210                     ;main.c: 299:                         ps2Data = replaceOnShiftKeyDown[i+1];
  1001                           	movf	(_i),w
  1002  0210  0822               	addlw	01h
  1003  0211  3E01               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
  1004  0212  3E81               	movwf	fsr0
  1005  0213  0084               	fcall	stringdir
  1006  0214  2109               	movwf	(??_main+0)+0
  1007  0215  009C               	movf	(??_main+0)+0,w
  1008  0216  081C               	movwf	(_ps2Data)
  1009  0217  00A7               	line	300
  1010                           ;main.c: 300:                         break;
  1011                           	goto	l1169
  1012  0218  2A25               	line	301
  1013                           ;main.c: 301:                     }
  1014                           	
  1015                           l147:	
  1016  0219                     	line	302
  1017                           	
  1018                           l1165:	
  1019  0219                     ;main.c: 302:                 }
  1020                           	movlw	low(02h)
  1021  0219  3002               	movwf	(??_main+0)+0
  1022  021A  009C               	movf	(??_main+0)+0,w
  1023  021B  081C               	addwf	(_i),f
  1024  021C  07A2               	
  1025                           l1167:	
  1026  021D                     	movlw	low(023h)
  1027  021D  3023               	subwf	(_i),w
  1028  021E  0222               	skipc
  1029  021F  1C03               	goto	u871
  1030  0220  2A22               	goto	u870
  1031  0221  2A23               u871:
  1032  0222                     	goto	l1159
  1033  0222  2A05               u870:
  1034  0223                     	goto	l1169
  1035  0223  2A25               	
  1036                           l146:	
  1037  0224                     	goto	l1169
  1038  0224  2A25               	line	303
  1039                           ;main.c: 303:             }
  1040                           	
  1041                           l144:	
  1042  0225                     	line	305
  1043                           	
  1044                           l1169:	
  1045  0225                     ;main.c: 305:             if ( ps2Up == 0) {
  1046                           	movf	((_ps2Up)),w
  1047  0225  0824               	btfss	status,2
  1048  0226  1D03               	goto	u881
  1049  0227  2A29               	goto	u880
  1050  0228  2A2A               u881:
  1051  0229                     	goto	l1181
  1052  0229  2A4C               u880:
  1053  022A                     	line	306
  1054                           	
  1055                           l1171:	
  1056  022A                     ;main.c: 306:                 keyDown(ps2Data);
  1057                           	movf	(_ps2Data),w
  1058  022A  0827               	fcall	_keyDown
  1059  022B  2279               	line	307
  1060                           	
  1061                           l1173:	
  1062  022C                     ;main.c: 307:                 if ( ps2Data == 18 || ps2Data == 89) shift = 1;
  1063                           		movlw	18
  1064  022C  3012               	bcf	status, 5	;RP0=0, select bank0
  1065  022D  1283               	xorwf	((_ps2Data)),w
  1066  022E  0627               	btfsc	status,2
  1067  022F  1903               	goto	u891
  1068  0230  2A32               	goto	u890
  1069  0231  2A33               u891:
  1070  0232                     	goto	l151
  1071  0232  2A39               u890:
  1072  0233                     	
  1073                           l1175:	
  1074  0233                     		movlw	89
  1075  0233  3059               	xorwf	((_ps2Data)),w
  1076  0234  0627               	btfss	status,2
  1077  0235  1D03               	goto	u901
  1078  0236  2A38               	goto	u900
  1079  0237  2A39               u901:
  1080  0238                     	goto	l1177
  1081  0238  2A3C               u900:
  1082  0239                     	
  1083                           l151:	
  1084  0239                     	clrf	(_shift)
  1085  0239  01A1               	incf	(_shift),f
  1086  023A  0AA1               	goto	l1177
  1087  023B  2A3C               	
  1088                           l149:	
  1089  023C                     	line	308
  1090                           	
  1091                           l1177:	
  1092  023C                     ;main.c: 308:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 1;
  1093                           		movlw	20
  1094  023C  3014               	xorwf	((_ps2Data)),w
  1095  023D  0627               	btfsc	status,2
  1096  023E  1903               	goto	u911
  1097  023F  2A41               	goto	u910
  1098  0240  2A42               u911:
  1099  0241                     	goto	l154
  1100  0241  2A48               u910:
  1101  0242                     	
  1102                           l1179:	
  1103  0242                     		movlw	19
  1104  0242  3013               	xorwf	((_ps2Data)),w
  1105  0243  0627               	btfss	status,2
  1106  0244  1D03               	goto	u921
  1107  0245  2A47               	goto	u920
  1108  0246  2A48               u921:
  1109  0247                     	goto	l1195
  1110  0247  2A6D               u920:
  1111  0248                     	
  1112                           l154:	
  1113  0248                     	clrf	(_ctrl)
  1114  0248  01A0               	incf	(_ctrl),f
  1115  0249  0AA0               	goto	l1195
  1116  024A  2A6D               	
  1117                           l152:	
  1118  024B                     	line	310
  1119                           ;main.c: 310:             } else {
  1120                           	goto	l1195
  1121  024B  2A6D               	
  1122                           l148:	
  1123  024C                     	line	311
  1124                           	
  1125                           l1181:	
  1126  024C                     ;main.c: 311:                 if ( ps2Data == 18 || ps2Data == 89) shift = 0;
  1127                           		movlw	18
  1128  024C  3012               	xorwf	((_ps2Data)),w
  1129  024D  0627               	btfsc	status,2
  1130  024E  1903               	goto	u931
  1131  024F  2A51               	goto	u930
  1132  0250  2A52               u931:
  1133  0251                     	goto	l1185
  1134  0251  2A59               u930:
  1135  0252                     	
  1136                           l1183:	
  1137  0252                     		movlw	89
  1138  0252  3059               	xorwf	((_ps2Data)),w
  1139  0253  0627               	btfss	status,2
  1140  0254  1D03               	goto	u941
  1141  0255  2A57               	goto	u940
  1142  0256  2A58               u941:
  1143  0257                     	goto	l1187
  1144  0257  2A5B               u940:
  1145  0258                     	goto	l1185
  1146  0258  2A59               	
  1147                           l158:	
  1148  0259                     	
  1149                           l1185:	
  1150  0259                     	clrf	(_shift)
  1151  0259  01A1               	goto	l1187
  1152  025A  2A5B               	
  1153                           l156:	
  1154  025B                     	line	312
  1155                           	
  1156                           l1187:	
  1157  025B                     ;main.c: 312:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 0;
  1158                           		movlw	20
  1159  025B  3014               	xorwf	((_ps2Data)),w
  1160  025C  0627               	btfsc	status,2
  1161  025D  1903               	goto	u951
  1162  025E  2A60               	goto	u950
  1163  025F  2A61               u951:
  1164  0260                     	goto	l1191
  1165  0260  2A68               u950:
  1166  0261                     	
  1167                           l1189:	
  1168  0261                     		movlw	19
  1169  0261  3013               	xorwf	((_ps2Data)),w
  1170  0262  0627               	btfss	status,2
  1171  0263  1D03               	goto	u961
  1172  0264  2A66               	goto	u960
  1173  0265  2A67               u961:
  1174  0266                     	goto	l1193
  1175  0266  2A6A               u960:
  1176  0267                     	goto	l1191
  1177  0267  2A68               	
  1178                           l161:	
  1179  0268                     	
  1180                           l1191:	
  1181  0268                     	clrf	(_ctrl)
  1182  0268  01A0               	goto	l1193
  1183  0269  2A6A               	
  1184                           l159:	
  1185  026A                     	line	313
  1186                           	
  1187                           l1193:	
  1188  026A                     ;main.c: 313:                 keyUp(ps2Data);
  1189                           	movf	(_ps2Data),w
  1190  026A  0827               	fcall	_keyUp
  1191  026B  232B               	goto	l1195
  1192  026C  2A6D               	line	314
  1193                           ;main.c: 314:             }
  1194                           	
  1195                           l155:	
  1196  026D                     	line	317
  1197                           	
  1198                           l1195:	
  1199  026D                     ;main.c: 317:             ps2Data = 0;
  1200                           	bcf	status, 5	;RP0=0, select bank0
  1201  026D  1283               	clrf	(_ps2Data)
  1202  026E  01A7               	line	318
  1203                           	
  1204                           l1197:	
  1205  026F                     ;main.c: 318:             ps2DataCount = 0;
  1206                           	clrf	(_ps2DataCount)
  1207  026F  01A6               	line	319
  1208                           	
  1209                           l1199:	
  1210  0270                     ;main.c: 319:             ps2WaitCode = 0;
  1211                           	clrf	(_ps2WaitCode)
  1212  0270  01A5               	line	320
  1213                           	
  1214                           l1201:	
  1215  0271                     ;main.c: 320:             ps2Up = 0;
  1216                           	clrf	(_ps2Up)
  1217  0271  01A4               	line	321
  1218                           	
  1219                           l1203:	
  1220  0272                     ;main.c: 321:             ps2NeedEncode = 0;
  1221                           	clrf	(_ps2NeedEncode)
  1222  0272  01A3               	line	322
  1223                           	
  1224                           l1205:	
  1225  0273                     ;main.c: 322:             ps2DataState = 0;
  1226                           	clrf	(_ps2DataState)
  1227  0273  01AA               	line	325
  1228                           	
  1229                           l1207:	
  1230  0274                     ;main.c: 325:             sendDataToAltera();
  1231                           	fcall	_sendDataToAltera
  1232  0274  22BA               	line	326
  1233                           ;main.c: 326:         }
  1234                           	
  1235                           l143:	
  1236  0275                     	line	349
  1237                           # 349 "main.c"
  1238                           clrwdt ;# 
  1239  0275  0064               psect	maintext
  1240                           	goto	l1145
  1241  0276  29EA               	line	350
  1242                           ;main.c: 350:     }
  1243                           	
  1244                           l162:	
  1245  0277                     	goto	l1145
  1246  0277  29EA               	
  1247                           l163:	
  1248  0278                     	line	352
  1249                           	
  1250                           l164:	
  1251  0278                     	global	start
  1252                           	ljmp	start
  1253  0278  280F               	opt stack 0
  1254                           GLOBAL	__end_of_main
  1255                           	__end_of_main:
  1256  0279                     	signat	_main,89
  1257                           	global	_sendDataToAltera
  1258                           
  1259 ;; *************** function _sendDataToAltera *****************
  1260 ;; Defined at:
  1261 ;;		line 183 in file "main.c"
  1262 ;; Parameters:    Size  Location     Type
  1263 ;;		None
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;		None
  1266 ;; Return value:  Size  Location     Type
  1267 ;;                  1    wreg      void 
  1268 ;; Registers used:
  1269 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1270 ;; Tracked objects:
  1271 ;;		On entry : 0/0
  1272 ;;		On exit  : 0/0
  1273 ;;		Unchanged: 0/0
  1274 ;; Data sizes:     COMMON   BANK0
  1275 ;;      Params:         0       0
  1276 ;;      Locals:         0       0
  1277 ;;      Temps:          0       1
  1278 ;;      Totals:         0       1
  1279 ;;Total ram usage:        1 bytes
  1280 ;; Hardware stack levels used:    1
  1281 ;; Hardware stack levels required when called:    3
  1282 ;; This function calls:
  1283 ;;		_myDelay
  1284 ;; This function is called by:
  1285 ;;		_main
  1286 ;; This function uses a non-reentrant model
  1287 ;;
  1288                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
  1289                           	line	183
  1290                           global __ptext1
  1291                           __ptext1:	;psect for function _sendDataToAltera
  1292  02BA                     psect	text1
  1293                           	file	"main.c"
  1294                           	line	183
  1295                           	global	__size_of_sendDataToAltera
  1296                           	__size_of_sendDataToAltera	equ	__end_of_sendDataToAltera-_sendDataToAltera
  1297  0032                     	
  1298                           _sendDataToAltera:	
  1299  02BA                     ;incstack = 0
  1300                           	opt	stack 4
  1301                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1302                           	line	185
  1303                           	
  1304                           l1013:	
  1305  02BA                     ;main.c: 185:     RA2 = 1;
  1306                           	bcf	status, 5	;RP0=0, select bank0
  1307  02BA  1283               	bsf	(42/8),(42)&7	;volatile
  1308  02BB  1505               	line	186
  1309                           ;main.c: 186:     RA1 = 1;
  1310                           	bsf	(41/8),(41)&7	;volatile
  1311  02BC  1485               	line	187
  1312                           	
  1313                           l1015:	
  1314  02BD                     ;main.c: 187:     myDelay();
  1315                           	fcall	_myDelay
  1316  02BD  235A               	line	188
  1317                           	
  1318                           l1017:	
  1319  02BE                     ;main.c: 188:     RA2 = 0;
  1320                           	bcf	status, 5	;RP0=0, select bank0
  1321  02BE  1283               	bcf	(42/8),(42)&7	;volatile
  1322  02BF  1105               	line	189
  1323                           ;main.c: 189:     myDelay();
  1324                           	fcall	_myDelay
  1325  02C0  235A               	line	190
  1326                           	
  1327                           l1019:	
  1328  02C1                     ;main.c: 190:     RA2 = 1;
  1329                           	bcf	status, 5	;RP0=0, select bank0
  1330  02C1  1283               	bsf	(42/8),(42)&7	;volatile
  1331  02C2  1505               	line	191
  1332                           ;main.c: 191:     myDelay();
  1333                           	fcall	_myDelay
  1334  02C3  235A               	line	192
  1335                           	
  1336                           l1021:	
  1337  02C4                     ;main.c: 192:     RA1 = 0;
  1338                           	bcf	status, 5	;RP0=0, select bank0
  1339  02C4  1283               	bcf	(41/8),(41)&7	;volatile
  1340  02C5  1085               	line	193
  1341                           ;main.c: 193:     myDelay();
  1342                           	fcall	_myDelay
  1343  02C6  235A               	line	194
  1344                           	
  1345                           l1023:	
  1346  02C7                     ;main.c: 194:     for(i=0;i<11;i++) {
  1347                           	bcf	status, 5	;RP0=0, select bank0
  1348  02C7  1283               	clrf	(_i)
  1349  02C8  01A2               	
  1350                           l1025:	
  1351  02C9                     	movlw	low(0Bh)
  1352  02C9  300B               	subwf	(_i),w
  1353  02CA  0222               	skipc
  1354  02CB  1C03               	goto	u621
  1355  02CC  2ACE               	goto	u620
  1356  02CD  2ACF               u621:
  1357  02CE                     	goto	l135
  1358  02CE  2AD1               u620:
  1359  02CF                     	goto	l136
  1360  02CF  2AE9               	
  1361                           l1027:	
  1362  02D0                     	goto	l136
  1363  02D0  2AE9               	
  1364                           l135:	
  1365  02D1                     	line	195
  1366                           ;main.c: 195:         RA2 = 1;
  1367                           	bsf	(42/8),(42)&7	;volatile
  1368  02D1  1505               	line	196
  1369                           	
  1370                           l1029:	
  1371  02D2                     ;main.c: 196:         myDelay();
  1372                           	fcall	_myDelay
  1373  02D2  235A               	line	197
  1374                           	
  1375                           l1031:	
  1376  02D3                     ;main.c: 197:         PORTB = outPorts[i];
  1377                           	bcf	status, 5	;RP0=0, select bank0
  1378  02D3  1283               	movf	(_i),w
  1379  02D4  0822               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1380  02D5  3E2B               	movwf	fsr0
  1381  02D6  0084               	bcf	status, 7	;select IRP bank0
  1382  02D7  1383               	movf	indf,w
  1383  02D8  0800               	movwf	(6)	;volatile
  1384  02D9  0086               	line	198
  1385                           	
  1386                           l1033:	
  1387  02DA                     ;main.c: 198:         myDelay();
  1388                           	fcall	_myDelay
  1389  02DA  235A               	line	199
  1390                           	
  1391                           l1035:	
  1392  02DB                     ;main.c: 199:         RA2 = 0;
  1393                           	bcf	status, 5	;RP0=0, select bank0
  1394  02DB  1283               	bcf	(42/8),(42)&7	;volatile
  1395  02DC  1105               	line	200
  1396                           	
  1397                           l1037:	
  1398  02DD                     ;main.c: 200:         myDelay();
  1399                           	fcall	_myDelay
  1400  02DD  235A               	line	201
  1401                           	
  1402                           l1039:	
  1403  02DE                     ;main.c: 201:     }
  1404                           	movlw	low(01h)
  1405  02DE  3001               	bcf	status, 5	;RP0=0, select bank0
  1406  02DF  1283               	movwf	(??_sendDataToAltera+0)+0
  1407  02E0  0096               	movf	(??_sendDataToAltera+0)+0,w
  1408  02E1  0816               	addwf	(_i),f
  1409  02E2  07A2               	
  1410                           l1041:	
  1411  02E3                     	movlw	low(0Bh)
  1412  02E3  300B               	subwf	(_i),w
  1413  02E4  0222               	skipc
  1414  02E5  1C03               	goto	u631
  1415  02E6  2AE8               	goto	u630
  1416  02E7  2AE9               u631:
  1417  02E8                     	goto	l135
  1418  02E8  2AD1               u630:
  1419  02E9                     	
  1420                           l136:	
  1421  02E9                     	line	202
  1422                           ;main.c: 202:     RA2 = 1;
  1423                           	bsf	(42/8),(42)&7	;volatile
  1424  02E9  1505               	line	203
  1425                           	
  1426                           l1043:	
  1427  02EA                     ;main.c: 203:     PORTB = 0;
  1428                           	clrf	(6)	;volatile
  1429  02EA  0186               	line	204
  1430                           	
  1431                           l137:	
  1432  02EB                     	return
  1433  02EB  0008               	opt stack 0
  1434                           GLOBAL	__end_of_sendDataToAltera
  1435                           	__end_of_sendDataToAltera:
  1436  02EC                     	signat	_sendDataToAltera,89
  1437                           	global	_myDelay
  1438                           
  1439 ;; *************** function _myDelay *****************
  1440 ;; Defined at:
  1441 ;;		line 175 in file "main.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		None
  1450 ;; Tracked objects:
  1451 ;;		On entry : 0/0
  1452 ;;		On exit  : 0/0
  1453 ;;		Unchanged: 0/0
  1454 ;; Data sizes:     COMMON   BANK0
  1455 ;;      Params:         0       0
  1456 ;;      Locals:         0       0
  1457 ;;      Temps:          0       0
  1458 ;;      Totals:         0       0
  1459 ;;Total ram usage:        0 bytes
  1460 ;; Hardware stack levels used:    1
  1461 ;; Hardware stack levels required when called:    2
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_sendDataToAltera
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
  1469                           	line	175
  1470                           global __ptext2
  1471                           __ptext2:	;psect for function _myDelay
  1472  035A                     psect	text2
  1473                           	file	"main.c"
  1474                           	line	175
  1475                           	global	__size_of_myDelay
  1476                           	__size_of_myDelay	equ	__end_of_myDelay-_myDelay
  1477  0001                     	
  1478                           _myDelay:	
  1479  035A                     ;incstack = 0
  1480                           	opt	stack 4
  1481                           ; Regs used in _myDelay: []
  1482                           	line	178
  1483                           	
  1484                           l132:	
  1485  035A                     	return
  1486  035A  0008               	opt stack 0
  1487                           GLOBAL	__end_of_myDelay
  1488                           	__end_of_myDelay:
  1489  035B                     	signat	_myDelay,89
  1490                           	global	_keyUp
  1491                           
  1492 ;; *************** function _keyUp *****************
  1493 ;; Defined at:
  1494 ;;		line 168 in file "main.c"
  1495 ;; Parameters:    Size  Location     Type
  1496 ;;  key             1    wreg     unsigned char 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  key             1   15[BANK0 ] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  1    wreg      void 
  1501 ;; Registers used:
  1502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMMON   BANK0
  1508 ;;      Params:         0       0
  1509 ;;      Locals:         0       1
  1510 ;;      Temps:          0       1
  1511 ;;      Totals:         0       2
  1512 ;;Total ram usage:        2 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    3
  1515 ;; This function calls:
  1516 ;;		_resetPort
  1517 ;; This function is called by:
  1518 ;;		_main
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
  1522                           	line	168
  1523                           global __ptext3
  1524                           __ptext3:	;psect for function _keyUp
  1525  032B                     psect	text3
  1526                           	file	"main.c"
  1527                           	line	168
  1528                           	global	__size_of_keyUp
  1529                           	__size_of_keyUp	equ	__end_of_keyUp-_keyUp
  1530  001A                     	
  1531                           _keyUp:	
  1532  032B                     ;incstack = 0
  1533                           	opt	stack 4
  1534                           ; Regs used in _keyUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1535                           ;keyUp@key stored from wreg
  1536                           	bcf	status, 5	;RP0=0, select bank0
  1537  032B  1283               	movwf	(keyUp@key)
  1538  032C  009B               	line	170
  1539                           	
  1540                           l1003:	
  1541  032D                     ;main.c: 168: void keyUp(uint8_t key);main.c: 169: {;main.c: 170:     if ( key >= 128 ) 
                                 return;
  1542                           	movlw	low(080h)
  1543  032D  3080               	subwf	(keyUp@key),w
  1544  032E  021B               	skipc
  1545  032F  1C03               	goto	u601
  1546  0330  2B32               	goto	u600
  1547  0331  2B33               u601:
  1548  0332                     	goto	l1007
  1549  0332  2B35               u600:
  1550  0333                     	goto	l128
  1551  0333  2B44               	
  1552                           l1005:	
  1553  0334                     	goto	l128
  1554  0334  2B44               	
  1555                           l127:	
  1556  0335                     	line	171
  1557                           	
  1558                           l1007:	
  1559  0335                     ;main.c: 171:     i = codeToMatrix[key];
  1560                           	movf	(keyUp@key),w
  1561  0335  081B               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1562  0336  3E01               	movwf	fsr0
  1563  0337  0084               	fcall	stringdir
  1564  0338  2109               	movwf	(??_keyUp+0)+0
  1565  0339  009A               	movf	(??_keyUp+0)+0,w
  1566  033A  081A               	movwf	(_i)
  1567  033B  00A2               	line	172
  1568                           	
  1569                           l1009:	
  1570  033C                     ;main.c: 172:     if ( i != 0xFF ) resetPort(i);
  1571                           		incf	((_i)),w
  1572  033C  0A22               	btfsc	status,2
  1573  033D  1903               	goto	u611
  1574  033E  2B40               	goto	u610
  1575  033F  2B41               u611:
  1576  0340                     	goto	l128
  1577  0340  2B44               u610:
  1578  0341                     	
  1579                           l1011:	
  1580  0341                     	movf	(_i),w
  1581  0341  0822               	fcall	_resetPort
  1582  0342  22EC               	goto	l128
  1583  0343  2B44               	
  1584                           l129:	
  1585  0344                     	line	173
  1586                           	
  1587                           l128:	
  1588  0344                     	return
  1589  0344  0008               	opt stack 0
  1590                           GLOBAL	__end_of_keyUp
  1591                           	__end_of_keyUp:
  1592  0345                     	signat	_keyUp,4217
  1593                           	global	_keyDown
  1594                           
  1595 ;; *************** function _keyDown *****************
  1596 ;; Defined at:
  1597 ;;		line 147 in file "main.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  key             1    wreg     unsigned char 
  1600 ;; Auto vars:     Size  Location     Type
  1601 ;;  key             1   15[BANK0 ] unsigned char 
  1602 ;; Return value:  Size  Location     Type
  1603 ;;                  1    wreg      void 
  1604 ;; Registers used:
  1605 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1606 ;; Tracked objects:
  1607 ;;		On entry : 0/0
  1608 ;;		On exit  : 0/0
  1609 ;;		Unchanged: 0/0
  1610 ;; Data sizes:     COMMON   BANK0
  1611 ;;      Params:         0       0
  1612 ;;      Locals:         0       1
  1613 ;;      Temps:          0       1
  1614 ;;      Totals:         0       2
  1615 ;;Total ram usage:        2 bytes
  1616 ;; Hardware stack levels used:    1
  1617 ;; Hardware stack levels required when called:    3
  1618 ;; This function calls:
  1619 ;;		_resetPort
  1620 ;;		_setPort
  1621 ;; This function is called by:
  1622 ;;		_main
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  1626                           	line	147
  1627                           global __ptext4
  1628                           __ptext4:	;psect for function _keyDown
  1629  0279                     psect	text4
  1630                           	file	"main.c"
  1631                           	line	147
  1632                           	global	__size_of_keyDown
  1633                           	__size_of_keyDown	equ	__end_of_keyDown-_keyDown
  1634  0041                     	
  1635                           _keyDown:	
  1636  0279                     ;incstack = 0
  1637                           	opt	stack 4
  1638                           ; Regs used in _keyDown: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1639                           ;keyDown@key stored from wreg
  1640                           	bcf	status, 5	;RP0=0, select bank0
  1641  0279  1283               	movwf	(keyDown@key)
  1642  027A  009B               	line	149
  1643                           	
  1644                           l977:	
  1645  027B                     ;main.c: 147: void keyDown(uint8_t key);main.c: 148: {;main.c: 149:     if ( key >= 128 
                                 ) return;
  1646                           	movlw	low(080h)
  1647  027B  3080               	subwf	(keyDown@key),w
  1648  027C  021B               	skipc
  1649  027D  1C03               	goto	u531
  1650  027E  2A80               	goto	u530
  1651  027F  2A81               u531:
  1652  0280                     	goto	l981
  1653  0280  2A83               u530:
  1654  0281                     	goto	l113
  1655  0281  2AB9               	
  1656                           l979:	
  1657  0282                     	goto	l113
  1658  0282  2AB9               	
  1659                           l112:	
  1660  0283                     	line	150
  1661                           	
  1662                           l981:	
  1663  0283                     ;main.c: 150:     i = codeToMatrix[key];
  1664                           	movf	(keyDown@key),w
  1665  0283  081B               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1666  0284  3E01               	movwf	fsr0
  1667  0285  0084               	fcall	stringdir
  1668  0286  2109               	movwf	(??_keyDown+0)+0
  1669  0287  009A               	movf	(??_keyDown+0)+0,w
  1670  0288  081A               	movwf	(_i)
  1671  0289  00A2               	line	151
  1672                           	
  1673                           l983:	
  1674  028A                     ;main.c: 151:     if ( i != 0xFF ) {
  1675                           		incf	((_i)),w
  1676  028A  0A22               	btfsc	status,2
  1677  028B  1903               	goto	u541
  1678  028C  2A8E               	goto	u540
  1679  028D  2A8F               u541:
  1680  028E                     	goto	l113
  1681  028E  2AB9               u540:
  1682  028F                     	line	152
  1683                           	
  1684                           l985:	
  1685  028F                     ;main.c: 152:         setPort(i);
  1686                           	movf	(_i),w
  1687  028F  0822               	fcall	_setPort
  1688  0290  230C               	line	154
  1689                           	
  1690                           l987:	
  1691  0291                     ;main.c: 154:         if ( (shift &&!replaced) || (i & 0b01000000) ) {
  1692                           	bcf	status, 5	;RP0=0, select bank0
  1693  0291  1283               	movf	((_shift)),w
  1694  0292  0821               	btfsc	status,2
  1695  0293  1903               	goto	u551
  1696  0294  2A96               	goto	u550
  1697  0295  2A97               u551:
  1698  0296                     	goto	l119
  1699  0296  2A9C               u550:
  1700  0297                     	
  1701                           l989:	
  1702  0297                     	movf	((_replaced)),w
  1703  0297  081F               	btfsc	status,2
  1704  0298  1903               	goto	u561
  1705  0299  2A9B               	goto	u560
  1706  029A  2A9C               u561:
  1707  029B                     	goto	l991
  1708  029B  2AA1               u560:
  1709  029C                     	
  1710                           l119:	
  1711  029C                     	btfss	(_i),(6)&7
  1712  029C  1F22               	goto	u571
  1713  029D  2A9F               	goto	u570
  1714  029E  2AA0               u571:
  1715  029F                     	goto	l993
  1716  029F  2AA4               u570:
  1717  02A0                     	goto	l991
  1718  02A0  2AA1               	
  1719                           l117:	
  1720  02A1                     	line	155
  1721                           	
  1722                           l991:	
  1723  02A1                     ;main.c: 155:             setPort(0x00);
  1724                           	movlw	low(0)
  1725  02A1  3000               	fcall	_setPort
  1726  02A2  230C               	line	156
  1727                           ;main.c: 156:         } else {
  1728                           	goto	l995
  1729  02A3  2AA7               	
  1730                           l115:	
  1731  02A4                     	line	157
  1732                           	
  1733                           l993:	
  1734  02A4                     ;main.c: 157:             resetPort(0x00);
  1735                           	movlw	low(0)
  1736  02A4  3000               	fcall	_resetPort
  1737  02A5  22EC               	goto	l995
  1738  02A6  2AA7               	line	158
  1739                           ;main.c: 158:         }
  1740                           	
  1741                           l120:	
  1742  02A7                     	line	160
  1743                           	
  1744                           l995:	
  1745  02A7                     ;main.c: 160:         if ( ctrl || (i & 0b10000000) ) {
  1746                           	bcf	status, 5	;RP0=0, select bank0
  1747  02A7  1283               	movf	((_ctrl)),w
  1748  02A8  0820               	btfss	status,2
  1749  02A9  1D03               	goto	u581
  1750  02AA  2AAC               	goto	u580
  1751  02AB  2AAD               u581:
  1752  02AC                     	goto	l999
  1753  02AC  2AB2               u580:
  1754  02AD                     	
  1755                           l997:	
  1756  02AD                     	btfss	(_i),(7)&7
  1757  02AD  1FA2               	goto	u591
  1758  02AE  2AB0               	goto	u590
  1759  02AF  2AB1               u591:
  1760  02B0                     	goto	l1001
  1761  02B0  2AB5               u590:
  1762  02B1                     	goto	l999
  1763  02B1  2AB2               	
  1764                           l123:	
  1765  02B2                     	line	161
  1766                           	
  1767                           l999:	
  1768  02B2                     ;main.c: 161:             setPort(0x0F);
  1769                           	movlw	low(0Fh)
  1770  02B2  300F               	fcall	_setPort
  1771  02B3  230C               	line	162
  1772                           ;main.c: 162:         } else {
  1773                           	goto	l113
  1774  02B4  2AB9               	
  1775                           l121:	
  1776  02B5                     	line	163
  1777                           	
  1778                           l1001:	
  1779  02B5                     ;main.c: 163:             resetPort(0x0F);
  1780                           	movlw	low(0Fh)
  1781  02B5  300F               	fcall	_resetPort
  1782  02B6  22EC               	goto	l113
  1783  02B7  2AB9               	line	164
  1784                           ;main.c: 164:         }
  1785                           	
  1786                           l124:	
  1787  02B8                     	goto	l113
  1788  02B8  2AB9               	line	165
  1789                           ;main.c: 165:     }
  1790                           	
  1791                           l114:	
  1792  02B9                     	line	166
  1793                           	
  1794                           l113:	
  1795  02B9                     	return
  1796  02B9  0008               	opt stack 0
  1797                           GLOBAL	__end_of_keyDown
  1798                           	__end_of_keyDown:
  1799  02BA                     	signat	_keyDown,4217
  1800                           	global	_setPort
  1801                           
  1802 ;; *************** function _setPort *****************
  1803 ;; Defined at:
  1804 ;;		line 135 in file "main.c"
  1805 ;; Parameters:    Size  Location     Type
  1806 ;;  bit_id          1    wreg     unsigned char 
  1807 ;; Auto vars:     Size  Location     Type
  1808 ;;  bit_id          1   13[BANK0 ] unsigned char 
  1809 ;; Return value:  Size  Location     Type
  1810 ;;                  1    wreg      void 
  1811 ;; Registers used:
  1812 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1813 ;; Tracked objects:
  1814 ;;		On entry : 0/0
  1815 ;;		On exit  : 0/0
  1816 ;;		Unchanged: 0/0
  1817 ;; Data sizes:     COMMON   BANK0
  1818 ;;      Params:         0       0
  1819 ;;      Locals:         0       1
  1820 ;;      Temps:          0       3
  1821 ;;      Totals:         0       4
  1822 ;;Total ram usage:        4 bytes
  1823 ;; Hardware stack levels used:    1
  1824 ;; Hardware stack levels required when called:    2
  1825 ;; This function calls:
  1826 ;;		Nothing
  1827 ;; This function is called by:
  1828 ;;		_keyDown
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  1832                           	line	135
  1833                           global __ptext5
  1834                           __ptext5:	;psect for function _setPort
  1835  030C                     psect	text5
  1836                           	file	"main.c"
  1837                           	line	135
  1838                           	global	__size_of_setPort
  1839                           	__size_of_setPort	equ	__end_of_setPort-_setPort
  1840  001F                     	
  1841                           _setPort:	
  1842  030C                     ;incstack = 0
  1843                           	opt	stack 4
  1844                           ; Regs used in _setPort: [wreg-fsr0h+status,2+status,0]
  1845                           ;setPort@bit_id stored from wreg
  1846                           	bcf	status, 5	;RP0=0, select bank0
  1847  030C  1283               	movwf	(setPort@bit_id)
  1848  030D  0099               	line	137
  1849                           	
  1850                           l973:	
  1851  030E                     ;main.c: 135: void setPort(uint8_t bit_id);main.c: 136: {;main.c: 137:     outPorts[bit_
                                 id & 7] |= (1 << ((bit_id >> 3) & 7));
  1852                           	movlw	low(01h)
  1853  030E  3001               	movwf	(??_setPort+0)+0
  1854  030F  0096               	movf	(setPort@bit_id),w
  1855  0310  0819               	movwf	(??_setPort+1)+0
  1856  0311  0097               	movlw	03h
  1857  0312  3003               u495:
  1858  0313                     	clrc
  1859  0313  1003               	rrf	(??_setPort+1)+0,f
  1860  0314  0C97               	addlw	-1
  1861  0315  3EFF               	skipz
  1862  0316  1D03               	goto	u495
  1863  0317  2B13               	movf	0+(??_setPort+1)+0,w
  1864  0318  0817               	andlw	07h
  1865  0319  3907               	addlw	1
  1866  031A  3E01               	goto	u504
  1867  031B  2B1E               u505:
  1868  031C                     	clrc
  1869  031C  1003               	rlf	(??_setPort+0)+0,f
  1870  031D  0D96               u504:
  1871  031E                     	addlw	-1
  1872  031E  3EFF               	skipz
  1873  031F  1D03               	goto	u505
  1874  0320  2B1C               	movf	0+(??_setPort+0)+0,w
  1875  0321  0816               	movwf	(??_setPort+2)+0
  1876  0322  0098               	movf	(setPort@bit_id),w
  1877  0323  0819               	andlw	07h
  1878  0324  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1879  0325  3E2B               	movwf	fsr0
  1880  0326  0084               	movf	(??_setPort+2)+0,w
  1881  0327  0818               	bcf	status, 7	;select IRP bank0
  1882  0328  1383               	iorwf	indf,f
  1883  0329  0480               	line	138
  1884                           	
  1885                           l106:	
  1886  032A                     	return
  1887  032A  0008               	opt stack 0
  1888                           GLOBAL	__end_of_setPort
  1889                           	__end_of_setPort:
  1890  032B                     	signat	_setPort,4217
  1891                           	global	_resetPort
  1892                           
  1893 ;; *************** function _resetPort *****************
  1894 ;; Defined at:
  1895 ;;		line 140 in file "main.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;  bit_id          1    wreg     unsigned char 
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  bit_id          1   13[BANK0 ] unsigned char 
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      void 
  1902 ;; Registers used:
  1903 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1904 ;; Tracked objects:
  1905 ;;		On entry : 0/0
  1906 ;;		On exit  : 0/0
  1907 ;;		Unchanged: 0/0
  1908 ;; Data sizes:     COMMON   BANK0
  1909 ;;      Params:         0       0
  1910 ;;      Locals:         0       1
  1911 ;;      Temps:          0       3
  1912 ;;      Totals:         0       4
  1913 ;;Total ram usage:        4 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    2
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_keyDown
  1920 ;;		_keyUp
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  1924                           	line	140
  1925                           global __ptext6
  1926                           __ptext6:	;psect for function _resetPort
  1927  02EC                     psect	text6
  1928                           	file	"main.c"
  1929                           	line	140
  1930                           	global	__size_of_resetPort
  1931                           	__size_of_resetPort	equ	__end_of_resetPort-_resetPort
  1932  0020                     	
  1933                           _resetPort:	
  1934  02EC                     ;incstack = 0
  1935                           	opt	stack 4
  1936                           ; Regs used in _resetPort: [wreg-fsr0h+status,2+status,0]
  1937                           ;resetPort@bit_id stored from wreg
  1938                           	bcf	status, 5	;RP0=0, select bank0
  1939  02EC  1283               	movwf	(resetPort@bit_id)
  1940  02ED  0099               	line	142
  1941                           	
  1942                           l975:	
  1943  02EE                     ;main.c: 140: void resetPort(uint8_t bit_id);main.c: 141: {;main.c: 142:     outPorts[bi
                                 t_id & 7] &= ~(1 << ((bit_id >> 3) & 7));
  1944                           	movlw	low(01h)
  1945  02EE  3001               	movwf	(??_resetPort+0)+0
  1946  02EF  0096               	movf	(resetPort@bit_id),w
  1947  02F0  0819               	movwf	(??_resetPort+1)+0
  1948  02F1  0097               	movlw	03h
  1949  02F2  3003               u515:
  1950  02F3                     	clrc
  1951  02F3  1003               	rrf	(??_resetPort+1)+0,f
  1952  02F4  0C97               	addlw	-1
  1953  02F5  3EFF               	skipz
  1954  02F6  1D03               	goto	u515
  1955  02F7  2AF3               	movf	0+(??_resetPort+1)+0,w
  1956  02F8  0817               	andlw	07h
  1957  02F9  3907               	addlw	1
  1958  02FA  3E01               	goto	u524
  1959  02FB  2AFE               u525:
  1960  02FC                     	clrc
  1961  02FC  1003               	rlf	(??_resetPort+0)+0,f
  1962  02FD  0D96               u524:
  1963  02FE                     	addlw	-1
  1964  02FE  3EFF               	skipz
  1965  02FF  1D03               	goto	u525
  1966  0300  2AFC               	movf	0+(??_resetPort+0)+0,w
  1967  0301  0816               	xorlw	0ffh
  1968  0302  3AFF               	movwf	(??_resetPort+2)+0
  1969  0303  0098               	movf	(resetPort@bit_id),w
  1970  0304  0819               	andlw	07h
  1971  0305  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1972  0306  3E2B               	movwf	fsr0
  1973  0307  0084               	movf	(??_resetPort+2)+0,w
  1974  0308  0818               	bcf	status, 7	;select IRP bank0
  1975  0309  1383               	andwf	indf,f
  1976  030A  0580               	line	143
  1977                           	
  1978                           l109:	
  1979  030B                     	return
  1980  030B  0008               	opt stack 0
  1981                           GLOBAL	__end_of_resetPort
  1982                           	__end_of_resetPort:
  1983  030C                     	signat	_resetPort,4217
  1984                           	global	_myIsr
  1985                           
  1986 ;; *************** function _myIsr *****************
  1987 ;; Defined at:
  1988 ;;		line 74 in file "main.c"
  1989 ;; Parameters:    Size  Location     Type
  1990 ;;		None
  1991 ;; Auto vars:     Size  Location     Type
  1992 ;;  ii              2    8[BANK0 ] int 
  1993 ;; Return value:  Size  Location     Type
  1994 ;;                  1    wreg      void 
  1995 ;; Registers used:
  1996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1997 ;; Tracked objects:
  1998 ;;		On entry : 0/0
  1999 ;;		On exit  : 0/0
  2000 ;;		Unchanged: 0/0
  2001 ;; Data sizes:     COMMON   BANK0
  2002 ;;      Params:         0       0
  2003 ;;      Locals:         0       4
  2004 ;;      Temps:          0       6
  2005 ;;      Totals:         0      10
  2006 ;;Total ram usage:       10 bytes
  2007 ;; Hardware stack levels used:    2
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		Interrupt level 1
  2012 ;; This function uses a non-reentrant model
  2013 ;;
  2014                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  2015                           	line	74
  2016                           global __ptext7
  2017                           __ptext7:	;psect for function _myIsr
  2018  0031                     psect	text7
  2019                           	file	"main.c"
  2020                           	line	74
  2021                           	global	__size_of_myIsr
  2022                           	__size_of_myIsr	equ	__end_of_myIsr-_myIsr
  2023  00D8                     	
  2024                           _myIsr:	
  2025  0031                     ;incstack = 0
  2026                           	opt	stack 4
  2027                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2028                           psect	intentry,class=CODE,delta=2
  2029                           global __pintentry
  2030                           __pintentry:
  2031  0004                     global interrupt_function
  2032                           interrupt_function:
  2033  0004                     	global saved_w
  2034                           	saved_w	set	btemp+0
  2035  004E                     	movwf	saved_w
  2036  0004  00CE               	swapf	status,w
  2037  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
  2038  0006  1283               	movwf	(??_myIsr+2)
  2039  0007  008E               	movf	fsr0,w
  2040  0008  0804               	movwf	(??_myIsr+3)
  2041  0009  008F               	movf	pclath,w
  2042  000A  080A               	movwf	(??_myIsr+4)
  2043  000B  0090               	movf	btemp+1,w
  2044  000C  084F               	movwf	(??_myIsr+5)
  2045  000D  0091               	ljmp	_myIsr
  2046  000E  2831               psect	text7
  2047                           	line	76
  2048                           	
  2049                           i1l1045:	
  2050  0031                     ;main.c: 76:     if(T0IE && T0IF){
  2051                           	btfss	(93/8),(93)&7	;volatile
  2052  0031  1E8B               	goto	u64_21
  2053  0032  2834               	goto	u64_20
  2054  0033  2835               u64_21:
  2055  0034                     	goto	i1l1113
  2056  0034  28FD               u64_20:
  2057  0035                     	
  2058                           i1l1047:	
  2059  0035                     	btfss	(90/8),(90)&7	;volatile
  2060  0035  1D0B               	goto	u65_21
  2061  0036  2838               	goto	u65_20
  2062  0037  2839               u65_21:
  2063  0038                     	goto	i1l1113
  2064  0038  28FD               u65_20:
  2065  0039                     	line	78
  2066                           	
  2067                           i1l1049:	
  2068  0039                     ;main.c: 78:         T0IF=0;
  2069                           	bcf	(90/8),(90)&7	;volatile
  2070  0039  110B               	line	79
  2071                           	
  2072                           i1l1051:	
  2073  003A                     ;main.c: 79:         TMR0 = 255;
  2074                           	movlw	low(0FFh)
  2075  003A  30FF               	movwf	(1)	;volatile
  2076  003B  0081               	line	83
  2077                           	
  2078                           i1l1053:	
  2079  003C                     ;main.c: 83:         if ( ps2DataState == 0 ) {
  2080                           	movf	((_ps2DataState)),w
  2081  003C  082A               	btfss	status,2
  2082  003D  1D03               	goto	u66_21
  2083  003E  2840               	goto	u66_20
  2084  003F  2841               u66_21:
  2085  0040                     	goto	i1l1063
  2086  0040  284F               u66_20:
  2087  0041                     	line	84
  2088                           	
  2089                           i1l1055:	
  2090  0041                     ;main.c: 84:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  2091                           	btfsc	(5),4	;volatile
  2092  0041  1A05               	goto	u67_21
  2093  0042  2844               	goto	u67_20
  2094  0043  2845               u67_21:
  2095  0044                     	goto	i1l1113
  2096  0044  28FD               u67_20:
  2097  0045                     	
  2098                           i1l1057:	
  2099  0045                     	btfsc	(5),3	;volatile
  2100  0045  1985               	goto	u68_21
  2101  0046  2848               	goto	u68_20
  2102  0047  2849               u68_21:
  2103  0048                     	goto	i1l1113
  2104  0048  28FD               u68_20:
  2105  0049                     	line	85
  2106                           	
  2107                           i1l1059:	
  2108  0049                     ;main.c: 85:                 ps2BitsCount = 0;
  2109                           	clrf	(_ps2BitsCount)
  2110  0049  01A8               	line	86
  2111                           ;main.c: 86:                 ps2Bits = 0;
  2112                           	clrf	(_ps2Bits)
  2113  004A  01A9               	line	87
  2114                           	
  2115                           i1l1061:	
  2116  004B                     ;main.c: 87:                 ps2DataState = 1;
  2117                           	clrf	(_ps2DataState)
  2118  004B  01AA               	incf	(_ps2DataState),f
  2119  004C  0AAA               	goto	i1l1113
  2120  004D  28FD               	line	88
  2121                           ;main.c: 88:             }
  2122                           	
  2123                           i1l81:	
  2124  004E                     	line	89
  2125                           ;main.c: 89:         } else if ( ps2DataState == 1 ) {
  2126                           	goto	i1l1113
  2127  004E  28FD               	
  2128                           i1l80:	
  2129  004F                     	
  2130                           i1l1063:	
  2131  004F                     		decf	((_ps2DataState)),w
  2132  004F  032A               	btfss	status,2
  2133  0050  1D03               	goto	u69_21
  2134  0051  2853               	goto	u69_20
  2135  0052  2854               u69_21:
  2136  0053                     	goto	i1l1113
  2137  0053  28FD               u69_20:
  2138  0054                     	line	90
  2139                           	
  2140                           i1l1065:	
  2141  0054                     ;main.c: 90:             if ( ps2BitsCount < 8 ) {
  2142                           	movf	(_ps2BitsCount),w
  2143  0054  0828               	xorlw	80h
  2144  0055  3A80               	addlw	-((08h)^80h)
  2145  0056  3E78               	skipnc
  2146  0057  1803               	goto	u70_21
  2147  0058  285A               	goto	u70_20
  2148  0059  285B               u70_21:
  2149  005A                     	goto	i1l1071
  2150  005A  2871               u70_20:
  2151  005B                     	line	91
  2152                           	
  2153                           i1l1067:	
  2154  005B                     ;main.c: 91:                 if ( PORTAbits.RA3 ) {
  2155                           	btfss	(5),3	;volatile
  2156  005B  1D85               	goto	u71_21
  2157  005C  285E               	goto	u71_20
  2158  005D  285F               u71_21:
  2159  005E                     	goto	i1l85
  2160  005E  286C               u71_20:
  2161  005F                     	line	92
  2162                           	
  2163                           i1l1069:	
  2164  005F                     ;main.c: 92:                     ps2Bits |= ( 1 << ps2BitsCount );
  2165                           	movlw	low(01h)
  2166  005F  3001               	movwf	(??_myIsr+0)+0
  2167  0060  008C               	incf	(_ps2BitsCount),w
  2168  0061  0A28               	goto	u72_24
  2169  0062  2865               u72_25:
  2170  0063                     	clrc
  2171  0063  1003               	rlf	(??_myIsr+0)+0,f
  2172  0064  0D8C               u72_24:
  2173  0065                     	addlw	-1
  2174  0065  3EFF               	skipz
  2175  0066  1D03               	goto	u72_25
  2176  0067  2863               	movf	0+(??_myIsr+0)+0,w
  2177  0068  080C               	movwf	(??_myIsr+1)+0
  2178  0069  008D               	movf	(??_myIsr+1)+0,w
  2179  006A  080D               	iorwf	(_ps2Bits),f
  2180  006B  04A9               	line	93
  2181                           ;main.c: 93:                 }
  2182                           	
  2183                           i1l85:	
  2184  006C                     	line	94
  2185                           ;main.c: 94:                 ps2BitsCount++;
  2186                           	movlw	low(01h)
  2187  006C  3001               	movwf	(??_myIsr+0)+0
  2188  006D  008C               	movf	(??_myIsr+0)+0,w
  2189  006E  080C               	addwf	(_ps2BitsCount),f
  2190  006F  07A8               	line	95
  2191                           ;main.c: 95:             } else if ( ps2BitsCount == 8 ) {
  2192                           	goto	i1l1113
  2193  0070  28FD               	
  2194                           i1l84:	
  2195  0071                     	
  2196                           i1l1071:	
  2197  0071                     		movlw	8
  2198  0071  3008               	xorwf	((_ps2BitsCount)),w
  2199  0072  0628               	btfss	status,2
  2200  0073  1D03               	goto	u73_21
  2201  0074  2876               	goto	u73_20
  2202  0075  2877               u73_21:
  2203  0076                     	goto	i1l1075
  2204  0076  287C               u73_20:
  2205  0077                     	line	96
  2206                           	
  2207                           i1l1073:	
  2208  0077                     ;main.c: 96:                 ps2BitsCount++;
  2209                           	movlw	low(01h)
  2210  0077  3001               	movwf	(??_myIsr+0)+0
  2211  0078  008C               	movf	(??_myIsr+0)+0,w
  2212  0079  080C               	addwf	(_ps2BitsCount),f
  2213  007A  07A8               	line	97
  2214                           ;main.c: 97:             } else if ( ps2BitsCount == 9 ) {
  2215                           	goto	i1l1113
  2216  007B  28FD               	
  2217                           i1l87:	
  2218  007C                     	
  2219                           i1l1075:	
  2220  007C                     		movlw	9
  2221  007C  3009               	xorwf	((_ps2BitsCount)),w
  2222  007D  0628               	btfss	status,2
  2223  007E  1D03               	goto	u74_21
  2224  007F  2881               	goto	u74_20
  2225  0080  2882               u74_21:
  2226  0081                     	goto	i1l1113
  2227  0081  28FD               u74_20:
  2228  0082                     	line	98
  2229                           	
  2230                           i1l1077:	
  2231  0082                     ;main.c: 98:                 ps2DataCount++;
  2232                           	movlw	low(01h)
  2233  0082  3001               	movwf	(??_myIsr+0)+0
  2234  0083  008C               	movf	(??_myIsr+0)+0,w
  2235  0084  080C               	addwf	(_ps2DataCount),f
  2236  0085  07A6               	line	99
  2237                           ;main.c: 99:                 if ( ps2NeedEncode ) {
  2238                           	movf	((_ps2NeedEncode)),w
  2239  0086  0823               	btfsc	status,2
  2240  0087  1903               	goto	u75_21
  2241  0088  288A               	goto	u75_20
  2242  0089  288B               u75_21:
  2243  008A                     	goto	i1l1093
  2244  008A  28C4               u75_20:
  2245  008B                     	line	100
  2246                           	
  2247                           i1l1079:	
  2248  008B                     ;main.c: 100:                     for (int ii=0; ii < 25; ii+=2) {
  2249                           	clrf	(myIsr@ii)
  2250  008B  0194               	clrf	(myIsr@ii+1)
  2251  008C  0195               	
  2252                           i1l1081:	
  2253  008D                     	movf	(myIsr@ii+1),w
  2254  008D  0815               	xorlw	80h
  2255  008E  3A80               	movwf	btemp+1
  2256  008F  00CF               	movlw	(0)^80h
  2257  0090  3080               	subwf	btemp+1,w
  2258  0091  024F               	skipz
  2259  0092  1D03               	goto	u76_25
  2260  0093  2896               	movlw	019h
  2261  0094  3019               	subwf	(myIsr@ii),w
  2262  0095  0214               u76_25:
  2263  0096                     
  2264                           	skipc
  2265  0096  1C03               	goto	u76_21
  2266  0097  2899               	goto	u76_20
  2267  0098  289A               u76_21:
  2268  0099                     	goto	i1l1085
  2269  0099  289C               u76_20:
  2270  009A                     	goto	i1l1099
  2271  009A  28DC               	
  2272                           i1l1083:	
  2273  009B                     	goto	i1l1099
  2274  009B  28DC               	
  2275                           i1l91:	
  2276  009C                     	line	101
  2277                           	
  2278                           i1l1085:	
  2279  009C                     ;main.c: 101:                         if ( ps2Bits == replaceTwoBytesCodes[ii] ) {
  2280                           	bcf	status, 5	;RP0=0, select bank0
  2281  009C  1283               	movf	(myIsr@ii),w
  2282  009D  0814               	addlw	low((((_replaceTwoBytesCodes)-__stringbase)|8000h))
  2283  009E  3EA5               	movwf	fsr0
  2284  009F  0084               	fcall	stringdir
  2285  00A0  2109               	xorwf	(_ps2Bits),w
  2286  00A1  0629               	skipz
  2287  00A2  1D03               	goto	u77_21
  2288  00A3  28A5               	goto	u77_20
  2289  00A4  28A6               u77_21:
  2290  00A5                     	goto	i1l1089
  2291  00A5  28AF               u77_20:
  2292  00A6                     	line	102
  2293                           	
  2294                           i1l1087:	
  2295  00A6                     ;main.c: 102:                             ps2Data = replaceTwoBytesCodes[ii+1];
  2296                           	movf	(myIsr@ii),w
  2297  00A6  0814               	addlw	01h
  2298  00A7  3E01               	addlw	low((((_replaceTwoBytesCodes)-__stringbase)|8000h))
  2299  00A8  3EA5               	movwf	fsr0
  2300  00A9  0084               	fcall	stringdir
  2301  00AA  2109               	movwf	(??_myIsr+0)+0
  2302  00AB  008C               	movf	(??_myIsr+0)+0,w
  2303  00AC  080C               	movwf	(_ps2Data)
  2304  00AD  00A7               	line	103
  2305                           ;main.c: 103:                             break;
  2306                           	goto	i1l1099
  2307  00AE  28DC               	line	104
  2308                           ;main.c: 104:                         }
  2309                           	
  2310                           i1l93:	
  2311  00AF                     	line	105
  2312                           	
  2313                           i1l1089:	
  2314  00AF                     ;main.c: 105:                     }
  2315                           	movlw	02h
  2316  00AF  3002               	addwf	(myIsr@ii),f
  2317  00B0  0794               	skipnc
  2318  00B1  1803               	incf	(myIsr@ii+1),f
  2319  00B2  0A95               	movlw	0
  2320  00B3  3000               	addwf	(myIsr@ii+1),f
  2321  00B4  0795               	
  2322                           i1l1091:	
  2323  00B5                     	movf	(myIsr@ii+1),w
  2324  00B5  0815               	xorlw	80h
  2325  00B6  3A80               	movwf	btemp+1
  2326  00B7  00CF               	movlw	(0)^80h
  2327  00B8  3080               	subwf	btemp+1,w
  2328  00B9  024F               	skipz
  2329  00BA  1D03               	goto	u78_25
  2330  00BB  28BE               	movlw	019h
  2331  00BC  3019               	subwf	(myIsr@ii),w
  2332  00BD  0214               u78_25:
  2333  00BE                     
  2334                           	skipc
  2335  00BE  1C03               	goto	u78_21
  2336  00BF  28C1               	goto	u78_20
  2337  00C0  28C2               u78_21:
  2338  00C1                     	goto	i1l1085
  2339  00C1  289C               u78_20:
  2340  00C2                     	goto	i1l1099
  2341  00C2  28DC               	
  2342                           i1l92:	
  2343  00C3                     	line	106
  2344                           ;main.c: 106:                 } else {
  2345                           	goto	i1l1099
  2346  00C3  28DC               	
  2347                           i1l90:	
  2348  00C4                     	line	107
  2349                           	
  2350                           i1l1093:	
  2351  00C4                     ;main.c: 107:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2352                           		movlw	131
  2353  00C4  3083               	bcf	status, 5	;RP0=0, select bank0
  2354  00C5  1283               	xorwf	((_ps2Bits)),w
  2355  00C6  0629               	btfsc	status,2
  2356  00C7  1903               	goto	u79_21
  2357  00C8  28CA               	goto	u79_20
  2358  00C9  28CB               u79_21:
  2359  00CA                     	goto	i1l1097
  2360  00CA  28D3               u79_20:
  2361  00CB                     	
  2362                           i1l1095:	
  2363  00CB                     	movf	(_ps2Bits),w
  2364  00CB  0829               	movwf	(??_myIsr+0)+0
  2365  00CC  008C               	clrf	(??_myIsr+0)+0+1
  2366  00CD  018D               	movf	0+(??_myIsr+0)+0,w
  2367  00CE  080C               	movwf	(_myIsr$84)
  2368  00CF  0092               	movf	1+(??_myIsr+0)+0,w
  2369  00D0  080D               	movwf	(_myIsr$84+1)
  2370  00D1  0093               	goto	i1l98
  2371  00D2  28D7               	
  2372                           i1l96:	
  2373  00D3                     	
  2374                           i1l1097:	
  2375  00D3                     	movlw	03Fh
  2376  00D3  303F               	movwf	(_myIsr$84)
  2377  00D4  0092               	movlw	0
  2378  00D5  3000               	movwf	((_myIsr$84))+1
  2379  00D6  0093               	
  2380                           i1l98:	
  2381  00D7                     	movf	(_myIsr$84),w
  2382  00D7  0812               	movwf	(??_myIsr+0)+0
  2383  00D8  008C               	movf	(??_myIsr+0)+0,w
  2384  00D9  080C               	movwf	(_ps2Data)
  2385  00DA  00A7               	goto	i1l1099
  2386  00DB  28DC               	line	108
  2387                           ;main.c: 108:                 }
  2388                           	
  2389                           i1l94:	
  2390  00DC                     	line	109
  2391                           	
  2392                           i1l1099:	
  2393  00DC                     ;main.c: 109:                 if ( ps2Bits == 0xF0 ) {
  2394                           		movlw	240
  2395  00DC  30F0               	bcf	status, 5	;RP0=0, select bank0
  2396  00DD  1283               	xorwf	((_ps2Bits)),w
  2397  00DE  0629               	btfss	status,2
  2398  00DF  1D03               	goto	u80_21
  2399  00E0  28E2               	goto	u80_20
  2400  00E1  28E3               u80_21:
  2401  00E2                     	goto	i1l1105
  2402  00E2  28E7               u80_20:
  2403  00E3                     	line	110
  2404                           	
  2405                           i1l1101:	
  2406  00E3                     ;main.c: 110:                     ps2DataState = 0;
  2407                           	clrf	(_ps2DataState)
  2408  00E3  01AA               	line	111
  2409                           	
  2410                           i1l1103:	
  2411  00E4                     ;main.c: 111:                     ps2Up = 1;
  2412                           	clrf	(_ps2Up)
  2413  00E4  01A4               	incf	(_ps2Up),f
  2414  00E5  0AA4               	line	112
  2415                           ;main.c: 112:                 } else if ( ps2Bits == 0xE0 ) {
  2416                           	goto	i1l1113
  2417  00E6  28FD               	
  2418                           i1l99:	
  2419  00E7                     	
  2420                           i1l1105:	
  2421  00E7                     		movlw	224
  2422  00E7  30E0               	xorwf	((_ps2Bits)),w
  2423  00E8  0629               	btfss	status,2
  2424  00E9  1D03               	goto	u81_21
  2425  00EA  28EC               	goto	u81_20
  2426  00EB  28ED               u81_21:
  2427  00EC                     	goto	i1l1111
  2428  00EC  28F1               u81_20:
  2429  00ED                     	line	113
  2430                           	
  2431                           i1l1107:	
  2432  00ED                     ;main.c: 113:                     ps2DataState = 0;
  2433                           	clrf	(_ps2DataState)
  2434  00ED  01AA               	line	114
  2435                           	
  2436                           i1l1109:	
  2437  00EE                     ;main.c: 114:                     ps2NeedEncode = 1;
  2438                           	clrf	(_ps2NeedEncode)
  2439  00EE  01A3               	incf	(_ps2NeedEncode),f
  2440  00EF  0AA3               	line	115
  2441                           ;main.c: 115:                 } else {
  2442                           	goto	i1l1113
  2443  00F0  28FD               	line	123
  2444                           	
  2445                           i1l101:	
  2446  00F1                     	line	124
  2447                           	
  2448                           i1l1111:	
  2449  00F1                     ;main.c: 124:                     ps2DataState = 2;
  2450                           	movlw	low(02h)
  2451  00F1  3002               	movwf	(??_myIsr+0)+0
  2452  00F2  008C               	movf	(??_myIsr+0)+0,w
  2453  00F3  080C               	movwf	(_ps2DataState)
  2454  00F4  00AA               	goto	i1l1113
  2455  00F5  28FD               	line	125
  2456                           ;main.c: 125:                 }
  2457                           	
  2458                           i1l102:	
  2459  00F6                     	goto	i1l1113
  2460  00F6  28FD               	
  2461                           i1l100:	
  2462  00F7                     	goto	i1l1113
  2463  00F7  28FD               	line	127
  2464                           ;main.c: 127:             }
  2465                           	
  2466                           i1l89:	
  2467  00F8                     	goto	i1l1113
  2468  00F8  28FD               	
  2469                           i1l88:	
  2470  00F9                     	goto	i1l1113
  2471  00F9  28FD               	
  2472                           i1l86:	
  2473  00FA                     	goto	i1l1113
  2474  00FA  28FD               	line	128
  2475                           ;main.c: 128:         }
  2476                           	
  2477                           i1l83:	
  2478  00FB                     	goto	i1l1113
  2479  00FB  28FD               	
  2480                           i1l82:	
  2481  00FC                     	goto	i1l1113
  2482  00FC  28FD               	line	129
  2483                           ;main.c: 129:     }
  2484                           	
  2485                           i1l79:	
  2486  00FD                     	line	130
  2487                           	
  2488                           i1l1113:	
  2489  00FD                     ;main.c: 130:     GIE = 1;
  2490                           	bsf	(95/8),(95)&7	;volatile
  2491  00FD  178B               	line	131
  2492                           	
  2493                           i1l103:	
  2494  00FE                     	movf	(??_myIsr+5),w
  2495  00FE  0811               	movwf	btemp+1
  2496  00FF  00CF               	movf	(??_myIsr+4),w
  2497  0100  0810               	movwf	pclath
  2498  0101  008A               	movf	(??_myIsr+3),w
  2499  0102  080F               	movwf	fsr0
  2500  0103  0084               	swapf	(??_myIsr+2)^00h,w
  2501  0104  0E0E               	movwf	status
  2502  0105  0083               	swapf	saved_w,f
  2503  0106  0ECE               	swapf	saved_w,w
  2504  0107  0E4E               	retfie
  2505  0108  0009               	opt stack 0
  2506                           GLOBAL	__end_of_myIsr
  2507                           	__end_of_myIsr:
  2508  0109                     	signat	_myIsr,89
  2509                           global	___latbits
  2510                           ___latbits	equ	0
  2511  0000                     	global	btemp
  2512                           	btemp set 04Eh
  2513  004E                     
  2514                           	DABS	1,78,2	;btemp
  2515                           	global	wtemp0
  2516                           	wtemp0 set btemp+0
  2517  004E                     	end


Data Sizes:
    Strings     0
    Constant    190
    Data        13
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     17      44

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_keyDown
    _main->_keyUp
    _keyUp->_resetPort
    _keyDown->_resetPort
    _keyDown->_setPort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     220
                                             16 BANK0      1     1      0
                            _keyDown
                              _keyUp
                   _sendDataToAltera
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     1     1      0       0
                                             10 BANK0      1     1      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyUp                                                2     2      0      88
                                             14 BANK0      2     2      0
                          _resetPort
 ---------------------------------------------------------------------------------
 (1) _keyDown                                              2     2      0     132
                                             14 BANK0      2     2      0
                          _resetPort
                            _setPort
 ---------------------------------------------------------------------------------
 (2) _setPort                                              4     4      0      44
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _resetPort                                            4     4      0      44
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                               10    10      0     114
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keyDown
     _resetPort
     _setPort
   _keyUp
     _resetPort
   _sendDataToAltera
     _myDelay

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     11      2C       3       66.7%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2C       6        0.0%
ABS                  0      0      2C       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Aug 24 21:41:25 2018

                            _i 0022                              pc 0002                             fsr 0004  
                          l120 02A7                            l112 0283                            l121 02B5  
                          l113 02B9                            l106 032A                            l114 02B9  
                          l123 02B2                            l115 02A4                            l124 02B8  
                          l132 035A                            l109 030B                            l117 02A1  
                          l142 01EA                            l119 029C                            l127 0335  
                          l135 02D1                            l151 0239                            l143 0275  
                          l128 0344                            l136 02E9                            l152 024B  
                          l144 0225                            l129 0344                            l137 02EB  
                          l161 0268                            l145 0205                            l162 0277  
                          l154 0248                            l146 0224                            l163 0278  
                          l155 026D                            l147 0219                            l164 0278  
                          l156 025B                            l148 024C                            l149 023C  
                          l158 0259                            l159 026A                            l973 030E  
                          l981 0283                            l975 02EE                            l991 02A1  
                          l983 028A                            l993 02A4                            l985 028F  
                          l977 027B                            l995 02A7                            l987 0291  
                          l979 0282                            _GIE 005F                            l997 02AD  
                          l989 0297                            l999 02B2                            _RA1 0029  
                          _RA2 002A                            u504 031E                            u600 0333  
                          u505 031C                            u601 0332                            u530 0281  
                          u610 0341                            u515 02F3                            u531 0280  
                          u611 0340                            u524 02FE                            u540 028F  
                          u620 02CF                            u525 02FC                            u541 028E  
                          u621 02CE                            u550 0297                            u630 02E9  
                          u551 0296                            u631 02E8                            u560 029C  
                          u561 029B                            u570 02A0                            u571 029F  
                          u580 02AD                            u900 0239                            u820 01F1  
                          u581 02AC                            u901 0238                            u821 01F0  
                          u590 02B1                            u910 0242                            u830 01F7  
                          u495 0313                            u591 02B0                            u911 0241  
                          u831 01F6                            _PSA 040B                            u920 0248  
                          u840 01FC                            u921 0247                            u841 01FB  
                          u930 0252                            u850 0203                            u931 0251  
                          u851 0202                            u940 0258                            u860 020E  
                          u941 0257                            u861 020D                            u950 0261  
                          u870 0223                            u951 0260                            u871 0222  
                          u960 0267                            u880 022A                            u961 0266  
                          u881 0229                            u890 0233                            u891 0232  
                          fsr0 0004                            indf 0000                           l1001 02B5  
                         l1011 0341                           l1003 032D                           l1005 0334  
                         l1021 02C4                           l1013 02BA                           l1007 0335  
                         l1031 02D3                           l1023 02C7                           l1015 02BD  
                         l1009 033C                           l1041 02E3                           l1033 02DA  
                         l1025 02C9                           l1017 02BE                           l1201 0271  
                         l1121 01DB                           l1043 02EA                           l1035 02DB  
                         l1027 02D0                           l1019 02C1                           l1203 0272  
                         l1131 01E0                           l1123 01DC                           l1115 01CD  
                         l1037 02DD                           l1029 02D2                           l1205 0273  
                         l1141 01E7                           l1133 01E3                           l1125 01DD  
                         l1117 01D3                           l1039 02DE                           l1207 0274  
                         l1151 01F7                           l1143 01E8                           l1135 01E4  
                         l1127 01DE                           l1119 01D9                           l1161 020E  
                         l1153 01FC                           l1145 01EA                           l1137 01E5  
                         l1129 01DF                           l1171 022A                           l1163 0210  
                         l1155 01FD                           l1147 01F1                           l1139 01E6  
                         l1173 022C                           l1181 024C                           l1165 0219  
                         l1157 0204                           l1149 01F2                           l1191 0268  
                         l1183 0252                           l1175 0233                           l1167 021D  
                         l1159 0205                           l1193 026A                           l1185 0259  
                         l1177 023C                           l1169 0225                           l1187 025B  
                         l1195 026D                           l1179 0242                           l1197 026F  
                         l1189 0261                           l1199 0270                           _T0IE 005D  
                         _T0IF 005A                           _T0CS 040D                           _T0SE 040C  
                         i1l80 004F                           i1l81 004E                           i1l82 00FC  
                         i1l90 00C4                           i1l83 00FB                           i1l91 009C  
                         i1l92 00C3                           i1l84 0071                           i1l93 00AF  
                         i1l85 006C                           i1l86 00FA                           i1l94 00DC  
                         i1l79 00FD                           i1l87 007C                           i1l88 00F9  
                         i1l96 00D3                           i1l89 00F8                           i1l98 00D7  
                         i1l99 00E7                           _TMR0 0001                           _main 01CD  
                         _ctrl 0020                           btemp 004E                           start 000F  
                        ?_main 000C   __end_of_replaceTwoBytesCodes 01CD                          i1l100 00F7  
                        i1l101 00F1                          i1l102 00F6                          i1l103 00FE  
                        _PORTA 0005                          _PORTB 0006           __end_of_codeToMatrix 018F  
                        u70_20 005B                          u70_21 005A                          u71_20 005F  
                        u71_21 005E                          u80_20 00E3                          u64_20 0035  
                        u80_21 00E2                          u64_21 0034                          u72_24 0065  
                        u72_25 0063                          u81_20 00ED                          u73_20 0077  
                        u65_20 0039                          u81_21 00EC                          u73_21 0076  
                        u65_21 0038                          _TRISB 0086                          u74_20 0082  
                        u66_20 0041                          u74_21 0081                          u66_21 0040  
                        u75_20 008B                          u67_20 0045                          u75_21 008A  
                        u67_21 0044                          u76_20 009A                          u68_20 0049  
                        u76_21 0099                          u68_21 0048                          u76_25 0096  
                        u77_20 00A6                          u69_20 0054                          u77_21 00A5  
                        u69_21 0053                          u78_20 00C2                          u78_21 00C1  
                        u78_25 00BE                          u79_20 00CB                          u79_21 00CA  
              __end_of_keyDown 02BA                          _ps2Up 0024                __end_of_myDelay 035B  
                        _keyUp 032B                          _myIsr 0031                          _shift 0021  
              __end_of_setPort 032B                          pclath 000A                          status 0003  
                        wtemp0 004E                __initialization 0010                   __end_of_main 0279  
                       ??_main 001C                         ?_keyUp 000C                         ?_myIsr 000C  
                       i1l1101 00E3                         i1l1111 00F1                         i1l1103 00E4  
                       i1l1105 00E7                         i1l1113 00FD                         i1l1107 00ED  
                       i1l1051 003A                         i1l1109 00EE                         i1l1061 004B  
                       i1l1053 003C                         i1l1045 0031                         i1l1071 0071  
                       i1l1055 0041                         i1l1063 004F                         i1l1047 0035  
                       i1l1081 008D                         i1l1073 0077                         i1l1065 0054  
                       i1l1057 0045                         i1l1049 0039                         i1l1091 00B5  
                       i1l1083 009B                         i1l1075 007C                         i1l1067 005B  
                       i1l1059 0049                         i1l1085 009C                         i1l1093 00C4  
                       i1l1077 0082                         i1l1069 005F                         i1l1095 00CB  
                       i1l1087 00A6                         i1l1079 008B                         i1l1097 00D3  
                       i1l1089 00AF                         i1l1099 00DC                         _TRISA0 0428  
                       _TRISA1 0429                         _TRISA2 042A                         _TRISA3 042B  
                       _TRISA4 042C       __end_of_sendDataToAltera 02EC                         _mouseX 0037  
                       _mouseY 0036                      ??_keyDown 001A                      ??_myDelay 0000  
                       saved_w 004E                      ??_setPort 0016        __end_of__initialization 002F  
         _replaceTwoBytesCodes 01B3                 __pcstackCOMMON 0000                   __pidataBANK0 0345  
                __end_of_keyUp 0345                  __end_of_myIsr 0109                        ??_keyUp 001A  
                      ??_myIsr 000C                   _ps2DataCount 0026                   _ps2DataState 002A  
                   __pbssBANK0 001D                   _ps2BitsCount 0028                   _codeToMatrix 010F  
                   __pmaintext 01CD                     __pintentry 0004             __size_of_resetPort 0020  
                   __stringtab 0109  __end_of_replaceOnShiftKeyDown 01B3                        _ps2Data 0027  
                      _ps2Bits 0029                        __ptext1 02BA                        __ptext2 035A  
                      __ptext3 032B                        __ptext4 0279                        __ptext5 030C  
                      __ptext6 02EC                        __ptext7 0031                        _keyDown 0279  
                      _myDelay 035A                        _setPort 030C                        clrloop0 0353  
         end_of_initialization 002F              __end_of_resetPort 030C                        myIsr@ii 0014  
            ?_sendDataToAltera 000C                     _mouseDelay 001D             ??_sendDataToAltera 0016  
                    _PORTAbits 0005                  setPort@bit_id 0019                     keyDown@key 001B  
          start_initialization 0010                    __pdataBANK0 002B                      ___latbits 0000  
                __pcstackBANK0 000C                resetPort@bit_id 0019                      __pstrings 0109  
                _ps2NeedEncode 0023                       ?_keyDown 000C                       ?_myDelay 000C  
                  _ps2WaitCode 0025                       ?_setPort 000C                 __size_of_keyUp 001A  
               __size_of_myIsr 00D8              interrupt_function 0004                      clear_ram0 0352  
                    _resetPort 02EC          _replaceOnShiftKeyDown 018F                    __stringbase 010E  
    __size_of_sendDataToAltera 0032                     ?_resetPort 000C             __end_of__stringtab 010F  
             __size_of_keyDown 0041               __size_of_myDelay 0001               __size_of_setPort 001F  
                     _myIsr$84 0012                  __size_of_main 00AC                       _replaced 001F  
                     _outPorts 002B                       keyUp@key 001B                       intlevel1 0000  
                    stringcode 0109                    ??_resetPort 0016               _sendDataToAltera 02BA  
                     stringdir 0109                       stringtab 0109  
