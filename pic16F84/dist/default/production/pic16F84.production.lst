

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 27 01:40:10 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1  0000                     
      + 0000                     
     2                           ; Version 2.00
     3                           ; Generated 27/05/2018 GMT
     4                           
     5                           ; 
     6                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
     7                           ; All rights reserved.
     8                           ; 
     9                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
                                 ip").
    10                           ; 
    11                           ; Redistribution and use in source and binary forms, with or without modification, are
    12                           ; permitted provided that the following conditions are met:
    13                           ; 
    14                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
                                 t of
    15                           ;        conditions and the following disclaimer.
    16                           ; 
    17                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
                                 list
    18                           ;        of conditions and the following disclaimer in the documentation and/or other
    19                           ;        materials provided with the distribution.
    20                           ; 
    21                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
                                 is
    22                           ;        software without specific prior written permission.
    23                           ; 
    24                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,

    25                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
                                 OR
    26                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
                                 T,
    27                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
                                 
    28                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
                                 
    29                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
                                 RICT
    30                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
                                 SE OF
    31                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    32                           ; 
    33                           
    34                           
    35                           ; 
    36                           ; Code-generator required, PIC16F84A Definitions
    37                           ; 
    38  0004                     fsr0 equ 04h
    39  0004                     indf equ 00h
    40  0000                     indf0 equ 00h
    41  0000                     pc equ 02h
    42  0002                     pcl equ 02h
    43  0002                     pclath equ 0Ah
    44  000A                     status equ 03h
    45  0003                     
     2                           opt pagewidth 120
     3  0000                     byte0	macro	val
     4                           	(getbyte(val,0))
     5                           endm
     6  0000                     byte1	macro	val
     7                           	(getbyte(val,1))
     8                           endm
     9  0000                     byte2	macro	val
    10                           	(getbyte(val,2))
    11                           endm
    12  0000                     byte3	macro	val
    13                           	(getbyte(val,3))
    14                           endm
    15  0000                     byte4	macro	val
    16                           	(getbyte(val,4))
    17                           endm
    18  0000                     byte5	macro	val
    19                           	(getbyte(val,5))
    20                           endm
    21  0000                     byte6	macro	val
    22                           	(getbyte(val,6))
    23                           endm
    24  0000                     byte7	macro	val
    25                           	(getbyte(val,7))
    26                           endm
    27  0000                     getword	macro	val,pos
    28                           	(((val) >> (8 * pos)) and 0xffff)
    29                           endm
    30  0000                     word0	macro	val
    31                           	(getword(val,0))
    32                           endm
    33  0000                     word1	macro	val
    34                           	(getword(val,2))
    35                           endm
    36  0000                     word2	macro	val
    37                           	(getword(val,4))
    38                           endm
    39  0000                     word3	macro	val
    40                           	(getword(val,6))
    41                           endm
    42  0000                     gettword	macro	val,pos
    43                           	(((val) >> (8 * pos)) and 0xffffff)
    44                           endm
    45  0000                     tword0	macro	val
    46                           	(gettword(val,0))
    47                           endm
    48  0000                     tword1	macro	val
    49                           	(gettword(val,3))
    50                           endm
    51  0000                     tword2	macro	val
    52                           	(gettword(val,6))
    53                           endm
    54  0000                     getdword	macro	val,pos
    55                           	(((val) >> (8 * pos)) and 0xffffffff)
    56                           endm
    57  0000                     dword0	macro	val
    58                           	(getdword(val,0))
    59                           endm
    60  0000                     dword1	macro	val
    61                           	(getdword(val,4))
    62                           endm
    63  0000                     clrc	macro
    64                           	bcf	3,0
    65                           	endm
    66  0000                     clrz	macro
    67                           	bcf	3,2
    68                           	endm
    69  0000                     setc	macro
    70                           	bsf	3,0
    71                           	endm
    72  0000                     setz	macro
    73                           	bsf	3,2
    74                           	endm
    75  0000                     skipc	macro
    76                           	btfss	3,0
    77                           	endm
    78  0000                     skipz	macro
    79                           	btfss	3,2
    80                           	endm
    81  0000                     skipnc	macro
    82                           	btfsc	3,0
    83                           	endm
    84  0000                     skipnz	macro
    85                           	btfsc	3,2
    86                           	endm
    87  0000                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    88                           INDF equ 00h ;# 
    89  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    90                           TMR0 equ 01h ;# 
    91  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    92                           PCL equ 02h ;# 
    93  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    94                           STATUS equ 03h ;# 
    95  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    96                           FSR equ 04h ;# 
    97  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
    98                           PORTA equ 05h ;# 
    99  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   100                           PORTB equ 06h ;# 
   101  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   102                           EEDATA equ 08h ;# 
   103  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   104                           EEADR equ 09h ;# 
   105  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   106                           PCLATH equ 0Ah ;# 
   107  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   108                           INTCON equ 0Bh ;# 
   109  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   110                           OPTION_REG equ 081h ;# 
   111  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   112                           TRISA equ 085h ;# 
   113  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   114                           TRISB equ 086h ;# 
   115  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   116                           EECON1 equ 088h ;# 
   117  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   118                           EECON2 equ 089h ;# 
   119  0089                     # 54 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   120                           INDF equ 00h ;# 
   121  0000                     # 61 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   122                           TMR0 equ 01h ;# 
   123  0001                     # 68 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   124                           PCL equ 02h ;# 
   125  0002                     # 75 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   126                           STATUS equ 03h ;# 
   127  0003                     # 161 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   128                           FSR equ 04h ;# 
   129  0004                     # 168 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   130                           PORTA equ 05h ;# 
   131  0005                     # 212 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   132                           PORTB equ 06h ;# 
   133  0006                     # 274 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   134                           EEDATA equ 08h ;# 
   135  0008                     # 281 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   136                           EEADR equ 09h ;# 
   137  0009                     # 288 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   138                           PCLATH equ 0Ah ;# 
   139  000A                     # 308 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   140                           INTCON equ 0Bh ;# 
   141  000B                     # 386 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   142                           OPTION_REG equ 081h ;# 
   143  0081                     # 456 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   144                           TRISA equ 085h ;# 
   145  0085                     # 500 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   146                           TRISB equ 086h ;# 
   147  0086                     # 562 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   148                           EECON1 equ 088h ;# 
   149  0088                     # 606 "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\include\pic16f84a.h"
   150                           EECON2 equ 089h ;# 
   151  0089                     	FNCALL	_main,_keyDown
   152                           	FNCALL	_main,_keyUp
   153                           	FNCALL	_main,_sendDataToAltera
   154                           	FNCALL	_sendDataToAltera,_myDelay
   155                           	FNCALL	_keyUp,_resetPort
   156                           	FNCALL	_keyDown,_resetPort
   157                           	FNCALL	_keyDown,_setPort
   158                           	FNROOT	_main
   159                           	FNCALL	intlevel1,_myIsr
   160                           	global	intlevel1
   161                           	FNROOT	intlevel1
   162                           	global	_outPorts
   163                           	global	_mouseY
   164                           	global	_mouseX
   165                           psect	idataBANK0,class=CODE,space=0,delta=2,noexec
   166                           global __pidataBANK0
   167                           __pidataBANK0:
   168  0399                     	file	"main.c"
   169                           	line	41
   170                           
   171                           ;initializer for _outPorts
   172                           	retlw	low(0)
   173  0399  3400               	retlw	low(0)
   174  039A  3400               	retlw	low(0)
   175  039B  3400               	retlw	low(0)
   176  039C  3400               	retlw	low(0)
   177  039D  3400               	retlw	low(0)
   178  039E  3400               	retlw	low(0)
   179  039F  3400               	retlw	low(0)
   180  03A0  3400               	retlw	07h
   181  03A1  3407               	retlw	0F5h
   182  03A2  34F5               	retlw	0DAh
   183  03A3  34DA               	line	66
   184                           
   185                           ;initializer for _mouseY
   186                           	retlw	06Eh
   187  03A4  346E               	line	65
   188                           
   189                           ;initializer for _mouseX
   190                           	retlw	0DCh
   191  03A5  34DC               	global	_codeToMatrix
   192                           psect	strings,class=STRING,delta=2,noexec
   193                           global __pstrings
   194                           __pstrings:
   195  0207                     stringtab:
   196  0207                     	global    __stringtab
   197                           __stringtab:
   198  0207                     ;	String table - string pointers are 1 byte each
   199                           stringcode:stringdir:
   200  0207                     movlw high(stringdir)
      + 0207                     stringdir:	
   201  0207  3002               movwf pclath
   202  0208  008A               movf fsr,w
   203  0209  0804               incf fsr
   204  020A  0A84               	addwf pc
   205  020B  0782               	global __stringbase
   206                           __stringbase:
   207  020C                     	retlw	0
   208  020C  3400               psect	strings
   209                           	global    __end_of__stringtab
   210                           __end_of__stringtab:
   211  020D                     	file	"./ps2tozxtable.h"
   212                           	line	47
   213                           _codeToMatrix:
   214  020D                     	retlw	0FFh
   215  020D  34FF               	retlw	0FFh
   216  020E  34FF               	retlw	0FFh
   217  020F  34FF               	retlw	0FFh
   218  0210  34FF               	retlw	0FFh
   219  0211  34FF               	retlw	0FFh
   220  0212  34FF               	retlw	0FFh
   221  0213  34FF               	retlw	0FFh
   222  0214  34FF               	retlw	0FFh
   223  0215  34FF               	retlw	0FFh
   224  0216  34FF               	retlw	0FFh
   225  0217  34FF               	retlw	0FFh
   226  0218  34FF               	retlw	0FFh
   227  0219  34FF               	retlw	0FFh
   228  021A  34FF               	retlw	09Ch
   229  021B  349C               	retlw	0FFh
   230  021C  34FF               	retlw	0FFh
   231  021D  34FF               	retlw	0FFh
   232  021E  34FF               	retlw	0FFh
   233  021F  34FF               	retlw	0FFh
   234  0220  34FF               	retlw	0FFh
   235  0221  34FF               	retlw	02h
   236  0222  3402               	retlw	03h
   237  0223  3403               	retlw	0FFh
   238  0224  34FF               	retlw	0FFh
   239  0225  34FF               	retlw	0FFh
   240  0226  34FF               	retlw	08h
   241  0227  3408               	retlw	09h
   242  0228  3409               	retlw	01h
   243  0229  3401               	retlw	0Ah
   244  022A  340A               	retlw	0Bh
   245  022B  340B               	retlw	044h
   246  022C  3444               	retlw	0FFh
   247  022D  34FF               	retlw	018h
   248  022E  3418               	retlw	010h
   249  022F  3410               	retlw	011h
   250  0230  3411               	retlw	012h
   251  0231  3412               	retlw	01Bh
   252  0232  341B               	retlw	013h
   253  0233  3413               	retlw	0FFh
   254  0234  34FF               	retlw	05Ch
   255  0235  345C               	retlw	07h
   256  0236  3407               	retlw	020h
   257  0237  3420               	retlw	019h
   258  0238  3419               	retlw	022h
   259  0239  3422               	retlw	01Ah
   260  023A  341A               	retlw	023h
   261  023B  3423               	retlw	063h
   262  023C  3463               	retlw	064h
   263  023D  3464               	retlw	01Fh
   264  023E  341F               	retlw	027h
   265  023F  3427               	retlw	026h
   266  0240  3426               	retlw	021h
   267  0241  3421               	retlw	025h
   268  0242  3425               	retlw	024h
   269  0243  3424               	retlw	054h
   270  0244  3454               	retlw	0A0h
   271  0245  34A0               	retlw	06h
   272  0246  3406               	retlw	017h
   273  0247  3417               	retlw	01Eh
   274  0248  341E               	retlw	01Dh
   275  0249  341D               	retlw	01Ch
   276  024A  341C               	retlw	014h
   277  024B  3414               	retlw	0FFh
   278  024C  34FF               	retlw	0FFh
   279  024D  34FF               	retlw	09Fh
   280  024E  349F               	retlw	016h
   281  024F  3416               	retlw	015h
   282  0250  3415               	retlw	0Dh
   283  0251  340D               	retlw	04h
   284  0252  3404               	retlw	0Ch
   285  0253  340C               	retlw	0FFh
   286  0254  34FF               	retlw	0FFh
   287  0255  34FF               	retlw	097h
   288  0256  3497               	retlw	0A0h
   289  0257  34A0               	retlw	0Eh
   290  0258  340E               	retlw	08Dh
   291  0259  348D               	retlw	05h
   292  025A  3405               	retlw	09Eh
   293  025B  349E               	retlw	083h
   294  025C  3483               	retlw	08Bh
   295  025D  348B               	retlw	093h
   296  025E  3493               	retlw	09Ch
   297  025F  349C               	retlw	09Bh
   298  0260  349B               	retlw	0E5h
   299  0261  34E5               	retlw	08Eh
   300  0262  348E               	retlw	0A3h
   301  0263  34A3               	retlw	0A6h
   302  0264  34A6               	retlw	04Bh
   303  0265  344B               	retlw	0FFh
   304  0266  34FF               	retlw	06h
   305  0267  3406               	retlw	0DDh
   306  0268  34DD               	retlw	0A4h
   307  0269  34A4               	retlw	0FFh
   308  026A  34FF               	retlw	0A7h
   309  026B  34A7               	retlw	094h
   310  026C  3494               	retlw	08Ch
   311  026D  348C               	retlw	084h
   312  026E  3484               	retlw	096h
   313  026F  3496               	retlw	090h
   314  0270  3490               	retlw	0FFh
   315  0271  34FF               	retlw	0FFh
   316  0272  34FF               	retlw	044h
   317  0273  3444               	retlw	088h
   318  0274  3488               	retlw	085h
   319  0275  3485               	retlw	03h
   320  0276  3403               	retlw	09Ah
   321  0277  349A               	retlw	01Bh
   322  0278  341B               	retlw	01Ch
   323  0279  341C               	retlw	0A2h
   324  027A  34A2               	retlw	098h
   325  027B  3498               	retlw	0FFh
   326  027C  34FF               	retlw	04h
   327  027D  3404               	retlw	097h
   328  027E  3497               	retlw	0Bh
   329  027F  340B               	retlw	023h
   330  0280  3423               	retlw	024h
   331  0281  3424               	retlw	014h
   332  0282  3414               	retlw	043h
   333  0283  3443               	retlw	0FFh
   334  0284  34FF               	retlw	0FFh
   335  0285  34FF               	retlw	096h
   336  0286  3496               	retlw	013h
   337  0287  3413               	retlw	09Eh
   338  0288  349E               	retlw	0A7h
   339  0289  34A7               	retlw	0Ch
   340  028A  340C               	retlw	0FFh
   341  028B  34FF               	retlw	0FFh
   342  028C  34FF               	global __end_of_codeToMatrix
   343                           __end_of_codeToMatrix:
   344  028D                     	global	_replaceOnShiftKeyDown
   345                           psect	strings
   346                           	file	"./ps2tozxtable.h"
   347                           	line	4
   348                           _replaceOnShiftKeyDown:
   349  028D                     	retlw	016h
   350  028D  3416               	retlw	04Fh
   351  028E  344F               	retlw	01Eh
   352  028F  341E               	retlw	050h
   353  0290  3450               	retlw	026h
   354  0291  3426               	retlw	051h
   355  0292  3451               	retlw	025h
   356  0293  3425               	retlw	053h
   357  0294  3453               	retlw	02Eh
   358  0295  342E               	retlw	056h
   359  0296  3456               	retlw	036h
   360  0297  3436               	retlw	057h
   361  0298  3457               	retlw	03Dh
   362  0299  343D               	retlw	05Ch
   363  029A  345C               	retlw	03Eh
   364  029B  343E               	retlw	05Eh
   365  029C  345E               	retlw	046h
   366  029D  3446               	retlw	05Fh
   367  029E  345F               	retlw	045h
   368  029F  3445               	retlw	060h
   369  02A0  3460               	retlw	04Eh
   370  02A1  344E               	retlw	061h
   371  02A2  3461               	retlw	055h
   372  02A3  3455               	retlw	062h
   373  02A4  3462               	retlw	05Dh
   374  02A5  345D               	retlw	063h
   375  02A6  3463               	retlw	04Ch
   376  02A7  344C               	retlw	067h
   377  02A8  3467               	retlw	052h
   378  02A9  3452               	retlw	068h
   379  02AA  3468               	retlw	041h
   380  02AB  3441               	retlw	06Ah
   381  02AC  346A               	retlw	049h
   382  02AD  3449               	retlw	06Dh
   383  02AE  346D               	retlw	04Ah
   384  02AF  344A               	retlw	06Eh
   385  02B0  346E               	global __end_of_replaceOnShiftKeyDown
   386                           __end_of_replaceOnShiftKeyDown:
   387  02B1                     	global	_replaceTwoBytesCodes
   388                           psect	strings
   389                           	file	"./ps2tozxtable.h"
   390                           	line	26
   391                           _replaceTwoBytesCodes:
   392  02B1                     	retlw	014h
   393  02B1  3414               	retlw	013h
   394  02B2  3413               	retlw	070h
   395  02B3  3470               	retlw	017h
   396  02B4  3417               	retlw	06Ch
   397  02B5  346C               	retlw	018h
   398  02B6  3418               	retlw	07Dh
   399  02B7  347D               	retlw	019h
   400  02B8  3419               	retlw	071h
   401  02B9  3471               	retlw	01Fh
   402  02BA  341F               	retlw	069h
   403  02BB  3469               	retlw	020h
   404  02BC  3420               	retlw	07Ah
   405  02BD  347A               	retlw	027h
   406  02BE  3427               	retlw	075h
   407  02BF  3475               	retlw	028h
   408  02C0  3428               	retlw	06Bh
   409  02C1  346B               	retlw	02Fh
   410  02C2  342F               	retlw	072h
   411  02C3  3472               	retlw	030h
   412  02C4  3430               	retlw	074h
   413  02C5  3474               	retlw	037h
   414  02C6  3437               	retlw	04Ah
   415  02C7  344A               	retlw	038h
   416  02C8  3438               	retlw	05Ah
   417  02C9  345A               	retlw	039h
   418  02CA  3439               	global __end_of_replaceTwoBytesCodes
   419                           __end_of_replaceTwoBytesCodes:
   420  02CB                     	global	_codeToMatrix
   421                           	global	_replaceOnShiftKeyDown
   422                           	global	_replaceTwoBytesCodes
   423                           	global	_mouseDelay
   424                           	global	_replaced
   425                           	global	_ctrl
   426                           	global	_shift
   427                           	global	_i
   428                           	global	_ps2NeedEncode
   429                           	global	_ps2Up
   430                           	global	_ps2WaitCode
   431                           	global	_ps2DataCount
   432                           	global	_ps2Data
   433                           	global	_ps2BitsCount
   434                           	global	_ps2Bits
   435                           	global	_ps2DataState
   436                           	global	_PORTA
   437                           _PORTA	set	0x5
   438  0005                     	global	_PORTB
   439                           _PORTB	set	0x6
   440  0006                     	global	_PORTAbits
   441                           _PORTAbits	set	0x5
   442  0005                     	global	_TMR0
   443                           _TMR0	set	0x1
   444  0001                     	global	_RA1
   445                           _RA1	set	0x29
   446  0029                     	global	_RA2
   447                           _RA2	set	0x2A
   448  002A                     	global	_GIE
   449                           _GIE	set	0x5F
   450  005F                     	global	_T0IF
   451                           _T0IF	set	0x5A
   452  005A                     	global	_T0IE
   453                           _T0IE	set	0x5D
   454  005D                     	global	_TRISB
   455                           _TRISB	set	0x86
   456  0086                     	global	_PSA
   457                           _PSA	set	0x40B
   458  040B                     	global	_T0SE
   459                           _T0SE	set	0x40C
   460  040C                     	global	_T0CS
   461                           _T0CS	set	0x40D
   462  040D                     	global	_TRISA4
   463                           _TRISA4	set	0x42C
   464  042C                     	global	_TRISA3
   465                           _TRISA3	set	0x42B
   466  042B                     	global	_TRISA2
   467                           _TRISA2	set	0x42A
   468  042A                     	global	_TRISA1
   469                           _TRISA1	set	0x429
   470  0429                     	global	_TRISA0
   471                           _TRISA0	set	0x428
   472  0428                     ; #config settings
   473                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sdk."
   474                           	line	#
   475                           psect cinit,class=CODE,delta=2
   476                           global start_initialization
   477                           start_initialization:
   478  0010                     
   479                           global __initialization
   480                           __initialization:
   481  0010                     psect	bssBANK0,class=BANK0,space=1,noexec
   482                           global __pbssBANK0
   483                           __pbssBANK0:
   484  001D                     _mouseDelay:
   485  001D                            ds      2
   486  001D                     
   487                           _replaced:
   488  001F                            ds      1
   489  001F                     
   490                           _ctrl:
   491  0020                            ds      1
   492  0020                     
   493                           _shift:
   494  0021                            ds      1
   495  0021                     
   496                           _i:
   497  0022                            ds      1
   498  0022                     
   499                           _ps2NeedEncode:
   500  0023                            ds      1
   501  0023                     
   502                           _ps2Up:
   503  0024                            ds      1
   504  0024                     
   505                           _ps2WaitCode:
   506  0025                            ds      1
   507  0025                     
   508                           _ps2DataCount:
   509  0026                            ds      1
   510  0026                     
   511                           _ps2Data:
   512  0027                            ds      1
   513  0027                     
   514                           _ps2BitsCount:
   515  0028                            ds      1
   516  0028                     
   517                           _ps2Bits:
   518  0029                            ds      1
   519  0029                     
   520                           _ps2DataState:
   521  002A                            ds      1
   522  002A                     
   523                           psect	dataBANK0,class=BANK0,space=1,noexec
   524                           global __pdataBANK0
   525                           __pdataBANK0:
   526  002B                     	file	"main.c"
   527                           	line	41
   528                           _outPorts:
   529  002B                            ds      11
   530  002B                     
   531                           psect	dataBANK0
   532                           	file	"main.c"
   533                           	line	66
   534                           _mouseY:
   535  0036                            ds      1
   536  0036                     
   537                           psect	dataBANK0
   538                           	file	"main.c"
   539                           	line	65
   540                           _mouseX:
   541  0037                            ds      1
   542  0037                     
   543                           	file	"C:\Users\FOMONS~1\AppData\Local\Temp\sdk."
   544                           	line	#
   545                           ; Initialize objects allocated to BANK0
   546                           	global __pidataBANK0
   547                           psect cinit,class=CODE,delta=2,merge=1
   548                           	fcall	__pidataBANK0+0		;fetch initializer
   549  0010  2399               	movwf	__pdataBANK0+0&07fh		
   550  0011  00AB               	fcall	__pidataBANK0+1		;fetch initializer
   551  0012  239A               	movwf	__pdataBANK0+1&07fh		
   552  0013  00AC               	fcall	__pidataBANK0+2		;fetch initializer
   553  0014  239B               	movwf	__pdataBANK0+2&07fh		
   554  0015  00AD               	fcall	__pidataBANK0+3		;fetch initializer
   555  0016  239C               	movwf	__pdataBANK0+3&07fh		
   556  0017  00AE               	fcall	__pidataBANK0+4		;fetch initializer
   557  0018  239D               	movwf	__pdataBANK0+4&07fh		
   558  0019  00AF               	fcall	__pidataBANK0+5		;fetch initializer
   559  001A  239E               	movwf	__pdataBANK0+5&07fh		
   560  001B  00B0               	fcall	__pidataBANK0+6		;fetch initializer
   561  001C  239F               	movwf	__pdataBANK0+6&07fh		
   562  001D  00B1               	fcall	__pidataBANK0+7		;fetch initializer
   563  001E  23A0               	movwf	__pdataBANK0+7&07fh		
   564  001F  00B2               	fcall	__pidataBANK0+8		;fetch initializer
   565  0020  23A1               	movwf	__pdataBANK0+8&07fh		
   566  0021  00B3               	fcall	__pidataBANK0+9		;fetch initializer
   567  0022  23A2               	movwf	__pdataBANK0+9&07fh		
   568  0023  00B4               	fcall	__pidataBANK0+10		;fetch initializer
   569  0024  23A3               	movwf	__pdataBANK0+10&07fh		
   570  0025  00B5               	fcall	__pidataBANK0+11		;fetch initializer
   571  0026  23A4               	movwf	__pdataBANK0+11&07fh		
   572  0027  00B6               	fcall	__pidataBANK0+12		;fetch initializer
   573  0028  23A5               	movwf	__pdataBANK0+12&07fh		
   574  0029  00B7               	line	#
   575                           psect clrtext,class=CODE,delta=2
   576                           global clear_ram0
   577                           ;	Called with FSR containing the base address, and
   578                           ;	W with the last address+1
   579                           clear_ram0:
   580  03A6                     	clrwdt			;clear the watchdog before getting into this loop
   581  03A6  0064               clrloop0:
   582  03A7                     	clrf	indf		;clear RAM location pointed to by FSR
   583  03A7  0180               	incf	fsr,f		;increment pointer
   584  03A8  0A84               	xorwf	fsr,w		;XOR with final address
   585  03A9  0604               	btfsc	status,2	;have we reached the end yet?
   586  03AA  1903               	retlw	0		;all done for this memory range, return
   587  03AB  3400               	xorwf	fsr,w		;XOR again to restore value
   588  03AC  0604               	goto	clrloop0		;do the next byte
   589  03AD  2BA7               
   590                           ; Clear objects allocated to BANK0
   591                           psect cinit,class=CODE,delta=2,merge=1
   592                           	bcf	status, 7	;select IRP bank0
   593  002A  1383               	movlw	low(__pbssBANK0)
   594  002B  301D               	movwf	fsr
   595  002C  0084               	movlw	low((__pbssBANK0)+0Eh)
   596  002D  302B               	fcall	clear_ram0
   597  002E  23A6               psect cinit,class=CODE,delta=2,merge=1
   598                           global end_of_initialization,__end_of__initialization
   599                           
   600                           ;End of C runtime variable initialization code
   601                           
   602                           end_of_initialization:
   603  002F                     __end_of__initialization:
   604  002F                     clrf status
   605  002F  0183               ljmp _main	;jump to C main() function
   606  0030  2831               psect	cstackCOMMON,class=COMMON,space=1,noexec
   607                           global __pcstackCOMMON
   608                           __pcstackCOMMON:
   609  0000                     ??_myDelay:	; 1 bytes @ 0x0
   610  0000                     psect	cstackBANK0,class=BANK0,space=1,noexec
   611                           global __pcstackBANK0
   612                           __pcstackBANK0:
   613  000C                     ?_myIsr:	; 1 bytes @ 0x0
   614  000C                     ??_myIsr:	; 1 bytes @ 0x0
   615  000C                     ?_setPort:	; 1 bytes @ 0x0
   616  000C                     ?_resetPort:	; 1 bytes @ 0x0
   617  000C                     ?_keyDown:	; 1 bytes @ 0x0
   618  000C                     ?_keyUp:	; 1 bytes @ 0x0
   619  000C                     ?_myDelay:	; 1 bytes @ 0x0
   620  000C                     ?_sendDataToAltera:	; 1 bytes @ 0x0
   621  000C                     ?_main:	; 1 bytes @ 0x0
   622  000C                     	ds	6
   623  000C                     	global	_myIsr$84
   624                           _myIsr$84:	; 2 bytes @ 0x6
   625  0012                     	ds	2
   626  0012                     	global	myIsr@ii
   627                           myIsr@ii:	; 2 bytes @ 0x8
   628  0014                     	ds	2
   629  0014                     ??_setPort:	; 1 bytes @ 0xA
   630  0016                     ??_resetPort:	; 1 bytes @ 0xA
   631  0016                     ??_sendDataToAltera:	; 1 bytes @ 0xA
   632  0016                     	ds	3
   633  0016                     	global	setPort@bit_id
   634                           setPort@bit_id:	; 1 bytes @ 0xD
   635  0019                     	global	resetPort@bit_id
   636                           resetPort@bit_id:	; 1 bytes @ 0xD
   637  0019                     	ds	1
   638  0019                     ??_keyDown:	; 1 bytes @ 0xE
   639  001A                     ??_keyUp:	; 1 bytes @ 0xE
   640  001A                     	ds	1
   641  001A                     	global	keyDown@key
   642                           keyDown@key:	; 1 bytes @ 0xF
   643  001B                     	global	keyUp@key
   644                           keyUp@key:	; 1 bytes @ 0xF
   645  001B                     	ds	1
   646  001B                     ??_main:	; 1 bytes @ 0x10
   647  001C                     	ds	1
   648  001C                     ;!
   649                           ;!Data Sizes:
   650                           ;!    Strings     0
   651                           ;!    Constant    190
   652                           ;!    Data        13
   653                           ;!    BSS         14
   654                           ;!    Persistent  0
   655                           ;!    Stack       0
   656                           ;!
   657                           ;!Auto Spaces:
   658                           ;!    Space          Size  Autos    Used
   659                           ;!    COMMON            0      0       0
   660                           ;!    BANK0            66     17      44
   661                           
   662                           ;!
   663                           ;!Pointer List with Targets:
   664                           ;!
   665                           ;!    None.
   666                           
   667                           
   668                           ;!
   669                           ;!Critical Paths under _main in COMMON
   670                           ;!
   671                           ;!    None.
   672                           ;!
   673                           ;!Critical Paths under _myIsr in COMMON
   674                           ;!
   675                           ;!    None.
   676                           ;!
   677                           ;!Critical Paths under _main in BANK0
   678                           ;!
   679                           ;!    _main->_keyDown
   680                           ;!    _main->_keyUp
   681                           ;!    _keyUp->_resetPort
   682                           ;!    _keyDown->_resetPort
   683                           ;!    _keyDown->_setPort
   684                           ;!
   685                           ;!Critical Paths under _myIsr in BANK0
   686                           ;!
   687                           ;!    None.
   688                           
   689 ;;
   690 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   691 ;;
   692                           
   693                           ;!
   694                           ;!Call Graph Tables:
   695                           ;!
   696                           ;! ---------------------------------------------------------------------------------
   697                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   698                           ;! ---------------------------------------------------------------------------------
   699                           ;! (0) _main                                                 1     1      0     220
   700                           ;!                                             16 BANK0      1     1      0
   701                           ;!                            _keyDown
   702                           ;!                              _keyUp
   703                           ;!                   _sendDataToAltera
   704                           ;! ---------------------------------------------------------------------------------
   705                           ;! (1) _sendDataToAltera                                     1     1      0       0
   706                           ;!                                             10 BANK0      1     1      0
   707                           ;!                            _myDelay
   708                           ;! ---------------------------------------------------------------------------------
   709                           ;! (2) _myDelay                                              0     0      0       0
   710                           ;! ---------------------------------------------------------------------------------
   711                           ;! (1) _keyUp                                                2     2      0      88
   712                           ;!                                             14 BANK0      2     2      0
   713                           ;!                          _resetPort
   714                           ;! ---------------------------------------------------------------------------------
   715                           ;! (1) _keyDown                                              2     2      0     132
   716                           ;!                                             14 BANK0      2     2      0
   717                           ;!                          _resetPort
   718                           ;!                            _setPort
   719                           ;! ---------------------------------------------------------------------------------
   720                           ;! (2) _setPort                                              4     4      0      44
   721                           ;!                                             10 BANK0      4     4      0
   722                           ;! ---------------------------------------------------------------------------------
   723                           ;! (2) _resetPort                                            4     4      0      44
   724                           ;!                                             10 BANK0      4     4      0
   725                           ;! ---------------------------------------------------------------------------------
   726                           ;! Estimated maximum stack depth 2
   727                           ;! ---------------------------------------------------------------------------------
   728                           ;! (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   729                           ;! ---------------------------------------------------------------------------------
   730                           ;! (4) _myIsr                                               10    10      0     114
   731                           ;!                                              0 BANK0     10    10      0
   732                           ;! ---------------------------------------------------------------------------------
   733                           ;! Estimated maximum stack depth 4
   734                           ;! ---------------------------------------------------------------------------------
   735                           ;!
   736                           ;! Call Graph Graphs:
   737                           ;!
   738                           ;! _main (ROOT)
   739                           ;!   _keyDown
   740                           ;!     _resetPort
   741                           ;!     _setPort
   742                           ;!   _keyUp
   743                           ;!     _resetPort
   744                           ;!   _sendDataToAltera
   745                           ;!     _myDelay
   746                           ;!
   747                           ;! _myIsr (ROOT)
   748                           ;!
   749                           
   750                           ;! Address spaces:
   751                           
   752                           ;!Name               Size   Autos  Total    Cost      Usage
   753                           ;!SFR1                 0      0       0       2        0.0%
   754                           ;!BITSFR1              0      0       0       2        0.0%
   755                           ;!BANK0               42     11      2C       3       66.7%
   756                           ;!BITBANK0            42      0       0       5        0.0%
   757                           ;!SFR0                 0      0       0       1        0.0%
   758                           ;!BITSFR0              0      0       0       1        0.0%
   759                           ;!COMMON               0      0       0       1        0.0%
   760                           ;!BITCOMMON            0      0       0       0        0.0%
   761                           ;!CODE                 0      0       0       0        0.0%
   762                           ;!DATA                 0      0      2C       6        0.0%
   763                           ;!ABS                  0      0      2C       4        0.0%
   764                           ;!NULL                 0      0       0       0        0.0%
   765                           ;!STACK                0      0       0       2        0.0%
   766                           ;!EEDATA              40      0       0       0        0.0%
   767                           
   768                           	global	_main
   769                           
   770 ;; *************** function _main *****************
   771 ;; Defined at:
   772 ;;		line 244 in file "main.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      void 
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : B00/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMMON   BANK0
   786 ;;      Params:         0       0
   787 ;;      Locals:         0       0
   788 ;;      Temps:          0       1
   789 ;;      Totals:         0       1
   790 ;;Total ram usage:        1 bytes
   791 ;; Hardware stack levels required when called:    4
   792 ;; This function calls:
   793 ;;		_keyDown
   794 ;;		_keyUp
   795 ;;		_sendDataToAltera
   796 ;; This function is called by:
   797 ;;		Startup code after reset
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           psect	maintext,global,class=CODE,delta=2,split=1,group=0
   801                           	file	"main.c"
   802                           	line	244
   803                           global __pmaintext
   804                           __pmaintext:	;psect for function _main
   805  0031                     psect	maintext
   806                           	file	"main.c"
   807                           	line	244
   808                           	global	__size_of_main
   809                           	__size_of_main	equ	__end_of_main-_main
   810  00FE                     	
   811                           _main:	
   812  0031                     ;incstack = 0
   813                           	opt	stack 4
   814                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   815                           	line	246
   816                           	
   817                           l1157:	
   818  0031                     ;main.c: 246:     TRISA0 = 1;
   819                           	bsf	status, 5	;RP0=1, select bank1
   820  0031  1683               	bsf	(1064/8)^080h,(1064)&7	;volatile
   821  0032  1405               	line	247
   822                           ;main.c: 247:     TRISA1 = 0;
   823                           	bcf	(1065/8)^080h,(1065)&7	;volatile
   824  0033  1085               	line	248
   825                           ;main.c: 248:     TRISA2 = 0;
   826                           	bcf	(1066/8)^080h,(1066)&7	;volatile
   827  0034  1105               	line	249
   828                           ;main.c: 249:     TRISA3 = 1;
   829                           	bsf	(1067/8)^080h,(1067)&7	;volatile
   830  0035  1585               	line	250
   831                           ;main.c: 250:     TRISA4 = 1;
   832                           	bsf	(1068/8)^080h,(1068)&7	;volatile
   833  0036  1605               	line	252
   834                           	
   835                           l1159:	
   836  0037                     ;main.c: 252:     PORTA = 0b00000000;
   837                           	bcf	status, 5	;RP0=0, select bank0
   838  0037  1283               	clrf	(5)	;volatile
   839  0038  0185               	line	254
   840                           ;main.c: 254:     TRISB = 0b00000000;
   841                           	bsf	status, 5	;RP0=1, select bank1
   842  0039  1683               	clrf	(134)^080h	;volatile
   843  003A  0186               	line	255
   844                           ;main.c: 255:     PORTB = 0b00000000;
   845                           	bcf	status, 5	;RP0=0, select bank0
   846  003B  1283               	clrf	(6)	;volatile
   847  003C  0186               	line	275
   848                           	
   849                           l1161:	
   850  003D                     ;main.c: 275:     T0CS = 1;
   851                           	bsf	status, 5	;RP0=1, select bank1
   852  003D  1683               	bsf	(1037/8)^080h,(1037)&7	;volatile
   853  003E  1681               	line	276
   854                           	
   855                           l1163:	
   856  003F                     ;main.c: 276:     T0SE = 1;
   857                           	bsf	(1036/8)^080h,(1036)&7	;volatile
   858  003F  1601               	line	277
   859                           	
   860                           l1165:	
   861  0040                     ;main.c: 277:     GIE = 1;
   862                           	bsf	(95/8),(95)&7	;volatile
   863  0040  178B               	line	278
   864                           	
   865                           l1167:	
   866  0041                     ;main.c: 278:     T0IE = 1;
   867                           	bsf	(93/8),(93)&7	;volatile
   868  0041  168B               	line	279
   869                           	
   870                           l1169:	
   871  0042                     ;main.c: 279:     PSA = 1;
   872                           	bsf	(1035/8)^080h,(1035)&7	;volatile
   873  0042  1581               	line	280
   874                           	
   875                           l1171:	
   876  0043                     ;main.c: 280:     T0IF = 0;
   877                           	bcf	(90/8),(90)&7	;volatile
   878  0043  110B               	line	281
   879                           	
   880                           l1173:	
   881  0044                     ;main.c: 281:     TMR0 = 255;
   882                           	movlw	low(0FFh)
   883  0044  30FF               	bcf	status, 5	;RP0=0, select bank0
   884  0045  1283               	movwf	(1)	;volatile
   885  0046  0081               	line	283
   886                           	
   887                           l1175:	
   888  0047                     ;main.c: 283:     ps2Data = 0;
   889                           	clrf	(_ps2Data)
   890  0047  01A7               	line	284
   891                           	
   892                           l1177:	
   893  0048                     ;main.c: 284:     ps2DataCount = 0;
   894                           	clrf	(_ps2DataCount)
   895  0048  01A6               	line	285
   896                           	
   897                           l1179:	
   898  0049                     ;main.c: 285:     ps2WaitCode = 0;
   899                           	clrf	(_ps2WaitCode)
   900  0049  01A5               	line	286
   901                           	
   902                           l1181:	
   903  004A                     ;main.c: 286:     ps2Up = 0;
   904                           	clrf	(_ps2Up)
   905  004A  01A4               	line	287
   906                           	
   907                           l1183:	
   908  004B                     ;main.c: 287:     ps2NeedEncode = 0;
   909                           	clrf	(_ps2NeedEncode)
   910  004B  01A3               	line	288
   911                           	
   912                           l1185:	
   913  004C                     ;main.c: 288:     ps2DataState = 0;
   914                           	clrf	(_ps2DataState)
   915  004C  01AA               	goto	l1187
   916  004D  284E               	line	290
   917                           ;main.c: 290:     while(1)
   918                           	
   919                           l142:	
   920  004E                     	line	292
   921                           	
   922                           l1187:	
   923  004E                     ;main.c: 291:     {;main.c: 292:         if ( ps2DataState == 2 ) {
   924                           		movlw	2
   925  004E  3002               	bcf	status, 5	;RP0=0, select bank0
   926  004F  1283               	xorwf	((_ps2DataState)),w
   927  0050  062A               	btfss	status,2
   928  0051  1D03               	goto	u891
   929  0052  2854               	goto	u890
   930  0053  2855               u891:
   931  0054                     	goto	l1251
   932  0054  28DA               u890:
   933  0055                     	line	294
   934                           	
   935                           l1189:	
   936  0055                     ;main.c: 294:             replaced = 0;
   937                           	clrf	(_replaced)
   938  0055  019F               	line	295
   939                           	
   940                           l1191:	
   941  0056                     ;main.c: 295:             if ( shift && !ctrl ) {
   942                           	movf	((_shift)),w
   943  0056  0821               	btfsc	status,2
   944  0057  1903               	goto	u901
   945  0058  285A               	goto	u900
   946  0059  285B               u901:
   947  005A                     	goto	l1211
   948  005A  2889               u900:
   949  005B                     	
   950                           l1193:	
   951  005B                     	movf	((_ctrl)),w
   952  005B  0820               	btfss	status,2
   953  005C  1D03               	goto	u911
   954  005D  285F               	goto	u910
   955  005E  2860               u911:
   956  005F                     	goto	l1211
   957  005F  2889               u910:
   958  0060                     	line	297
   959                           	
   960                           l1195:	
   961  0060                     ;main.c: 297:                 for(i = 0; i < 35 ;i+=2) {
   962                           	clrf	(_i)
   963  0060  01A2               	
   964                           l1197:	
   965  0061                     	movlw	low(023h)
   966  0061  3023               	subwf	(_i),w
   967  0062  0222               	skipc
   968  0063  1C03               	goto	u921
   969  0064  2866               	goto	u920
   970  0065  2867               u921:
   971  0066                     	goto	l1201
   972  0066  2869               u920:
   973  0067                     	goto	l1211
   974  0067  2889               	
   975                           l1199:	
   976  0068                     	goto	l1211
   977  0068  2889               	
   978                           l145:	
   979  0069                     	line	298
   980                           	
   981                           l1201:	
   982  0069                     ;main.c: 298:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   983                           	movf	(_i),w
   984  0069  0822               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
   985  006A  3E81               	movwf	fsr0
   986  006B  0084               	fcall	stringdir
   987  006C  2207               	xorwf	(_ps2Data),w
   988  006D  0627               	skipz
   989  006E  1D03               	goto	u931
   990  006F  2871               	goto	u930
   991  0070  2872               u931:
   992  0071                     	goto	l1207
   993  0071  287D               u930:
   994  0072                     	line	299
   995                           	
   996                           l1203:	
   997  0072                     ;main.c: 299:                         replaced = 1;
   998                           	clrf	(_replaced)
   999  0072  019F               	incf	(_replaced),f
  1000  0073  0A9F               	line	300
  1001                           	
  1002                           l1205:	
  1003  0074                     ;main.c: 300:                         ps2Data = replaceOnShiftKeyDown[i+1];
  1004                           	movf	(_i),w
  1005  0074  0822               	addlw	01h
  1006  0075  3E01               	addlw	low((((_replaceOnShiftKeyDown)-__stringbase)|8000h))
  1007  0076  3E81               	movwf	fsr0
  1008  0077  0084               	fcall	stringdir
  1009  0078  2207               	movwf	(??_main+0)+0
  1010  0079  009C               	movf	(??_main+0)+0,w
  1011  007A  081C               	movwf	(_ps2Data)
  1012  007B  00A7               	line	301
  1013                           ;main.c: 301:                         break;
  1014                           	goto	l1211
  1015  007C  2889               	line	302
  1016                           ;main.c: 302:                     }
  1017                           	
  1018                           l147:	
  1019  007D                     	line	303
  1020                           	
  1021                           l1207:	
  1022  007D                     ;main.c: 303:                 }
  1023                           	movlw	low(02h)
  1024  007D  3002               	movwf	(??_main+0)+0
  1025  007E  009C               	movf	(??_main+0)+0,w
  1026  007F  081C               	addwf	(_i),f
  1027  0080  07A2               	
  1028                           l1209:	
  1029  0081                     	movlw	low(023h)
  1030  0081  3023               	subwf	(_i),w
  1031  0082  0222               	skipc
  1032  0083  1C03               	goto	u941
  1033  0084  2886               	goto	u940
  1034  0085  2887               u941:
  1035  0086                     	goto	l1201
  1036  0086  2869               u940:
  1037  0087                     	goto	l1211
  1038  0087  2889               	
  1039                           l146:	
  1040  0088                     	goto	l1211
  1041  0088  2889               	line	304
  1042                           ;main.c: 304:             }
  1043                           	
  1044                           l144:	
  1045  0089                     	line	306
  1046                           	
  1047                           l1211:	
  1048  0089                     ;main.c: 306:             if ( ps2Up == 0) {
  1049                           	movf	((_ps2Up)),w
  1050  0089  0824               	btfss	status,2
  1051  008A  1D03               	goto	u951
  1052  008B  288D               	goto	u950
  1053  008C  288E               u951:
  1054  008D                     	goto	l1223
  1055  008D  28B0               u950:
  1056  008E                     	line	307
  1057                           	
  1058                           l1213:	
  1059  008E                     ;main.c: 307:                 keyDown(ps2Data);
  1060                           	movf	(_ps2Data),w
  1061  008E  0827               	fcall	_keyDown
  1062  008F  22CB               	line	308
  1063                           	
  1064                           l1215:	
  1065  0090                     ;main.c: 308:                 if ( ps2Data == 18 || ps2Data == 89) shift = 1;
  1066                           		movlw	18
  1067  0090  3012               	bcf	status, 5	;RP0=0, select bank0
  1068  0091  1283               	xorwf	((_ps2Data)),w
  1069  0092  0627               	btfsc	status,2
  1070  0093  1903               	goto	u961
  1071  0094  2896               	goto	u960
  1072  0095  2897               u961:
  1073  0096                     	goto	l151
  1074  0096  289D               u960:
  1075  0097                     	
  1076                           l1217:	
  1077  0097                     		movlw	89
  1078  0097  3059               	xorwf	((_ps2Data)),w
  1079  0098  0627               	btfss	status,2
  1080  0099  1D03               	goto	u971
  1081  009A  289C               	goto	u970
  1082  009B  289D               u971:
  1083  009C                     	goto	l1219
  1084  009C  28A0               u970:
  1085  009D                     	
  1086                           l151:	
  1087  009D                     	clrf	(_shift)
  1088  009D  01A1               	incf	(_shift),f
  1089  009E  0AA1               	goto	l1219
  1090  009F  28A0               	
  1091                           l149:	
  1092  00A0                     	line	309
  1093                           	
  1094                           l1219:	
  1095  00A0                     ;main.c: 309:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 1;
  1096                           		movlw	20
  1097  00A0  3014               	xorwf	((_ps2Data)),w
  1098  00A1  0627               	btfsc	status,2
  1099  00A2  1903               	goto	u981
  1100  00A3  28A5               	goto	u980
  1101  00A4  28A6               u981:
  1102  00A5                     	goto	l154
  1103  00A5  28AC               u980:
  1104  00A6                     	
  1105                           l1221:	
  1106  00A6                     		movlw	19
  1107  00A6  3013               	xorwf	((_ps2Data)),w
  1108  00A7  0627               	btfss	status,2
  1109  00A8  1D03               	goto	u991
  1110  00A9  28AB               	goto	u990
  1111  00AA  28AC               u991:
  1112  00AB                     	goto	l1237
  1113  00AB  28D1               u990:
  1114  00AC                     	
  1115                           l154:	
  1116  00AC                     	clrf	(_ctrl)
  1117  00AC  01A0               	incf	(_ctrl),f
  1118  00AD  0AA0               	goto	l1237
  1119  00AE  28D1               	
  1120                           l152:	
  1121  00AF                     	line	311
  1122                           ;main.c: 311:             } else {
  1123                           	goto	l1237
  1124  00AF  28D1               	
  1125                           l148:	
  1126  00B0                     	line	312
  1127                           	
  1128                           l1223:	
  1129  00B0                     ;main.c: 312:                 if ( ps2Data == 18 || ps2Data == 89) shift = 0;
  1130                           		movlw	18
  1131  00B0  3012               	xorwf	((_ps2Data)),w
  1132  00B1  0627               	btfsc	status,2
  1133  00B2  1903               	goto	u1001
  1134  00B3  28B5               	goto	u1000
  1135  00B4  28B6               u1001:
  1136  00B5                     	goto	l1227
  1137  00B5  28BD               u1000:
  1138  00B6                     	
  1139                           l1225:	
  1140  00B6                     		movlw	89
  1141  00B6  3059               	xorwf	((_ps2Data)),w
  1142  00B7  0627               	btfss	status,2
  1143  00B8  1D03               	goto	u1011
  1144  00B9  28BB               	goto	u1010
  1145  00BA  28BC               u1011:
  1146  00BB                     	goto	l1229
  1147  00BB  28BF               u1010:
  1148  00BC                     	goto	l1227
  1149  00BC  28BD               	
  1150                           l158:	
  1151  00BD                     	
  1152                           l1227:	
  1153  00BD                     	clrf	(_shift)
  1154  00BD  01A1               	goto	l1229
  1155  00BE  28BF               	
  1156                           l156:	
  1157  00BF                     	line	313
  1158                           	
  1159                           l1229:	
  1160  00BF                     ;main.c: 313:                 if ( ps2Data == 20 || ps2Data == 19) ctrl = 0;
  1161                           		movlw	20
  1162  00BF  3014               	xorwf	((_ps2Data)),w
  1163  00C0  0627               	btfsc	status,2
  1164  00C1  1903               	goto	u1021
  1165  00C2  28C4               	goto	u1020
  1166  00C3  28C5               u1021:
  1167  00C4                     	goto	l1233
  1168  00C4  28CC               u1020:
  1169  00C5                     	
  1170                           l1231:	
  1171  00C5                     		movlw	19
  1172  00C5  3013               	xorwf	((_ps2Data)),w
  1173  00C6  0627               	btfss	status,2
  1174  00C7  1D03               	goto	u1031
  1175  00C8  28CA               	goto	u1030
  1176  00C9  28CB               u1031:
  1177  00CA                     	goto	l1235
  1178  00CA  28CE               u1030:
  1179  00CB                     	goto	l1233
  1180  00CB  28CC               	
  1181                           l161:	
  1182  00CC                     	
  1183                           l1233:	
  1184  00CC                     	clrf	(_ctrl)
  1185  00CC  01A0               	goto	l1235
  1186  00CD  28CE               	
  1187                           l159:	
  1188  00CE                     	line	314
  1189                           	
  1190                           l1235:	
  1191  00CE                     ;main.c: 314:                 keyUp(ps2Data);
  1192                           	movf	(_ps2Data),w
  1193  00CE  0827               	fcall	_keyUp
  1194  00CF  237F               	goto	l1237
  1195  00D0  28D1               	line	315
  1196                           ;main.c: 315:             }
  1197                           	
  1198                           l155:	
  1199  00D1                     	line	318
  1200                           	
  1201                           l1237:	
  1202  00D1                     ;main.c: 318:             ps2Data = 0;
  1203                           	bcf	status, 5	;RP0=0, select bank0
  1204  00D1  1283               	clrf	(_ps2Data)
  1205  00D2  01A7               	line	319
  1206                           	
  1207                           l1239:	
  1208  00D3                     ;main.c: 319:             ps2DataCount = 0;
  1209                           	clrf	(_ps2DataCount)
  1210  00D3  01A6               	line	320
  1211                           	
  1212                           l1241:	
  1213  00D4                     ;main.c: 320:             ps2WaitCode = 0;
  1214                           	clrf	(_ps2WaitCode)
  1215  00D4  01A5               	line	321
  1216                           	
  1217                           l1243:	
  1218  00D5                     ;main.c: 321:             ps2Up = 0;
  1219                           	clrf	(_ps2Up)
  1220  00D5  01A4               	line	322
  1221                           	
  1222                           l1245:	
  1223  00D6                     ;main.c: 322:             ps2NeedEncode = 0;
  1224                           	clrf	(_ps2NeedEncode)
  1225  00D6  01A3               	line	323
  1226                           	
  1227                           l1247:	
  1228  00D7                     ;main.c: 323:             ps2DataState = 0;
  1229                           	clrf	(_ps2DataState)
  1230  00D7  01AA               	line	326
  1231                           	
  1232                           l1249:	
  1233  00D8                     ;main.c: 326:             sendDataToAltera();
  1234                           	fcall	_sendDataToAltera
  1235  00D8  230C               	goto	l1251
  1236  00D9  28DA               	line	327
  1237                           ;main.c: 327:         }
  1238                           	
  1239                           l143:	
  1240  00DA                     	line	332
  1241                           	
  1242                           l1251:	
  1243  00DA                     ;main.c: 332:         mouseDelay++;
  1244                           	movlw	01h
  1245  00DA  3001               	bcf	status, 5	;RP0=0, select bank0
  1246  00DB  1283               	addwf	(_mouseDelay),f
  1247  00DC  079D               	skipnc
  1248  00DD  1803               	incf	(_mouseDelay+1),f
  1249  00DE  0A9E               	movlw	0
  1250  00DF  3000               	addwf	(_mouseDelay+1),f
  1251  00E0  079E               	line	333
  1252                           	
  1253                           l1253:	
  1254  00E1                     ;main.c: 333:         if ( mouseDelay > 20000 ) {
  1255                           	movlw	04Eh
  1256  00E1  304E               	subwf	(_mouseDelay+1),w
  1257  00E2  021E               	movlw	021h
  1258  00E3  3021               	skipnz
  1259  00E4  1903               	subwf	(_mouseDelay),w
  1260  00E5  021D               	skipc
  1261  00E6  1C03               	goto	u1041
  1262  00E7  28E9               	goto	u1040
  1263  00E8  28EA               u1041:
  1264  00E9                     	goto	l162
  1265  00E9  292B               u1040:
  1266  00EA                     	line	335
  1267                           	
  1268                           l1255:	
  1269  00EA                     ;main.c: 335:             if ( outPorts[9] > mouseX ) outPorts[9]--;
  1270                           	movf	0+(_outPorts)+09h,w
  1271  00EA  0834               	subwf	(_mouseX),w
  1272  00EB  0237               	skipnc
  1273  00EC  1803               	goto	u1051
  1274  00ED  28EF               	goto	u1050
  1275  00EE  28F0               u1051:
  1276  00EF                     	goto	l1259
  1277  00EF  28F3               u1050:
  1278  00F0                     	
  1279                           l1257:	
  1280  00F0                     	movlw	01h
  1281  00F0  3001               	subwf	0+(_outPorts)+09h,f
  1282  00F1  02B4               	goto	l1263
  1283  00F2  28FF               	line	336
  1284                           ;main.c: 336:             else if ( outPorts[9] < mouseX ) outPorts[9]++;
  1285                           	
  1286                           l163:	
  1287  00F3                     	
  1288                           l1259:	
  1289  00F3                     	movf	(_mouseX),w
  1290  00F3  0837               	subwf	0+(_outPorts)+09h,w
  1291  00F4  0234               	skipnc
  1292  00F5  1803               	goto	u1061
  1293  00F6  28F8               	goto	u1060
  1294  00F7  28F9               u1061:
  1295  00F8                     	goto	l1263
  1296  00F8  28FF               u1060:
  1297  00F9                     	
  1298                           l1261:	
  1299  00F9                     	movlw	low(01h)
  1300  00F9  3001               	movwf	(??_main+0)+0
  1301  00FA  009C               	movf	(??_main+0)+0,w
  1302  00FB  081C               	addwf	0+(_outPorts)+09h,f
  1303  00FC  07B4               	goto	l1263
  1304  00FD  28FF               	
  1305                           l165:	
  1306  00FE                     	goto	l1263
  1307  00FE  28FF               	
  1308                           l164:	
  1309  00FF                     	line	337
  1310                           	
  1311                           l1263:	
  1312  00FF                     ;main.c: 337:             if ( outPorts[10] > mouseY ) outPorts[10]--;
  1313                           	movf	0+(_outPorts)+0Ah,w
  1314  00FF  0835               	subwf	(_mouseY),w
  1315  0100  0236               	skipnc
  1316  0101  1803               	goto	u1071
  1317  0102  2904               	goto	u1070
  1318  0103  2905               u1071:
  1319  0104                     	goto	l1267
  1320  0104  2908               u1070:
  1321  0105                     	
  1322                           l1265:	
  1323  0105                     	movlw	01h
  1324  0105  3001               	subwf	0+(_outPorts)+0Ah,f
  1325  0106  02B5               	goto	l1271
  1326  0107  2914               	line	338
  1327                           ;main.c: 338:             else if ( outPorts[10] < mouseY ) outPorts[10]++;
  1328                           	
  1329                           l166:	
  1330  0108                     	
  1331                           l1267:	
  1332  0108                     	movf	(_mouseY),w
  1333  0108  0836               	subwf	0+(_outPorts)+0Ah,w
  1334  0109  0235               	skipnc
  1335  010A  1803               	goto	u1081
  1336  010B  290D               	goto	u1080
  1337  010C  290E               u1081:
  1338  010D                     	goto	l1271
  1339  010D  2914               u1080:
  1340  010E                     	
  1341                           l1269:	
  1342  010E                     	movlw	low(01h)
  1343  010E  3001               	movwf	(??_main+0)+0
  1344  010F  009C               	movf	(??_main+0)+0,w
  1345  0110  081C               	addwf	0+(_outPorts)+0Ah,f
  1346  0111  07B5               	goto	l1271
  1347  0112  2914               	
  1348                           l168:	
  1349  0113                     	goto	l1271
  1350  0113  2914               	
  1351                           l167:	
  1352  0114                     	line	340
  1353                           	
  1354                           l1271:	
  1355  0114                     ;main.c: 340:             if ( outPorts[9] == mouseX && outPorts[10] == mouseY ) {
  1356                           	movf	0+(_outPorts)+09h,w
  1357  0114  0834               	xorwf	(_mouseX),w
  1358  0115  0637               	skipz
  1359  0116  1D03               	goto	u1091
  1360  0117  2919               	goto	u1090
  1361  0118  291A               u1091:
  1362  0119                     	goto	l1277
  1363  0119  2927               u1090:
  1364  011A                     	
  1365                           l1273:	
  1366  011A                     	movf	0+(_outPorts)+0Ah,w
  1367  011A  0835               	xorwf	(_mouseY),w
  1368  011B  0636               	skipz
  1369  011C  1D03               	goto	u1101
  1370  011D  291F               	goto	u1100
  1371  011E  2920               u1101:
  1372  011F                     	goto	l1277
  1373  011F  2927               u1100:
  1374  0120                     	line	341
  1375                           	
  1376                           l1275:	
  1377  0120                     ;main.c: 341:                 mouseX -= 128;
  1378                           	movlw	080h
  1379  0120  3080               	subwf	(_mouseX),f
  1380  0121  02B7               	line	342
  1381                           ;main.c: 342:                 mouseY += 200;
  1382                           	movlw	low(0C8h)
  1383  0122  30C8               	movwf	(??_main+0)+0
  1384  0123  009C               	movf	(??_main+0)+0,w
  1385  0124  081C               	addwf	(_mouseY),f
  1386  0125  07B6               	goto	l1277
  1387  0126  2927               	line	343
  1388                           ;main.c: 343:             }
  1389                           	
  1390                           l169:	
  1391  0127                     	line	344
  1392                           	
  1393                           l1277:	
  1394  0127                     ;main.c: 344:             sendDataToAltera();
  1395                           	fcall	_sendDataToAltera
  1396  0127  230C               	line	346
  1397                           	
  1398                           l1279:	
  1399  0128                     ;main.c: 346:             mouseDelay = 0;
  1400                           	bcf	status, 5	;RP0=0, select bank0
  1401  0128  1283               	clrf	(_mouseDelay)
  1402  0129  019D               	clrf	(_mouseDelay+1)
  1403  012A  019E               	line	347
  1404                           ;main.c: 347:         }
  1405                           	
  1406                           l162:	
  1407  012B                     	line	350
  1408                           # 350 "main.c"
  1409                           clrwdt ;# 
  1410  012B  0064               psect	maintext
  1411                           	goto	l1187
  1412  012C  284E               	line	351
  1413                           ;main.c: 351:     }
  1414                           	
  1415                           l170:	
  1416  012D                     	goto	l1187
  1417  012D  284E               	
  1418                           l171:	
  1419  012E                     	line	353
  1420                           	
  1421                           l172:	
  1422  012E                     	global	start
  1423                           	ljmp	start
  1424  012E  280F               	opt stack 0
  1425                           GLOBAL	__end_of_main
  1426                           	__end_of_main:
  1427  012F                     	signat	_main,89
  1428                           	global	_sendDataToAltera
  1429                           
  1430 ;; *************** function _sendDataToAltera *****************
  1431 ;; Defined at:
  1432 ;;		line 183 in file "main.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;		None
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;                  1    wreg      void 
  1439 ;; Registers used:
  1440 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1441 ;; Tracked objects:
  1442 ;;		On entry : 0/0
  1443 ;;		On exit  : 0/0
  1444 ;;		Unchanged: 0/0
  1445 ;; Data sizes:     COMMON   BANK0
  1446 ;;      Params:         0       0
  1447 ;;      Locals:         0       0
  1448 ;;      Temps:          0       1
  1449 ;;      Totals:         0       1
  1450 ;;Total ram usage:        1 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; Hardware stack levels required when called:    3
  1453 ;; This function calls:
  1454 ;;		_myDelay
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           psect	text1,local,class=CODE,delta=2,merge=1,group=0
  1460                           	line	183
  1461                           global __ptext1
  1462                           __ptext1:	;psect for function _sendDataToAltera
  1463  030C                     psect	text1
  1464                           	file	"main.c"
  1465                           	line	183
  1466                           	global	__size_of_sendDataToAltera
  1467                           	__size_of_sendDataToAltera	equ	__end_of_sendDataToAltera-_sendDataToAltera
  1468  0034                     	
  1469                           _sendDataToAltera:	
  1470  030C                     ;incstack = 0
  1471                           	opt	stack 4
  1472                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1473                           	line	185
  1474                           	
  1475                           l1053:	
  1476  030C                     ;main.c: 185:     RA2 = 1;
  1477                           	bcf	status, 5	;RP0=0, select bank0
  1478  030C  1283               	bsf	(42/8),(42)&7	;volatile
  1479  030D  1505               	line	186
  1480                           ;main.c: 186:     RA1 = 1;
  1481                           	bsf	(41/8),(41)&7	;volatile
  1482  030E  1485               	line	187
  1483                           	
  1484                           l1055:	
  1485  030F                     ;main.c: 187:     myDelay();
  1486                           	fcall	_myDelay
  1487  030F  23AE               	line	188
  1488                           	
  1489                           l1057:	
  1490  0310                     ;main.c: 188:     RA2 = 0;
  1491                           	bcf	status, 5	;RP0=0, select bank0
  1492  0310  1283               	bcf	(42/8),(42)&7	;volatile
  1493  0311  1105               	line	189
  1494                           ;main.c: 189:     myDelay();
  1495                           	fcall	_myDelay
  1496  0312  23AE               	line	190
  1497                           	
  1498                           l1059:	
  1499  0313                     ;main.c: 190:     RA2 = 1;
  1500                           	bcf	status, 5	;RP0=0, select bank0
  1501  0313  1283               	bsf	(42/8),(42)&7	;volatile
  1502  0314  1505               	line	191
  1503                           ;main.c: 191:     myDelay();
  1504                           	fcall	_myDelay
  1505  0315  23AE               	line	192
  1506                           	
  1507                           l1061:	
  1508  0316                     ;main.c: 192:     RA1 = 0;
  1509                           	bcf	status, 5	;RP0=0, select bank0
  1510  0316  1283               	bcf	(41/8),(41)&7	;volatile
  1511  0317  1085               	line	193
  1512                           ;main.c: 193:     myDelay();
  1513                           	fcall	_myDelay
  1514  0318  23AE               	line	194
  1515                           	
  1516                           l1063:	
  1517  0319                     ;main.c: 194:     for(i=0;i<11;i++) {
  1518                           	bcf	status, 5	;RP0=0, select bank0
  1519  0319  1283               	clrf	(_i)
  1520  031A  01A2               	
  1521                           l1065:	
  1522  031B                     	movlw	low(0Bh)
  1523  031B  300B               	subwf	(_i),w
  1524  031C  0222               	skipc
  1525  031D  1C03               	goto	u691
  1526  031E  2B20               	goto	u690
  1527  031F  2B21               u691:
  1528  0320                     	goto	l1069
  1529  0320  2B23               u690:
  1530  0321                     	goto	l136
  1531  0321  2B3D               	
  1532                           l1067:	
  1533  0322                     	goto	l136
  1534  0322  2B3D               	
  1535                           l135:	
  1536  0323                     	line	195
  1537                           	
  1538                           l1069:	
  1539  0323                     ;main.c: 195:         myDelay();
  1540                           	fcall	_myDelay
  1541  0323  23AE               	line	196
  1542                           	
  1543                           l1071:	
  1544  0324                     ;main.c: 196:         RA2 = 1;
  1545                           	bcf	status, 5	;RP0=0, select bank0
  1546  0324  1283               	bsf	(42/8),(42)&7	;volatile
  1547  0325  1505               	line	197
  1548                           ;main.c: 197:         myDelay();
  1549                           	fcall	_myDelay
  1550  0326  23AE               	line	198
  1551                           	
  1552                           l1073:	
  1553  0327                     ;main.c: 198:         PORTB = outPorts[i];
  1554                           	bcf	status, 5	;RP0=0, select bank0
  1555  0327  1283               	movf	(_i),w
  1556  0328  0822               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  1557  0329  3E2B               	movwf	fsr0
  1558  032A  0084               	bcf	status, 7	;select IRP bank0
  1559  032B  1383               	movf	indf,w
  1560  032C  0800               	movwf	(6)	;volatile
  1561  032D  0086               	line	199
  1562                           	
  1563                           l1075:	
  1564  032E                     ;main.c: 199:         myDelay();
  1565                           	fcall	_myDelay
  1566  032E  23AE               	line	200
  1567                           	
  1568                           l1077:	
  1569  032F                     ;main.c: 200:         RA2 = 0;
  1570                           	bcf	status, 5	;RP0=0, select bank0
  1571  032F  1283               	bcf	(42/8),(42)&7	;volatile
  1572  0330  1105               	line	201
  1573                           	
  1574                           l1079:	
  1575  0331                     ;main.c: 201:         myDelay();
  1576                           	fcall	_myDelay
  1577  0331  23AE               	line	202
  1578                           	
  1579                           l1081:	
  1580  0332                     ;main.c: 202:     }
  1581                           	movlw	low(01h)
  1582  0332  3001               	bcf	status, 5	;RP0=0, select bank0
  1583  0333  1283               	movwf	(??_sendDataToAltera+0)+0
  1584  0334  0096               	movf	(??_sendDataToAltera+0)+0,w
  1585  0335  0816               	addwf	(_i),f
  1586  0336  07A2               	
  1587                           l1083:	
  1588  0337                     	movlw	low(0Bh)
  1589  0337  300B               	subwf	(_i),w
  1590  0338  0222               	skipc
  1591  0339  1C03               	goto	u701
  1592  033A  2B3C               	goto	u700
  1593  033B  2B3D               u701:
  1594  033C                     	goto	l1069
  1595  033C  2B23               u700:
  1596  033D                     	
  1597                           l136:	
  1598  033D                     	line	203
  1599                           ;main.c: 203:     RA2 = 1;
  1600                           	bsf	(42/8),(42)&7	;volatile
  1601  033D  1505               	line	204
  1602                           	
  1603                           l1085:	
  1604  033E                     ;main.c: 204:     PORTB = 0;
  1605                           	clrf	(6)	;volatile
  1606  033E  0186               	line	205
  1607                           	
  1608                           l137:	
  1609  033F                     	return
  1610  033F  0008               	opt stack 0
  1611                           GLOBAL	__end_of_sendDataToAltera
  1612                           	__end_of_sendDataToAltera:
  1613  0340                     	signat	_sendDataToAltera,89
  1614                           	global	_myDelay
  1615                           
  1616 ;; *************** function _myDelay *****************
  1617 ;; Defined at:
  1618 ;;		line 175 in file "main.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		None
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0
  1632 ;;      Params:         0       0
  1633 ;;      Locals:         0       0
  1634 ;;      Temps:          0       0
  1635 ;;      Totals:         0       0
  1636 ;;Total ram usage:        0 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    2
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_sendDataToAltera
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           psect	text2,local,class=CODE,delta=2,merge=1,group=0
  1646                           	line	175
  1647                           global __ptext2
  1648                           __ptext2:	;psect for function _myDelay
  1649  03AE                     psect	text2
  1650                           	file	"main.c"
  1651                           	line	175
  1652                           	global	__size_of_myDelay
  1653                           	__size_of_myDelay	equ	__end_of_myDelay-_myDelay
  1654  0001                     	
  1655                           _myDelay:	
  1656  03AE                     ;incstack = 0
  1657                           	opt	stack 4
  1658                           ; Regs used in _myDelay: []
  1659                           	line	178
  1660                           	
  1661                           l132:	
  1662  03AE                     	return
  1663  03AE  0008               	opt stack 0
  1664                           GLOBAL	__end_of_myDelay
  1665                           	__end_of_myDelay:
  1666  03AF                     	signat	_myDelay,89
  1667                           	global	_keyUp
  1668                           
  1669 ;; *************** function _keyUp *****************
  1670 ;; Defined at:
  1671 ;;		line 168 in file "main.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  key             1    wreg     unsigned char 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  key             1   15[BANK0 ] unsigned char 
  1676 ;; Return value:  Size  Location     Type
  1677 ;;                  1    wreg      void 
  1678 ;; Registers used:
  1679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMMON   BANK0
  1685 ;;      Params:         0       0
  1686 ;;      Locals:         0       1
  1687 ;;      Temps:          0       1
  1688 ;;      Totals:         0       2
  1689 ;;Total ram usage:        2 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; Hardware stack levels required when called:    3
  1692 ;; This function calls:
  1693 ;;		_resetPort
  1694 ;; This function is called by:
  1695 ;;		_main
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           psect	text3,local,class=CODE,delta=2,merge=1,group=0
  1699                           	line	168
  1700                           global __ptext3
  1701                           __ptext3:	;psect for function _keyUp
  1702  037F                     psect	text3
  1703                           	file	"main.c"
  1704                           	line	168
  1705                           	global	__size_of_keyUp
  1706                           	__size_of_keyUp	equ	__end_of_keyUp-_keyUp
  1707  001A                     	
  1708                           _keyUp:	
  1709  037F                     ;incstack = 0
  1710                           	opt	stack 4
  1711                           ; Regs used in _keyUp: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1712                           ;keyUp@key stored from wreg
  1713                           	bcf	status, 5	;RP0=0, select bank0
  1714  037F  1283               	movwf	(keyUp@key)
  1715  0380  009B               	line	170
  1716                           	
  1717                           l1043:	
  1718  0381                     ;main.c: 168: void keyUp(uint8_t key);main.c: 169: {;main.c: 170:     if ( key >= 128 ) 
                                 return;
  1719                           	movlw	low(080h)
  1720  0381  3080               	subwf	(keyUp@key),w
  1721  0382  021B               	skipc
  1722  0383  1C03               	goto	u671
  1723  0384  2B86               	goto	u670
  1724  0385  2B87               u671:
  1725  0386                     	goto	l1047
  1726  0386  2B89               u670:
  1727  0387                     	goto	l128
  1728  0387  2B98               	
  1729                           l1045:	
  1730  0388                     	goto	l128
  1731  0388  2B98               	
  1732                           l127:	
  1733  0389                     	line	171
  1734                           	
  1735                           l1047:	
  1736  0389                     ;main.c: 171:     i = codeToMatrix[key];
  1737                           	movf	(keyUp@key),w
  1738  0389  081B               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1739  038A  3E01               	movwf	fsr0
  1740  038B  0084               	fcall	stringdir
  1741  038C  2207               	movwf	(??_keyUp+0)+0
  1742  038D  009A               	movf	(??_keyUp+0)+0,w
  1743  038E  081A               	movwf	(_i)
  1744  038F  00A2               	line	172
  1745                           	
  1746                           l1049:	
  1747  0390                     ;main.c: 172:     if ( i != 0xFF ) resetPort(i);
  1748                           		incf	((_i)),w
  1749  0390  0A22               	btfsc	status,2
  1750  0391  1903               	goto	u681
  1751  0392  2B94               	goto	u680
  1752  0393  2B95               u681:
  1753  0394                     	goto	l128
  1754  0394  2B98               u680:
  1755  0395                     	
  1756                           l1051:	
  1757  0395                     	movf	(_i),w
  1758  0395  0822               	fcall	_resetPort
  1759  0396  2340               	goto	l128
  1760  0397  2B98               	
  1761                           l129:	
  1762  0398                     	line	173
  1763                           	
  1764                           l128:	
  1765  0398                     	return
  1766  0398  0008               	opt stack 0
  1767                           GLOBAL	__end_of_keyUp
  1768                           	__end_of_keyUp:
  1769  0399                     	signat	_keyUp,4217
  1770                           	global	_keyDown
  1771                           
  1772 ;; *************** function _keyDown *****************
  1773 ;; Defined at:
  1774 ;;		line 147 in file "main.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  key             1    wreg     unsigned char 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;  key             1   15[BANK0 ] unsigned char 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMMON   BANK0
  1788 ;;      Params:         0       0
  1789 ;;      Locals:         0       1
  1790 ;;      Temps:          0       1
  1791 ;;      Totals:         0       2
  1792 ;;Total ram usage:        2 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    3
  1795 ;; This function calls:
  1796 ;;		_resetPort
  1797 ;;		_setPort
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           psect	text4,local,class=CODE,delta=2,merge=1,group=0
  1803                           	line	147
  1804                           global __ptext4
  1805                           __ptext4:	;psect for function _keyDown
  1806  02CB                     psect	text4
  1807                           	file	"main.c"
  1808                           	line	147
  1809                           	global	__size_of_keyDown
  1810                           	__size_of_keyDown	equ	__end_of_keyDown-_keyDown
  1811  0041                     	
  1812                           _keyDown:	
  1813  02CB                     ;incstack = 0
  1814                           	opt	stack 4
  1815                           ; Regs used in _keyDown: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1816                           ;keyDown@key stored from wreg
  1817                           	bcf	status, 5	;RP0=0, select bank0
  1818  02CB  1283               	movwf	(keyDown@key)
  1819  02CC  009B               	line	149
  1820                           	
  1821                           l1017:	
  1822  02CD                     ;main.c: 147: void keyDown(uint8_t key);main.c: 148: {;main.c: 149:     if ( key >= 128 
                                 ) return;
  1823                           	movlw	low(080h)
  1824  02CD  3080               	subwf	(keyDown@key),w
  1825  02CE  021B               	skipc
  1826  02CF  1C03               	goto	u601
  1827  02D0  2AD2               	goto	u600
  1828  02D1  2AD3               u601:
  1829  02D2                     	goto	l1021
  1830  02D2  2AD5               u600:
  1831  02D3                     	goto	l113
  1832  02D3  2B0B               	
  1833                           l1019:	
  1834  02D4                     	goto	l113
  1835  02D4  2B0B               	
  1836                           l112:	
  1837  02D5                     	line	150
  1838                           	
  1839                           l1021:	
  1840  02D5                     ;main.c: 150:     i = codeToMatrix[key];
  1841                           	movf	(keyDown@key),w
  1842  02D5  081B               	addlw	low((((_codeToMatrix)-__stringbase)|8000h))
  1843  02D6  3E01               	movwf	fsr0
  1844  02D7  0084               	fcall	stringdir
  1845  02D8  2207               	movwf	(??_keyDown+0)+0
  1846  02D9  009A               	movf	(??_keyDown+0)+0,w
  1847  02DA  081A               	movwf	(_i)
  1848  02DB  00A2               	line	151
  1849                           	
  1850                           l1023:	
  1851  02DC                     ;main.c: 151:     if ( i != 0xFF ) {
  1852                           		incf	((_i)),w
  1853  02DC  0A22               	btfsc	status,2
  1854  02DD  1903               	goto	u611
  1855  02DE  2AE0               	goto	u610
  1856  02DF  2AE1               u611:
  1857  02E0                     	goto	l113
  1858  02E0  2B0B               u610:
  1859  02E1                     	line	152
  1860                           	
  1861                           l1025:	
  1862  02E1                     ;main.c: 152:         setPort(i);
  1863                           	movf	(_i),w
  1864  02E1  0822               	fcall	_setPort
  1865  02E2  2360               	line	154
  1866                           	
  1867                           l1027:	
  1868  02E3                     ;main.c: 154:         if ( (shift &&!replaced) || (i & 0b01000000) ) {
  1869                           	bcf	status, 5	;RP0=0, select bank0
  1870  02E3  1283               	movf	((_shift)),w
  1871  02E4  0821               	btfsc	status,2
  1872  02E5  1903               	goto	u621
  1873  02E6  2AE8               	goto	u620
  1874  02E7  2AE9               u621:
  1875  02E8                     	goto	l119
  1876  02E8  2AEE               u620:
  1877  02E9                     	
  1878                           l1029:	
  1879  02E9                     	movf	((_replaced)),w
  1880  02E9  081F               	btfsc	status,2
  1881  02EA  1903               	goto	u631
  1882  02EB  2AED               	goto	u630
  1883  02EC  2AEE               u631:
  1884  02ED                     	goto	l1031
  1885  02ED  2AF3               u630:
  1886  02EE                     	
  1887                           l119:	
  1888  02EE                     	btfss	(_i),(6)&7
  1889  02EE  1F22               	goto	u641
  1890  02EF  2AF1               	goto	u640
  1891  02F0  2AF2               u641:
  1892  02F1                     	goto	l1033
  1893  02F1  2AF6               u640:
  1894  02F2                     	goto	l1031
  1895  02F2  2AF3               	
  1896                           l117:	
  1897  02F3                     	line	155
  1898                           	
  1899                           l1031:	
  1900  02F3                     ;main.c: 155:             setPort(0x00);
  1901                           	movlw	low(0)
  1902  02F3  3000               	fcall	_setPort
  1903  02F4  2360               	line	156
  1904                           ;main.c: 156:         } else {
  1905                           	goto	l1035
  1906  02F5  2AF9               	
  1907                           l115:	
  1908  02F6                     	line	157
  1909                           	
  1910                           l1033:	
  1911  02F6                     ;main.c: 157:             resetPort(0x00);
  1912                           	movlw	low(0)
  1913  02F6  3000               	fcall	_resetPort
  1914  02F7  2340               	goto	l1035
  1915  02F8  2AF9               	line	158
  1916                           ;main.c: 158:         }
  1917                           	
  1918                           l120:	
  1919  02F9                     	line	160
  1920                           	
  1921                           l1035:	
  1922  02F9                     ;main.c: 160:         if ( ctrl || (i & 0b10000000) ) {
  1923                           	bcf	status, 5	;RP0=0, select bank0
  1924  02F9  1283               	movf	((_ctrl)),w
  1925  02FA  0820               	btfss	status,2
  1926  02FB  1D03               	goto	u651
  1927  02FC  2AFE               	goto	u650
  1928  02FD  2AFF               u651:
  1929  02FE                     	goto	l1039
  1930  02FE  2B04               u650:
  1931  02FF                     	
  1932                           l1037:	
  1933  02FF                     	btfss	(_i),(7)&7
  1934  02FF  1FA2               	goto	u661
  1935  0300  2B02               	goto	u660
  1936  0301  2B03               u661:
  1937  0302                     	goto	l1041
  1938  0302  2B07               u660:
  1939  0303                     	goto	l1039
  1940  0303  2B04               	
  1941                           l123:	
  1942  0304                     	line	161
  1943                           	
  1944                           l1039:	
  1945  0304                     ;main.c: 161:             setPort(0x0F);
  1946                           	movlw	low(0Fh)
  1947  0304  300F               	fcall	_setPort
  1948  0305  2360               	line	162
  1949                           ;main.c: 162:         } else {
  1950                           	goto	l113
  1951  0306  2B0B               	
  1952                           l121:	
  1953  0307                     	line	163
  1954                           	
  1955                           l1041:	
  1956  0307                     ;main.c: 163:             resetPort(0x0F);
  1957                           	movlw	low(0Fh)
  1958  0307  300F               	fcall	_resetPort
  1959  0308  2340               	goto	l113
  1960  0309  2B0B               	line	164
  1961                           ;main.c: 164:         }
  1962                           	
  1963                           l124:	
  1964  030A                     	goto	l113
  1965  030A  2B0B               	line	165
  1966                           ;main.c: 165:     }
  1967                           	
  1968                           l114:	
  1969  030B                     	line	166
  1970                           	
  1971                           l113:	
  1972  030B                     	return
  1973  030B  0008               	opt stack 0
  1974                           GLOBAL	__end_of_keyDown
  1975                           	__end_of_keyDown:
  1976  030C                     	signat	_keyDown,4217
  1977                           	global	_setPort
  1978                           
  1979 ;; *************** function _setPort *****************
  1980 ;; Defined at:
  1981 ;;		line 135 in file "main.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  bit_id          1    wreg     unsigned char 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  bit_id          1   13[BANK0 ] unsigned char 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0
  1995 ;;      Params:         0       0
  1996 ;;      Locals:         0       1
  1997 ;;      Temps:          0       3
  1998 ;;      Totals:         0       4
  1999 ;;Total ram usage:        4 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    2
  2002 ;; This function calls:
  2003 ;;		Nothing
  2004 ;; This function is called by:
  2005 ;;		_keyDown
  2006 ;; This function uses a non-reentrant model
  2007 ;;
  2008                           psect	text5,local,class=CODE,delta=2,merge=1,group=0
  2009                           	line	135
  2010                           global __ptext5
  2011                           __ptext5:	;psect for function _setPort
  2012  0360                     psect	text5
  2013                           	file	"main.c"
  2014                           	line	135
  2015                           	global	__size_of_setPort
  2016                           	__size_of_setPort	equ	__end_of_setPort-_setPort
  2017  001F                     	
  2018                           _setPort:	
  2019  0360                     ;incstack = 0
  2020                           	opt	stack 4
  2021                           ; Regs used in _setPort: [wreg-fsr0h+status,2+status,0]
  2022                           ;setPort@bit_id stored from wreg
  2023                           	bcf	status, 5	;RP0=0, select bank0
  2024  0360  1283               	movwf	(setPort@bit_id)
  2025  0361  0099               	line	137
  2026                           	
  2027                           l1013:	
  2028  0362                     ;main.c: 135: void setPort(uint8_t bit_id);main.c: 136: {;main.c: 137:     outPorts[bit_
                                 id & 7] |= (1 << ((bit_id >> 3) & 7));
  2029                           	movlw	low(01h)
  2030  0362  3001               	movwf	(??_setPort+0)+0
  2031  0363  0096               	movf	(setPort@bit_id),w
  2032  0364  0819               	movwf	(??_setPort+1)+0
  2033  0365  0097               	movlw	03h
  2034  0366  3003               u565:
  2035  0367                     	clrc
  2036  0367  1003               	rrf	(??_setPort+1)+0,f
  2037  0368  0C97               	addlw	-1
  2038  0369  3EFF               	skipz
  2039  036A  1D03               	goto	u565
  2040  036B  2B67               	movf	0+(??_setPort+1)+0,w
  2041  036C  0817               	andlw	07h
  2042  036D  3907               	addlw	1
  2043  036E  3E01               	goto	u574
  2044  036F  2B72               u575:
  2045  0370                     	clrc
  2046  0370  1003               	rlf	(??_setPort+0)+0,f
  2047  0371  0D96               u574:
  2048  0372                     	addlw	-1
  2049  0372  3EFF               	skipz
  2050  0373  1D03               	goto	u575
  2051  0374  2B70               	movf	0+(??_setPort+0)+0,w
  2052  0375  0816               	movwf	(??_setPort+2)+0
  2053  0376  0098               	movf	(setPort@bit_id),w
  2054  0377  0819               	andlw	07h
  2055  0378  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  2056  0379  3E2B               	movwf	fsr0
  2057  037A  0084               	movf	(??_setPort+2)+0,w
  2058  037B  0818               	bcf	status, 7	;select IRP bank0
  2059  037C  1383               	iorwf	indf,f
  2060  037D  0480               	line	138
  2061                           	
  2062                           l106:	
  2063  037E                     	return
  2064  037E  0008               	opt stack 0
  2065                           GLOBAL	__end_of_setPort
  2066                           	__end_of_setPort:
  2067  037F                     	signat	_setPort,4217
  2068                           	global	_resetPort
  2069                           
  2070 ;; *************** function _resetPort *****************
  2071 ;; Defined at:
  2072 ;;		line 140 in file "main.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;  bit_id          1    wreg     unsigned char 
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;  bit_id          1   13[BANK0 ] unsigned char 
  2077 ;; Return value:  Size  Location     Type
  2078 ;;                  1    wreg      void 
  2079 ;; Registers used:
  2080 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2081 ;; Tracked objects:
  2082 ;;		On entry : 0/0
  2083 ;;		On exit  : 0/0
  2084 ;;		Unchanged: 0/0
  2085 ;; Data sizes:     COMMON   BANK0
  2086 ;;      Params:         0       0
  2087 ;;      Locals:         0       1
  2088 ;;      Temps:          0       3
  2089 ;;      Totals:         0       4
  2090 ;;Total ram usage:        4 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    2
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_keyDown
  2097 ;;		_keyUp
  2098 ;; This function uses a non-reentrant model
  2099 ;;
  2100                           psect	text6,local,class=CODE,delta=2,merge=1,group=0
  2101                           	line	140
  2102                           global __ptext6
  2103                           __ptext6:	;psect for function _resetPort
  2104  0340                     psect	text6
  2105                           	file	"main.c"
  2106                           	line	140
  2107                           	global	__size_of_resetPort
  2108                           	__size_of_resetPort	equ	__end_of_resetPort-_resetPort
  2109  0020                     	
  2110                           _resetPort:	
  2111  0340                     ;incstack = 0
  2112                           	opt	stack 4
  2113                           ; Regs used in _resetPort: [wreg-fsr0h+status,2+status,0]
  2114                           ;resetPort@bit_id stored from wreg
  2115                           	bcf	status, 5	;RP0=0, select bank0
  2116  0340  1283               	movwf	(resetPort@bit_id)
  2117  0341  0099               	line	142
  2118                           	
  2119                           l1015:	
  2120  0342                     ;main.c: 140: void resetPort(uint8_t bit_id);main.c: 141: {;main.c: 142:     outPorts[bi
                                 t_id & 7] &= ~(1 << ((bit_id >> 3) & 7));
  2121                           	movlw	low(01h)
  2122  0342  3001               	movwf	(??_resetPort+0)+0
  2123  0343  0096               	movf	(resetPort@bit_id),w
  2124  0344  0819               	movwf	(??_resetPort+1)+0
  2125  0345  0097               	movlw	03h
  2126  0346  3003               u585:
  2127  0347                     	clrc
  2128  0347  1003               	rrf	(??_resetPort+1)+0,f
  2129  0348  0C97               	addlw	-1
  2130  0349  3EFF               	skipz
  2131  034A  1D03               	goto	u585
  2132  034B  2B47               	movf	0+(??_resetPort+1)+0,w
  2133  034C  0817               	andlw	07h
  2134  034D  3907               	addlw	1
  2135  034E  3E01               	goto	u594
  2136  034F  2B52               u595:
  2137  0350                     	clrc
  2138  0350  1003               	rlf	(??_resetPort+0)+0,f
  2139  0351  0D96               u594:
  2140  0352                     	addlw	-1
  2141  0352  3EFF               	skipz
  2142  0353  1D03               	goto	u595
  2143  0354  2B50               	movf	0+(??_resetPort+0)+0,w
  2144  0355  0816               	xorlw	0ffh
  2145  0356  3AFF               	movwf	(??_resetPort+2)+0
  2146  0357  0098               	movf	(resetPort@bit_id),w
  2147  0358  0819               	andlw	07h
  2148  0359  3907               	addlw	low(_outPorts|((0x0)<<8))&0ffh
  2149  035A  3E2B               	movwf	fsr0
  2150  035B  0084               	movf	(??_resetPort+2)+0,w
  2151  035C  0818               	bcf	status, 7	;select IRP bank0
  2152  035D  1383               	andwf	indf,f
  2153  035E  0580               	line	143
  2154                           	
  2155                           l109:	
  2156  035F                     	return
  2157  035F  0008               	opt stack 0
  2158                           GLOBAL	__end_of_resetPort
  2159                           	__end_of_resetPort:
  2160  0360                     	signat	_resetPort,4217
  2161                           	global	_myIsr
  2162                           
  2163 ;; *************** function _myIsr *****************
  2164 ;; Defined at:
  2165 ;;		line 74 in file "main.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;		None
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  ii              2    8[BANK0 ] int 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMMON   BANK0
  2179 ;;      Params:         0       0
  2180 ;;      Locals:         0       4
  2181 ;;      Temps:          0       6
  2182 ;;      Totals:         0      10
  2183 ;;Total ram usage:       10 bytes
  2184 ;; Hardware stack levels used:    2
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		Interrupt level 1
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           psect	text7,local,class=CODE,delta=2,merge=1,group=0
  2192                           	line	74
  2193                           global __ptext7
  2194                           __ptext7:	;psect for function _myIsr
  2195  012F                     psect	text7
  2196                           	file	"main.c"
  2197                           	line	74
  2198                           	global	__size_of_myIsr
  2199                           	__size_of_myIsr	equ	__end_of_myIsr-_myIsr
  2200  00D8                     	
  2201                           _myIsr:	
  2202  012F                     ;incstack = 0
  2203                           	opt	stack 4
  2204                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  2205                           psect	intentry,class=CODE,delta=2
  2206                           global __pintentry
  2207                           __pintentry:
  2208  0004                     global interrupt_function
  2209                           interrupt_function:
  2210  0004                     	global saved_w
  2211                           	saved_w	set	btemp+0
  2212  004E                     	movwf	saved_w
  2213  0004  00CE               	swapf	status,w
  2214  0005  0E03               	bcf	status, 5	;RP0=0, select bank0
  2215  0006  1283               	movwf	(??_myIsr+2)
  2216  0007  008E               	movf	fsr0,w
  2217  0008  0804               	movwf	(??_myIsr+3)
  2218  0009  008F               	movf	pclath,w
  2219  000A  080A               	movwf	(??_myIsr+4)
  2220  000B  0090               	movf	btemp+1,w
  2221  000C  084F               	movwf	(??_myIsr+5)
  2222  000D  0091               	ljmp	_myIsr
  2223  000E  292F               psect	text7
  2224                           	line	76
  2225                           	
  2226                           i1l1087:	
  2227  012F                     ;main.c: 76:     if(T0IE && T0IF){
  2228                           	btfss	(93/8),(93)&7	;volatile
  2229  012F  1E8B               	goto	u71_21
  2230  0130  2932               	goto	u71_20
  2231  0131  2933               u71_21:
  2232  0132                     	goto	i1l1155
  2233  0132  29FB               u71_20:
  2234  0133                     	
  2235                           i1l1089:	
  2236  0133                     	btfss	(90/8),(90)&7	;volatile
  2237  0133  1D0B               	goto	u72_21
  2238  0134  2936               	goto	u72_20
  2239  0135  2937               u72_21:
  2240  0136                     	goto	i1l1155
  2241  0136  29FB               u72_20:
  2242  0137                     	line	78
  2243                           	
  2244                           i1l1091:	
  2245  0137                     ;main.c: 78:         T0IF=0;
  2246                           	bcf	(90/8),(90)&7	;volatile
  2247  0137  110B               	line	79
  2248                           	
  2249                           i1l1093:	
  2250  0138                     ;main.c: 79:         TMR0 = 255;
  2251                           	movlw	low(0FFh)
  2252  0138  30FF               	movwf	(1)	;volatile
  2253  0139  0081               	line	83
  2254                           	
  2255                           i1l1095:	
  2256  013A                     ;main.c: 83:         if ( ps2DataState == 0 ) {
  2257                           	movf	((_ps2DataState)),w
  2258  013A  082A               	btfss	status,2
  2259  013B  1D03               	goto	u73_21
  2260  013C  293E               	goto	u73_20
  2261  013D  293F               u73_21:
  2262  013E                     	goto	i1l1105
  2263  013E  294D               u73_20:
  2264  013F                     	line	84
  2265                           	
  2266                           i1l1097:	
  2267  013F                     ;main.c: 84:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  2268                           	btfsc	(5),4	;volatile
  2269  013F  1A05               	goto	u74_21
  2270  0140  2942               	goto	u74_20
  2271  0141  2943               u74_21:
  2272  0142                     	goto	i1l1155
  2273  0142  29FB               u74_20:
  2274  0143                     	
  2275                           i1l1099:	
  2276  0143                     	btfsc	(5),3	;volatile
  2277  0143  1985               	goto	u75_21
  2278  0144  2946               	goto	u75_20
  2279  0145  2947               u75_21:
  2280  0146                     	goto	i1l1155
  2281  0146  29FB               u75_20:
  2282  0147                     	line	85
  2283                           	
  2284                           i1l1101:	
  2285  0147                     ;main.c: 85:                 ps2BitsCount = 0;
  2286                           	clrf	(_ps2BitsCount)
  2287  0147  01A8               	line	86
  2288                           ;main.c: 86:                 ps2Bits = 0;
  2289                           	clrf	(_ps2Bits)
  2290  0148  01A9               	line	87
  2291                           	
  2292                           i1l1103:	
  2293  0149                     ;main.c: 87:                 ps2DataState = 1;
  2294                           	clrf	(_ps2DataState)
  2295  0149  01AA               	incf	(_ps2DataState),f
  2296  014A  0AAA               	goto	i1l1155
  2297  014B  29FB               	line	88
  2298                           ;main.c: 88:             }
  2299                           	
  2300                           i1l81:	
  2301  014C                     	line	89
  2302                           ;main.c: 89:         } else if ( ps2DataState == 1 ) {
  2303                           	goto	i1l1155
  2304  014C  29FB               	
  2305                           i1l80:	
  2306  014D                     	
  2307                           i1l1105:	
  2308  014D                     		decf	((_ps2DataState)),w
  2309  014D  032A               	btfss	status,2
  2310  014E  1D03               	goto	u76_21
  2311  014F  2951               	goto	u76_20
  2312  0150  2952               u76_21:
  2313  0151                     	goto	i1l1155
  2314  0151  29FB               u76_20:
  2315  0152                     	line	90
  2316                           	
  2317                           i1l1107:	
  2318  0152                     ;main.c: 90:             if ( ps2BitsCount < 8 ) {
  2319                           	movf	(_ps2BitsCount),w
  2320  0152  0828               	xorlw	80h
  2321  0153  3A80               	addlw	-((08h)^80h)
  2322  0154  3E78               	skipnc
  2323  0155  1803               	goto	u77_21
  2324  0156  2958               	goto	u77_20
  2325  0157  2959               u77_21:
  2326  0158                     	goto	i1l1113
  2327  0158  296F               u77_20:
  2328  0159                     	line	91
  2329                           	
  2330                           i1l1109:	
  2331  0159                     ;main.c: 91:                 if ( PORTAbits.RA3 ) {
  2332                           	btfss	(5),3	;volatile
  2333  0159  1D85               	goto	u78_21
  2334  015A  295C               	goto	u78_20
  2335  015B  295D               u78_21:
  2336  015C                     	goto	i1l85
  2337  015C  296A               u78_20:
  2338  015D                     	line	92
  2339                           	
  2340                           i1l1111:	
  2341  015D                     ;main.c: 92:                     ps2Bits |= ( 1 << ps2BitsCount );
  2342                           	movlw	low(01h)
  2343  015D  3001               	movwf	(??_myIsr+0)+0
  2344  015E  008C               	incf	(_ps2BitsCount),w
  2345  015F  0A28               	goto	u79_24
  2346  0160  2963               u79_25:
  2347  0161                     	clrc
  2348  0161  1003               	rlf	(??_myIsr+0)+0,f
  2349  0162  0D8C               u79_24:
  2350  0163                     	addlw	-1
  2351  0163  3EFF               	skipz
  2352  0164  1D03               	goto	u79_25
  2353  0165  2961               	movf	0+(??_myIsr+0)+0,w
  2354  0166  080C               	movwf	(??_myIsr+1)+0
  2355  0167  008D               	movf	(??_myIsr+1)+0,w
  2356  0168  080D               	iorwf	(_ps2Bits),f
  2357  0169  04A9               	line	93
  2358                           ;main.c: 93:                 }
  2359                           	
  2360                           i1l85:	
  2361  016A                     	line	94
  2362                           ;main.c: 94:                 ps2BitsCount++;
  2363                           	movlw	low(01h)
  2364  016A  3001               	movwf	(??_myIsr+0)+0
  2365  016B  008C               	movf	(??_myIsr+0)+0,w
  2366  016C  080C               	addwf	(_ps2BitsCount),f
  2367  016D  07A8               	line	95
  2368                           ;main.c: 95:             } else if ( ps2BitsCount == 8 ) {
  2369                           	goto	i1l1155
  2370  016E  29FB               	
  2371                           i1l84:	
  2372  016F                     	
  2373                           i1l1113:	
  2374  016F                     		movlw	8
  2375  016F  3008               	xorwf	((_ps2BitsCount)),w
  2376  0170  0628               	btfss	status,2
  2377  0171  1D03               	goto	u80_21
  2378  0172  2974               	goto	u80_20
  2379  0173  2975               u80_21:
  2380  0174                     	goto	i1l1117
  2381  0174  297A               u80_20:
  2382  0175                     	line	96
  2383                           	
  2384                           i1l1115:	
  2385  0175                     ;main.c: 96:                 ps2BitsCount++;
  2386                           	movlw	low(01h)
  2387  0175  3001               	movwf	(??_myIsr+0)+0
  2388  0176  008C               	movf	(??_myIsr+0)+0,w
  2389  0177  080C               	addwf	(_ps2BitsCount),f
  2390  0178  07A8               	line	97
  2391                           ;main.c: 97:             } else if ( ps2BitsCount == 9 ) {
  2392                           	goto	i1l1155
  2393  0179  29FB               	
  2394                           i1l87:	
  2395  017A                     	
  2396                           i1l1117:	
  2397  017A                     		movlw	9
  2398  017A  3009               	xorwf	((_ps2BitsCount)),w
  2399  017B  0628               	btfss	status,2
  2400  017C  1D03               	goto	u81_21
  2401  017D  297F               	goto	u81_20
  2402  017E  2980               u81_21:
  2403  017F                     	goto	i1l1155
  2404  017F  29FB               u81_20:
  2405  0180                     	line	98
  2406                           	
  2407                           i1l1119:	
  2408  0180                     ;main.c: 98:                 ps2DataCount++;
  2409                           	movlw	low(01h)
  2410  0180  3001               	movwf	(??_myIsr+0)+0
  2411  0181  008C               	movf	(??_myIsr+0)+0,w
  2412  0182  080C               	addwf	(_ps2DataCount),f
  2413  0183  07A6               	line	99
  2414                           ;main.c: 99:                 if ( ps2NeedEncode ) {
  2415                           	movf	((_ps2NeedEncode)),w
  2416  0184  0823               	btfsc	status,2
  2417  0185  1903               	goto	u82_21
  2418  0186  2988               	goto	u82_20
  2419  0187  2989               u82_21:
  2420  0188                     	goto	i1l1135
  2421  0188  29C2               u82_20:
  2422  0189                     	line	100
  2423                           	
  2424                           i1l1121:	
  2425  0189                     ;main.c: 100:                     for (int ii=0; ii < 25; ii+=2) {
  2426                           	clrf	(myIsr@ii)
  2427  0189  0194               	clrf	(myIsr@ii+1)
  2428  018A  0195               	
  2429                           i1l1123:	
  2430  018B                     	movf	(myIsr@ii+1),w
  2431  018B  0815               	xorlw	80h
  2432  018C  3A80               	movwf	btemp+1
  2433  018D  00CF               	movlw	(0)^80h
  2434  018E  3080               	subwf	btemp+1,w
  2435  018F  024F               	skipz
  2436  0190  1D03               	goto	u83_25
  2437  0191  2994               	movlw	019h
  2438  0192  3019               	subwf	(myIsr@ii),w
  2439  0193  0214               u83_25:
  2440  0194                     
  2441                           	skipc
  2442  0194  1C03               	goto	u83_21
  2443  0195  2997               	goto	u83_20
  2444  0196  2998               u83_21:
  2445  0197                     	goto	i1l1127
  2446  0197  299A               u83_20:
  2447  0198                     	goto	i1l1141
  2448  0198  29DA               	
  2449                           i1l1125:	
  2450  0199                     	goto	i1l1141
  2451  0199  29DA               	
  2452                           i1l91:	
  2453  019A                     	line	101
  2454                           	
  2455                           i1l1127:	
  2456  019A                     ;main.c: 101:                         if ( ps2Bits == replaceTwoBytesCodes[ii] ) {
  2457                           	bcf	status, 5	;RP0=0, select bank0
  2458  019A  1283               	movf	(myIsr@ii),w
  2459  019B  0814               	addlw	low((((_replaceTwoBytesCodes)-__stringbase)|8000h))
  2460  019C  3EA5               	movwf	fsr0
  2461  019D  0084               	fcall	stringdir
  2462  019E  2207               	xorwf	(_ps2Bits),w
  2463  019F  0629               	skipz
  2464  01A0  1D03               	goto	u84_21
  2465  01A1  29A3               	goto	u84_20
  2466  01A2  29A4               u84_21:
  2467  01A3                     	goto	i1l1131
  2468  01A3  29AD               u84_20:
  2469  01A4                     	line	102
  2470                           	
  2471                           i1l1129:	
  2472  01A4                     ;main.c: 102:                             ps2Data = replaceTwoBytesCodes[ii+1];
  2473                           	movf	(myIsr@ii),w
  2474  01A4  0814               	addlw	01h
  2475  01A5  3E01               	addlw	low((((_replaceTwoBytesCodes)-__stringbase)|8000h))
  2476  01A6  3EA5               	movwf	fsr0
  2477  01A7  0084               	fcall	stringdir
  2478  01A8  2207               	movwf	(??_myIsr+0)+0
  2479  01A9  008C               	movf	(??_myIsr+0)+0,w
  2480  01AA  080C               	movwf	(_ps2Data)
  2481  01AB  00A7               	line	103
  2482                           ;main.c: 103:                             break;
  2483                           	goto	i1l1141
  2484  01AC  29DA               	line	104
  2485                           ;main.c: 104:                         }
  2486                           	
  2487                           i1l93:	
  2488  01AD                     	line	105
  2489                           	
  2490                           i1l1131:	
  2491  01AD                     ;main.c: 105:                     }
  2492                           	movlw	02h
  2493  01AD  3002               	addwf	(myIsr@ii),f
  2494  01AE  0794               	skipnc
  2495  01AF  1803               	incf	(myIsr@ii+1),f
  2496  01B0  0A95               	movlw	0
  2497  01B1  3000               	addwf	(myIsr@ii+1),f
  2498  01B2  0795               	
  2499                           i1l1133:	
  2500  01B3                     	movf	(myIsr@ii+1),w
  2501  01B3  0815               	xorlw	80h
  2502  01B4  3A80               	movwf	btemp+1
  2503  01B5  00CF               	movlw	(0)^80h
  2504  01B6  3080               	subwf	btemp+1,w
  2505  01B7  024F               	skipz
  2506  01B8  1D03               	goto	u85_25
  2507  01B9  29BC               	movlw	019h
  2508  01BA  3019               	subwf	(myIsr@ii),w
  2509  01BB  0214               u85_25:
  2510  01BC                     
  2511                           	skipc
  2512  01BC  1C03               	goto	u85_21
  2513  01BD  29BF               	goto	u85_20
  2514  01BE  29C0               u85_21:
  2515  01BF                     	goto	i1l1127
  2516  01BF  299A               u85_20:
  2517  01C0                     	goto	i1l1141
  2518  01C0  29DA               	
  2519                           i1l92:	
  2520  01C1                     	line	106
  2521                           ;main.c: 106:                 } else {
  2522                           	goto	i1l1141
  2523  01C1  29DA               	
  2524                           i1l90:	
  2525  01C2                     	line	107
  2526                           	
  2527                           i1l1135:	
  2528  01C2                     ;main.c: 107:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  2529                           		movlw	131
  2530  01C2  3083               	bcf	status, 5	;RP0=0, select bank0
  2531  01C3  1283               	xorwf	((_ps2Bits)),w
  2532  01C4  0629               	btfsc	status,2
  2533  01C5  1903               	goto	u86_21
  2534  01C6  29C8               	goto	u86_20
  2535  01C7  29C9               u86_21:
  2536  01C8                     	goto	i1l1139
  2537  01C8  29D1               u86_20:
  2538  01C9                     	
  2539                           i1l1137:	
  2540  01C9                     	movf	(_ps2Bits),w
  2541  01C9  0829               	movwf	(??_myIsr+0)+0
  2542  01CA  008C               	clrf	(??_myIsr+0)+0+1
  2543  01CB  018D               	movf	0+(??_myIsr+0)+0,w
  2544  01CC  080C               	movwf	(_myIsr$84)
  2545  01CD  0092               	movf	1+(??_myIsr+0)+0,w
  2546  01CE  080D               	movwf	(_myIsr$84+1)
  2547  01CF  0093               	goto	i1l98
  2548  01D0  29D5               	
  2549                           i1l96:	
  2550  01D1                     	
  2551                           i1l1139:	
  2552  01D1                     	movlw	03Fh
  2553  01D1  303F               	movwf	(_myIsr$84)
  2554  01D2  0092               	movlw	0
  2555  01D3  3000               	movwf	((_myIsr$84))+1
  2556  01D4  0093               	
  2557                           i1l98:	
  2558  01D5                     	movf	(_myIsr$84),w
  2559  01D5  0812               	movwf	(??_myIsr+0)+0
  2560  01D6  008C               	movf	(??_myIsr+0)+0,w
  2561  01D7  080C               	movwf	(_ps2Data)
  2562  01D8  00A7               	goto	i1l1141
  2563  01D9  29DA               	line	108
  2564                           ;main.c: 108:                 }
  2565                           	
  2566                           i1l94:	
  2567  01DA                     	line	109
  2568                           	
  2569                           i1l1141:	
  2570  01DA                     ;main.c: 109:                 if ( ps2Bits == 0xF0 ) {
  2571                           		movlw	240
  2572  01DA  30F0               	bcf	status, 5	;RP0=0, select bank0
  2573  01DB  1283               	xorwf	((_ps2Bits)),w
  2574  01DC  0629               	btfss	status,2
  2575  01DD  1D03               	goto	u87_21
  2576  01DE  29E0               	goto	u87_20
  2577  01DF  29E1               u87_21:
  2578  01E0                     	goto	i1l1147
  2579  01E0  29E5               u87_20:
  2580  01E1                     	line	110
  2581                           	
  2582                           i1l1143:	
  2583  01E1                     ;main.c: 110:                     ps2DataState = 0;
  2584                           	clrf	(_ps2DataState)
  2585  01E1  01AA               	line	111
  2586                           	
  2587                           i1l1145:	
  2588  01E2                     ;main.c: 111:                     ps2Up = 1;
  2589                           	clrf	(_ps2Up)
  2590  01E2  01A4               	incf	(_ps2Up),f
  2591  01E3  0AA4               	line	112
  2592                           ;main.c: 112:                 } else if ( ps2Bits == 0xE0 ) {
  2593                           	goto	i1l1155
  2594  01E4  29FB               	
  2595                           i1l99:	
  2596  01E5                     	
  2597                           i1l1147:	
  2598  01E5                     		movlw	224
  2599  01E5  30E0               	xorwf	((_ps2Bits)),w
  2600  01E6  0629               	btfss	status,2
  2601  01E7  1D03               	goto	u88_21
  2602  01E8  29EA               	goto	u88_20
  2603  01E9  29EB               u88_21:
  2604  01EA                     	goto	i1l1153
  2605  01EA  29EF               u88_20:
  2606  01EB                     	line	113
  2607                           	
  2608                           i1l1149:	
  2609  01EB                     ;main.c: 113:                     ps2DataState = 0;
  2610                           	clrf	(_ps2DataState)
  2611  01EB  01AA               	line	114
  2612                           	
  2613                           i1l1151:	
  2614  01EC                     ;main.c: 114:                     ps2NeedEncode = 1;
  2615                           	clrf	(_ps2NeedEncode)
  2616  01EC  01A3               	incf	(_ps2NeedEncode),f
  2617  01ED  0AA3               	line	115
  2618                           ;main.c: 115:                 } else {
  2619                           	goto	i1l1155
  2620  01EE  29FB               	line	123
  2621                           	
  2622                           i1l101:	
  2623  01EF                     	line	124
  2624                           	
  2625                           i1l1153:	
  2626  01EF                     ;main.c: 124:                     ps2DataState = 2;
  2627                           	movlw	low(02h)
  2628  01EF  3002               	movwf	(??_myIsr+0)+0
  2629  01F0  008C               	movf	(??_myIsr+0)+0,w
  2630  01F1  080C               	movwf	(_ps2DataState)
  2631  01F2  00AA               	goto	i1l1155
  2632  01F3  29FB               	line	125
  2633                           ;main.c: 125:                 }
  2634                           	
  2635                           i1l102:	
  2636  01F4                     	goto	i1l1155
  2637  01F4  29FB               	
  2638                           i1l100:	
  2639  01F5                     	goto	i1l1155
  2640  01F5  29FB               	line	127
  2641                           ;main.c: 127:             }
  2642                           	
  2643                           i1l89:	
  2644  01F6                     	goto	i1l1155
  2645  01F6  29FB               	
  2646                           i1l88:	
  2647  01F7                     	goto	i1l1155
  2648  01F7  29FB               	
  2649                           i1l86:	
  2650  01F8                     	goto	i1l1155
  2651  01F8  29FB               	line	128
  2652                           ;main.c: 128:         }
  2653                           	
  2654                           i1l83:	
  2655  01F9                     	goto	i1l1155
  2656  01F9  29FB               	
  2657                           i1l82:	
  2658  01FA                     	goto	i1l1155
  2659  01FA  29FB               	line	129
  2660                           ;main.c: 129:     }
  2661                           	
  2662                           i1l79:	
  2663  01FB                     	line	130
  2664                           	
  2665                           i1l1155:	
  2666  01FB                     ;main.c: 130:     GIE = 1;
  2667                           	bsf	(95/8),(95)&7	;volatile
  2668  01FB  178B               	line	131
  2669                           	
  2670                           i1l103:	
  2671  01FC                     	movf	(??_myIsr+5),w
  2672  01FC  0811               	movwf	btemp+1
  2673  01FD  00CF               	movf	(??_myIsr+4),w
  2674  01FE  0810               	movwf	pclath
  2675  01FF  008A               	movf	(??_myIsr+3),w
  2676  0200  080F               	movwf	fsr0
  2677  0201  0084               	swapf	(??_myIsr+2)^00h,w
  2678  0202  0E0E               	movwf	status
  2679  0203  0083               	swapf	saved_w,f
  2680  0204  0ECE               	swapf	saved_w,w
  2681  0205  0E4E               	retfie
  2682  0206  0009               	opt stack 0
  2683                           GLOBAL	__end_of_myIsr
  2684                           	__end_of_myIsr:
  2685  0207                     	signat	_myIsr,89
  2686                           global	___latbits
  2687                           ___latbits	equ	0
  2688  0000                     	global	btemp
  2689                           	btemp set 04Eh
  2690  004E                     
  2691                           	DABS	1,78,2	;btemp
  2692                           	global	wtemp0
  2693                           	wtemp0 set btemp+0
  2694  004E                     	end


Data Sizes:
    Strings     0
    Constant    190
    Data        13
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     17      44

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_keyDown
    _main->_keyUp
    _keyUp->_resetPort
    _keyDown->_resetPort
    _keyDown->_setPort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     220
                                             16 BANK0      1     1      0
                            _keyDown
                              _keyUp
                   _sendDataToAltera
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     1     1      0       0
                                             10 BANK0      1     1      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _keyUp                                                2     2      0      88
                                             14 BANK0      2     2      0
                          _resetPort
 ---------------------------------------------------------------------------------
 (1) _keyDown                                              2     2      0     132
                                             14 BANK0      2     2      0
                          _resetPort
                            _setPort
 ---------------------------------------------------------------------------------
 (2) _setPort                                              4     4      0      44
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _resetPort                                            4     4      0      44
                                             10 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                               10    10      0     114
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keyDown
     _resetPort
     _setPort
   _keyUp
     _resetPort
   _sendDataToAltera
     _myDelay

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     11      2C       3       66.7%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2C       6        0.0%
ABS                  0      0      2C       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 27 01:40:10 2018

                            _i 0022                              pc 0002                             fsr 0004  
                          l120 02F9                            l112 02D5                            l121 0307  
                          l113 030B                            l106 037E                            l114 030B  
                          l123 0304                            l115 02F6                            l124 030A  
                          l132 03AE                            l109 035F                            l117 02F3  
                          l142 004E                            l119 02EE                            l127 0389  
                          l135 0323                            l143 00DA                            l151 009D  
                          l128 0398                            l136 033D                            l152 00AF  
                          l144 0089                            l129 0398                            l137 033F  
                          l161 00CC                            l145 0069                            l170 012D  
                          l162 012B                            l154 00AC                            l146 0088  
                          l171 012E                            l163 00F3                            l155 00D1  
                          l147 007D                            l172 012E                            l164 00FF  
                          l156 00BF                            l148 00B0                            l165 00FE  
                          l149 00A0                            l166 0108                            l158 00BD  
                          l167 0114                            l159 00CE                            l168 0113  
                          l169 0127                            _GIE 005F                            _RA1 0029  
                          _RA2 002A                            u600 02D3                            u601 02D2  
                          u610 02E1                            u611 02E0                            u620 02E9  
                          u700 033D                            u621 02E8                            u701 033C  
                          u630 02EE                            u631 02ED                            u640 02F2  
                          u641 02F1                            u650 02FF                            u651 02FE  
                          u660 0303                            u900 005B                            u565 0367  
                          u661 0302                            u901 005A                            u574 0372  
                          u670 0387                            u910 0060                            u575 0370  
                          u671 0386                            u911 005F                            _PSA 040B  
                          u680 0395                            u920 0067                            u585 0347  
                          u681 0394                            u921 0066                            u594 0352  
                          u690 0321                            u930 0072                            u595 0350  
                          u691 0320                            u931 0071                            u940 0087  
                          u941 0086                            u950 008E                            u951 008D  
                          u960 0097                            u961 0096                            u970 009D  
                          u890 0055                            u971 009C                            u891 0054  
                          u980 00A6                            u981 00A5                            u990 00AC  
                          u991 00AB                            fsr0 0004                            indf 0000  
                         l1013 0362                           l1021 02D5                           l1015 0342  
                         l1031 02F3                           l1023 02DC                           l1041 0307  
                         l1033 02F6                           l1025 02E1                           l1017 02CD  
                         l1201 0069                           l1035 02F9                           l1027 02E3  
                         l1019 02D4                           l1051 0395                           l1043 0381  
                         l1203 0072                           l1211 0089                           l1037 02FF  
                         l1029 02E9                           l1045 0388                           l1061 0316  
                         l1053 030C                           l1221 00A6                           l1213 008E  
                         l1205 0074                           l1039 0304                           l1047 0389  
                         l1071 0324                           l1063 0319                           l1055 030F  
                         l1231 00C5                           l1215 0090                           l1223 00B0  
                         l1207 007D                           l1049 0390                           l1081 0332  
                         l1073 0327                           l1065 031B                           l1057 0310  
                         l1241 00D4                           l1233 00CC                           l1225 00B6  
                         l1217 0097                           l1209 0081                           l1161 003D  
                         l1083 0337                           l1075 032E                           l1067 0322  
                         l1059 0313                           l1243 00D5                           l1235 00CE  
                         l1227 00BD                           l1219 00A0                           l1251 00DA  
                         l1171 0043                           l1163 003F                           l1085 033E  
                         l1077 032F                           l1069 0323                           l1261 00F9  
                         l1253 00E1                           l1245 00D6                           l1229 00BF  
                         l1237 00D1                           l1181 004A                           l1173 0044  
                         l1165 0040                           l1157 0031                           l1079 0331  
                         l1271 0114                           l1263 00FF                           l1255 00EA  
                         l1247 00D7                           l1239 00D3                           l1191 0056  
                         l1183 004B                           l1175 0047                           l1167 0041  
                         l1159 0037                           l1273 011A                           l1265 0105  
                         l1257 00F0                           l1249 00D8                           l1193 005B  
                         l1185 004C                           l1177 0048                           l1169 0042  
                         l1275 0120                           l1267 0108                           l1259 00F3  
                         l1195 0060                           l1187 004E                           l1179 0049  
                         l1277 0127                           l1269 010E                           l1197 0061  
                         l1189 0055                           l1279 0128                           l1199 0068  
                         _T0IE 005D                           u1000 00B6                           _T0IF 005A  
                         u1001 00B5                           _T0CS 040D                           u1010 00BC  
                         u1011 00BB                           u1100 0120                           u1020 00C5  
                         u1101 011F                           u1021 00C4                           u1030 00CB  
                         u1031 00CA                           u1040 00EA                           u1041 00E9  
                         u1050 00F0                           u1051 00EF                           u1060 00F9  
                         u1061 00F8                           u1070 0105                           u1071 0104  
                         u1080 010E                           u1081 010D                           u1090 011A  
                         u1091 0119                           _T0SE 040C                           i1l80 014D  
                         i1l81 014C                           i1l82 01FA                           i1l90 01C2  
                         i1l83 01F9                           i1l91 019A                           i1l92 01C1  
                         i1l84 016F                           i1l93 01AD                           i1l85 016A  
                         i1l86 01F8                           i1l94 01DA                           i1l79 01FB  
                         i1l87 017A                           i1l88 01F7                           i1l96 01D1  
                         i1l89 01F6                           i1l98 01D5                           i1l99 01E5  
                         _TMR0 0001                           _main 0031                           _ctrl 0020  
                         btemp 004E                           start 000F                          ?_main 000C  
 __end_of_replaceTwoBytesCodes 02CB                          i1l100 01F5                          i1l101 01EF  
                        i1l102 01F4                          i1l103 01FC                          _PORTA 0005  
                        _PORTB 0006           __end_of_codeToMatrix 028D                          u71_20 0133  
                        u71_21 0132                          u80_20 0175                          u72_20 0137  
                        u80_21 0174                          u72_21 0136                          u81_20 0180  
                        u73_20 013F                          u81_21 017F                          u73_21 013E  
                        _TRISB 0086                          u82_20 0189                          u74_20 0143  
                        u82_21 0188                          u74_21 0142                          u83_20 0198  
                        u75_20 0147                          u83_21 0197                          u75_21 0146  
                        u83_25 0194                          u84_20 01A4                          u76_20 0152  
                        u84_21 01A3                          u76_21 0151                          u85_20 01C0  
                        u77_20 0159                          u85_21 01BF                          u77_21 0158  
                        u85_25 01BC                          u86_20 01C9                          u78_20 015D  
                        u86_21 01C8                          u78_21 015C                          u87_20 01E1  
                        u87_21 01E0                          u79_24 0163                          u79_25 0161  
                        u88_20 01EB                          u88_21 01EA                __end_of_keyDown 030C  
                        _ps2Up 0024                __end_of_myDelay 03AF                          _keyUp 037F  
                        _myIsr 012F                          _shift 0021                __end_of_setPort 037F  
                        pclath 000A                          status 0003                          wtemp0 004E  
              __initialization 0010                   __end_of_main 012F                         ??_main 001C  
                       ?_keyUp 000C                         ?_myIsr 000C                         i1l1101 0147  
                       i1l1111 015D                         i1l1103 0149                         i1l1121 0189  
                       i1l1113 016F                         i1l1105 014D                         i1l1131 01AD  
                       i1l1123 018B                         i1l1115 0175                         i1l1107 0152  
                       i1l1133 01B3                         i1l1125 0199                         i1l1141 01DA  
                       i1l1117 017A                         i1l1109 0159                         i1l1151 01EC  
                       i1l1143 01E1                         i1l1127 019A                         i1l1135 01C2  
                       i1l1119 0180                         i1l1153 01EF                         i1l1145 01E2  
                       i1l1137 01C9                         i1l1129 01A4                         i1l1147 01E5  
                       i1l1139 01D1                         i1l1091 0137                         i1l1155 01FB  
                       i1l1149 01EB                         i1l1093 0138                         i1l1095 013A  
                       i1l1087 012F                         i1l1097 013F                         i1l1089 0133  
                       i1l1099 0143                         _TRISA0 0428                         _TRISA1 0429  
                       _TRISA2 042A                         _TRISA3 042B                         _TRISA4 042C  
     __end_of_sendDataToAltera 0340                         _mouseX 0037                         _mouseY 0036  
                    ??_keyDown 001A                      ??_myDelay 0000                         saved_w 004E  
                    ??_setPort 0016        __end_of__initialization 002F           _replaceTwoBytesCodes 02B1  
               __pcstackCOMMON 0000                   __pidataBANK0 0399                  __end_of_keyUp 0399  
                __end_of_myIsr 0207                        ??_keyUp 001A                        ??_myIsr 000C  
                 _ps2DataCount 0026                   _ps2DataState 002A                     __pbssBANK0 001D  
                 _ps2BitsCount 0028                   _codeToMatrix 020D                     __pmaintext 0031  
                   __pintentry 0004             __size_of_resetPort 0020                     __stringtab 0207  
__end_of_replaceOnShiftKeyDown 02B1                        _ps2Data 0027                        _ps2Bits 0029  
                      __ptext1 030C                        __ptext2 03AE                        __ptext3 037F  
                      __ptext4 02CB                        __ptext5 0360                        __ptext6 0340  
                      __ptext7 012F                        _keyDown 02CB                        _myDelay 03AE  
                      _setPort 0360                        clrloop0 03A7           end_of_initialization 002F  
            __end_of_resetPort 0360                        myIsr@ii 0014              ?_sendDataToAltera 000C  
                   _mouseDelay 001D             ??_sendDataToAltera 0016                      _PORTAbits 0005  
                setPort@bit_id 0019                     keyDown@key 001B            start_initialization 0010  
                  __pdataBANK0 002B                      ___latbits 0000                  __pcstackBANK0 000C  
              resetPort@bit_id 0019                      __pstrings 0207                  _ps2NeedEncode 0023  
                     ?_keyDown 000C                       ?_myDelay 000C                    _ps2WaitCode 0025  
                     ?_setPort 000C                 __size_of_keyUp 001A                 __size_of_myIsr 00D8  
            interrupt_function 0004                      clear_ram0 03A6                      _resetPort 0340  
        _replaceOnShiftKeyDown 028D                    __stringbase 020C      __size_of_sendDataToAltera 0034  
                   ?_resetPort 000C             __end_of__stringtab 020D               __size_of_keyDown 0041  
             __size_of_myDelay 0001               __size_of_setPort 001F                       _myIsr$84 0012  
                __size_of_main 00FE                       _replaced 001F                       _outPorts 002B  
                     keyUp@key 001B                       intlevel1 0000                      stringcode 0207  
                  ??_resetPort 0016               _sendDataToAltera 030C                       stringdir 0207  
                     stringtab 0207  
