

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Oct 20 15:28:05 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	dabs	1,0x4E,2
    22  0000                     
    23                           ; Version 2.00
    24                           ; Generated 27/05/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F84A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0088                     	;# 
    72  0089                     	;# 
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89                           
    90                           	psect	idataBANK0
    91  01E3                     __pidataBANK0:	
    92                           
    93                           ;initializer for _outPorts
    94  01E3  3400               	retlw	0
    95  01E4  3400               	retlw	0
    96  01E5  3400               	retlw	0
    97  01E6  3400               	retlw	0
    98  01E7  3400               	retlw	0
    99  01E8  3400               	retlw	0
   100  01E9  3400               	retlw	0
   101  01EA  3400               	retlw	0
   102  01EB  3407               	retlw	7
   103  01EC  34F5               	retlw	245
   104  01ED  34DA               	retlw	218
   105                           
   106                           	psect	strings
   107  0200                     __pstrings:	
   108  0200                     stringtab:	
   109  0200                     __stringtab:	
   110  0200                     stringcode:	
   111                           ;	String table - string pointers are 1 byte each
   112                           
   113  0200                     stringdir:	
   114  0200  3002               	movlw	high stringdir
   115  0201  008A               	movwf	10
   116  0202  0804               	movf	4,w
   117  0203  0A84               	incf	4,f
   118  0204  0782               	addwf	2,f
   119  0205                     __stringbase:	
   120  0205  3400               	retlw	0
   121  0206                     __end_of__stringtab:	
   122  0206                     _codeToMatrix:	
   123  0206  34FF               	retlw	255
   124  0207  34FF               	retlw	255
   125  0208  34FF               	retlw	255
   126  0209  34FF               	retlw	255
   127  020A  34FF               	retlw	255
   128  020B  34FF               	retlw	255
   129  020C  34FF               	retlw	255
   130  020D  34FF               	retlw	255
   131  020E  34FF               	retlw	255
   132  020F  34FF               	retlw	255
   133  0210  34FF               	retlw	255
   134  0211  34FF               	retlw	255
   135  0212  34FF               	retlw	255
   136  0213  34FF               	retlw	255
   137  0214  349C               	retlw	156
   138  0215  34FF               	retlw	255
   139  0216  34FF               	retlw	255
   140  0217  34FF               	retlw	255
   141  0218  34FF               	retlw	255
   142  0219  34FF               	retlw	255
   143  021A  34FF               	retlw	255
   144  021B  3402               	retlw	2
   145  021C  3403               	retlw	3
   146  021D  34FF               	retlw	255
   147  021E  34FF               	retlw	255
   148  021F  34FF               	retlw	255
   149  0220  3408               	retlw	8
   150  0221  3409               	retlw	9
   151  0222  3401               	retlw	1
   152  0223  340A               	retlw	10
   153  0224  340B               	retlw	11
   154  0225  34D6               	retlw	214
   155  0226  34FF               	retlw	255
   156  0227  3418               	retlw	24
   157  0228  3410               	retlw	16
   158  0229  3411               	retlw	17
   159  022A  3412               	retlw	18
   160  022B  341B               	retlw	27
   161  022C  3413               	retlw	19
   162  022D  34FF               	retlw	255
   163  022E  345C               	retlw	92
   164  022F  3407               	retlw	7
   165  0230  3420               	retlw	32
   166  0231  3419               	retlw	25
   167  0232  3422               	retlw	34
   168  0233  341A               	retlw	26
   169  0234  3423               	retlw	35
   170  0235  3463               	retlw	99
   171  0236  3464               	retlw	100
   172  0237  341F               	retlw	31
   173  0238  3427               	retlw	39
   174  0239  3426               	retlw	38
   175  023A  3421               	retlw	33
   176  023B  3425               	retlw	37
   177  023C  3424               	retlw	36
   178  023D  3454               	retlw	84
   179  023E  34A0               	retlw	160
   180  023F  3406               	retlw	6
   181  0240  3417               	retlw	23
   182  0241  341E               	retlw	30
   183  0242  341D               	retlw	29
   184  0243  341C               	retlw	28
   185  0244  3414               	retlw	20
   186  0245  34FF               	retlw	255
   187  0246  34FF               	retlw	255
   188  0247  349F               	retlw	159
   189  0248  3416               	retlw	22
   190  0249  3415               	retlw	21
   191  024A  340D               	retlw	13
   192  024B  3404               	retlw	4
   193  024C  340C               	retlw	12
   194  024D  34FF               	retlw	255
   195  024E  34C1               	retlw	193
   196  024F  3497               	retlw	151
   197  0250  34A0               	retlw	160
   198  0251  340E               	retlw	14
   199  0252  348D               	retlw	141
   200  0253  3405               	retlw	5
   201  0254  349E               	retlw	158
   202  0255  3483               	retlw	131
   203  0256  348B               	retlw	139
   204  0257  3493               	retlw	147
   205  0258  349C               	retlw	156
   206  0259  349B               	retlw	155
   207  025A  34E5               	retlw	229
   208  025B  348E               	retlw	142
   209  025C  34A3               	retlw	163
   210  025D  34A6               	retlw	166
   211  025E  344B               	retlw	75
   212  025F  34FF               	retlw	255
   213  0260  3406               	retlw	6
   214  0261  34DD               	retlw	221
   215  0262  34A4               	retlw	164
   216  0263  34D1               	retlw	209
   217  0264  34A7               	retlw	167
   218  0265  3494               	retlw	148
   219  0266  348C               	retlw	140
   220  0267  3484               	retlw	132
   221  0268  3496               	retlw	150
   222  0269  34C9               	retlw	201
   223  026A  34D9               	retlw	217
   224  026B  34E1               	retlw	225
   225  026C  3444               	retlw	68
   226  026D  3488               	retlw	136
   227  026E  3485               	retlw	133
   228  026F  3403               	retlw	3
   229  0270  349A               	retlw	154
   230  0271  341B               	retlw	27
   231  0272  341C               	retlw	28
   232  0273  34A2               	retlw	162
   233  0274  3498               	retlw	152
   234  0275  34C0               	retlw	192
   235  0276  3404               	retlw	4
   236  0277  3497               	retlw	151
   237  0278  340B               	retlw	11
   238  0279  3423               	retlw	35
   239  027A  3424               	retlw	36
   240  027B  3414               	retlw	20
   241  027C  3443               	retlw	67
   242  027D  34FF               	retlw	255
   243  027E  34FF               	retlw	255
   244  027F  3496               	retlw	150
   245  0280  3413               	retlw	19
   246  0281  349E               	retlw	158
   247  0282  34A7               	retlw	167
   248  0283  340C               	retlw	12
   249  0284  34FF               	retlw	255
   250  0285  34FF               	retlw	255
   251  0286                     __end_of_codeToMatrix:	
   252  0286                     _replaceOnShiftKeyDown:	
   253  0286  3416               	retlw	22
   254  0287  344F               	retlw	79
   255  0288  341E               	retlw	30
   256  0289  3450               	retlw	80
   257  028A  3426               	retlw	38
   258  028B  3451               	retlw	81
   259  028C  3425               	retlw	37
   260  028D  3453               	retlw	83
   261  028E  342E               	retlw	46
   262  028F  3456               	retlw	86
   263  0290  3436               	retlw	54
   264  0291  3457               	retlw	87
   265  0292  343D               	retlw	61
   266  0293  345C               	retlw	92
   267  0294  343E               	retlw	62
   268  0295  345E               	retlw	94
   269  0296  3446               	retlw	70
   270  0297  345F               	retlw	95
   271  0298  3445               	retlw	69
   272  0299  3460               	retlw	96
   273  029A  344E               	retlw	78
   274  029B  3461               	retlw	97
   275  029C  3455               	retlw	85
   276  029D  3462               	retlw	98
   277  029E  345D               	retlw	93
   278  029F  3463               	retlw	99
   279  02A0  344C               	retlw	76
   280  02A1  3467               	retlw	103
   281  02A2  3452               	retlw	82
   282  02A3  3468               	retlw	104
   283  02A4  3441               	retlw	65
   284  02A5  346A               	retlw	106
   285  02A6  3449               	retlw	73
   286  02A7  346D               	retlw	109
   287  02A8  344A               	retlw	74
   288  02A9  346E               	retlw	110
   289  02AA  340E               	retlw	14
   290  02AB  3448               	retlw	72
   291  02AC  3454               	retlw	84
   292  02AD  3464               	retlw	100
   293  02AE  345B               	retlw	91
   294  02AF  3465               	retlw	101
   295  02B0                     __end_of_replaceOnShiftKeyDown:	
   296  02B0                     _replaceTwoBytesCodes:	
   297  02B0  3411               	retlw	17
   298  02B1  3408               	retlw	8
   299  02B2  3414               	retlw	20
   300  02B3  3413               	retlw	19
   301  02B4  3470               	retlw	112
   302  02B5  3417               	retlw	23
   303  02B6  346C               	retlw	108
   304  02B7  3418               	retlw	24
   305  02B8  347D               	retlw	125
   306  02B9  3419               	retlw	25
   307  02BA  3471               	retlw	113
   308  02BB  341F               	retlw	31
   309  02BC  3469               	retlw	105
   310  02BD  3420               	retlw	32
   311  02BE  347A               	retlw	122
   312  02BF  3427               	retlw	39
   313  02C0  3475               	retlw	117
   314  02C1  3428               	retlw	40
   315  02C2  346B               	retlw	107
   316  02C3  342F               	retlw	47
   317  02C4  3472               	retlw	114
   318  02C5  3430               	retlw	48
   319  02C6  3474               	retlw	116
   320  02C7  3437               	retlw	55
   321  02C8  344A               	retlw	74
   322  02C9  3438               	retlw	56
   323  02CA  345A               	retlw	90
   324  02CB  3439               	retlw	57
   325  02CC                     __end_of_replaceTwoBytesCodes:	
   326  02CC                     _replaceOnDelayKeyDown:	
   327  02CC  341F               	retlw	31
   328  02CD  3454               	retlw	84
   329  02CE  345B               	retlw	91
   330  02CF  3463               	retlw	99
   331  02D0  3464               	retlw	100
   332  02D1  3465               	retlw	101
   333  02D2  3448               	retlw	72
   334  02D3  345D               	retlw	93
   335  02D4                     __end_of_replaceOnDelayKeyDown:	
   336  02D4                     _importantKeys:	
   337  02D4  3412               	retlw	18
   338  02D5  3459               	retlw	89
   339  02D6  3414               	retlw	20
   340  02D7  3413               	retlw	19
   341  02D8  3411               	retlw	17
   342  02D9  3408               	retlw	8
   343  02DA                     __end_of_importantKeys:	
   344  02DA                     _kempstonMouseKeys:	
   345  02DA  346B               	retlw	107
   346  02DB  3474               	retlw	116
   347  02DC  3475               	retlw	117
   348  02DD  3472               	retlw	114
   349  02DE  3473               	retlw	115
   350  02DF  3404               	retlw	4
   351  02E0                     __end_of_kempstonMouseKeys:	
   352                           
   353                           	psect	nvBANK0
   354  0042                     __pnvBANK0:	
   355  0042                     _ps2Down:	
   356  0042                     	ds	1
   357  0005                     _PORTA	set	5
   358  0006                     _PORTB	set	6
   359  0005                     _PORTAbits	set	5
   360  0001                     _TMR0	set	1
   361  002A                     _RA2	set	42
   362  0029                     _RA1	set	41
   363  005F                     _GIE	set	95
   364  005A                     _T0IF	set	90
   365  005D                     _T0IE	set	93
   366  0086                     _TRISB	set	134
   367  040B                     _PSA	set	1035
   368  040C                     _T0SE	set	1036
   369  040D                     _T0CS	set	1037
   370  042B                     _TRISA3	set	1067
   371  042C                     _TRISA4	set	1068
   372  0428                     _TRISA0	set	1064
   373  042A                     _TRISA2	set	1066
   374  0429                     _TRISA1	set	1065
   375                           
   376                           	psect	cinit
   377  0010                     start_initialization:	
   378                           ; #config settings
   379                           
   380  0010                     __initialization:	
   381                           
   382                           ; Initialize objects allocated to BANK0
   383  0010  21E3               	fcall	__pidataBANK0	;fetch initializer
   384  0011  00B7               	movwf	__pdataBANK0& (0+127)
   385  0012  21E4               	fcall	__pidataBANK0+1	;fetch initializer
   386  0013  00B8               	movwf	(__pdataBANK0+1)& (0+127)
   387  0014  21E5               	fcall	__pidataBANK0+2	;fetch initializer
   388  0015  00B9               	movwf	(__pdataBANK0+2)& (0+127)
   389  0016  21E6               	fcall	__pidataBANK0+3	;fetch initializer
   390  0017  00BA               	movwf	(__pdataBANK0+3)& (0+127)
   391  0018  21E7               	fcall	__pidataBANK0+4	;fetch initializer
   392  0019  00BB               	movwf	(__pdataBANK0+4)& (0+127)
   393  001A  21E8               	fcall	__pidataBANK0+5	;fetch initializer
   394  001B  00BC               	movwf	(__pdataBANK0+5)& (0+127)
   395  001C  21E9               	fcall	__pidataBANK0+6	;fetch initializer
   396  001D  00BD               	movwf	(__pdataBANK0+6)& (0+127)
   397  001E  21EA               	fcall	__pidataBANK0+7	;fetch initializer
   398  001F  00BE               	movwf	(__pdataBANK0+7)& (0+127)
   399  0020  21EB               	fcall	__pidataBANK0+8	;fetch initializer
   400  0021  00BF               	movwf	(__pdataBANK0+8)& (0+127)
   401  0022  21EC               	fcall	__pidataBANK0+9	;fetch initializer
   402  0023  00C0               	movwf	(__pdataBANK0+9)& (0+127)
   403  0024  21ED               	fcall	__pidataBANK0+10	;fetch initializer
   404  0025  00C1               	movwf	(__pdataBANK0+10)& (0+127)
   405                           
   406                           ; Clear objects allocated to BANK0
   407  0026  1383               	bcf	3,7	;select IRP bank0
   408  0027  3027               	movlw	low __pbssBANK0
   409  0028  0084               	movwf	4
   410  0029  3037               	movlw	low (__pbssBANK0+16)
   411  002A  21EE               	fcall	clear_ram0
   412  002B                     end_of_initialization:	
   413                           ;End of C runtime variable initialization code
   414                           
   415  002B                     __end_of__initialization:	
   416  002B  0183               	clrf	3
   417  002C  282D               	ljmp	_main	;jump to C main() function
   418                           
   419                           	psect	bssBANK0
   420  0027                     __pbssBANK0:	
   421  0027                     _kempstonMouseEmulatorDelay:	
   422  0027                     	ds	2
   423  0029                     _delay:	
   424  0029                     	ds	2
   425  002B                     _delayedKey:	
   426  002B                     	ds	1
   427  002C                     _replaced:	
   428  002C                     	ds	1
   429  002D                     _numLock:	
   430  002D                     	ds	1
   431  002E                     _ps2NeedEncode:	
   432  002E                     	ds	1
   433  002F                     _ps2WaitCode:	
   434  002F                     	ds	1
   435  0030                     _ps2Device:	
   436  0030                     	ds	1
   437  0031                     _ps2Data:	
   438  0031                     	ds	1
   439  0032                     _ps2BitsCount:	
   440  0032                     	ds	1
   441  0033                     _ps2Bits:	
   442  0033                     	ds	1
   443  0034                     _ps2DataState:	
   444  0034                     	ds	1
   445  0035                     _kempstonMouseEmulatorKeys:	
   446  0035                     	ds	1
   447  0036                     _shift_ctrl_alt:	
   448  0036                     	ds	1
   449                           
   450                           	psect	dataBANK0
   451  0037                     __pdataBANK0:	
   452  0037                     _outPorts:	
   453  0037                     	ds	11
   454                           
   455                           	psect	clrtext
   456  01EE                     clear_ram0:	
   457                           ;	Called with FSR containing the base address, and
   458                           ;	W with the last address+1
   459                           
   460  01EE  0064               	clrwdt	;clear the watchdog before getting into this loop
   461  01EF                     clrloop0:	
   462  01EF  0180               	clrf	0	;clear RAM location pointed to by FSR
   463  01F0  0A84               	incf	4,f	;increment pointer
   464  01F1  0604               	xorwf	4,w	;XOR with final address
   465  01F2  1903               	btfsc	3,2	;have we reached the end yet?
   466  01F3  3400               	retlw	0	;all done for this memory range, return
   467  01F4  0604               	xorwf	4,w	;XOR again to restore value
   468  01F5  29EF               	goto	clrloop0	;do the next byte
   469                           
   470                           	psect	cstackCOMMON
   471  0000                     __pcstackCOMMON:	
   472  0000                     ??_myDelay:	
   473                           
   474                           	psect	cstackBANK0
   475  000C                     __pcstackBANK0:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  000C                     ?_myIsr:	
   479  000C                     ??_myIsr:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  000C                     ?_myDelay:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  000C                     ?_sendDataToAltera:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  000C                     ?_main:	
   489                           ; 1 bytes @ 0x0
   490                           
   491                           
   492                           ; 1 bytes @ 0x0
   493  000C                     	ds	6
   494  0012                     _myIsr$87:	
   495                           
   496                           ; 2 bytes @ 0x6
   497  0012                     	ds	2
   498  0014                     myIsr@i:	
   499                           
   500                           ; 1 bytes @ 0x8
   501  0014                     	ds	1
   502  0015                     ?_updatePort:	
   503  0015                     ??_sendDataToAltera:	
   504                           ; 1 bytes @ 0x9
   505                           
   506  0015                     ?_calculateBitsFromTable:	
   507                           ; 1 bytes @ 0x9
   508                           
   509  0015                     updatePort@set:	
   510                           ; 1 bytes @ 0x9
   511                           
   512  0015                     calculateBitsFromTable@table:	
   513                           ; 1 bytes @ 0x9
   514                           
   515                           
   516                           ; 1 bytes @ 0x9
   517  0015                     	ds	1
   518  0016                     ??_updatePort:	
   519  0016                     calculateBitsFromTable@count:	
   520                           ; 1 bytes @ 0xA
   521                           
   522                           
   523                           ; 1 bytes @ 0xA
   524  0016                     	ds	1
   525  0017                     calculateBitsFromTable@clearIfFound:	
   526  0017                     _sendDataToAltera$104:	
   527                           ; 1 bytes @ 0xB
   528                           
   529                           
   530                           ; 2 bytes @ 0xB
   531  0017                     	ds	1
   532  0018                     ??_calculateBitsFromTable:	
   533                           
   534                           ; 1 bytes @ 0xC
   535  0018                     	ds	1
   536  0019                     updatePort@a:	
   537  0019                     sendDataToAltera@i:	
   538                           ; 1 bytes @ 0xD
   539                           
   540                           
   541                           ; 1 bytes @ 0xD
   542  0019                     	ds	1
   543  001A                     updatePort@bit_id:	
   544  001A                     calculateBitsFromTable@bits:	
   545                           ; 1 bytes @ 0xE
   546                           
   547                           
   548                           ; 1 bytes @ 0xE
   549  001A                     	ds	1
   550  001B                     ?_updateKey:	
   551  001B                     updateKey@set:	
   552                           ; 1 bytes @ 0xF
   553                           
   554  001B                     calculateBitsFromTable@i:	
   555                           ; 1 bytes @ 0xF
   556                           
   557                           
   558                           ; 1 bytes @ 0xF
   559  001B                     	ds	1
   560  001C                     ??_updateKey:	
   561                           
   562                           ; 1 bytes @ 0x10
   563  001C                     	ds	1
   564  001D                     updateKey@localShift:	
   565                           
   566                           ; 1 bytes @ 0x11
   567  001D                     	ds	1
   568  001E                     _updateKey$97:	
   569                           
   570                           ; 1 bytes @ 0x12
   571  001E                     	ds	1
   572  001F                     updateKey@localCtrl:	
   573                           
   574                           ; 1 bytes @ 0x13
   575  001F                     	ds	1
   576  0020                     updateKey@key:	
   577                           
   578                           ; 1 bytes @ 0x14
   579  0020                     	ds	1
   580  0021                     updateKey@code:	
   581                           
   582                           ; 1 bytes @ 0x15
   583  0021                     	ds	1
   584  0022                     ??_main:	
   585                           
   586                           ; 1 bytes @ 0x16
   587  0022                     	ds	3
   588  0025                     main@i_119:	
   589                           
   590                           ; 1 bytes @ 0x19
   591  0025                     	ds	1
   592  0026                     main@i:	
   593                           
   594                           ; 1 bytes @ 0x1A
   595  0026                     	ds	1
   596                           
   597                           	psect	maintext
   598  002D                     __pmaintext:	
   599 ;;
   600 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   601 ;;
   602 ;; *************** function _main *****************
   603 ;; Defined at:
   604 ;;		line 349 in file "main.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  i               1   25[BANK0 ] char 
   609 ;;  i               1   26[BANK0 ] char 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : B00/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMMON   BANK0
   619 ;;      Params:         0       0
   620 ;;      Locals:         0       2
   621 ;;      Temps:          0       3
   622 ;;      Totals:         0       5
   623 ;;Total ram usage:        5 bytes
   624 ;; Hardware stack levels required when called:    4
   625 ;; This function calls:
   626 ;;		_calculateBitsFromTable
   627 ;;		_sendDataToAltera
   628 ;;		_updateKey
   629 ;;		_updatePort
   630 ;; This function is called by:
   631 ;;		Startup code after reset
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           
   636                           ;psect for function _main
   637  002D                     _main:	
   638                           
   639                           ;main.c: 351:     TRISA1 = 0;
   640                           
   641                           ;incstack = 0
   642                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   643  002D  1683               	bsf	3,5	;RP0=1, select bank1
   644  002E  1085               	bcf	5,1	;volatile
   645                           
   646                           ;main.c: 352:     TRISA2 = 0;
   647  002F  1105               	bcf	5,2	;volatile
   648                           
   649                           ;main.c: 353:     TRISA0 = 1;
   650  0030  1405               	bsf	5,0	;volatile
   651                           
   652                           ;main.c: 354:     TRISA4 = 1;
   653  0031  1605               	bsf	5,4	;volatile
   654                           
   655                           ;main.c: 355:     TRISA3 = 1;
   656  0032  1585               	bsf	5,3	;volatile
   657                           
   658                           ;main.c: 357:     PORTA = 0;
   659  0033  1283               	bcf	3,5	;RP0=0, select bank0
   660  0034  0185               	clrf	5	;volatile
   661                           
   662                           ;main.c: 359:     TRISB = 0;
   663  0035  1683               	bsf	3,5	;RP0=1, select bank1
   664  0036  0186               	clrf	6	;volatile
   665                           
   666                           ;main.c: 360:     PORTB = 0;
   667  0037  1283               	bcf	3,5	;RP0=0, select bank0
   668  0038  0186               	clrf	6	;volatile
   669                           
   670                           ;main.c: 380:     ps2Data = 0;
   671  0039  01B1               	clrf	_ps2Data
   672                           
   673                           ;main.c: 382:     ps2WaitCode = 0;
   674  003A  01AF               	clrf	_ps2WaitCode
   675                           
   676                           ;main.c: 383:     ps2Down = 1;
   677  003B  01C2               	clrf	_ps2Down
   678  003C  0AC2               	incf	_ps2Down,f
   679                           
   680                           ;main.c: 384:     ps2NeedEncode = 0;
   681  003D  01AE               	clrf	_ps2NeedEncode
   682                           
   683                           ;main.c: 385:     ps2DataState = 0;
   684  003E  01B4               	clrf	_ps2DataState
   685                           
   686                           ;main.c: 387:     delay = 0;
   687  003F  01A9               	clrf	_delay
   688  0040  01AA               	clrf	_delay+1
   689                           
   690                           ;main.c: 388:     delayedKey = 0;
   691  0041  01AB               	clrf	_delayedKey
   692                           
   693                           ;main.c: 389:     shift_ctrl_alt = 0;
   694  0042  01B6               	clrf	_shift_ctrl_alt
   695                           
   696                           ;main.c: 390:     replaced = 0;
   697  0043  01AC               	clrf	_replaced
   698                           
   699                           ;main.c: 393:     T0CS = 1;
   700  0044  1683               	bsf	3,5	;RP0=1, select bank1
   701  0045  1681               	bsf	1,5	;volatile
   702                           
   703                           ;main.c: 394:     T0SE = 1;
   704  0046  1601               	bsf	1,4	;volatile
   705                           
   706                           ;main.c: 395:     GIE = 1;
   707  0047  178B               	bsf	11,7	;volatile
   708                           
   709                           ;main.c: 396:     T0IE = 1;
   710  0048  168B               	bsf	11,5	;volatile
   711                           
   712                           ;main.c: 397:     PSA = 1;
   713  0049  1581               	bsf	1,3	;volatile
   714                           
   715                           ;main.c: 398:     T0IF = 0;
   716  004A  110B               	bcf	11,2	;volatile
   717                           
   718                           ;main.c: 399:     TMR0 = 255;
   719  004B  30FF               	movlw	255
   720  004C  1283               	bcf	3,5	;RP0=0, select bank0
   721  004D  0081               	movwf	1	;volatile
   722                           
   723                           ;main.c: 401:     sendDataToAltera();
   724  004E  2171               	fcall	_sendDataToAltera
   725  004F                     l1268:	
   726                           ;main.c: 403:     while(1)
   727                           
   728                           
   729                           ;main.c: 404:     {;main.c: 406:         if ( ps2DataState == 2 ) {
   730  004F  3002               	movlw	2
   731  0050  1283               	bcf	3,5	;RP0=0, select bank0
   732  0051  0634               	xorwf	_ps2DataState,w
   733  0052  1D03               	btfss	3,2
   734  0053  291B               	goto	l1356
   735                           
   736                           ;main.c: 408:             if ( ps2Device == 0 ) {
   737  0054  0830               	movf	_ps2Device,w
   738  0055  1D03               	btfss	3,2
   739  0056  2913               	goto	l1352
   740                           
   741                           ;main.c: 414:                 calculateBitsFromTable(&shift_ctrl_alt, importantKeys, 6, 
      +                          0);
   742  0057  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
   743  0058  00A2               	movwf	??_main
   744  0059  0822               	movf	??_main,w
   745  005A  0095               	movwf	calculateBitsFromTable@table
   746  005B  3006               	movlw	6
   747  005C  00A3               	movwf	??_main+1
   748  005D  0823               	movf	??_main+1,w
   749  005E  0096               	movwf	calculateBitsFromTable@count
   750  005F  0197               	clrf	calculateBitsFromTable@clearIfFound
   751  0060  3036               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
   752  0061  23C0               	fcall	_calculateBitsFromTable
   753                           
   754                           ;main.c: 416:                 calculateBitsFromTable(&kempstonMouseEmulatorKeys, kempsto
      +                          nMouseKeys, 6, numLock);
   755  0062  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
   756  0063  1283               	bcf	3,5	;RP0=0, select bank0
   757  0064  00A2               	movwf	??_main
   758  0065  0822               	movf	??_main,w
   759  0066  0095               	movwf	calculateBitsFromTable@table
   760  0067  3006               	movlw	6
   761  0068  00A3               	movwf	??_main+1
   762  0069  0823               	movf	??_main+1,w
   763  006A  0096               	movwf	calculateBitsFromTable@count
   764  006B  082D               	movf	_numLock,w
   765  006C  00A4               	movwf	??_main+2
   766  006D  0824               	movf	??_main+2,w
   767  006E  0097               	movwf	calculateBitsFromTable@clearIfFound
   768  006F  3035               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
   769  0070  23C0               	fcall	_calculateBitsFromTable
   770                           
   771                           ;main.c: 424:                 if ( ps2Data == 119 && ps2Down ) {
   772  0071  3077               	movlw	119
   773  0072  1283               	bcf	3,5	;RP0=0, select bank0
   774  0073  0631               	xorwf	_ps2Data,w
   775  0074  1D03               	btfss	3,2
   776  0075  2882               	goto	l1280
   777  0076  0842               	movf	_ps2Down,w
   778  0077  1903               	btfsc	3,2
   779  0078  2882               	goto	l1280
   780                           
   781                           ;main.c: 425:                     numLock = !numLock;
   782  0079  082D               	movf	_numLock,w
   783  007A  1D03               	btfss	3,2
   784  007B  287E               	goto	u1250
   785  007C  3001               	movlw	1
   786  007D  287F               	goto	u1260
   787  007E                     u1250:	
   788  007E  3000               	movlw	0
   789  007F                     u1260:	
   790  007F  00A2               	movwf	??_main
   791  0080  0822               	movf	??_main,w
   792  0081  00AD               	movwf	_numLock
   793  0082                     l1280:	
   794                           ;main.c: 426:                 }
   795                           
   796                           
   797                           ;main.c: 429:                 if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 
      +                          0 && ps2Data == 31 && ps2Down ) {
   798  0082  0836               	movf	_shift_ctrl_alt,w
   799  0083  390C               	andlw	12
   800  0084  1903               	btfsc	3,2
   801  0085  2896               	goto	l156
   802  0086  0836               	movf	_shift_ctrl_alt,w
   803  0087  3930               	andlw	48
   804  0088  1903               	btfsc	3,2
   805  0089  2896               	goto	l156
   806  008A  301F               	movlw	31
   807  008B  0631               	xorwf	_ps2Data,w
   808  008C  1D03               	btfss	3,2
   809  008D  2896               	goto	l156
   810  008E  0842               	movf	_ps2Down,w
   811  008F  1903               	btfsc	3,2
   812  0090  2896               	goto	l156
   813                           
   814                           ;main.c: 430:                     outPorts[8] &= 253;
   815  0091  30FD               	movlw	253
   816  0092  00A2               	movwf	??_main
   817  0093  0822               	movf	??_main,w
   818  0094  05BF               	andwf	_outPorts+8,f
   819                           
   820                           ;main.c: 431:                 } else {
   821  0095  2897               	goto	l1290
   822  0096                     l156:	
   823                           
   824                           ;main.c: 432:                     outPorts[8] |= 2;
   825  0096  14BF               	bsf	_outPorts+8,1
   826  0097                     l1290:	
   827                           ;main.c: 433:                 }
   828                           
   829                           
   830                           ;main.c: 436:                 if ( (shift_ctrl_alt & 12) > 0 && ps2Data == 126 && ps2Dow
      +                          n ) {
   831  0097  0836               	movf	_shift_ctrl_alt,w
   832  0098  390C               	andlw	12
   833  0099  1903               	btfsc	3,2
   834  009A  28A7               	goto	l158
   835  009B  307E               	movlw	126
   836  009C  0631               	xorwf	_ps2Data,w
   837  009D  1D03               	btfss	3,2
   838  009E  28A7               	goto	l158
   839  009F  0842               	movf	_ps2Down,w
   840  00A0  1903               	btfsc	3,2
   841  00A1  28A7               	goto	l158
   842                           
   843                           ;main.c: 437:                     outPorts[8] &= 251;
   844  00A2  30FB               	movlw	251
   845  00A3  00A2               	movwf	??_main
   846  00A4  0822               	movf	??_main,w
   847  00A5  05BF               	andwf	_outPorts+8,f
   848                           
   849                           ;main.c: 438:                 } else {
   850  00A6  28A8               	goto	l1298
   851  00A7                     l158:	
   852                           
   853                           ;main.c: 439:                     outPorts[8] |= 4;
   854  00A7  153F               	bsf	_outPorts+8,2
   855  00A8                     l1298:	
   856                           ;main.c: 440:                 }
   857                           
   858                           
   859                           ;main.c: 447:                 for(int8_t i = 0; i < 41 ;i+=2) {
   860  00A8  01A6               	clrf	main@i
   861  00A9  0826               	movf	main@i,w
   862  00AA  3A80               	xorlw	128
   863  00AB  3E57               	addlw	-169
   864  00AC  1803               	btfsc	3,0
   865  00AD  28E0               	goto	l1328
   866  00AE                     l1304:	
   867                           
   868                           ;main.c: 448:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   869  00AE  0826               	movf	main@i,w
   870  00AF  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   871  00B0  0084               	movwf	4
   872  00B1  2200               	fcall	stringdir
   873  00B2  0631               	xorwf	_ps2Data,w
   874  00B3  1D03               	skipz
   875  00B4  28D7               	goto	l1324
   876                           
   877                           ;main.c: 449:                         if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0)
      +                           || replaced == ps2Data) {
   878  00B5  0836               	movf	_shift_ctrl_alt,w
   879  00B6  3903               	andlw	3
   880  00B7  1903               	btfsc	3,2
   881  00B8  28BC               	goto	l1310
   882  00B9  082C               	movf	_replaced,w
   883  00BA  1903               	btfsc	3,2
   884  00BB  28C0               	goto	l1312
   885  00BC                     l1310:	
   886  00BC  082C               	movf	_replaced,w
   887  00BD  0631               	xorwf	_ps2Data,w
   888  00BE  1D03               	skipz
   889  00BF  28D2               	goto	l1320
   890  00C0                     l1312:	
   891                           
   892                           ;main.c: 450:                             if ( ps2Down ) replaced = ps2Data;
   893  00C0  0842               	movf	_ps2Down,w
   894  00C1  1903               	btfsc	3,2
   895  00C2  28C8               	goto	l1316
   896  00C3  0831               	movf	_ps2Data,w
   897  00C4  00A2               	movwf	??_main
   898  00C5  0822               	movf	??_main,w
   899  00C6  00AC               	movwf	_replaced
   900  00C7  28C9               	goto	l1318
   901  00C8                     l1316:	
   902                           ;main.c: 451:                             else replaced = 0;
   903                           
   904  00C8  01AC               	clrf	_replaced
   905  00C9                     l1318:	
   906                           
   907                           ;main.c: 452:                             ps2Data = replaceOnShiftKeyDown[i+1];
   908  00C9  0826               	movf	main@i,w
   909  00CA  3E01               	addlw	1
   910  00CB  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   911  00CC  0084               	movwf	4
   912  00CD  2200               	fcall	stringdir
   913  00CE  00A2               	movwf	??_main
   914  00CF  0822               	movf	??_main,w
   915  00D0  00B1               	movwf	_ps2Data
   916                           
   917                           ;main.c: 453:                         } else {
   918  00D1  28E0               	goto	l1328
   919  00D2                     l1320:	
   920                           
   921                           ;main.c: 454:                             if ( replaced != 0 ) ps2Data = 0;
   922  00D2  082C               	movf	_replaced,w
   923  00D3  1903               	btfsc	3,2
   924  00D4  28E0               	goto	l1328
   925  00D5  01B1               	clrf	_ps2Data
   926                           
   927                           ;main.c: 456:                         break;
   928                           
   929                           ;main.c: 455:                         }
   930  00D6  28E0               	goto	l1328
   931  00D7                     l1324:	
   932                           ;main.c: 457:                     }
   933                           
   934                           
   935                           ;main.c: 458:                 }
   936  00D7  3002               	movlw	2
   937  00D8  00A2               	movwf	??_main
   938  00D9  0822               	movf	??_main,w
   939  00DA  07A6               	addwf	main@i,f
   940  00DB  0826               	movf	main@i,w
   941  00DC  3A80               	xorlw	128
   942  00DD  3E57               	addlw	-169
   943  00DE  1C03               	skipc
   944  00DF  28AE               	goto	l1304
   945  00E0                     l1328:	
   946                           
   947                           ;main.c: 462:                 for(int8_t i = 0; i < 8; i++) {
   948  00E0  01A5               	clrf	main@i_119
   949  00E1  0825               	movf	main@i_119,w
   950  00E2  3A80               	xorlw	128
   951  00E3  3E78               	addlw	-136
   952  00E4  1803               	btfsc	3,0
   953  00E5  290C               	goto	l1348
   954  00E6                     l1334:	
   955                           
   956                           ;main.c: 463:                     if ( ps2Data == replaceOnDelayKeyDown[i] && ps2Down ) 
      +                          {
   957  00E6  0825               	movf	main@i_119,w
   958  00E7  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
   959  00E8  0084               	movwf	4
   960  00E9  2200               	fcall	stringdir
   961  00EA  0631               	xorwf	_ps2Data,w
   962  00EB  1D03               	skipz
   963  00EC  2903               	goto	l1344
   964  00ED  0842               	movf	_ps2Down,w
   965  00EE  1903               	btfsc	3,2
   966  00EF  2903               	goto	l1344
   967                           
   968                           ;main.c: 464:                         if ( delay == 0 ) {
   969  00F0  0829               	movf	_delay,w
   970  00F1  042A               	iorwf	_delay+1,w
   971  00F2  1D03               	btfss	3,2
   972  00F3  2901               	goto	l1342
   973                           
   974                           ;main.c: 465:                             delayedKey = ps2Data;
   975  00F4  0831               	movf	_ps2Data,w
   976  00F5  00A2               	movwf	??_main
   977  00F6  0822               	movf	??_main,w
   978  00F7  00AB               	movwf	_delayedKey
   979                           
   980                           ;main.c: 466:                             delay = 2600;
   981  00F8  3028               	movlw	40
   982  00F9  00A9               	movwf	_delay
   983  00FA  300A               	movlw	10
   984  00FB  00AA               	movwf	_delay+1
   985                           
   986                           ;main.c: 467:                             ps2Data = 111;
   987  00FC  306F               	movlw	111
   988  00FD  00A2               	movwf	??_main
   989  00FE  0822               	movf	??_main,w
   990  00FF  00B1               	movwf	_ps2Data
   991                           
   992                           ;main.c: 468:                         } else {
   993  0100  290C               	goto	l1348
   994  0101                     l1342:	
   995                           
   996                           ;main.c: 469:                             ps2Data = 0;
   997  0101  01B1               	clrf	_ps2Data
   998                           
   999                           ;main.c: 471:                         break;
  1000                           
  1001                           ;main.c: 470:                         }
  1002  0102  290C               	goto	l1348
  1003  0103                     l1344:	
  1004                           ;main.c: 472:                     }
  1005                           
  1006                           
  1007                           ;main.c: 473:                 }
  1008  0103  3001               	movlw	1
  1009  0104  00A2               	movwf	??_main
  1010  0105  0822               	movf	??_main,w
  1011  0106  07A5               	addwf	main@i_119,f
  1012  0107  0825               	movf	main@i_119,w
  1013  0108  3A80               	xorlw	128
  1014  0109  3E78               	addlw	-136
  1015  010A  1C03               	skipc
  1016  010B  28E6               	goto	l1334
  1017  010C                     l1348:	
  1018                           
  1019                           ;main.c: 479:                 updateKey(ps2Data, ps2Down );
  1020  010C  0842               	movf	_ps2Down,w
  1021  010D  00A2               	movwf	??_main
  1022  010E  0822               	movf	??_main,w
  1023  010F  009B               	movwf	updateKey@set
  1024  0110  0831               	movf	_ps2Data,w
  1025  0111  236C               	fcall	_updateKey
  1026                           
  1027                           ;main.c: 482:                 sendDataToAltera();
  1028  0112  2171               	fcall	_sendDataToAltera
  1029  0113                     l1352:	
  1030                           ;main.c: 488:             }
  1031                           
  1032                           ;main.c: 484:             } else if ( ps2Device == 1 ) {
  1033                           
  1034                           
  1035                           ;main.c: 491:             ps2Data = 0;
  1036  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0114  01B1               	clrf	_ps2Data
  1038                           
  1039                           ;main.c: 493:             ps2WaitCode = 0;
  1040  0115  01AF               	clrf	_ps2WaitCode
  1041                           
  1042                           ;main.c: 494:             ps2Down = 1;
  1043  0116  01C2               	clrf	_ps2Down
  1044  0117  0AC2               	incf	_ps2Down,f
  1045                           
  1046                           ;main.c: 495:             ps2NeedEncode = 0;
  1047  0118  01AE               	clrf	_ps2NeedEncode
  1048                           
  1049                           ;main.c: 496:             ps2DataState = 0;
  1050  0119  01B4               	clrf	_ps2DataState
  1051                           
  1052                           ;main.c: 500:         } else if ( delay != 0 ) {
  1053  011A  296F               	goto	l179
  1054  011B                     l1356:	
  1055  011B  0829               	movf	_delay,w
  1056  011C  042A               	iorwf	_delay+1,w
  1057  011D  1903               	btfsc	3,2
  1058  011E  293E               	goto	l1372
  1059                           
  1060                           ;main.c: 502:             delay--;
  1061  011F  3001               	movlw	1
  1062  0120  02A9               	subwf	_delay,f
  1063  0121  3000               	movlw	0
  1064  0122  1C03               	skipc
  1065  0123  03AA               	decf	_delay+1,f
  1066  0124  02AA               	subwf	_delay+1,f
  1067                           
  1068                           ;main.c: 503:             if ( delay == 0 ) {
  1069  0125  0829               	movf	_delay,w
  1070  0126  042A               	iorwf	_delay+1,w
  1071  0127  1D03               	btfss	3,2
  1072  0128  292E               	goto	l1364
  1073                           
  1074                           ;main.c: 505:                 updatePort(0x00, 0);
  1075  0129  0195               	clrf	updatePort@set
  1076  012A  3000               	movlw	0
  1077  012B  21B3               	fcall	_updatePort
  1078                           
  1079                           ;main.c: 507:                 sendDataToAltera();
  1080  012C  2171               	fcall	_sendDataToAltera
  1081                           
  1082                           ;main.c: 509:             } else if ( delay == 1300 ) {
  1083  012D  296F               	goto	l179
  1084  012E                     l1364:	
  1085  012E  3014               	movlw	20
  1086  012F  1283               	bcf	3,5	;RP0=0, select bank0
  1087  0130  0629               	xorwf	_delay,w
  1088  0131  3005               	movlw	5
  1089  0132  1903               	skipnz
  1090  0133  062A               	xorwf	_delay+1,w
  1091  0134  1D03               	btfss	3,2
  1092  0135  296F               	goto	l179
  1093                           
  1094                           ;main.c: 511:                 updateKey(delayedKey, 1 );
  1095  0136  019B               	clrf	updateKey@set
  1096  0137  0A9B               	incf	updateKey@set,f
  1097  0138  082B               	movf	_delayedKey,w
  1098  0139  236C               	fcall	_updateKey
  1099                           
  1100                           ;main.c: 512:                 delayedKey = 0;
  1101  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1102  013B  01AB               	clrf	_delayedKey
  1103                           
  1104                           ;main.c: 513:                 sendDataToAltera();
  1105  013C  2171               	fcall	_sendDataToAltera
  1106                           
  1107                           ;main.c: 516:         } else {
  1108                           
  1109                           ;main.c: 514:             }
  1110  013D  296F               	goto	l179
  1111  013E                     l1372:	
  1112                           
  1113                           ;main.c: 519:             kempstonMouseEmulatorDelay++;
  1114  013E  3001               	movlw	1
  1115  013F  1283               	bcf	3,5	;RP0=0, select bank0
  1116  0140  07A7               	addwf	_kempstonMouseEmulatorDelay,f
  1117  0141  1803               	skipnc
  1118  0142  0AA8               	incf	_kempstonMouseEmulatorDelay+1,f
  1119  0143  3000               	movlw	0
  1120  0144  07A8               	addwf	_kempstonMouseEmulatorDelay+1,f
  1121                           
  1122                           ;main.c: 520:             if ( kempstonMouseEmulatorDelay > 2000 ) {
  1123  0145  3007               	movlw	7
  1124  0146  0228               	subwf	_kempstonMouseEmulatorDelay+1,w
  1125  0147  30D1               	movlw	209
  1126  0148  1903               	skipnz
  1127  0149  0227               	subwf	_kempstonMouseEmulatorDelay,w
  1128  014A  1C03               	skipc
  1129  014B  296F               	goto	l179
  1130                           
  1131                           ;main.c: 521:                 if ( numLock ) {
  1132  014C  082D               	movf	_numLock,w
  1133  014D  1903               	btfsc	3,2
  1134  014E  296B               	goto	l1396
  1135                           
  1136                           ;main.c: 522:                     if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]
      +                          -=2;
  1137  014F  1C35               	btfss	_kempstonMouseEmulatorKeys,0
  1138  0150  2953               	goto	l1380
  1139  0151  3002               	movlw	2
  1140  0152  02C0               	subwf	_outPorts+9,f
  1141  0153                     l1380:	
  1142                           
  1143                           ;main.c: 523:                     if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]
      +                          +=2;
  1144  0153  1CB5               	btfss	_kempstonMouseEmulatorKeys,1
  1145  0154  2959               	goto	l1384
  1146  0155  3002               	movlw	2
  1147  0156  00A2               	movwf	??_main
  1148  0157  0822               	movf	??_main,w
  1149  0158  07C0               	addwf	_outPorts+9,f
  1150  0159                     l1384:	
  1151                           
  1152                           ;main.c: 524:                     if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10
      +                          ]+=2;
  1153  0159  1D35               	btfss	_kempstonMouseEmulatorKeys,2
  1154  015A  295F               	goto	l1388
  1155  015B  3002               	movlw	2
  1156  015C  00A2               	movwf	??_main
  1157  015D  0822               	movf	??_main,w
  1158  015E  07C1               	addwf	_outPorts+10,f
  1159  015F                     l1388:	
  1160                           
  1161                           ;main.c: 525:                     if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10
      +                          ]-=2;
  1162  015F  1DB5               	btfss	_kempstonMouseEmulatorKeys,3
  1163  0160  2963               	goto	l1392
  1164  0161  3002               	movlw	2
  1165  0162  02C1               	subwf	_outPorts+10,f
  1166  0163                     l1392:	
  1167                           
  1168                           ;main.c: 526:                     if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8
      +                          ] &= 254;
  1169  0163  1E35               	btfss	_kempstonMouseEmulatorKeys,4
  1170  0164  296A               	goto	l191
  1171  0165  30FE               	movlw	254
  1172  0166  00A2               	movwf	??_main
  1173  0167  0822               	movf	??_main,w
  1174  0168  05BF               	andwf	_outPorts+8,f
  1175  0169  296B               	goto	l1396
  1176  016A                     l191:	
  1177                           ;main.c: 527:                     else outPorts[8] |= 1;
  1178                           
  1179  016A  143F               	bsf	_outPorts+8,0
  1180  016B                     l1396:	
  1181                           ;main.c: 528:                 }
  1182                           
  1183                           
  1184                           ;main.c: 530:                 sendDataToAltera();
  1185  016B  2171               	fcall	_sendDataToAltera
  1186                           
  1187                           ;main.c: 532:                 kempstonMouseEmulatorDelay = 0;
  1188  016C  1283               	bcf	3,5	;RP0=0, select bank0
  1189  016D  01A7               	clrf	_kempstonMouseEmulatorDelay
  1190  016E  01A8               	clrf	_kempstonMouseEmulatorDelay+1
  1191  016F                     l179:	
  1192                           ;main.c: 535:         }
  1193                           
  1194                           ;main.c: 533:             }
  1195                           
  1196  016F  0064               	clrwdt	;# 
  1197                           
  1198                           ;main.c: 538:     }
  1199  0170  284F               	goto	l1268
  1200  0171                     __end_of_main:	
  1201                           
  1202                           	psect	text1
  1203  036C                     __ptext1:	
  1204 ;; *************** function _updateKey *****************
  1205 ;; Defined at:
  1206 ;;		line 178 in file "main.c"
  1207 ;; Parameters:    Size  Location     Type
  1208 ;;  key             1    wreg     unsigned char 
  1209 ;;  set             1   15[BANK0 ] unsigned char 
  1210 ;; Auto vars:     Size  Location     Type
  1211 ;;  key             1   20[BANK0 ] unsigned char 
  1212 ;;  code            1   21[BANK0 ] unsigned char 
  1213 ;;  localCtrl       1   19[BANK0 ] unsigned char 
  1214 ;;  localShift      1   17[BANK0 ] unsigned char 
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0
  1224 ;;      Params:         0       1
  1225 ;;      Locals:         0       5
  1226 ;;      Temps:          0       1
  1227 ;;      Totals:         0       7
  1228 ;;Total ram usage:        7 bytes
  1229 ;; Hardware stack levels used:    1
  1230 ;; Hardware stack levels required when called:    3
  1231 ;; This function calls:
  1232 ;;		_updatePort
  1233 ;; This function is called by:
  1234 ;;		_main
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           
  1239                           ;psect for function _updateKey
  1240  036C                     _updateKey:	
  1241                           
  1242                           ;incstack = 0
  1243                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1244                           ;updateKey@key stored from wreg
  1245  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1246  036D  00A0               	movwf	updateKey@key
  1247                           
  1248                           ;main.c: 178: void updateKey(uint8_t key, uint8_t set);main.c: 179: {;main.c: 180:     u
      +                          int8_t code = 0xFF;
  1249  036E  30FF               	movlw	255
  1250  036F  009C               	movwf	??_updateKey
  1251  0370  081C               	movf	??_updateKey,w
  1252  0371  00A1               	movwf	updateKey@code
  1253                           
  1254                           ;main.c: 181:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  1255  0372  019E               	clrf	_updateKey$97
  1256  0373  0836               	movf	_shift_ctrl_alt,w
  1257  0374  3903               	andlw	3
  1258  0375  1903               	btfsc	3,2
  1259  0376  2B7C               	goto	l1098
  1260  0377  082C               	movf	_replaced,w
  1261  0378  1D03               	btfss	3,2
  1262  0379  2B7C               	goto	l1098
  1263  037A  019E               	clrf	_updateKey$97
  1264  037B  0A9E               	incf	_updateKey$97,f
  1265  037C                     l1098:	
  1266  037C  081E               	movf	_updateKey$97,w
  1267  037D  009C               	movwf	??_updateKey
  1268  037E  081C               	movf	??_updateKey,w
  1269  037F  009D               	movwf	updateKey@localShift
  1270                           
  1271                           ;main.c: 182:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  1272  0380  0836               	movf	_shift_ctrl_alt,w
  1273  0381  390C               	andlw	12
  1274  0382  1903               	btfsc	3,2
  1275  0383  2B86               	goto	u840
  1276  0384  3001               	movlw	1
  1277  0385  2B87               	goto	u850
  1278  0386                     u840:	
  1279  0386  3000               	movlw	0
  1280  0387                     u850:	
  1281  0387  009C               	movwf	??_updateKey
  1282  0388  081C               	movf	??_updateKey,w
  1283  0389  009F               	movwf	updateKey@localCtrl
  1284                           
  1285                           ;main.c: 183:     if ( key < 128 ) code = codeToMatrix[key];
  1286  038A  3080               	movlw	128
  1287  038B  0220               	subwf	updateKey@key,w
  1288  038C  1803               	skipnc
  1289  038D  2B95               	goto	l1106
  1290  038E  0820               	movf	updateKey@key,w
  1291  038F  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  1292  0390  0084               	movwf	4
  1293  0391  2200               	fcall	stringdir
  1294  0392  009C               	movwf	??_updateKey
  1295  0393  081C               	movf	??_updateKey,w
  1296  0394  00A1               	movwf	updateKey@code
  1297  0395                     l1106:	
  1298                           
  1299                           ;main.c: 184:     if ( code != 0xFF ) {
  1300  0395  0A21               	incf	updateKey@code,w
  1301  0396  1903               	btfsc	3,2
  1302  0397  2BAF               	goto	l1114
  1303                           
  1304                           ;main.c: 185:         updatePort(code, set);
  1305  0398  081B               	movf	updateKey@set,w
  1306  0399  009C               	movwf	??_updateKey
  1307  039A  081C               	movf	??_updateKey,w
  1308  039B  0095               	movwf	updatePort@set
  1309  039C  0821               	movf	updateKey@code,w
  1310  039D  21B3               	fcall	_updatePort
  1311                           
  1312                           ;main.c: 186:         localShift |= ((code & 64) > 0);
  1313  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1314  039F  1F21               	btfss	updateKey@code,6
  1315  03A0  2BA3               	goto	u880
  1316  03A1  3001               	movlw	1
  1317  03A2  2BA4               	goto	u890
  1318  03A3                     u880:	
  1319  03A3  3000               	movlw	0
  1320  03A4                     u890:	
  1321  03A4  009C               	movwf	??_updateKey
  1322  03A5  081C               	movf	??_updateKey,w
  1323  03A6  049D               	iorwf	updateKey@localShift,f
  1324                           
  1325                           ;main.c: 187:         localCtrl |= ((code & 128) > 0);
  1326  03A7  1FA1               	btfss	updateKey@code,7
  1327  03A8  2BAB               	goto	u900
  1328  03A9  3001               	movlw	1
  1329  03AA  2BAC               	goto	u910
  1330  03AB                     u900:	
  1331  03AB  3000               	movlw	0
  1332  03AC                     u910:	
  1333  03AC  009C               	movwf	??_updateKey
  1334  03AD  081C               	movf	??_updateKey,w
  1335  03AE  049F               	iorwf	updateKey@localCtrl,f
  1336  03AF                     l1114:	
  1337                           ;main.c: 188:     }
  1338                           
  1339                           
  1340                           ;main.c: 189:     if ( set ) {
  1341  03AF  081B               	movf	updateKey@set,w
  1342  03B0  1903               	btfsc	3,2
  1343  03B1  0008               	return
  1344                           
  1345                           ;main.c: 190:         updatePort(0x00, localShift );
  1346  03B2  081D               	movf	updateKey@localShift,w
  1347  03B3  009C               	movwf	??_updateKey
  1348  03B4  081C               	movf	??_updateKey,w
  1349  03B5  0095               	movwf	updatePort@set
  1350  03B6  3000               	movlw	0
  1351  03B7  21B3               	fcall	_updatePort
  1352                           
  1353                           ;main.c: 191:         updatePort(0x0F, localCtrl );
  1354  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  1355  03B9  081F               	movf	updateKey@localCtrl,w
  1356  03BA  009C               	movwf	??_updateKey
  1357  03BB  081C               	movf	??_updateKey,w
  1358  03BC  0095               	movwf	updatePort@set
  1359  03BD  300F               	movlw	15
  1360  03BE  21B3               	fcall	_updatePort
  1361  03BF  0008               	return
  1362  03C0                     __end_of_updateKey:	
  1363                           ;main.c: 192:     }
  1364                           
  1365                           
  1366                           	psect	text2
  1367  01B3                     __ptext2:	
  1368 ;; *************** function _updatePort *****************
  1369 ;; Defined at:
  1370 ;;		line 169 in file "main.c"
  1371 ;; Parameters:    Size  Location     Type
  1372 ;;  bit_id          1    wreg     unsigned char 
  1373 ;;  set             1    9[BANK0 ] unsigned char 
  1374 ;; Auto vars:     Size  Location     Type
  1375 ;;  bit_id          1   14[BANK0 ] unsigned char 
  1376 ;;  a               1   13[BANK0 ] unsigned char 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMMON   BANK0
  1386 ;;      Params:         0       1
  1387 ;;      Locals:         0       2
  1388 ;;      Temps:          0       3
  1389 ;;      Totals:         0       6
  1390 ;;Total ram usage:        6 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    2
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_updateKey
  1397 ;;		_main
  1398 ;; This function uses a non-reentrant model
  1399 ;;
  1400                           
  1401                           
  1402                           ;psect for function _updatePort
  1403  01B3                     _updatePort:	
  1404                           
  1405                           ;incstack = 0
  1406                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1407                           ;updatePort@bit_id stored from wreg
  1408  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1409  01B4  009A               	movwf	updatePort@bit_id
  1410                           
  1411                           ;main.c: 169: void updatePort(uint8_t bit_id, uint8_t set);main.c: 170: {;main.c: 171:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  1412  01B5  3001               	movlw	1
  1413  01B6  0096               	movwf	??_updatePort
  1414  01B7  081A               	movf	updatePort@bit_id,w
  1415  01B8  0097               	movwf	??_updatePort+1
  1416  01B9  3003               	movlw	3
  1417  01BA                     u795:	
  1418  01BA  1003               	clrc
  1419  01BB  0C97               	rrf	??_updatePort+1,f
  1420  01BC  3EFF               	addlw	-1
  1421  01BD  1D03               	skipz
  1422  01BE  29BA               	goto	u795
  1423  01BF  0817               	movf	??_updatePort+1,w
  1424  01C0  3907               	andlw	7
  1425  01C1  3E01               	addlw	1
  1426  01C2  29C5               	goto	u804
  1427  01C3                     u805:	
  1428  01C3  1003               	clrc
  1429  01C4  0D96               	rlf	??_updatePort,f
  1430  01C5                     u804:	
  1431  01C5  3EFF               	addlw	-1
  1432  01C6  1D03               	skipz
  1433  01C7  29C3               	goto	u805
  1434  01C8  0816               	movf	??_updatePort,w
  1435  01C9  0098               	movwf	??_updatePort+2
  1436  01CA  0818               	movf	??_updatePort+2,w
  1437  01CB  0099               	movwf	updatePort@a
  1438                           
  1439                           ;main.c: 172:     if ( set ) outPorts[bit_id & 7] |= a;
  1440  01CC  0815               	movf	updatePort@set,w
  1441  01CD  1903               	btfsc	3,2
  1442  01CE  29D9               	goto	l1088
  1443  01CF  0819               	movf	updatePort@a,w
  1444  01D0  0096               	movwf	??_updatePort
  1445  01D1  081A               	movf	updatePort@bit_id,w
  1446  01D2  3907               	andlw	7
  1447  01D3  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1448  01D4  0084               	movwf	4
  1449  01D5  0816               	movf	??_updatePort,w
  1450  01D6  1383               	bcf	3,7	;select IRP bank0
  1451  01D7  0480               	iorwf	0,f
  1452  01D8  0008               	return
  1453  01D9                     l1088:	
  1454                           ;main.c: 173:     else outPorts[bit_id & 7] &= ~a;
  1455                           
  1456  01D9  0919               	comf	updatePort@a,w
  1457  01DA  0096               	movwf	??_updatePort
  1458  01DB  081A               	movf	updatePort@bit_id,w
  1459  01DC  3907               	andlw	7
  1460  01DD  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1461  01DE  0084               	movwf	4
  1462  01DF  0816               	movf	??_updatePort,w
  1463  01E0  1383               	bcf	3,7	;select IRP bank0
  1464  01E1  0580               	andwf	0,f
  1465  01E2  0008               	return
  1466  01E3                     __end_of_updatePort:	
  1467                           
  1468                           	psect	text3
  1469  0171                     __ptext3:	
  1470 ;; *************** function _sendDataToAltera *****************
  1471 ;; Defined at:
  1472 ;;		line 229 in file "main.c"
  1473 ;; Parameters:    Size  Location     Type
  1474 ;;		None
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  i               1   13[BANK0 ] char 
  1477 ;; Return value:  Size  Location     Type
  1478 ;;                  1    wreg      void 
  1479 ;; Registers used:
  1480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 0/0
  1483 ;;		On exit  : 0/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMMON   BANK0
  1486 ;;      Params:         0       0
  1487 ;;      Locals:         0       3
  1488 ;;      Temps:          0       2
  1489 ;;      Totals:         0       5
  1490 ;;Total ram usage:        5 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    3
  1493 ;; This function calls:
  1494 ;;		_myDelay
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499                           
  1500                           
  1501                           ;psect for function _sendDataToAltera
  1502  0171                     _sendDataToAltera:	
  1503                           
  1504                           ;main.c: 231:     RA1 = 0;
  1505                           
  1506                           ;incstack = 0
  1507                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1508  0171  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0172  1085               	bcf	5,1	;volatile
  1510                           
  1511                           ;main.c: 232:     RA2 = 1;
  1512  0173  1505               	bsf	5,2	;volatile
  1513                           
  1514                           ;main.c: 233:     myDelay();
  1515  0174  23FD               	fcall	_myDelay
  1516                           
  1517                           ;main.c: 234:     RA1 = 1;
  1518  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1519  0176  1485               	bsf	5,1	;volatile
  1520                           
  1521                           ;main.c: 235:     myDelay();
  1522  0177  23FD               	fcall	_myDelay
  1523                           
  1524                           ;main.c: 236:     RA1 = 0;
  1525  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0179  1085               	bcf	5,1	;volatile
  1527                           
  1528                           ;main.c: 237:     myDelay();
  1529  017A  23FD               	fcall	_myDelay
  1530                           
  1531                           ;main.c: 238:     for(int8_t i=0;i<11;i++) {
  1532  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1533  017C  0199               	clrf	sendDataToAltera@i
  1534  017D  0819               	movf	sendDataToAltera@i,w
  1535  017E  3A80               	xorlw	128
  1536  017F  3E75               	addlw	-139
  1537  0180  1803               	btfsc	3,0
  1538  0181  29B0               	goto	l1154
  1539  0182                     l1132:	
  1540                           
  1541                           ;main.c: 239:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1542  0182  0819               	movf	sendDataToAltera@i,w
  1543  0183  3A80               	xorlw	128
  1544  0184  3E78               	addlw	-136
  1545  0185  1C03               	skipc
  1546  0186  2992               	goto	l1136
  1547  0187  0819               	movf	sendDataToAltera@i,w
  1548  0188  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1549  0189  0084               	movwf	4
  1550  018A  1383               	bcf	3,7	;select IRP bank0
  1551  018B  0800               	movf	0,w
  1552  018C  0095               	movwf	??_sendDataToAltera
  1553  018D  0196               	clrf	??_sendDataToAltera+1
  1554  018E  0815               	movf	??_sendDataToAltera,w
  1555  018F  0097               	movwf	_sendDataToAltera$104
  1556  0190  0816               	movf	??_sendDataToAltera+1,w
  1557  0191  299C               	goto	L1
  1558  0192                     l1136:	
  1559  0192  0819               	movf	sendDataToAltera@i,w
  1560  0193  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1561  0194  0084               	movwf	4
  1562  0195  1383               	bcf	3,7	;select IRP bank0
  1563  0196  0800               	movf	0,w
  1564  0197  0095               	movwf	??_sendDataToAltera
  1565  0198  0196               	clrf	??_sendDataToAltera+1
  1566  0199  0915               	comf	??_sendDataToAltera,w
  1567  019A  0097               	movwf	_sendDataToAltera$104
  1568  019B  0916               	comf	??_sendDataToAltera+1,w
  1569  019C                     L1:	
  1570  019C  0098               	movwf	_sendDataToAltera$104+1
  1571  019D  0817               	movf	_sendDataToAltera$104,w
  1572  019E  0086               	movwf	6	;volatile
  1573                           
  1574                           ;main.c: 240:         myDelay();
  1575  019F  23FD               	fcall	_myDelay
  1576                           
  1577                           ;main.c: 241:         RA2 = 0;
  1578  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  1579  01A1  1105               	bcf	5,2	;volatile
  1580                           
  1581                           ;main.c: 242:         myDelay();
  1582  01A2  23FD               	fcall	_myDelay
  1583                           
  1584                           ;main.c: 243:         RA2 = 1;
  1585  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1586  01A4  1505               	bsf	5,2	;volatile
  1587                           
  1588                           ;main.c: 244:         myDelay();
  1589  01A5  23FD               	fcall	_myDelay
  1590                           
  1591                           ;main.c: 245:     }
  1592  01A6  3001               	movlw	1
  1593  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1594  01A8  0095               	movwf	??_sendDataToAltera
  1595  01A9  0815               	movf	??_sendDataToAltera,w
  1596  01AA  0799               	addwf	sendDataToAltera@i,f
  1597  01AB  0819               	movf	sendDataToAltera@i,w
  1598  01AC  3A80               	xorlw	128
  1599  01AD  3E75               	addlw	-139
  1600  01AE  1C03               	skipc
  1601  01AF  2982               	goto	l1132
  1602  01B0                     l1154:	
  1603                           
  1604                           ;main.c: 246:     PORTB = 0xFF;
  1605  01B0  30FF               	movlw	255
  1606  01B1  0086               	movwf	6	;volatile
  1607  01B2  0008               	return
  1608  01B3                     __end_of_sendDataToAltera:	
  1609                           
  1610                           	psect	text4
  1611  03FD                     __ptext4:	
  1612 ;; *************** function _myDelay *****************
  1613 ;; Defined at:
  1614 ;;		line 197 in file "main.c"
  1615 ;; Parameters:    Size  Location     Type
  1616 ;;		None
  1617 ;; Auto vars:     Size  Location     Type
  1618 ;;		None
  1619 ;; Return value:  Size  Location     Type
  1620 ;;                  1    wreg      void 
  1621 ;; Registers used:
  1622 ;;		None
  1623 ;; Tracked objects:
  1624 ;;		On entry : 0/0
  1625 ;;		On exit  : 0/0
  1626 ;;		Unchanged: 0/0
  1627 ;; Data sizes:     COMMON   BANK0
  1628 ;;      Params:         0       0
  1629 ;;      Locals:         0       0
  1630 ;;      Temps:          0       0
  1631 ;;      Totals:         0       0
  1632 ;;Total ram usage:        0 bytes
  1633 ;; Hardware stack levels used:    1
  1634 ;; Hardware stack levels required when called:    2
  1635 ;; This function calls:
  1636 ;;		Nothing
  1637 ;; This function is called by:
  1638 ;;		_sendDataToAltera
  1639 ;; This function uses a non-reentrant model
  1640 ;;
  1641                           
  1642                           
  1643                           ;psect for function _myDelay
  1644  03FD                     _myDelay:	
  1645                           
  1646                           ;incstack = 0
  1647                           ; Regs used in _myDelay: []
  1648  03FD  0008               	return
  1649  03FE                     __end_of_myDelay:	
  1650                           
  1651                           	psect	text5
  1652  03C0                     __ptext5:	
  1653 ;; *************** function _calculateBitsFromTable *****************
  1654 ;; Defined at:
  1655 ;;		line 299 in file "main.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  bits            1    wreg     PTR unsigned char 
  1658 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1659 ;;  table           1    9[BANK0 ] PTR unsigned char 
  1660 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  1661 ;;  count           1   10[BANK0 ] unsigned char 
  1662 ;;  clearIfFound    1   11[BANK0 ] unsigned char 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;  bits            1   14[BANK0 ] PTR unsigned char 
  1665 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1666 ;;  i               1   15[BANK0 ] unsigned char 
  1667 ;; Return value:  Size  Location     Type
  1668 ;;                  1    wreg      void 
  1669 ;; Registers used:
  1670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1671 ;; Tracked objects:
  1672 ;;		On entry : 0/0
  1673 ;;		On exit  : 0/0
  1674 ;;		Unchanged: 0/0
  1675 ;; Data sizes:     COMMON   BANK0
  1676 ;;      Params:         0       3
  1677 ;;      Locals:         0       2
  1678 ;;      Temps:          0       2
  1679 ;;      Totals:         0       7
  1680 ;;Total ram usage:        7 bytes
  1681 ;; Hardware stack levels used:    2
  1682 ;; Hardware stack levels required when called:    2
  1683 ;; This function calls:
  1684 ;;		Nothing
  1685 ;; This function is called by:
  1686 ;;		_main
  1687 ;; This function uses a non-reentrant model
  1688 ;;
  1689                           
  1690                           
  1691                           ;psect for function _calculateBitsFromTable
  1692  03C0                     _calculateBitsFromTable:	
  1693                           
  1694                           ;incstack = 0
  1695                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  1696                           ;calculateBitsFromTable@bits stored from wreg
  1697  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  1698  03C1  009A               	movwf	calculateBitsFromTable@bits
  1699                           
  1700                           ;main.c: 299: void calculateBitsFromTable(uint8_t* bits, uint8_t table[], uint8_t count,
      +                           uint8_t clearIfFound);main.c: 300: {;main.c: 301:     for(uint8_t i = 0; i < count;i++)
      +                           {
  1701  03C2  019B               	clrf	calculateBitsFromTable@i
  1702  03C3                     l1172:	
  1703  03C3  0816               	movf	calculateBitsFromTable@count,w
  1704  03C4  021B               	subwf	calculateBitsFromTable@i,w
  1705  03C5  1803               	btfsc	3,0
  1706  03C6  0008               	return
  1707                           
  1708                           ;main.c: 302:         if ( ps2Data == table[i] ) {
  1709  03C7  081B               	movf	calculateBitsFromTable@i,w
  1710  03C8  0715               	addwf	calculateBitsFromTable@table,w
  1711  03C9  0084               	movwf	4
  1712  03CA  2200               	fcall	stringdir
  1713  03CB  0631               	xorwf	_ps2Data,w
  1714  03CC  1D03               	skipz
  1715  03CD  2BF8               	goto	l1170
  1716                           
  1717                           ;main.c: 303:             if ( ps2Down ) {
  1718  03CE  0842               	movf	_ps2Down,w
  1719  03CF  1903               	btfsc	3,2
  1720  03D0  2BE2               	goto	l1164
  1721                           
  1722                           ;main.c: 304:                 (*bits) |= (1 << i);
  1723  03D1  3001               	movlw	1
  1724  03D2  0098               	movwf	??_calculateBitsFromTable
  1725  03D3  0A1B               	incf	calculateBitsFromTable@i,w
  1726  03D4  2BD7               	goto	u984
  1727  03D5                     u985:	
  1728  03D5  1003               	clrc
  1729  03D6  0D98               	rlf	??_calculateBitsFromTable,f
  1730  03D7                     u984:	
  1731  03D7  3EFF               	addlw	-1
  1732  03D8  1D03               	skipz
  1733  03D9  2BD5               	goto	u985
  1734  03DA  0818               	movf	??_calculateBitsFromTable,w
  1735  03DB  0099               	movwf	??_calculateBitsFromTable+1
  1736  03DC  081A               	movf	calculateBitsFromTable@bits,w
  1737  03DD  0084               	movwf	4
  1738  03DE  0819               	movf	??_calculateBitsFromTable+1,w
  1739  03DF  1383               	bcf	3,7	;select IRP bank0
  1740  03E0  0480               	iorwf	0,f
  1741                           
  1742                           ;main.c: 305:             } else {
  1743  03E1  2BF3               	goto	l1166
  1744  03E2                     l1164:	
  1745                           
  1746                           ;main.c: 306:                 (*bits) &= ~(1 << i);
  1747  03E2  3001               	movlw	1
  1748  03E3  0098               	movwf	??_calculateBitsFromTable
  1749  03E4  0A1B               	incf	calculateBitsFromTable@i,w
  1750  03E5  2BE8               	goto	u994
  1751  03E6                     u995:	
  1752  03E6  1003               	clrc
  1753  03E7  0D98               	rlf	??_calculateBitsFromTable,f
  1754  03E8                     u994:	
  1755  03E8  3EFF               	addlw	-1
  1756  03E9  1D03               	skipz
  1757  03EA  2BE6               	goto	u995
  1758  03EB  0818               	movf	??_calculateBitsFromTable,w
  1759  03EC  3AFF               	xorlw	255
  1760  03ED  0099               	movwf	??_calculateBitsFromTable+1
  1761  03EE  081A               	movf	calculateBitsFromTable@bits,w
  1762  03EF  0084               	movwf	4
  1763  03F0  0819               	movf	??_calculateBitsFromTable+1,w
  1764  03F1  1383               	bcf	3,7	;select IRP bank0
  1765  03F2  0580               	andwf	0,f
  1766  03F3                     l1166:	
  1767                           ;main.c: 307:             }
  1768                           
  1769                           
  1770                           ;main.c: 308:             if ( clearIfFound ) {
  1771  03F3  0817               	movf	calculateBitsFromTable@clearIfFound,w
  1772  03F4  1903               	btfsc	3,2
  1773  03F5  0008               	return
  1774                           
  1775                           ;main.c: 309:                 ps2Data = 0;
  1776  03F6  01B1               	clrf	_ps2Data
  1777                           
  1778                           ;main.c: 311:             break;
  1779                           
  1780                           ;main.c: 310:             }
  1781  03F7  0008               	return
  1782  03F8                     l1170:	
  1783                           ;main.c: 312:         }
  1784                           
  1785                           
  1786                           ;main.c: 313:     }
  1787  03F8  3001               	movlw	1
  1788  03F9  0098               	movwf	??_calculateBitsFromTable
  1789  03FA  0818               	movf	??_calculateBitsFromTable,w
  1790  03FB  079B               	addwf	calculateBitsFromTable@i,f
  1791  03FC  2BC3               	goto	l1172
  1792  03FD                     __end_of_calculateBitsFromTable:	
  1793                           
  1794                           	psect	text6
  1795  02E0                     __ptext6:	
  1796 ;; *************** function _myIsr *****************
  1797 ;; Defined at:
  1798 ;;		line 102 in file "main.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;		None
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  i               1    8[BANK0 ] char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  1    wreg      void 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMMON   BANK0
  1812 ;;      Params:         0       0
  1813 ;;      Locals:         0       3
  1814 ;;      Temps:          0       6
  1815 ;;      Totals:         0       9
  1816 ;;Total ram usage:        9 bytes
  1817 ;; Hardware stack levels used:    2
  1818 ;; This function calls:
  1819 ;;		Nothing
  1820 ;; This function is called by:
  1821 ;;		Interrupt level 1
  1822 ;; This function uses a non-reentrant model
  1823 ;;
  1824                           
  1825                           
  1826                           ;psect for function _myIsr
  1827  02E0                     _myIsr:	
  1828                           
  1829                           ;main.c: 104:     if(T0IE && T0IF){
  1830  02E0  1A8B               	btfsc	11,5	;volatile
  1831  02E1  1D0B               	btfss	11,2	;volatile
  1832  02E2  2B60               	goto	i1l111
  1833                           
  1834                           ;main.c: 106:         T0IF=0;
  1835  02E3  110B               	bcf	11,2	;volatile
  1836                           
  1837                           ;main.c: 107:         TMR0 = 255;
  1838  02E4  30FF               	movlw	255
  1839  02E5  0081               	movwf	1	;volatile
  1840                           
  1841                           ;main.c: 111:         if ( ps2DataState == 0 ) {
  1842  02E6  0834               	movf	_ps2DataState,w
  1843  02E7  1D03               	btfss	3,2
  1844  02E8  2AF5               	goto	i1l1194
  1845                           
  1846                           ;main.c: 112:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  1847  02E9  1E05               	btfss	5,4	;volatile
  1848  02EA  1985               	btfsc	5,3	;volatile
  1849  02EB  2B60               	goto	i1l111
  1850                           
  1851                           ;main.c: 113:                 ps2BitsCount = 0;
  1852  02EC  01B2               	clrf	_ps2BitsCount
  1853                           
  1854                           ;main.c: 114:                 ps2Bits = 0;
  1855  02ED  01B3               	clrf	_ps2Bits
  1856                           
  1857                           ;main.c: 115:                 ps2DataState = 1;
  1858  02EE  01B4               	clrf	_ps2DataState
  1859  02EF  0AB4               	incf	_ps2DataState,f
  1860                           
  1861                           ;main.c: 116:                 ps2Device = PORTAbits.RA0;
  1862  02F0  3000               	movlw	0
  1863  02F1  1805               	btfsc	5,0	;volatile
  1864  02F2  3001               	movlw	1
  1865  02F3  00B0               	movwf	_ps2Device
  1866                           
  1867                           ;main.c: 118:         } else if ( ps2DataState == 1 ) {
  1868                           
  1869                           ;main.c: 117:             }
  1870  02F4  2B60               	goto	i1l111
  1871  02F5                     i1l1194:	
  1872  02F5  0334               	decf	_ps2DataState,w
  1873  02F6  1D03               	btfss	3,2
  1874  02F7  2B5C               	goto	i1l1242
  1875                           
  1876                           ;main.c: 119:             if ( ps2BitsCount < 8 ) {
  1877  02F8  0832               	movf	_ps2BitsCount,w
  1878  02F9  3A80               	xorlw	128
  1879  02FA  3E78               	addlw	-136
  1880  02FB  1803               	skipnc
  1881  02FC  2B0D               	goto	i1l1202
  1882                           
  1883                           ;main.c: 120:                 if ( PORTAbits.RA3 ) {
  1884  02FD  1D85               	btfss	5,3	;volatile
  1885  02FE  2B11               	goto	i1l1204
  1886                           
  1887                           ;main.c: 121:                     ps2Bits |= ( 1 << ps2BitsCount );
  1888  02FF  3001               	movlw	1
  1889  0300  008C               	movwf	??_myIsr
  1890  0301  0A32               	incf	_ps2BitsCount,w
  1891  0302  2B05               	goto	u110_24
  1892  0303                     u110_25:	
  1893  0303  1003               	clrc
  1894  0304  0D8C               	rlf	??_myIsr,f
  1895  0305                     u110_24:	
  1896  0305  3EFF               	addlw	-1
  1897  0306  1D03               	skipz
  1898  0307  2B03               	goto	u110_25
  1899  0308  080C               	movf	??_myIsr,w
  1900  0309  008D               	movwf	??_myIsr+1
  1901  030A  080D               	movf	??_myIsr+1,w
  1902  030B  04B3               	iorwf	_ps2Bits,f
  1903                           
  1904                           ;main.c: 122:                 }
  1905  030C  2B11               	goto	i1l1204
  1906  030D                     i1l1202:	
  1907                           ;main.c: 124:             } else if ( ps2BitsCount == 8 ) {
  1908                           
  1909                           ;main.c: 123:                 ps2BitsCount++;
  1910                           
  1911  030D  3008               	movlw	8
  1912  030E  0632               	xorwf	_ps2BitsCount,w
  1913  030F  1D03               	btfss	3,2
  1914  0310  2B16               	goto	i1l1206
  1915  0311                     i1l1204:	
  1916                           
  1917                           ;main.c: 125:                 ps2BitsCount++;
  1918  0311  3001               	movlw	1
  1919  0312  008C               	movwf	??_myIsr
  1920  0313  080C               	movf	??_myIsr,w
  1921  0314  07B2               	addwf	_ps2BitsCount,f
  1922                           
  1923                           ;main.c: 126:             } else if ( ps2BitsCount == 9 ) {
  1924  0315  2B60               	goto	i1l111
  1925  0316                     i1l1206:	
  1926  0316  3009               	movlw	9
  1927  0317  0632               	xorwf	_ps2BitsCount,w
  1928  0318  1D03               	btfss	3,2
  1929  0319  2B60               	goto	i1l111
  1930                           
  1931                           ;main.c: 128:                 if ( ps2NeedEncode ) {
  1932  031A  082E               	movf	_ps2NeedEncode,w
  1933  031B  1903               	btfsc	3,2
  1934  031C  2B35               	goto	i1l1224
  1935                           
  1936                           ;main.c: 129:                     for (int8_t i=0; i < 27; i+=2) {
  1937  031D  0194               	clrf	myIsr@i
  1938  031E                     L4:	
  1939  031E  0814               	movf	myIsr@i,w
  1940  031F  3A80               	xorlw	128
  1941  0320  3E65               	addlw	-155
  1942  0321  1803               	btfsc	3,0
  1943  0322  2B48               	goto	i1l1230
  1944                           
  1945                           ;main.c: 130:                         if ( ps2Bits == replaceTwoBytesCodes[i] ) {
  1946  0323  0814               	movf	myIsr@i,w
  1947  0324  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1948  0325  0084               	movwf	4
  1949  0326  2200               	fcall	stringdir
  1950  0327  0633               	xorwf	_ps2Bits,w
  1951  0328  1D03               	skipz
  1952  0329  2B30               	goto	i1l1220
  1953                           
  1954                           ;main.c: 131:                             ps2Data = replaceTwoBytesCodes[i+1];
  1955  032A  0814               	movf	myIsr@i,w
  1956  032B  3E01               	addlw	1
  1957  032C  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1958  032D  0084               	movwf	4
  1959  032E  2200               	fcall	stringdir
  1960  032F  2B45               	goto	L2
  1961  0330                     i1l1220:	
  1962                           ;main.c: 133:                         }
  1963                           
  1964                           ;main.c: 132:                             break;
  1965                           
  1966                           
  1967                           ;main.c: 134:                     }
  1968  0330  3002               	movlw	2
  1969  0331  008C               	movwf	??_myIsr
  1970  0332  080C               	movf	??_myIsr,w
  1971  0333  0794               	addwf	myIsr@i,f
  1972  0334  2B1E               	goto	L4
  1973  0335                     i1l1224:	
  1974                           ;main.c: 135:                 } else {
  1975                           
  1976                           
  1977                           ;main.c: 136:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  1978  0335  3083               	movlw	131
  1979  0336  0633               	xorwf	_ps2Bits,w
  1980  0337  1903               	btfsc	3,2
  1981  0338  2B40               	goto	i1l1228
  1982  0339  0833               	movf	_ps2Bits,w
  1983  033A  008C               	movwf	??_myIsr
  1984  033B  018D               	clrf	??_myIsr+1
  1985  033C  080C               	movf	??_myIsr,w
  1986  033D  0092               	movwf	_myIsr$87
  1987  033E  080D               	movf	??_myIsr+1,w
  1988  033F  2B43               	goto	L3
  1989  0340                     i1l1228:	
  1990  0340  303F               	movlw	63
  1991  0341  0092               	movwf	_myIsr$87
  1992  0342  3000               	movlw	0
  1993  0343                     L3:	
  1994  0343  0093               	movwf	_myIsr$87+1
  1995  0344  0812               	movf	_myIsr$87,w
  1996  0345                     L2:	
  1997  0345  008C               	movwf	??_myIsr
  1998  0346  080C               	movf	??_myIsr,w
  1999  0347  00B1               	movwf	_ps2Data
  2000  0348                     i1l1230:	
  2001                           ;main.c: 137:                 }
  2002                           
  2003                           
  2004                           ;main.c: 138:                 if ( ps2Bits == 0xF0 ) {
  2005  0348  30F0               	movlw	240
  2006  0349  0633               	xorwf	_ps2Bits,w
  2007  034A  1D03               	btfss	3,2
  2008  034B  2B4F               	goto	i1l1234
  2009                           
  2010                           ;main.c: 139:                     ps2DataState = 0;
  2011  034C  01B4               	clrf	_ps2DataState
  2012                           
  2013                           ;main.c: 140:                     ps2Down = 0;
  2014  034D  01C2               	clrf	_ps2Down
  2015                           
  2016                           ;main.c: 141:                 } else if ( ps2Bits == 0xE0 ) {
  2017  034E  2B60               	goto	i1l111
  2018  034F                     i1l1234:	
  2019  034F  30E0               	movlw	224
  2020  0350  0633               	xorwf	_ps2Bits,w
  2021  0351  1D03               	btfss	3,2
  2022  0352  2B57               	goto	i1l1240
  2023                           
  2024                           ;main.c: 142:                     ps2DataState = 0;
  2025  0353  01B4               	clrf	_ps2DataState
  2026                           
  2027                           ;main.c: 143:                     ps2NeedEncode = 1;
  2028  0354  01AE               	clrf	_ps2NeedEncode
  2029  0355  0AAE               	incf	_ps2NeedEncode,f
  2030                           
  2031                           ;main.c: 152:                 } else {
  2032  0356  2B60               	goto	i1l111
  2033  0357                     i1l1240:	
  2034                           
  2035                           ;main.c: 153:                     ps2DataState = 2;
  2036  0357  3002               	movlw	2
  2037  0358  008C               	movwf	??_myIsr
  2038  0359  080C               	movf	??_myIsr,w
  2039  035A  00B4               	movwf	_ps2DataState
  2040                           
  2041                           ;main.c: 157:         } else if ( ps2DataState == 4 ) {
  2042                           
  2043                           ;main.c: 156:             }
  2044                           
  2045                           ;main.c: 154:                 }
  2046  035B  2B60               	goto	i1l111
  2047  035C                     i1l1242:	
  2048  035C  3004               	movlw	4
  2049  035D  0634               	xorwf	_ps2DataState,w
  2050  035E  1903               	btfsc	3,2
  2051                           
  2052                           ;main.c: 159:             ps2DataState = 0;
  2053  035F  01B4               	clrf	_ps2DataState
  2054  0360                     i1l111:	
  2055                           ;main.c: 163:     }
  2056                           
  2057                           ;main.c: 161:     } else {
  2058                           
  2059                           ;main.c: 160:         }
  2060                           
  2061                           
  2062                           ;main.c: 164:     GIE = 1;
  2063  0360  178B               	bsf	11,7	;volatile
  2064  0361  0811               	movf	??_myIsr+5,w
  2065  0362  00CF               	movwf	79
  2066  0363  0810               	movf	??_myIsr+4,w
  2067  0364  008A               	movwf	10
  2068  0365  080F               	movf	??_myIsr+3,w
  2069  0366  0084               	movwf	4
  2070  0367  0E0E               	swapf	(??_myIsr+2)^0,w
  2071  0368  0083               	movwf	3
  2072  0369  0ECE               	swapf	78,f
  2073  036A  0E4E               	swapf	78,w
  2074  036B  0009               	retfie
  2075  036C                     __end_of_myIsr:	
  2076  004E                     btemp	set	78	;btemp
  2077  004E                     wtemp0	set	78
  2078                           
  2079                           	psect	intentry
  2080  0004                     __pintentry:	
  2081                           ;incstack = 0
  2082                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath]
  2083                           
  2084  0004                     interrupt_function:	
  2085  004E                     saved_w	set	btemp
  2086  0004  00CE               	movwf	btemp
  2087  0005  0E03               	swapf	3,w
  2088  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2089  0007  008E               	movwf	??_myIsr+2
  2090  0008  0804               	movf	4,w
  2091  0009  008F               	movwf	??_myIsr+3
  2092  000A  080A               	movf	10,w
  2093  000B  0090               	movwf	??_myIsr+4
  2094  000C  084F               	movf	btemp+1,w
  2095  000D  0091               	movwf	??_myIsr+5
  2096  000E  2AE0               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         16
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     27      55

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2292
                                             22 BANK0      5     5      0
             _calculateBitsFromTable
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                             15 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              9 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              9 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculateBitsFromTable                               7     4      3     722
                                              9 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                9     9      0     114
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateBitsFromTable
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     1B      37       3       83.3%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      37       6        0.0%
ABS                  0      0      37       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Oct 20 15:28:05 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0018                                 l156 0096  
                               l158 00A7                                 l191 016A  
                               l179 016F                                 _GIE 005F  
                               _RA1 0029                                 _RA2 002A  
                               u804 01C5                                 u900 03AB  
                               u805 01C3                                 u910 03AC  
                               _PSA 040B                                 u840 0386  
                               u850 0387                                 u880 03A3  
                               u890 03A4                                 u795 01BA  
                               u984 03D7                                 u985 03D5  
                               u994 03E8                                 u995 03E6  
                               fsr0 0004                                 indf 0000  
                              l1114 03AF                                l1106 0395  
                              l1132 0182                                l1310 00BC  
                              l1136 0192                                l1320 00D2  
                              l1312 00C0                                l1304 00AE  
                              l1170 03F8                                l1154 01B0  
                              l1164 03E2                                l1172 03C3  
                              l1316 00C8                                l1324 00D7  
                              l1166 03F3                                l1342 0101  
                              l1334 00E6                                l1318 00C9  
                              l1088 01D9                                l1344 0103  
                              l1328 00E0                                l1280 0082  
                              l1352 0113                                l1098 037C  
                              l1290 0097                                l1380 0153  
                              l1364 012E                                l1372 013E  
                              l1348 010C                                l1356 011B  
                              l1268 004F                                l1392 0163  
                              l1384 0159                                l1298 00A8  
                              l1388 015F                                l1396 016B  
                              _T0IE 005D                                _T0IF 005A  
                              _T0CS 040D                                u1250 007E  
                              _T0SE 040C                                u1260 007F  
                              _TMR0 0001                                _main 002D  
                              btemp 004E                                start 000F  
                             ?_main 000C        __end_of_replaceTwoBytesCodes 02CC  
                             i1l111 0360                               _PORTA 0005  
                             _PORTB 0006                __end_of_codeToMatrix 0286  
                             _TRISB 0086                               _delay 0029  
                   __end_of_myDelay 03FE                               _myIsr 02E0  
                             main@i 0026                    updatePort@bit_id 001A  
                             pclath 000A                               status 0003  
                      updateKey@key 0020                        updateKey@set 001B  
                             wtemp0 004E                     __initialization 0010  
                      __end_of_main 0171                              ??_main 0022  
   __size_of_calculateBitsFromTable 003D                   sendDataToAltera@i 0019  
                            ?_myIsr 000C                              i1l1202 030D  
                            i1l1220 0330                              i1l1204 0311  
                            u110_24 0305                              u110_25 0303  
                            i1l1230 0348                              i1l1206 0316  
                            i1l1240 0357                              i1l1224 0335  
                            i1l1234 034F                              i1l1242 035C  
                            i1l1228 0340                              i1l1194 02F5  
                            _TRISA0 0428                              _TRISA1 0429  
                            _TRISA2 042A                              _TRISA3 042B  
                            _TRISA4 042C            __end_of_sendDataToAltera 01B3  
             _replaceOnDelayKeyDown 02CC                           ??_myDelay 0000  
                            myIsr@i 0014                              saved_w 004E  
                     updateKey@code 0021             __end_of__initialization 002B  
            _calculateBitsFromTable 03C0                _replaceTwoBytesCodes 02B0  
                     updatePort@set 0015                      __pcstackCOMMON 0000  
                      __pidataBANK0 01E3                       __end_of_myIsr 036C  
               updateKey@localShift 001D                             ??_myIsr 000C  
                      _ps2DataState 0034                          __pbssBANK0 0027  
                      _ps2BitsCount 0032                        _codeToMatrix 0206  
                        _delayedKey 002B                _sendDataToAltera$104 0017  
                        __pmaintext 002D                          __pintentry 0004  
        calculateBitsFromTable@bits 001A                  __size_of_updateKey 0054  
                        __stringtab 0200          _kempstonMouseEmulatorDelay 0027  
     __end_of_replaceOnShiftKeyDown 02B0                             _ps2Data 0031  
                           _ps2Bits 0033                             _ps2Down 0042  
                           __ptext1 036C                             __ptext2 01B3  
                           __ptext3 0171                             __ptext4 03FD  
                           __ptext5 03C0                             __ptext6 02E0  
                           _myDelay 03FD  calculateBitsFromTable@clearIfFound 0017  
                           _numLock 002D                             clrloop0 01EF  
              end_of_initialization 002B                       _importantKeys 02D4  
                    _shift_ctrl_alt 0036                   ?_sendDataToAltera 000C  
                 __end_of_updateKey 03C0                  ??_sendDataToAltera 0015  
                 _kempstonMouseKeys 02DA                           _PORTAbits 0005  
                        _updatePort 01B3             ?_calculateBitsFromTable 0015  
         __end_of_kempstonMouseKeys 02E0                 start_initialization 0010  
                       updatePort@a 0019      __end_of_calculateBitsFromTable 03FD  
           calculateBitsFromTable@i 001B                         __pdataBANK0 0037  
                         ___latbits 0000                       __pcstackBANK0 000C  
                       ?_updatePort 0015                  updateKey@localCtrl 001F  
                         __pnvBANK0 0042                           _ps2Device 0030  
                         __pstrings 0200                       _ps2NeedEncode 002E  
                          ?_myDelay 000C                         _ps2WaitCode 002F  
       calculateBitsFromTable@count 0016                      __size_of_myIsr 008C  
       calculateBitsFromTable@table 0015                   interrupt_function 0004  
                         clear_ram0 01EE                 __size_of_updatePort 0030  
             _replaceOnShiftKeyDown 0286                           _updateKey 036C  
                       __stringbase 0205                           main@i_119 0025  
         __size_of_sendDataToAltera 0042                          ?_updateKey 001B  
                __end_of__stringtab 0206                    __size_of_myDelay 0001  
                          _myIsr$87 0012                       __size_of_main 0144  
     __end_of_replaceOnDelayKeyDown 02D4                            _replaced 002C  
                          _outPorts 0037                        ??_updatePort 0016  
         _kempstonMouseEmulatorKeys 0035                            intlevel1 0000  
                         stringcode 0200                  __end_of_updatePort 01E3  
                       ??_updateKey 001C                    _sendDataToAltera 0171  
                          stringdir 0200                            stringtab 0200  
             __end_of_importantKeys 02DA                        _updateKey$97 001E  
