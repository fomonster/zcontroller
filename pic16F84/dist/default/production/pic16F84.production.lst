

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Mon Aug 27 22:41:00 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	dabs	1,0x4E,2
    19  0000                     
    20                           ; Version 2.00
    21                           ; Generated 27/05/2018 GMT
    22                           ; 
    23                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F84A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  0081                     	;# 
    66  0085                     	;# 
    67  0086                     	;# 
    68  0088                     	;# 
    69  0089                     	;# 
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0008                     	;# 
    78  0009                     	;# 
    79  000A                     	;# 
    80  000B                     	;# 
    81  0081                     	;# 
    82  0085                     	;# 
    83  0086                     	;# 
    84  0088                     	;# 
    85  0089                     	;# 
    86                           
    87                           	psect	idataBANK0
    88  02F9                     __pidataBANK0:	
    89                           
    90                           ;initializer for _outPorts
    91  02F9  3400               	retlw	0
    92  02FA  3400               	retlw	0
    93  02FB  3400               	retlw	0
    94  02FC  3400               	retlw	0
    95  02FD  3400               	retlw	0
    96  02FE  3400               	retlw	0
    97  02FF  3400               	retlw	0
    98  0300  3400               	retlw	0
    99  0301  3407               	retlw	7
   100  0302  34F5               	retlw	245
   101  0303  34DA               	retlw	218
   102                           
   103                           ;initializer for _mouseY
   104  0304  346E               	retlw	110
   105                           
   106                           ;initializer for _mouseX
   107  0305  34DC               	retlw	220
   108                           
   109                           	psect	strings
   110  0031                     __pstrings:	
   111  0031                     stringtab:	
   112  0031                     __stringtab:	
   113  0031                     stringcode:	
   114                           ;	String table - string pointers are 1 byte each
   115                           
   116  0031                     stringdir:	
   117  0031  3000               	movlw	high stringdir
   118  0032  008A               	movwf	10
   119  0033  0804               	movf	4,w
   120  0034  0A84               	incf	4,f
   121  0035  0782               	addwf	2,f
   122  0036                     __stringbase:	
   123  0036  3400               	retlw	0
   124  0037                     __end_of__stringtab:	
   125  0037                     _codeToMatrix:	
   126  0037  34FF               	retlw	255
   127  0038  34FF               	retlw	255
   128  0039  34FF               	retlw	255
   129  003A  34FF               	retlw	255
   130  003B  34FF               	retlw	255
   131  003C  34FF               	retlw	255
   132  003D  34FF               	retlw	255
   133  003E  34FF               	retlw	255
   134  003F  34FF               	retlw	255
   135  0040  34FF               	retlw	255
   136  0041  34FF               	retlw	255
   137  0042  34FF               	retlw	255
   138  0043  34FF               	retlw	255
   139  0044  34FF               	retlw	255
   140  0045  349C               	retlw	156
   141  0046  34FF               	retlw	255
   142  0047  34FF               	retlw	255
   143  0048  34FF               	retlw	255
   144  0049  34FF               	retlw	255
   145  004A  34FF               	retlw	255
   146  004B  34FF               	retlw	255
   147  004C  3402               	retlw	2
   148  004D  3403               	retlw	3
   149  004E  34FF               	retlw	255
   150  004F  34FF               	retlw	255
   151  0050  34FF               	retlw	255
   152  0051  3408               	retlw	8
   153  0052  3409               	retlw	9
   154  0053  3401               	retlw	1
   155  0054  340A               	retlw	10
   156  0055  340B               	retlw	11
   157  0056  3444               	retlw	68
   158  0057  34FF               	retlw	255
   159  0058  3418               	retlw	24
   160  0059  3410               	retlw	16
   161  005A  3411               	retlw	17
   162  005B  3412               	retlw	18
   163  005C  341B               	retlw	27
   164  005D  3413               	retlw	19
   165  005E  34FF               	retlw	255
   166  005F  345C               	retlw	92
   167  0060  3407               	retlw	7
   168  0061  3420               	retlw	32
   169  0062  3419               	retlw	25
   170  0063  3422               	retlw	34
   171  0064  341A               	retlw	26
   172  0065  3423               	retlw	35
   173  0066  3463               	retlw	99
   174  0067  3464               	retlw	100
   175  0068  341F               	retlw	31
   176  0069  3427               	retlw	39
   177  006A  3426               	retlw	38
   178  006B  3421               	retlw	33
   179  006C  3425               	retlw	37
   180  006D  3424               	retlw	36
   181  006E  3454               	retlw	84
   182  006F  34A0               	retlw	160
   183  0070  3406               	retlw	6
   184  0071  3417               	retlw	23
   185  0072  341E               	retlw	30
   186  0073  341D               	retlw	29
   187  0074  341C               	retlw	28
   188  0075  3414               	retlw	20
   189  0076  34FF               	retlw	255
   190  0077  34FF               	retlw	255
   191  0078  349F               	retlw	159
   192  0079  3416               	retlw	22
   193  007A  3415               	retlw	21
   194  007B  340D               	retlw	13
   195  007C  3404               	retlw	4
   196  007D  340C               	retlw	12
   197  007E  34FF               	retlw	255
   198  007F  34FF               	retlw	255
   199  0080  3497               	retlw	151
   200  0081  34A0               	retlw	160
   201  0082  340E               	retlw	14
   202  0083  348D               	retlw	141
   203  0084  3405               	retlw	5
   204  0085  349E               	retlw	158
   205  0086  3483               	retlw	131
   206  0087  348B               	retlw	139
   207  0088  3493               	retlw	147
   208  0089  349C               	retlw	156
   209  008A  349B               	retlw	155
   210  008B  34E5               	retlw	229
   211  008C  348E               	retlw	142
   212  008D  34A3               	retlw	163
   213  008E  34A6               	retlw	166
   214  008F  344B               	retlw	75
   215  0090  34FF               	retlw	255
   216  0091  3406               	retlw	6
   217  0092  34DD               	retlw	221
   218  0093  34A4               	retlw	164
   219  0094  34FF               	retlw	255
   220  0095  34A7               	retlw	167
   221  0096  3494               	retlw	148
   222  0097  348C               	retlw	140
   223  0098  3484               	retlw	132
   224  0099  3496               	retlw	150
   225  009A  3490               	retlw	144
   226  009B  34FF               	retlw	255
   227  009C  34FF               	retlw	255
   228  009D  3444               	retlw	68
   229  009E  3488               	retlw	136
   230  009F  3485               	retlw	133
   231  00A0  3403               	retlw	3
   232  00A1  349A               	retlw	154
   233  00A2  341B               	retlw	27
   234  00A3  341C               	retlw	28
   235  00A4  34A2               	retlw	162
   236  00A5  3498               	retlw	152
   237  00A6  34FF               	retlw	255
   238  00A7  3404               	retlw	4
   239  00A8  3497               	retlw	151
   240  00A9  340B               	retlw	11
   241  00AA  3423               	retlw	35
   242  00AB  3424               	retlw	36
   243  00AC  3414               	retlw	20
   244  00AD  3443               	retlw	67
   245  00AE  34FF               	retlw	255
   246  00AF  34FF               	retlw	255
   247  00B0  3496               	retlw	150
   248  00B1  3413               	retlw	19
   249  00B2  349E               	retlw	158
   250  00B3  34A7               	retlw	167
   251  00B4  340C               	retlw	12
   252  00B5  34FF               	retlw	255
   253  00B6  34FF               	retlw	255
   254  00B7                     __end_of_codeToMatrix:	
   255  00B7                     _replaceOnShiftKeyDown:	
   256  00B7  3416               	retlw	22
   257  00B8  344F               	retlw	79
   258  00B9  341E               	retlw	30
   259  00BA  3450               	retlw	80
   260  00BB  3426               	retlw	38
   261  00BC  3451               	retlw	81
   262  00BD  3425               	retlw	37
   263  00BE  3453               	retlw	83
   264  00BF  342E               	retlw	46
   265  00C0  3456               	retlw	86
   266  00C1  3436               	retlw	54
   267  00C2  3457               	retlw	87
   268  00C3  343D               	retlw	61
   269  00C4  345C               	retlw	92
   270  00C5  343E               	retlw	62
   271  00C6  345E               	retlw	94
   272  00C7  3446               	retlw	70
   273  00C8  345F               	retlw	95
   274  00C9  3445               	retlw	69
   275  00CA  3460               	retlw	96
   276  00CB  344E               	retlw	78
   277  00CC  3461               	retlw	97
   278  00CD  3455               	retlw	85
   279  00CE  3462               	retlw	98
   280  00CF  345D               	retlw	93
   281  00D0  3463               	retlw	99
   282  00D1  344C               	retlw	76
   283  00D2  3467               	retlw	103
   284  00D3  3452               	retlw	82
   285  00D4  3468               	retlw	104
   286  00D5  3441               	retlw	65
   287  00D6  346A               	retlw	106
   288  00D7  3449               	retlw	73
   289  00D8  346D               	retlw	109
   290  00D9  344A               	retlw	74
   291  00DA  346E               	retlw	110
   292  00DB                     __end_of_replaceOnShiftKeyDown:	
   293  00DB                     _replaceTwoBytesCodes:	
   294  00DB  3414               	retlw	20
   295  00DC  3413               	retlw	19
   296  00DD  3470               	retlw	112
   297  00DE  3417               	retlw	23
   298  00DF  346C               	retlw	108
   299  00E0  3418               	retlw	24
   300  00E1  347D               	retlw	125
   301  00E2  3419               	retlw	25
   302  00E3  3471               	retlw	113
   303  00E4  341F               	retlw	31
   304  00E5  3469               	retlw	105
   305  00E6  3420               	retlw	32
   306  00E7  347A               	retlw	122
   307  00E8  3427               	retlw	39
   308  00E9  3475               	retlw	117
   309  00EA  3428               	retlw	40
   310  00EB  346B               	retlw	107
   311  00EC  342F               	retlw	47
   312  00ED  3472               	retlw	114
   313  00EE  3430               	retlw	48
   314  00EF  3474               	retlw	116
   315  00F0  3437               	retlw	55
   316  00F1  344A               	retlw	74
   317  00F2  3438               	retlw	56
   318  00F3  345A               	retlw	90
   319  00F4  3439               	retlw	57
   320  00F5                     __end_of_replaceTwoBytesCodes:	
   321                           
   322                           	psect	nvBANK0
   323  003F                     __pnvBANK0:	
   324  003F                     _ps2Down:	
   325  003F                     	ds	1
   326  0005                     _PORTA	set	5
   327  0006                     _PORTB	set	6
   328  0005                     _PORTAbits	set	5
   329  0001                     _TMR0	set	1
   330  0029                     _RA1	set	41
   331  002A                     _RA2	set	42
   332  005F                     _GIE	set	95
   333  005A                     _T0IF	set	90
   334  005D                     _T0IE	set	93
   335  0086                     _TRISB	set	134
   336  040B                     _PSA	set	1035
   337  040C                     _T0SE	set	1036
   338  040D                     _T0CS	set	1037
   339  042C                     _TRISA4	set	1068
   340  042B                     _TRISA3	set	1067
   341  042A                     _TRISA2	set	1066
   342  0429                     _TRISA1	set	1065
   343  0428                     _TRISA0	set	1064
   344                           
   345                           	psect	cinit
   346  0010                     start_initialization:	
   347                           ; #config settings
   348                           
   349  0010                     __initialization:	
   350                           
   351                           ; Initialize objects allocated to BANK0
   352  0010  22F9               	fcall	__pidataBANK0	;fetch initializer
   353  0011  00B2               	movwf	__pdataBANK0& (0+127)
   354  0012  22FA               	fcall	__pidataBANK0+1	;fetch initializer
   355  0013  00B3               	movwf	(__pdataBANK0+1)& (0+127)
   356  0014  22FB               	fcall	__pidataBANK0+2	;fetch initializer
   357  0015  00B4               	movwf	(__pdataBANK0+2)& (0+127)
   358  0016  22FC               	fcall	__pidataBANK0+3	;fetch initializer
   359  0017  00B5               	movwf	(__pdataBANK0+3)& (0+127)
   360  0018  22FD               	fcall	__pidataBANK0+4	;fetch initializer
   361  0019  00B6               	movwf	(__pdataBANK0+4)& (0+127)
   362  001A  22FE               	fcall	__pidataBANK0+5	;fetch initializer
   363  001B  00B7               	movwf	(__pdataBANK0+5)& (0+127)
   364  001C  22FF               	fcall	__pidataBANK0+6	;fetch initializer
   365  001D  00B8               	movwf	(__pdataBANK0+6)& (0+127)
   366  001E  2300               	fcall	__pidataBANK0+7	;fetch initializer
   367  001F  00B9               	movwf	(__pdataBANK0+7)& (0+127)
   368  0020  2301               	fcall	__pidataBANK0+8	;fetch initializer
   369  0021  00BA               	movwf	(__pdataBANK0+8)& (0+127)
   370  0022  2302               	fcall	__pidataBANK0+9	;fetch initializer
   371  0023  00BB               	movwf	(__pdataBANK0+9)& (0+127)
   372  0024  2303               	fcall	__pidataBANK0+10	;fetch initializer
   373  0025  00BC               	movwf	(__pdataBANK0+10)& (0+127)
   374  0026  2304               	fcall	__pidataBANK0+11	;fetch initializer
   375  0027  00BD               	movwf	(__pdataBANK0+11)& (0+127)
   376  0028  2305               	fcall	__pidataBANK0+12	;fetch initializer
   377  0029  00BE               	movwf	(__pdataBANK0+12)& (0+127)
   378                           
   379                           ; Clear objects allocated to BANK0
   380  002A  1383               	bcf	3,7	;select IRP bank0
   381  002B  3025               	movlw	low __pbssBANK0
   382  002C  0084               	movwf	4
   383  002D  3032               	movlw	low (__pbssBANK0+13)
   384  002E  2306               	fcall	clear_ram0
   385  002F                     end_of_initialization:	
   386                           ;End of C runtime variable initialization code
   387                           
   388  002F                     __end_of__initialization:	
   389  002F  0183               	clrf	3
   390  0030  28F5               	ljmp	_main	;jump to C main() function
   391                           
   392                           	psect	bssBANK0
   393  0025                     __pbssBANK0:	
   394  0025                     _delay:	
   395  0025                     	ds	2
   396  0027                     _replaced:	
   397  0027                     	ds	1
   398  0028                     _ctrl:	
   399  0028                     	ds	1
   400  0029                     _shift:	
   401  0029                     	ds	1
   402  002A                     _i:	
   403  002A                     	ds	1
   404  002B                     _ps2NeedEncode:	
   405  002B                     	ds	1
   406  002C                     _ps2WaitCode:	
   407  002C                     	ds	1
   408  002D                     _ps2DataCount:	
   409  002D                     	ds	1
   410  002E                     _ps2Data:	
   411  002E                     	ds	1
   412  002F                     _ps2BitsCount:	
   413  002F                     	ds	1
   414  0030                     _ps2Bits:	
   415  0030                     	ds	1
   416  0031                     _ps2DataState:	
   417  0031                     	ds	1
   418                           
   419                           	psect	dataBANK0
   420  0032                     __pdataBANK0:	
   421  0032                     _outPorts:	
   422  0032                     	ds	11
   423  003D                     _mouseY:	
   424  003D                     	ds	1
   425  003E                     _mouseX:	
   426  003E                     	ds	1
   427                           
   428                           	psect	clrtext
   429  0306                     clear_ram0:	
   430                           ;	Called with FSR containing the base address, and
   431                           ;	W with the last address+1
   432                           
   433  0306  0064               	clrwdt	;clear the watchdog before getting into this loop
   434  0307                     clrloop0:	
   435  0307  0180               	clrf	0	;clear RAM location pointed to by FSR
   436  0308  0A84               	incf	4,f	;increment pointer
   437  0309  0604               	xorwf	4,w	;XOR with final address
   438  030A  1903               	btfsc	3,2	;have we reached the end yet?
   439  030B  3400               	retlw	0	;all done for this memory range, return
   440  030C  0604               	xorwf	4,w	;XOR again to restore value
   441  030D  2B07               	goto	clrloop0	;do the next byte
   442                           
   443                           	psect	cstackBANK0
   444  000C                     __pcstackBANK0:	
   445  000C                     ?_myIsr:	
   446  000C                     ??_myIsr:	
   447                           ; 1 bytes @ 0x0
   448                           
   449  000C                     ?_sendDataToAltera:	
   450                           ; 1 bytes @ 0x0
   451                           
   452  000C                     ?_main:	
   453                           ; 1 bytes @ 0x0
   454                           
   455                           
   456                           ; 1 bytes @ 0x0
   457  000C                     	ds	6
   458  0012                     _myIsr$84:	
   459                           
   460                           ; 2 bytes @ 0x6
   461  0012                     	ds	2
   462  0014                     myIsr@ii:	
   463                           
   464                           ; 2 bytes @ 0x8
   465  0014                     	ds	2
   466  0016                     ?_updatePort:	
   467  0016                     ??_sendDataToAltera:	
   468                           ; 1 bytes @ 0xA
   469                           
   470  0016                     updatePort@set:	
   471                           ; 1 bytes @ 0xA
   472                           
   473                           
   474                           ; 1 bytes @ 0xA
   475  0016                     	ds	1
   476  0017                     ??_updatePort:	
   477                           
   478                           ; 1 bytes @ 0xB
   479  0017                     	ds	3
   480  001A                     updatePort@b:	
   481                           
   482                           ; 1 bytes @ 0xE
   483  001A                     	ds	1
   484  001B                     updatePort@a:	
   485                           
   486                           ; 1 bytes @ 0xF
   487  001B                     	ds	1
   488  001C                     updatePort@bit_id:	
   489                           
   490                           ; 1 bytes @ 0x10
   491  001C                     	ds	1
   492  001D                     ?_updateKey:	
   493  001D                     updateKey@set:	
   494                           ; 1 bytes @ 0x11
   495                           
   496                           
   497                           ; 1 bytes @ 0x11
   498  001D                     	ds	1
   499  001E                     ??_updateKey:	
   500                           
   501                           ; 1 bytes @ 0x12
   502  001E                     	ds	1
   503  001F                     updateKey@localShift:	
   504                           
   505                           ; 1 bytes @ 0x13
   506  001F                     	ds	1
   507  0020                     _updateKey$94:	
   508                           
   509                           ; 1 bytes @ 0x14
   510  0020                     	ds	1
   511  0021                     updateKey@localCtrl:	
   512                           
   513                           ; 1 bytes @ 0x15
   514  0021                     	ds	1
   515  0022                     _updateKey$97:	
   516                           
   517                           ; 1 bytes @ 0x16
   518  0022                     	ds	1
   519  0023                     updateKey@key:	
   520                           
   521                           ; 1 bytes @ 0x17
   522  0023                     	ds	1
   523  0024                     ??_main:	
   524                           
   525                           ; 1 bytes @ 0x18
   526  0024                     	ds	1
   527                           
   528                           	psect	maintext
   529  00F5                     __pmaintext:	
   530 ;;
   531 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   532 ;;
   533 ;; *************** function _main *****************
   534 ;; Defined at:
   535 ;;		line 231 in file "main.c"
   536 ;; Parameters:    Size  Location     Type
   537 ;;		None
   538 ;; Auto vars:     Size  Location     Type
   539 ;;		None
   540 ;; Return value:  Size  Location     Type
   541 ;;                  1    wreg      void 
   542 ;; Registers used:
   543 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   544 ;; Tracked objects:
   545 ;;		On entry : B00/0
   546 ;;		On exit  : 0/0
   547 ;;		Unchanged: 0/0
   548 ;; Data sizes:     COMMON   BANK0
   549 ;;      Params:         0       0
   550 ;;      Locals:         0       0
   551 ;;      Temps:          0       1
   552 ;;      Totals:         0       1
   553 ;;Total ram usage:        1 bytes
   554 ;; Hardware stack levels required when called:    4
   555 ;; This function calls:
   556 ;;		_sendDataToAltera
   557 ;;		_updateKey
   558 ;; This function is called by:
   559 ;;		Startup code after reset
   560 ;; This function uses a non-reentrant model
   561 ;;
   562                           
   563                           
   564                           ;psect for function _main
   565  00F5                     _main:	
   566                           
   567                           ;main.c: 233:     TRISA0 = 1;
   568                           
   569                           ;incstack = 0
   570                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   571  00F5  1683               	bsf	3,5	;RP0=1, select bank1
   572  00F6  1405               	bsf	5,0	;volatile
   573                           
   574                           ;main.c: 234:     TRISA1 = 0;
   575  00F7  1085               	bcf	5,1	;volatile
   576                           
   577                           ;main.c: 235:     TRISA2 = 0;
   578  00F8  1105               	bcf	5,2	;volatile
   579                           
   580                           ;main.c: 236:     TRISA3 = 1;
   581  00F9  1585               	bsf	5,3	;volatile
   582                           
   583                           ;main.c: 237:     TRISA4 = 1;
   584  00FA  1605               	bsf	5,4	;volatile
   585                           
   586                           ;main.c: 239:     PORTA = 0b00000000;
   587  00FB  1283               	bcf	3,5	;RP0=0, select bank0
   588  00FC  0185               	clrf	5	;volatile
   589                           
   590                           ;main.c: 241:     TRISB = 0b00000000;
   591  00FD  1683               	bsf	3,5	;RP0=1, select bank1
   592  00FE  0186               	clrf	6	;volatile
   593                           
   594                           ;main.c: 242:     PORTB = 0b00000000;
   595  00FF  1283               	bcf	3,5	;RP0=0, select bank0
   596  0100  0186               	clrf	6	;volatile
   597                           
   598                           ;main.c: 262:     T0CS = 1;
   599  0101  1683               	bsf	3,5	;RP0=1, select bank1
   600  0102  1681               	bsf	1,5	;volatile
   601                           
   602                           ;main.c: 263:     T0SE = 1;
   603  0103  1601               	bsf	1,4	;volatile
   604                           
   605                           ;main.c: 264:     GIE = 1;
   606  0104  178B               	bsf	11,7	;volatile
   607                           
   608                           ;main.c: 265:     T0IE = 1;
   609  0105  168B               	bsf	11,5	;volatile
   610                           
   611                           ;main.c: 266:     PSA = 1;
   612  0106  1581               	bsf	1,3	;volatile
   613                           
   614                           ;main.c: 267:     T0IF = 0;
   615  0107  110B               	bcf	11,2	;volatile
   616                           
   617                           ;main.c: 268:     TMR0 = 255;
   618  0108  30FF               	movlw	255
   619  0109  1283               	bcf	3,5	;RP0=0, select bank0
   620  010A  0081               	movwf	1	;volatile
   621                           
   622                           ;main.c: 270:     ps2Data = 0;
   623  010B  01AE               	clrf	_ps2Data
   624                           
   625                           ;main.c: 271:     ps2DataCount = 0;
   626  010C  01AD               	clrf	_ps2DataCount
   627                           
   628                           ;main.c: 272:     ps2WaitCode = 0;
   629  010D  01AC               	clrf	_ps2WaitCode
   630                           
   631                           ;main.c: 273:     ps2Down = 1;
   632  010E  01BF               	clrf	_ps2Down
   633  010F  0ABF               	incf	_ps2Down,f
   634                           
   635                           ;main.c: 274:     ps2NeedEncode = 0;
   636  0110  01AB               	clrf	_ps2NeedEncode
   637                           
   638                           ;main.c: 275:     ps2DataState = 0;
   639  0111  01B1               	clrf	_ps2DataState
   640                           
   641                           ;main.c: 281:     shift = 0;
   642  0112  01A9               	clrf	_shift
   643                           
   644                           ;main.c: 282:     ctrl = 0;
   645  0113  01A8               	clrf	_ctrl
   646                           
   647                           ;main.c: 283:     replaced = 0;
   648  0114  01A7               	clrf	_replaced
   649  0115                     l1195:	
   650                           ;main.c: 285:     while(1)
   651                           
   652                           
   653                           ;main.c: 286:     {;main.c: 287:         if ( ps2DataState == 2 ) {
   654  0115  3002               	movlw	2
   655  0116  1283               	bcf	3,5	;RP0=0, select bank0
   656  0117  0631               	xorwf	_ps2DataState,w
   657  0118  1D03               	btfss	3,2
   658  0119  2976               	goto	l1255
   659                           
   660                           ;main.c: 290:             for(i = 0; i < 35 ;i+=2) {
   661  011A  01AA               	clrf	_i
   662  011B  3023               	movlw	35
   663  011C  022A               	subwf	_i,w
   664  011D  1803               	btfsc	3,0
   665  011E  294F               	goto	l1227
   666  011F                     l1203:	
   667                           
   668                           ;main.c: 291:                 if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   669  011F  082A               	movf	_i,w
   670  0120  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   671  0121  0084               	movwf	4
   672  0122  2031               	fcall	stringdir
   673  0123  062E               	xorwf	_ps2Data,w
   674  0124  1D03               	skipz
   675  0125  2947               	goto	l1223
   676                           
   677                           ;main.c: 298:                     if ( (shift && replaced == 0) || replaced == ps2Data) 
      +                          {
   678  0126  0829               	movf	_shift,w
   679  0127  1903               	btfsc	3,2
   680  0128  292C               	goto	l1209
   681  0129  0827               	movf	_replaced,w
   682  012A  1903               	btfsc	3,2
   683  012B  2930               	goto	l1211
   684  012C                     l1209:	
   685  012C  0827               	movf	_replaced,w
   686  012D  062E               	xorwf	_ps2Data,w
   687  012E  1D03               	skipz
   688  012F  2942               	goto	l1219
   689  0130                     l1211:	
   690                           
   691                           ;main.c: 299:                         if ( ps2Down ) replaced = ps2Data;
   692  0130  083F               	movf	_ps2Down,w
   693  0131  1903               	btfsc	3,2
   694  0132  2938               	goto	l1215
   695  0133  082E               	movf	_ps2Data,w
   696  0134  00A4               	movwf	??_main
   697  0135  0824               	movf	??_main,w
   698  0136  00A7               	movwf	_replaced
   699  0137  2939               	goto	l1217
   700  0138                     l1215:	
   701                           ;main.c: 300:                         else replaced = 0;
   702                           
   703  0138  01A7               	clrf	_replaced
   704  0139                     l1217:	
   705                           
   706                           ;main.c: 301:                         ps2Data = replaceOnShiftKeyDown[i+1];
   707  0139  082A               	movf	_i,w
   708  013A  3E01               	addlw	1
   709  013B  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   710  013C  0084               	movwf	4
   711  013D  2031               	fcall	stringdir
   712  013E  00A4               	movwf	??_main
   713  013F  0824               	movf	??_main,w
   714  0140  00AE               	movwf	_ps2Data
   715                           
   716                           ;main.c: 302:                     } else {
   717  0141  294F               	goto	l1227
   718  0142                     l1219:	
   719                           
   720                           ;main.c: 303:                         if ( replaced != 0 ) ps2Data = 0;
   721  0142  0827               	movf	_replaced,w
   722  0143  1903               	btfsc	3,2
   723  0144  294F               	goto	l1227
   724  0145  01AE               	clrf	_ps2Data
   725                           
   726                           ;main.c: 305:                     break;
   727                           
   728                           ;main.c: 304:                     }
   729  0146  294F               	goto	l1227
   730  0147                     l1223:	
   731                           ;main.c: 306:                 }
   732                           
   733                           
   734                           ;main.c: 307:             }
   735  0147  3002               	movlw	2
   736  0148  00A4               	movwf	??_main
   737  0149  0824               	movf	??_main,w
   738  014A  07AA               	addwf	_i,f
   739  014B  3023               	movlw	35
   740  014C  022A               	subwf	_i,w
   741  014D  1C03               	skipc
   742  014E  291F               	goto	l1203
   743  014F                     l1227:	
   744                           
   745                           ;main.c: 310:             if ( ps2Data == 18 || ps2Data == 89) shift = ps2Down;
   746  014F  3012               	movlw	18
   747  0150  062E               	xorwf	_ps2Data,w
   748  0151  1903               	btfsc	3,2
   749  0152  2957               	goto	l1231
   750  0153  3059               	movlw	89
   751  0154  062E               	xorwf	_ps2Data,w
   752  0155  1D03               	btfss	3,2
   753  0156  295B               	goto	l1233
   754  0157                     l1231:	
   755  0157  083F               	movf	_ps2Down,w
   756  0158  00A4               	movwf	??_main
   757  0159  0824               	movf	??_main,w
   758  015A  00A9               	movwf	_shift
   759  015B                     l1233:	
   760                           
   761                           ;main.c: 311:             if ( ps2Data == 20 || ps2Data == 19) ctrl = ps2Down;
   762  015B  3014               	movlw	20
   763  015C  062E               	xorwf	_ps2Data,w
   764  015D  1903               	btfsc	3,2
   765  015E  2963               	goto	l1237
   766  015F  3013               	movlw	19
   767  0160  062E               	xorwf	_ps2Data,w
   768  0161  1D03               	btfss	3,2
   769  0162  2967               	goto	l1239
   770  0163                     l1237:	
   771  0163  083F               	movf	_ps2Down,w
   772  0164  00A4               	movwf	??_main
   773  0165  0824               	movf	??_main,w
   774  0166  00A8               	movwf	_ctrl
   775  0167                     l1239:	
   776                           
   777                           ;main.c: 312:             updateKey(ps2Data, ps2Down );
   778  0167  083F               	movf	_ps2Down,w
   779  0168  00A4               	movwf	??_main
   780  0169  0824               	movf	??_main,w
   781  016A  009D               	movwf	updateKey@set
   782  016B  082E               	movf	_ps2Data,w
   783  016C  2249               	fcall	_updateKey
   784                           
   785                           ;main.c: 315:             ps2Data = 0;
   786  016D  1283               	bcf	3,5	;RP0=0, select bank0
   787  016E  01AE               	clrf	_ps2Data
   788                           
   789                           ;main.c: 316:             ps2DataCount = 0;
   790  016F  01AD               	clrf	_ps2DataCount
   791                           
   792                           ;main.c: 317:             ps2WaitCode = 0;
   793  0170  01AC               	clrf	_ps2WaitCode
   794                           
   795                           ;main.c: 318:             ps2Down = 1;
   796  0171  01BF               	clrf	_ps2Down
   797  0172  0ABF               	incf	_ps2Down,f
   798                           
   799                           ;main.c: 319:             ps2NeedEncode = 0;
   800  0173  01AB               	clrf	_ps2NeedEncode
   801                           
   802                           ;main.c: 320:             ps2DataState = 0;
   803  0174  01B1               	clrf	_ps2DataState
   804                           
   805                           ;main.c: 323:             sendDataToAltera();
   806  0175  22DB               	fcall	_sendDataToAltera
   807  0176                     l1255:	
   808                           ;main.c: 324:         }
   809                           
   810                           
   811                           ;main.c: 333:         delay++;
   812  0176  3001               	movlw	1
   813  0177  1283               	bcf	3,5	;RP0=0, select bank0
   814  0178  07A5               	addwf	_delay,f
   815  0179  1803               	skipnc
   816  017A  0AA6               	incf	_delay+1,f
   817  017B  3000               	movlw	0
   818  017C  07A6               	addwf	_delay+1,f
   819                           
   820                           ;main.c: 334:         if ( delay > 2000 ) {
   821  017D  3007               	movlw	7
   822  017E  0226               	subwf	_delay+1,w
   823  017F  30D1               	movlw	209
   824  0180  1903               	skipnz
   825  0181  0225               	subwf	_delay,w
   826  0182  1C03               	skipc
   827  0183  29B4               	goto	l148
   828                           
   829                           ;main.c: 336:             if ( outPorts[9] > mouseX ) outPorts[9]--;
   830  0184  083B               	movf	_outPorts+9,w
   831  0185  023E               	subwf	_mouseX,w
   832  0186  1803               	skipnc
   833  0187  298B               	goto	l1263
   834  0188  3001               	movlw	1
   835  0189  02BB               	subwf	_outPorts+9,f
   836  018A  2993               	goto	l1267
   837  018B                     l1263:	
   838                           ;main.c: 337:             else if ( outPorts[9] < mouseX ) outPorts[9]++;
   839                           
   840  018B  083E               	movf	_mouseX,w
   841  018C  023B               	subwf	_outPorts+9,w
   842  018D  1803               	skipnc
   843  018E  2993               	goto	l1267
   844  018F  3001               	movlw	1
   845  0190  00A4               	movwf	??_main
   846  0191  0824               	movf	??_main,w
   847  0192  07BB               	addwf	_outPorts+9,f
   848  0193                     l1267:	
   849                           
   850                           ;main.c: 338:             if ( outPorts[10] > mouseY ) outPorts[10]--;
   851  0193  083C               	movf	_outPorts+10,w
   852  0194  023D               	subwf	_mouseY,w
   853  0195  1803               	skipnc
   854  0196  299A               	goto	l1271
   855  0197  3001               	movlw	1
   856  0198  02BC               	subwf	_outPorts+10,f
   857  0199  29A2               	goto	l1275
   858  019A                     l1271:	
   859                           ;main.c: 339:             else if ( outPorts[10] < mouseY ) outPorts[10]++;
   860                           
   861  019A  083D               	movf	_mouseY,w
   862  019B  023C               	subwf	_outPorts+10,w
   863  019C  1803               	skipnc
   864  019D  29A2               	goto	l1275
   865  019E  3001               	movlw	1
   866  019F  00A4               	movwf	??_main
   867  01A0  0824               	movf	??_main,w
   868  01A1  07BC               	addwf	_outPorts+10,f
   869  01A2                     l1275:	
   870                           
   871                           ;main.c: 341:             if ( outPorts[9] == mouseX && outPorts[10] == mouseY ) {
   872  01A2  083B               	movf	_outPorts+9,w
   873  01A3  063E               	xorwf	_mouseX,w
   874  01A4  1D03               	skipz
   875  01A5  29B0               	goto	l1281
   876  01A6  083C               	movf	_outPorts+10,w
   877  01A7  063D               	xorwf	_mouseY,w
   878  01A8  1D03               	skipz
   879  01A9  29B0               	goto	l1281
   880                           
   881                           ;main.c: 342:                 mouseX -= 128;
   882  01AA  3080               	movlw	128
   883  01AB  02BE               	subwf	_mouseX,f
   884                           
   885                           ;main.c: 343:                 mouseY += 200;
   886  01AC  30C8               	movlw	200
   887  01AD  00A4               	movwf	??_main
   888  01AE  0824               	movf	??_main,w
   889  01AF  07BD               	addwf	_mouseY,f
   890  01B0                     l1281:	
   891                           ;main.c: 344:             }
   892                           
   893                           
   894                           ;main.c: 345:             sendDataToAltera();
   895  01B0  22DB               	fcall	_sendDataToAltera
   896                           
   897                           ;main.c: 347:             delay = 0;
   898  01B1  1283               	bcf	3,5	;RP0=0, select bank0
   899  01B2  01A5               	clrf	_delay
   900  01B3  01A6               	clrf	_delay+1
   901  01B4                     l148:	
   902                           ;main.c: 348:         }
   903                           
   904  01B4  0064               	clrwdt	;# 
   905                           
   906                           ;main.c: 352:     }
   907  01B5  2915               	goto	l1195
   908  01B6                     __end_of_main:	
   909                           
   910                           	psect	text1
   911  0249                     __ptext1:	
   912 ;; *************** function _updateKey *****************
   913 ;; Defined at:
   914 ;;		line 149 in file "main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;  key             1    wreg     unsigned char 
   917 ;;  set             1   17[BANK0 ] unsigned char 
   918 ;; Auto vars:     Size  Location     Type
   919 ;;  key             1   23[BANK0 ] unsigned char 
   920 ;;  localCtrl       1   21[BANK0 ] unsigned char 
   921 ;;  localShift      1   19[BANK0 ] unsigned char 
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : 0/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0
   931 ;;      Params:         0       1
   932 ;;      Locals:         0       5
   933 ;;      Temps:          0       1
   934 ;;      Totals:         0       7
   935 ;;Total ram usage:        7 bytes
   936 ;; Hardware stack levels used:    1
   937 ;; Hardware stack levels required when called:    3
   938 ;; This function calls:
   939 ;;		_updatePort
   940 ;; This function is called by:
   941 ;;		_main
   942 ;; This function uses a non-reentrant model
   943 ;;
   944                           
   945                           
   946                           ;psect for function _updateKey
   947  0249                     _updateKey:	
   948                           
   949                           ;incstack = 0
   950                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   951                           ;updateKey@key stored from wreg
   952  0249  1283               	bcf	3,5	;RP0=0, select bank0
   953  024A  00A3               	movwf	updateKey@key
   954                           
   955                           ;main.c: 149: void updateKey(uint_fast8_t key, uint_fast8_t set);main.c: 150: {;main.c: 
      +                          151:     i = 0xFF;
   956  024B  30FF               	movlw	255
   957  024C  009E               	movwf	??_updateKey
   958  024D  081E               	movf	??_updateKey,w
   959  024E  00AA               	movwf	_i
   960                           
   961                           ;main.c: 152:     uint_fast8_t localShift = (shift && replaced == 0);
   962  024F  01A0               	clrf	_updateKey$94
   963  0250  0829               	movf	_shift,w
   964  0251  1903               	btfsc	3,2
   965  0252  2A58               	goto	l1041
   966  0253  0827               	movf	_replaced,w
   967  0254  1D03               	btfss	3,2
   968  0255  2A58               	goto	l1041
   969  0256  01A0               	clrf	_updateKey$94
   970  0257  0AA0               	incf	_updateKey$94,f
   971  0258                     l1041:	
   972  0258  0820               	movf	_updateKey$94,w
   973  0259  009E               	movwf	??_updateKey
   974  025A  081E               	movf	??_updateKey,w
   975  025B  009F               	movwf	updateKey@localShift
   976                           
   977                           ;main.c: 153:     uint_fast8_t localCtrl = 0;
   978  025C  01A1               	clrf	updateKey@localCtrl
   979                           
   980                           ;main.c: 154:     if ( key < 128 ) i = codeToMatrix[key];
   981  025D  3080               	movlw	128
   982  025E  0223               	subwf	updateKey@key,w
   983  025F  1803               	skipnc
   984  0260  2A68               	goto	l1049
   985  0261  0823               	movf	updateKey@key,w
   986  0262  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
   987  0263  0084               	movwf	4
   988  0264  2031               	fcall	stringdir
   989  0265  009E               	movwf	??_updateKey
   990  0266  081E               	movf	??_updateKey,w
   991  0267  00AA               	movwf	_i
   992  0268                     l1049:	
   993                           
   994                           ;main.c: 155:     if ( i != 0xFF ) {
   995  0268  0A2A               	incf	_i,w
   996  0269  1903               	btfsc	3,2
   997  026A  2A82               	goto	l1057
   998                           
   999                           ;main.c: 156:         updatePort(i, set);
  1000  026B  081D               	movf	updateKey@set,w
  1001  026C  009E               	movwf	??_updateKey
  1002  026D  081E               	movf	??_updateKey,w
  1003  026E  0096               	movwf	updatePort@set
  1004  026F  082A               	movf	_i,w
  1005  0270  22A4               	fcall	_updatePort
  1006                           
  1007                           ;main.c: 167:         localShift |= (i & 0b01000000) > 0;
  1008  0271  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0272  1F2A               	btfss	_i,6
  1010  0273  2A76               	goto	u650
  1011  0274  3001               	movlw	1
  1012  0275  2A77               	goto	u660
  1013  0276                     u650:	
  1014  0276  3000               	movlw	0
  1015  0277                     u660:	
  1016  0277  009E               	movwf	??_updateKey
  1017  0278  081E               	movf	??_updateKey,w
  1018  0279  049F               	iorwf	updateKey@localShift,f
  1019                           
  1020                           ;main.c: 168:         localCtrl |= (i & 0b10000000) > 0;
  1021  027A  1FAA               	btfss	_i,7
  1022  027B  2A7E               	goto	u670
  1023  027C  3001               	movlw	1
  1024  027D  2A7F               	goto	u680
  1025  027E                     u670:	
  1026  027E  3000               	movlw	0
  1027  027F                     u680:	
  1028  027F  009E               	movwf	??_updateKey
  1029  0280  081E               	movf	??_updateKey,w
  1030  0281  04A1               	iorwf	updateKey@localCtrl,f
  1031  0282                     l1057:	
  1032                           ;main.c: 169:     }
  1033                           
  1034                           
  1035                           ;main.c: 170:     if ( set ) {
  1036  0282  081D               	movf	updateKey@set,w
  1037  0283  1903               	btfsc	3,2
  1038  0284  0008               	return
  1039                           
  1040                           ;main.c: 171:         updatePort(0x00, localShift > 0 || ( shift && replaced == 0));
  1041  0285  01A2               	clrf	_updateKey$97
  1042  0286  0AA2               	incf	_updateKey$97,f
  1043  0287  081F               	movf	updateKey@localShift,w
  1044  0288  1D03               	btfss	3,2
  1045  0289  2A91               	goto	l1069
  1046  028A  0829               	movf	_shift,w
  1047  028B  1903               	btfsc	3,2
  1048  028C  2A90               	goto	l1067
  1049  028D  0827               	movf	_replaced,w
  1050  028E  1903               	btfsc	3,2
  1051  028F  2A91               	goto	l1069
  1052  0290                     l1067:	
  1053  0290  01A2               	clrf	_updateKey$97
  1054  0291                     l1069:	
  1055  0291  0822               	movf	_updateKey$97,w
  1056  0292  009E               	movwf	??_updateKey
  1057  0293  081E               	movf	??_updateKey,w
  1058  0294  0096               	movwf	updatePort@set
  1059  0295  3000               	movlw	0
  1060  0296  22A4               	fcall	_updatePort
  1061                           
  1062                           ;main.c: 172:         updatePort(0x0F, localCtrl > 0);
  1063  0297  1283               	bcf	3,5	;RP0=0, select bank0
  1064  0298  0821               	movf	updateKey@localCtrl,w
  1065  0299  1903               	btfsc	3,2
  1066  029A  2A9D               	goto	u730
  1067  029B  3001               	movlw	1
  1068  029C  2A9E               	goto	u740
  1069  029D                     u730:	
  1070  029D  3000               	movlw	0
  1071  029E                     u740:	
  1072  029E  009E               	movwf	??_updateKey
  1073  029F  081E               	movf	??_updateKey,w
  1074  02A0  0096               	movwf	updatePort@set
  1075  02A1  300F               	movlw	15
  1076  02A2  22A4               	fcall	_updatePort
  1077  02A3  0008               	return
  1078  02A4                     __end_of_updateKey:	
  1079                           ;main.c: 173:     }
  1080                           
  1081                           
  1082                           	psect	text2
  1083  02A4                     __ptext2:	
  1084 ;; *************** function _updatePort *****************
  1085 ;; Defined at:
  1086 ;;		line 138 in file "main.c"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;  bit_id          1    wreg     unsigned char 
  1089 ;;  set             1   10[BANK0 ] unsigned char 
  1090 ;; Auto vars:     Size  Location     Type
  1091 ;;  bit_id          1   16[BANK0 ] unsigned char 
  1092 ;;  a               1   15[BANK0 ] unsigned char 
  1093 ;;  b               1   14[BANK0 ] unsigned char 
  1094 ;; Return value:  Size  Location     Type
  1095 ;;                  1    wreg      void 
  1096 ;; Registers used:
  1097 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1098 ;; Tracked objects:
  1099 ;;		On entry : 0/0
  1100 ;;		On exit  : 0/0
  1101 ;;		Unchanged: 0/0
  1102 ;; Data sizes:     COMMON   BANK0
  1103 ;;      Params:         0       1
  1104 ;;      Locals:         0       3
  1105 ;;      Temps:          0       3
  1106 ;;      Totals:         0       7
  1107 ;;Total ram usage:        7 bytes
  1108 ;; Hardware stack levels used:    1
  1109 ;; Hardware stack levels required when called:    2
  1110 ;; This function calls:
  1111 ;;		Nothing
  1112 ;; This function is called by:
  1113 ;;		_updateKey
  1114 ;; This function uses a non-reentrant model
  1115 ;;
  1116                           
  1117                           
  1118                           ;psect for function _updatePort
  1119  02A4                     _updatePort:	
  1120                           
  1121                           ;incstack = 0
  1122                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1123                           ;updatePort@bit_id stored from wreg
  1124  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  1125  02A5  009C               	movwf	updatePort@bit_id
  1126                           
  1127                           ;main.c: 138: void updatePort(uint_fast8_t bit_id, uint_fast8_t set);main.c: 139: {;main
      +                          .c: 140:     uint_fast8_t b = outPorts[bit_id & 7];
  1128  02A6  081C               	movf	updatePort@bit_id,w
  1129  02A7  3907               	andlw	7
  1130  02A8  3E32               	addlw	(low (_outPorts| 0))& (0+255)
  1131  02A9  0084               	movwf	4
  1132  02AA  1383               	bcf	3,7	;select IRP bank0
  1133  02AB  0800               	movf	0,w
  1134  02AC  0097               	movwf	??_updatePort
  1135  02AD  0817               	movf	??_updatePort,w
  1136  02AE  009A               	movwf	updatePort@b
  1137                           
  1138                           ;main.c: 141:     uint_fast8_t a = (1 << ((bit_id >> 3) & 7));
  1139  02AF  3001               	movlw	1
  1140  02B0  0097               	movwf	??_updatePort
  1141  02B1  081C               	movf	updatePort@bit_id,w
  1142  02B2  0098               	movwf	??_updatePort+1
  1143  02B3  3003               	movlw	3
  1144  02B4                     u585:	
  1145  02B4  1003               	clrc
  1146  02B5  0C98               	rrf	??_updatePort+1,f
  1147  02B6  3EFF               	addlw	-1
  1148  02B7  1D03               	skipz
  1149  02B8  2AB4               	goto	u585
  1150  02B9  0818               	movf	??_updatePort+1,w
  1151  02BA  3907               	andlw	7
  1152  02BB  3E01               	addlw	1
  1153  02BC  2ABF               	goto	u594
  1154  02BD                     u595:	
  1155  02BD  1003               	clrc
  1156  02BE  0D97               	rlf	??_updatePort,f
  1157  02BF                     u594:	
  1158  02BF  3EFF               	addlw	-1
  1159  02C0  1D03               	skipz
  1160  02C1  2ABD               	goto	u595
  1161  02C2  0817               	movf	??_updatePort,w
  1162  02C3  0099               	movwf	??_updatePort+2
  1163  02C4  0819               	movf	??_updatePort+2,w
  1164  02C5  009B               	movwf	updatePort@a
  1165                           
  1166                           ;main.c: 142:     if ( set ) b |= a;
  1167  02C6  0816               	movf	updatePort@set,w
  1168  02C7  1903               	btfsc	3,2
  1169  02C8  2ACE               	goto	l1027
  1170  02C9  081B               	movf	updatePort@a,w
  1171  02CA  0097               	movwf	??_updatePort
  1172  02CB  0817               	movf	??_updatePort,w
  1173  02CC  049A               	iorwf	updatePort@b,f
  1174  02CD  2AD2               	goto	l1029
  1175  02CE                     l1027:	
  1176                           ;main.c: 143:     else b &= ~a;
  1177                           
  1178  02CE  091B               	comf	updatePort@a,w
  1179  02CF  0097               	movwf	??_updatePort
  1180  02D0  0817               	movf	??_updatePort,w
  1181  02D1  059A               	andwf	updatePort@b,f
  1182  02D2                     l1029:	
  1183                           
  1184                           ;main.c: 144:     outPorts[bit_id & 7] = b;
  1185  02D2  081A               	movf	updatePort@b,w
  1186  02D3  0097               	movwf	??_updatePort
  1187  02D4  081C               	movf	updatePort@bit_id,w
  1188  02D5  3907               	andlw	7
  1189  02D6  3E32               	addlw	(low (_outPorts| 0))& (0+255)
  1190  02D7  0084               	movwf	4
  1191  02D8  0817               	movf	??_updatePort,w
  1192  02D9  0080               	movwf	0
  1193  02DA  0008               	return
  1194  02DB                     __end_of_updatePort:	
  1195                           
  1196                           	psect	text3
  1197  02DB                     __ptext3:	
  1198 ;; *************** function _sendDataToAltera *****************
  1199 ;; Defined at:
  1200 ;;		line 178 in file "main.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;		None
  1203 ;; Auto vars:     Size  Location     Type
  1204 ;;		None
  1205 ;; Return value:  Size  Location     Type
  1206 ;;                  1    wreg      void 
  1207 ;; Registers used:
  1208 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1209 ;; Tracked objects:
  1210 ;;		On entry : 0/0
  1211 ;;		On exit  : 0/0
  1212 ;;		Unchanged: 0/0
  1213 ;; Data sizes:     COMMON   BANK0
  1214 ;;      Params:         0       0
  1215 ;;      Locals:         0       0
  1216 ;;      Temps:          0       1
  1217 ;;      Totals:         0       1
  1218 ;;Total ram usage:        1 bytes
  1219 ;; Hardware stack levels used:    1
  1220 ;; Hardware stack levels required when called:    2
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function _sendDataToAltera
  1230  02DB                     _sendDataToAltera:	
  1231                           
  1232                           ;main.c: 180:     RA2 = 1;
  1233                           
  1234                           ;incstack = 0
  1235                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0]
  1236  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  1237  02DC  1505               	bsf	5,2	;volatile
  1238                           
  1239                           ;main.c: 181:     RA1 = 1;
  1240  02DD  1485               	bsf	5,1	;volatile
  1241                           
  1242                           ;main.c: 182:     RA2 = 0;
  1243  02DE  1105               	bcf	5,2	;volatile
  1244                           
  1245                           ;main.c: 183:     RA2 = 1;
  1246  02DF  1505               	bsf	5,2	;volatile
  1247                           
  1248                           ;main.c: 184:     RA1 = 0;
  1249  02E0  1085               	bcf	5,1	;volatile
  1250                           
  1251                           ;main.c: 185:     for(i=0;i<11;i++) {
  1252  02E1  01AA               	clrf	_i
  1253  02E2  300B               	movlw	11
  1254  02E3  022A               	subwf	_i,w
  1255  02E4  1803               	btfsc	3,0
  1256  02E5  2AF6               	goto	l122
  1257  02E6                     l121:	
  1258                           
  1259                           ;main.c: 186:         RA2 = 1;
  1260  02E6  1505               	bsf	5,2	;volatile
  1261                           
  1262                           ;main.c: 187:         PORTB = outPorts[i];
  1263  02E7  082A               	movf	_i,w
  1264  02E8  3E32               	addlw	(low (_outPorts| 0))& (0+255)
  1265  02E9  0084               	movwf	4
  1266  02EA  1383               	bcf	3,7	;select IRP bank0
  1267  02EB  0800               	movf	0,w
  1268  02EC  0086               	movwf	6	;volatile
  1269                           
  1270                           ;main.c: 188:         RA2 = 0;
  1271  02ED  1105               	bcf	5,2	;volatile
  1272                           
  1273                           ;main.c: 189:     }
  1274  02EE  3001               	movlw	1
  1275  02EF  0096               	movwf	??_sendDataToAltera
  1276  02F0  0816               	movf	??_sendDataToAltera,w
  1277  02F1  07AA               	addwf	_i,f
  1278  02F2  300B               	movlw	11
  1279  02F3  022A               	subwf	_i,w
  1280  02F4  1C03               	skipc
  1281  02F5  2AE6               	goto	l121
  1282  02F6                     l122:	
  1283                           
  1284                           ;main.c: 190:     RA2 = 1;
  1285  02F6  1505               	bsf	5,2	;volatile
  1286                           
  1287                           ;main.c: 191:     PORTB = 0;
  1288  02F7  0186               	clrf	6	;volatile
  1289  02F8  0008               	return
  1290  02F9                     __end_of_sendDataToAltera:	
  1291                           
  1292                           	psect	text4
  1293  01B6                     __ptext4:	
  1294 ;; *************** function _myIsr *****************
  1295 ;; Defined at:
  1296 ;;		line 77 in file "main.c"
  1297 ;; Parameters:    Size  Location     Type
  1298 ;;		None
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  ii              2    8[BANK0 ] int 
  1301 ;; Return value:  Size  Location     Type
  1302 ;;                  1    wreg      void 
  1303 ;; Registers used:
  1304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1305 ;; Tracked objects:
  1306 ;;		On entry : 0/0
  1307 ;;		On exit  : 0/0
  1308 ;;		Unchanged: 0/0
  1309 ;; Data sizes:     COMMON   BANK0
  1310 ;;      Params:         0       0
  1311 ;;      Locals:         0       4
  1312 ;;      Temps:          0       6
  1313 ;;      Totals:         0      10
  1314 ;;Total ram usage:       10 bytes
  1315 ;; Hardware stack levels used:    2
  1316 ;; This function calls:
  1317 ;;		Nothing
  1318 ;; This function is called by:
  1319 ;;		Interrupt level 1
  1320 ;; This function uses a non-reentrant model
  1321 ;;
  1322                           
  1323                           
  1324                           ;psect for function _myIsr
  1325  01B6                     _myIsr:	
  1326                           
  1327                           ;main.c: 79:     if(T0IE && T0IF){
  1328  01B6  1A8B               	btfsc	11,5	;volatile
  1329  01B7  1D0B               	btfss	11,2	;volatile
  1330  01B8  2A3D               	goto	i1l1157
  1331                           
  1332                           ;main.c: 81:         T0IF=0;
  1333  01B9  110B               	bcf	11,2	;volatile
  1334                           
  1335                           ;main.c: 82:         TMR0 = 255;
  1336  01BA  30FF               	movlw	255
  1337  01BB  0081               	movwf	1	;volatile
  1338                           
  1339                           ;main.c: 86:         if ( ps2DataState == 0 ) {
  1340  01BC  0831               	movf	_ps2DataState,w
  1341  01BD  1D03               	btfss	3,2
  1342  01BE  29C7               	goto	i1l1109
  1343                           
  1344                           ;main.c: 87:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  1345  01BF  1E05               	btfss	5,4	;volatile
  1346  01C0  1985               	btfsc	5,3	;volatile
  1347  01C1  2A3D               	goto	i1l1157
  1348                           
  1349                           ;main.c: 88:                 ps2BitsCount = 0;
  1350  01C2  01AF               	clrf	_ps2BitsCount
  1351                           
  1352                           ;main.c: 89:                 ps2Bits = 0;
  1353  01C3  01B0               	clrf	_ps2Bits
  1354                           
  1355                           ;main.c: 90:                 ps2DataState = 1;
  1356  01C4  01B1               	clrf	_ps2DataState
  1357  01C5  0AB1               	incf	_ps2DataState,f
  1358                           
  1359                           ;main.c: 92:         } else if ( ps2DataState == 1 ) {
  1360                           
  1361                           ;main.c: 91:             }
  1362  01C6  2A3D               	goto	i1l1157
  1363  01C7                     i1l1109:	
  1364  01C7  0331               	decf	_ps2DataState,w
  1365  01C8  1D03               	btfss	3,2
  1366  01C9  2A3D               	goto	i1l1157
  1367                           
  1368                           ;main.c: 93:             if ( ps2BitsCount < 8 ) {
  1369  01CA  082F               	movf	_ps2BitsCount,w
  1370  01CB  3A80               	xorlw	128
  1371  01CC  3E78               	addlw	-136
  1372  01CD  1803               	skipnc
  1373  01CE  29DF               	goto	i1l1117
  1374                           
  1375                           ;main.c: 94:                 if ( PORTAbits.RA3 ) {
  1376  01CF  1D85               	btfss	5,3	;volatile
  1377  01D0  29E3               	goto	i1l1119
  1378                           
  1379                           ;main.c: 95:                     ps2Bits |= ( 1 << ps2BitsCount );
  1380  01D1  3001               	movlw	1
  1381  01D2  008C               	movwf	??_myIsr
  1382  01D3  0A2F               	incf	_ps2BitsCount,w
  1383  01D4  29D7               	goto	u85_24
  1384  01D5                     u85_25:	
  1385  01D5  1003               	clrc
  1386  01D6  0D8C               	rlf	??_myIsr,f
  1387  01D7                     u85_24:	
  1388  01D7  3EFF               	addlw	-1
  1389  01D8  1D03               	skipz
  1390  01D9  29D5               	goto	u85_25
  1391  01DA  080C               	movf	??_myIsr,w
  1392  01DB  008D               	movwf	??_myIsr+1
  1393  01DC  080D               	movf	??_myIsr+1,w
  1394  01DD  04B0               	iorwf	_ps2Bits,f
  1395                           
  1396                           ;main.c: 96:                 }
  1397  01DE  29E3               	goto	i1l1119
  1398  01DF                     i1l1117:	
  1399                           ;main.c: 98:             } else if ( ps2BitsCount == 8 ) {
  1400                           
  1401                           ;main.c: 97:                 ps2BitsCount++;
  1402                           
  1403  01DF  3008               	movlw	8
  1404  01E0  062F               	xorwf	_ps2BitsCount,w
  1405  01E1  1D03               	btfss	3,2
  1406  01E2  29E8               	goto	i1l1121
  1407  01E3                     i1l1119:	
  1408                           
  1409                           ;main.c: 99:                 ps2BitsCount++;
  1410  01E3  3001               	movlw	1
  1411  01E4  008C               	movwf	??_myIsr
  1412  01E5  080C               	movf	??_myIsr,w
  1413  01E6  07AF               	addwf	_ps2BitsCount,f
  1414                           
  1415                           ;main.c: 100:             } else if ( ps2BitsCount == 9 ) {
  1416  01E7  2A3D               	goto	i1l1157
  1417  01E8                     i1l1121:	
  1418  01E8  3009               	movlw	9
  1419  01E9  062F               	xorwf	_ps2BitsCount,w
  1420  01EA  1D03               	btfss	3,2
  1421  01EB  2A3D               	goto	i1l1157
  1422                           
  1423                           ;main.c: 101:                 ps2DataCount++;
  1424  01EC  3001               	movlw	1
  1425  01ED  008C               	movwf	??_myIsr
  1426  01EE  080C               	movf	??_myIsr,w
  1427  01EF  07AD               	addwf	_ps2DataCount,f
  1428                           
  1429                           ;main.c: 102:                 if ( ps2NeedEncode ) {
  1430  01F0  082B               	movf	_ps2NeedEncode,w
  1431  01F1  1903               	btfsc	3,2
  1432  01F2  2A15               	goto	i1l1139
  1433                           
  1434                           ;main.c: 103:                     for (int ii=0; ii < 25; ii+=2) {
  1435  01F3  0194               	clrf	myIsr@ii
  1436  01F4  0195               	clrf	myIsr@ii+1
  1437  01F5                     L3:	
  1438  01F5  0815               	movf	myIsr@ii+1,w
  1439  01F6  3A80               	xorlw	128
  1440  01F7  00CF               	movwf	79
  1441  01F8  3080               	movlw	128
  1442  01F9  024F               	subwf	79,w
  1443  01FA  1D03               	skipz
  1444  01FB  29FE               	goto	u89_25
  1445  01FC  3019               	movlw	25
  1446  01FD  0214               	subwf	myIsr@ii,w
  1447  01FE                     u89_25:	
  1448  01FE  1803               	btfsc	3,0
  1449  01FF  2A29               	goto	i1l1145
  1450                           
  1451                           ;main.c: 104:                         if ( ps2Bits == replaceTwoBytesCodes[ii] ) {
  1452  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1453  0201  0814               	movf	myIsr@ii,w
  1454  0202  3EA5               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1455  0203  0084               	movwf	4
  1456  0204  2031               	fcall	stringdir
  1457  0205  0630               	xorwf	_ps2Bits,w
  1458  0206  1D03               	skipz
  1459  0207  2A0E               	goto	i1l1135
  1460                           
  1461                           ;main.c: 105:                             ps2Data = replaceTwoBytesCodes[ii+1];
  1462  0208  0814               	movf	myIsr@ii,w
  1463  0209  3E01               	addlw	1
  1464  020A  3EA5               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1465  020B  0084               	movwf	4
  1466  020C  2031               	fcall	stringdir
  1467  020D  2A26               	goto	L1
  1468  020E                     i1l1135:	
  1469                           ;main.c: 107:                         }
  1470                           
  1471                           ;main.c: 106:                             break;
  1472                           
  1473                           
  1474                           ;main.c: 108:                     }
  1475  020E  3002               	movlw	2
  1476  020F  0794               	addwf	myIsr@ii,f
  1477  0210  1803               	skipnc
  1478  0211  0A95               	incf	myIsr@ii+1,f
  1479  0212  3000               	movlw	0
  1480  0213  0795               	addwf	myIsr@ii+1,f
  1481  0214  29F5               	goto	L3
  1482  0215                     i1l1139:	
  1483                           ;main.c: 109:                 } else {
  1484                           
  1485                           
  1486                           ;main.c: 110:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  1487  0215  3083               	movlw	131
  1488  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1489  0217  0630               	xorwf	_ps2Bits,w
  1490  0218  1903               	btfsc	3,2
  1491  0219  2A21               	goto	i1l1143
  1492  021A  0830               	movf	_ps2Bits,w
  1493  021B  008C               	movwf	??_myIsr
  1494  021C  018D               	clrf	??_myIsr+1
  1495  021D  080C               	movf	??_myIsr,w
  1496  021E  0092               	movwf	_myIsr$84
  1497  021F  080D               	movf	??_myIsr+1,w
  1498  0220  2A24               	goto	L2
  1499  0221                     i1l1143:	
  1500  0221  303F               	movlw	63
  1501  0222  0092               	movwf	_myIsr$84
  1502  0223  3000               	movlw	0
  1503  0224                     L2:	
  1504  0224  0093               	movwf	_myIsr$84+1
  1505  0225  0812               	movf	_myIsr$84,w
  1506  0226                     L1:	
  1507  0226  008C               	movwf	??_myIsr
  1508  0227  080C               	movf	??_myIsr,w
  1509  0228  00AE               	movwf	_ps2Data
  1510  0229                     i1l1145:	
  1511                           ;main.c: 111:                 }
  1512                           
  1513                           
  1514                           ;main.c: 112:                 if ( ps2Bits == 0xF0 ) {
  1515  0229  30F0               	movlw	240
  1516  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1517  022B  0630               	xorwf	_ps2Bits,w
  1518  022C  1D03               	btfss	3,2
  1519  022D  2A31               	goto	i1l1149
  1520                           
  1521                           ;main.c: 113:                     ps2DataState = 0;
  1522  022E  01B1               	clrf	_ps2DataState
  1523                           
  1524                           ;main.c: 114:                     ps2Down = 0;
  1525  022F  01BF               	clrf	_ps2Down
  1526                           
  1527                           ;main.c: 115:                 } else if ( ps2Bits == 0xE0 ) {
  1528  0230  2A3D               	goto	i1l1157
  1529  0231                     i1l1149:	
  1530  0231  30E0               	movlw	224
  1531  0232  0630               	xorwf	_ps2Bits,w
  1532  0233  1D03               	btfss	3,2
  1533  0234  2A39               	goto	i1l1155
  1534                           
  1535                           ;main.c: 116:                     ps2DataState = 0;
  1536  0235  01B1               	clrf	_ps2DataState
  1537                           
  1538                           ;main.c: 117:                     ps2NeedEncode = 1;
  1539  0236  01AB               	clrf	_ps2NeedEncode
  1540  0237  0AAB               	incf	_ps2NeedEncode,f
  1541                           
  1542                           ;main.c: 118:                 } else {
  1543  0238  2A3D               	goto	i1l1157
  1544  0239                     i1l1155:	
  1545                           
  1546                           ;main.c: 127:                     ps2DataState = 2;
  1547  0239  3002               	movlw	2
  1548  023A  008C               	movwf	??_myIsr
  1549  023B  080C               	movf	??_myIsr,w
  1550  023C  00B1               	movwf	_ps2DataState
  1551  023D                     i1l1157:	
  1552                           ;main.c: 132:     }
  1553                           
  1554                           ;main.c: 131:         }
  1555                           
  1556                           ;main.c: 130:             }
  1557                           
  1558                           ;main.c: 128:                 }
  1559                           
  1560                           
  1561                           ;main.c: 133:     GIE = 1;
  1562  023D  178B               	bsf	11,7	;volatile
  1563  023E  0811               	movf	??_myIsr+5,w
  1564  023F  00CF               	movwf	79
  1565  0240  0810               	movf	??_myIsr+4,w
  1566  0241  008A               	movwf	10
  1567  0242  080F               	movf	??_myIsr+3,w
  1568  0243  0084               	movwf	4
  1569  0244  0E0E               	swapf	(??_myIsr+2)^0,w
  1570  0245  0083               	movwf	3
  1571  0246  0ECE               	swapf	78,f
  1572  0247  0E4E               	swapf	78,w
  1573  0248  0009               	retfie
  1574  0249                     __end_of_myIsr:	
  1575  004E                     btemp	set	78	;btemp
  1576  004E                     wtemp0	set	78
  1577                           
  1578                           	psect	intentry
  1579  0004                     __pintentry:	
  1580                           ;incstack = 0
  1581                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1582                           
  1583  0004                     interrupt_function:	
  1584  004E                     saved_w	set	btemp
  1585  0004  00CE               	movwf	btemp
  1586  0005  0E03               	swapf	3,w
  1587  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1588  0007  008E               	movwf	??_myIsr+2
  1589  0008  0804               	movf	4,w
  1590  0009  008F               	movwf	??_myIsr+3
  1591  000A  080A               	movf	10,w
  1592  000B  0090               	movwf	??_myIsr+4
  1593  000C  084F               	movf	btemp+1,w
  1594  000D  0091               	movwf	??_myIsr+5
  1595  000E  29B6               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    190
    Data        13
    BSS         13
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     25      52

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     646
                                             24 BANK0      1     1      0
                   _sendDataToAltera
                          _updateKey
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     646
                                             17 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (2) _updatePort                                           7     6      1     386
                                             10 BANK0      7     6      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     1     1      0       0
                                             10 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                               10    10      0     114
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sendDataToAltera
   _updateKey
     _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     19      34       3       78.8%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      34       6        0.0%
ABS                  0      0      34       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Mon Aug 27 22:41:00 2018

                            _i 002A                              pc 0002                             fsr 0004  
                          l121 02E6                            l122 02F6                            l148 01B4  
                          _GIE 005F                            _RA1 0029                            _RA2 002A  
                          u730 029D                            u650 0276                            u740 029E  
                          u660 0277                            u670 027E                            _PSA 040B  
                          u680 027F                            u585 02B4                            u594 02BF  
                          u595 02BD                            fsr0 0004                            indf 0000  
                         l1041 0258                           l1027 02CE                           l1211 0130  
                         l1203 011F                           l1029 02D2                           l1231 0157  
                         l1215 0138                           l1223 0147                           l1057 0282  
                         l1049 0268                           l1233 015B                           l1217 0139  
                         l1209 012C                           l1067 0290                           l1219 0142  
                         l1227 014F                           l1069 0291                           l1237 0163  
                         l1271 019A                           l1263 018B                           l1239 0167  
                         l1255 0176                           l1281 01B0                           l1275 01A2  
                         l1267 0193                           l1195 0115                           _T0IE 005D  
                         _T0IF 005A                           _T0CS 040D                           _T0SE 040C  
                         _TMR0 0001                           _main 00F5                           _ctrl 0028  
                         btemp 004E                           start 000F                          ?_main 000C  
 __end_of_replaceTwoBytesCodes 00F5                          _PORTA 0005                          _PORTB 0006  
         __end_of_codeToMatrix 00B7                          _TRISB 0086                          u85_24 01D7  
                        u85_25 01D5                          u89_25 01FE                          _delay 0025  
                        _myIsr 01B6                          _shift 0029               updatePort@bit_id 001C  
                        pclath 000A                          status 0003                   updateKey@key 0023  
                 updateKey@set 001D                          wtemp0 004E                __initialization 0010  
                 __end_of_main 01B6                         ??_main 0024                         ?_myIsr 000C  
                       i1l1121 01E8                         i1l1117 01DF                         i1l1109 01C7  
                       i1l1143 0221                         i1l1135 020E                         i1l1119 01E3  
                       i1l1145 0229                         i1l1155 0239                         i1l1139 0215  
                       i1l1149 0231                         i1l1157 023D                         _TRISA0 0428  
                       _TRISA1 0429                         _TRISA2 042A                         _TRISA3 042B  
                       _TRISA4 042C       __end_of_sendDataToAltera 02F9                         _mouseX 003E  
                       _mouseY 003D                         saved_w 004E        __end_of__initialization 002F  
         _replaceTwoBytesCodes 00DB                  updatePort@set 0016                   __pidataBANK0 02F9  
                __end_of_myIsr 0249            updateKey@localShift 001F                        ??_myIsr 000C  
                 _ps2DataCount 002D                   _ps2DataState 0031                     __pbssBANK0 0025  
                 _ps2BitsCount 002F                   _codeToMatrix 0037                     __pmaintext 00F5  
                   __pintentry 0004             __size_of_updateKey 005B                     __stringtab 0031  
__end_of_replaceOnShiftKeyDown 00DB                        _ps2Data 002E                        _ps2Bits 0030  
                      _ps2Down 003F                        __ptext1 0249                        __ptext2 02A4  
                      __ptext3 02DB                        __ptext4 01B6                        clrloop0 0307  
         end_of_initialization 002F                        myIsr@ii 0014              ?_sendDataToAltera 000C  
            __end_of_updateKey 02A4             ??_sendDataToAltera 0016                      _PORTAbits 0005  
                   _updatePort 02A4            start_initialization 0010                    updatePort@a 001B  
                  updatePort@b 001A                    __pdataBANK0 0032                      ___latbits 0000  
                __pcstackBANK0 000C                    ?_updatePort 0016             updateKey@localCtrl 0021  
                    __pnvBANK0 003F                      __pstrings 0031                  _ps2NeedEncode 002B  
                  _ps2WaitCode 002C                 __size_of_myIsr 0093              interrupt_function 0004  
                    clear_ram0 0306            __size_of_updatePort 0037          _replaceOnShiftKeyDown 00B7  
                    _updateKey 0249                    __stringbase 0036      __size_of_sendDataToAltera 001E  
                   ?_updateKey 001D             __end_of__stringtab 0037                       _myIsr$84 0012  
                __size_of_main 00C1                       _replaced 0027                       _outPorts 0032  
                 ??_updatePort 0017                       intlevel1 0000                      stringcode 0031  
           __end_of_updatePort 02DB                    ??_updateKey 001E               _sendDataToAltera 02DB  
                     stringdir 0031                       stringtab 0031                   _updateKey$94 0020  
                 _updateKey$97 0022  
