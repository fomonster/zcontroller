

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Fri Sep 28 16:15:00 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	dabs	1,0x4E,2
    22  0000                     
    23                           ; Version 2.00
    24                           ; Generated 27/05/2018 GMT
    25                           ; 
    26                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F84A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0008                     	;# 
    65  0009                     	;# 
    66  000A                     	;# 
    67  000B                     	;# 
    68  0081                     	;# 
    69  0085                     	;# 
    70  0086                     	;# 
    71  0088                     	;# 
    72  0089                     	;# 
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0008                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  0081                     	;# 
    85  0085                     	;# 
    86  0086                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89                           
    90                           	psect	idataBANK0
    91  01DD                     __pidataBANK0:	
    92                           
    93                           ;initializer for _outPorts
    94  01DD  3400               	retlw	0
    95  01DE  3400               	retlw	0
    96  01DF  3400               	retlw	0
    97  01E0  3400               	retlw	0
    98  01E1  3400               	retlw	0
    99  01E2  3400               	retlw	0
   100  01E3  3400               	retlw	0
   101  01E4  3400               	retlw	0
   102  01E5  3407               	retlw	7
   103  01E6  34F5               	retlw	245
   104  01E7  34DA               	retlw	218
   105                           
   106                           	psect	strings
   107  0200                     __pstrings:	
   108  0200                     stringtab:	
   109  0200                     __stringtab:	
   110  0200                     stringcode:	
   111                           ;	String table - string pointers are 1 byte each
   112                           
   113  0200                     stringdir:	
   114  0200  3002               	movlw	high stringdir
   115  0201  008A               	movwf	10
   116  0202  0804               	movf	4,w
   117  0203  0A84               	incf	4,f
   118  0204  0782               	addwf	2,f
   119  0205                     __stringbase:	
   120  0205  3400               	retlw	0
   121  0206                     __end_of__stringtab:	
   122  0206                     _codeToMatrix:	
   123  0206  34FF               	retlw	255
   124  0207  34FF               	retlw	255
   125  0208  34FF               	retlw	255
   126  0209  34FF               	retlw	255
   127  020A  34FF               	retlw	255
   128  020B  34FF               	retlw	255
   129  020C  34FF               	retlw	255
   130  020D  34FF               	retlw	255
   131  020E  34FF               	retlw	255
   132  020F  34FF               	retlw	255
   133  0210  34FF               	retlw	255
   134  0211  34FF               	retlw	255
   135  0212  34FF               	retlw	255
   136  0213  34FF               	retlw	255
   137  0214  349C               	retlw	156
   138  0215  34FF               	retlw	255
   139  0216  34FF               	retlw	255
   140  0217  34FF               	retlw	255
   141  0218  34FF               	retlw	255
   142  0219  34FF               	retlw	255
   143  021A  34FF               	retlw	255
   144  021B  3402               	retlw	2
   145  021C  3403               	retlw	3
   146  021D  34FF               	retlw	255
   147  021E  34FF               	retlw	255
   148  021F  34FF               	retlw	255
   149  0220  3408               	retlw	8
   150  0221  3409               	retlw	9
   151  0222  3401               	retlw	1
   152  0223  340A               	retlw	10
   153  0224  340B               	retlw	11
   154  0225  34D6               	retlw	214
   155  0226  34FF               	retlw	255
   156  0227  3418               	retlw	24
   157  0228  3410               	retlw	16
   158  0229  3411               	retlw	17
   159  022A  3412               	retlw	18
   160  022B  341B               	retlw	27
   161  022C  3413               	retlw	19
   162  022D  34FF               	retlw	255
   163  022E  345C               	retlw	92
   164  022F  3407               	retlw	7
   165  0230  3420               	retlw	32
   166  0231  3419               	retlw	25
   167  0232  3422               	retlw	34
   168  0233  341A               	retlw	26
   169  0234  3423               	retlw	35
   170  0235  3463               	retlw	99
   171  0236  3464               	retlw	100
   172  0237  341F               	retlw	31
   173  0238  3427               	retlw	39
   174  0239  3426               	retlw	38
   175  023A  3421               	retlw	33
   176  023B  3425               	retlw	37
   177  023C  3424               	retlw	36
   178  023D  3454               	retlw	84
   179  023E  34A0               	retlw	160
   180  023F  3406               	retlw	6
   181  0240  3417               	retlw	23
   182  0241  341E               	retlw	30
   183  0242  341D               	retlw	29
   184  0243  341C               	retlw	28
   185  0244  3414               	retlw	20
   186  0245  34FF               	retlw	255
   187  0246  34FF               	retlw	255
   188  0247  349F               	retlw	159
   189  0248  3416               	retlw	22
   190  0249  3415               	retlw	21
   191  024A  340D               	retlw	13
   192  024B  3404               	retlw	4
   193  024C  340C               	retlw	12
   194  024D  34FF               	retlw	255
   195  024E  34C1               	retlw	193
   196  024F  3497               	retlw	151
   197  0250  34A0               	retlw	160
   198  0251  340E               	retlw	14
   199  0252  348D               	retlw	141
   200  0253  3405               	retlw	5
   201  0254  349E               	retlw	158
   202  0255  3483               	retlw	131
   203  0256  348B               	retlw	139
   204  0257  3493               	retlw	147
   205  0258  349C               	retlw	156
   206  0259  349B               	retlw	155
   207  025A  34E5               	retlw	229
   208  025B  348E               	retlw	142
   209  025C  34A3               	retlw	163
   210  025D  34A6               	retlw	166
   211  025E  344B               	retlw	75
   212  025F  34FF               	retlw	255
   213  0260  3406               	retlw	6
   214  0261  34DD               	retlw	221
   215  0262  34A4               	retlw	164
   216  0263  34D1               	retlw	209
   217  0264  34A7               	retlw	167
   218  0265  3494               	retlw	148
   219  0266  348C               	retlw	140
   220  0267  3484               	retlw	132
   221  0268  3496               	retlw	150
   222  0269  34C9               	retlw	201
   223  026A  34D9               	retlw	217
   224  026B  34E1               	retlw	225
   225  026C  3444               	retlw	68
   226  026D  3488               	retlw	136
   227  026E  3485               	retlw	133
   228  026F  3403               	retlw	3
   229  0270  349A               	retlw	154
   230  0271  341B               	retlw	27
   231  0272  341C               	retlw	28
   232  0273  34A2               	retlw	162
   233  0274  3498               	retlw	152
   234  0275  34C0               	retlw	192
   235  0276  3404               	retlw	4
   236  0277  3497               	retlw	151
   237  0278  340B               	retlw	11
   238  0279  3423               	retlw	35
   239  027A  3424               	retlw	36
   240  027B  3414               	retlw	20
   241  027C  3443               	retlw	67
   242  027D  34FF               	retlw	255
   243  027E  34FF               	retlw	255
   244  027F  3496               	retlw	150
   245  0280  3413               	retlw	19
   246  0281  349E               	retlw	158
   247  0282  34A7               	retlw	167
   248  0283  340C               	retlw	12
   249  0284  34FF               	retlw	255
   250  0285  34FF               	retlw	255
   251  0286                     __end_of_codeToMatrix:	
   252  0286                     _replaceOnShiftKeyDown:	
   253  0286  3416               	retlw	22
   254  0287  344F               	retlw	79
   255  0288  341E               	retlw	30
   256  0289  3450               	retlw	80
   257  028A  3426               	retlw	38
   258  028B  3451               	retlw	81
   259  028C  3425               	retlw	37
   260  028D  3453               	retlw	83
   261  028E  342E               	retlw	46
   262  028F  3456               	retlw	86
   263  0290  3436               	retlw	54
   264  0291  3457               	retlw	87
   265  0292  343D               	retlw	61
   266  0293  345C               	retlw	92
   267  0294  343E               	retlw	62
   268  0295  345E               	retlw	94
   269  0296  3446               	retlw	70
   270  0297  345F               	retlw	95
   271  0298  3445               	retlw	69
   272  0299  3460               	retlw	96
   273  029A  344E               	retlw	78
   274  029B  3461               	retlw	97
   275  029C  3455               	retlw	85
   276  029D  3462               	retlw	98
   277  029E  345D               	retlw	93
   278  029F  3463               	retlw	99
   279  02A0  344C               	retlw	76
   280  02A1  3467               	retlw	103
   281  02A2  3452               	retlw	82
   282  02A3  3468               	retlw	104
   283  02A4  3441               	retlw	65
   284  02A5  346A               	retlw	106
   285  02A6  3449               	retlw	73
   286  02A7  346D               	retlw	109
   287  02A8  344A               	retlw	74
   288  02A9  346E               	retlw	110
   289  02AA  340E               	retlw	14
   290  02AB  3448               	retlw	72
   291  02AC  3454               	retlw	84
   292  02AD  3464               	retlw	100
   293  02AE  345B               	retlw	91
   294  02AF  3465               	retlw	101
   295  02B0                     __end_of_replaceOnShiftKeyDown:	
   296  02B0                     _replaceTwoBytesCodes:	
   297  02B0  3411               	retlw	17
   298  02B1  3408               	retlw	8
   299  02B2  3414               	retlw	20
   300  02B3  3413               	retlw	19
   301  02B4  3470               	retlw	112
   302  02B5  3417               	retlw	23
   303  02B6  346C               	retlw	108
   304  02B7  3418               	retlw	24
   305  02B8  347D               	retlw	125
   306  02B9  3419               	retlw	25
   307  02BA  3471               	retlw	113
   308  02BB  341F               	retlw	31
   309  02BC  3469               	retlw	105
   310  02BD  3420               	retlw	32
   311  02BE  347A               	retlw	122
   312  02BF  3427               	retlw	39
   313  02C0  3475               	retlw	117
   314  02C1  3428               	retlw	40
   315  02C2  346B               	retlw	107
   316  02C3  342F               	retlw	47
   317  02C4  3472               	retlw	114
   318  02C5  3430               	retlw	48
   319  02C6  3474               	retlw	116
   320  02C7  3437               	retlw	55
   321  02C8  344A               	retlw	74
   322  02C9  3438               	retlw	56
   323  02CA  345A               	retlw	90
   324  02CB  3439               	retlw	57
   325  02CC                     __end_of_replaceTwoBytesCodes:	
   326  02CC                     _replaceOnDelayKeyDown:	
   327  02CC  341F               	retlw	31
   328  02CD  3454               	retlw	84
   329  02CE  345B               	retlw	91
   330  02CF  3463               	retlw	99
   331  02D0  3464               	retlw	100
   332  02D1  3465               	retlw	101
   333  02D2  3448               	retlw	72
   334  02D3  345D               	retlw	93
   335  02D4                     __end_of_replaceOnDelayKeyDown:	
   336  02D4                     _importantKeys:	
   337  02D4  3412               	retlw	18
   338  02D5  3459               	retlw	89
   339  02D6  3414               	retlw	20
   340  02D7  3413               	retlw	19
   341  02D8  3411               	retlw	17
   342  02D9  3408               	retlw	8
   343  02DA                     __end_of_importantKeys:	
   344  02DA                     _kempstonMouseKeys:	
   345  02DA  346B               	retlw	107
   346  02DB  3474               	retlw	116
   347  02DC  3475               	retlw	117
   348  02DD  3472               	retlw	114
   349  02DE  3473               	retlw	115
   350  02DF  3404               	retlw	4
   351  02E0                     __end_of_kempstonMouseKeys:	
   352                           
   353                           	psect	nvBANK0
   354  0042                     __pnvBANK0:	
   355  0042                     _ps2Down:	
   356  0042                     	ds	1
   357  0005                     _PORTA	set	5
   358  0006                     _PORTB	set	6
   359  0005                     _PORTAbits	set	5
   360  0001                     _TMR0	set	1
   361  0029                     _RA1	set	41
   362  002A                     _RA2	set	42
   363  005F                     _GIE	set	95
   364  005A                     _T0IF	set	90
   365  005D                     _T0IE	set	93
   366  0086                     _TRISB	set	134
   367  040B                     _PSA	set	1035
   368  040C                     _T0SE	set	1036
   369  040D                     _T0CS	set	1037
   370  042B                     _TRISA3	set	1067
   371  042C                     _TRISA4	set	1068
   372  0428                     _TRISA0	set	1064
   373  042A                     _TRISA2	set	1066
   374  0429                     _TRISA1	set	1065
   375                           
   376                           	psect	cinit
   377  0010                     start_initialization:	
   378                           ; #config settings
   379                           
   380  0010                     __initialization:	
   381                           
   382                           ; Initialize objects allocated to BANK0
   383  0010  21DD               	fcall	__pidataBANK0	;fetch initializer
   384  0011  00B7               	movwf	__pdataBANK0& (0+127)
   385  0012  21DE               	fcall	__pidataBANK0+1	;fetch initializer
   386  0013  00B8               	movwf	(__pdataBANK0+1)& (0+127)
   387  0014  21DF               	fcall	__pidataBANK0+2	;fetch initializer
   388  0015  00B9               	movwf	(__pdataBANK0+2)& (0+127)
   389  0016  21E0               	fcall	__pidataBANK0+3	;fetch initializer
   390  0017  00BA               	movwf	(__pdataBANK0+3)& (0+127)
   391  0018  21E1               	fcall	__pidataBANK0+4	;fetch initializer
   392  0019  00BB               	movwf	(__pdataBANK0+4)& (0+127)
   393  001A  21E2               	fcall	__pidataBANK0+5	;fetch initializer
   394  001B  00BC               	movwf	(__pdataBANK0+5)& (0+127)
   395  001C  21E3               	fcall	__pidataBANK0+6	;fetch initializer
   396  001D  00BD               	movwf	(__pdataBANK0+6)& (0+127)
   397  001E  21E4               	fcall	__pidataBANK0+7	;fetch initializer
   398  001F  00BE               	movwf	(__pdataBANK0+7)& (0+127)
   399  0020  21E5               	fcall	__pidataBANK0+8	;fetch initializer
   400  0021  00BF               	movwf	(__pdataBANK0+8)& (0+127)
   401  0022  21E6               	fcall	__pidataBANK0+9	;fetch initializer
   402  0023  00C0               	movwf	(__pdataBANK0+9)& (0+127)
   403  0024  21E7               	fcall	__pidataBANK0+10	;fetch initializer
   404  0025  00C1               	movwf	(__pdataBANK0+10)& (0+127)
   405                           
   406                           ; Clear objects allocated to BANK0
   407  0026  1383               	bcf	3,7	;select IRP bank0
   408  0027  3027               	movlw	low __pbssBANK0
   409  0028  0084               	movwf	4
   410  0029  3037               	movlw	low (__pbssBANK0+16)
   411  002A  21E8               	fcall	clear_ram0
   412  002B                     end_of_initialization:	
   413                           ;End of C runtime variable initialization code
   414                           
   415  002B                     __end_of__initialization:	
   416  002B  0183               	clrf	3
   417  002C  282D               	ljmp	_main	;jump to C main() function
   418                           
   419                           	psect	bssBANK0
   420  0027                     __pbssBANK0:	
   421  0027                     _kempstonMouseEmulatorDelay:	
   422  0027                     	ds	2
   423  0029                     _delay:	
   424  0029                     	ds	2
   425  002B                     _delayedKey:	
   426  002B                     	ds	1
   427  002C                     _replaced:	
   428  002C                     	ds	1
   429  002D                     _numLock:	
   430  002D                     	ds	1
   431  002E                     _ps2NeedEncode:	
   432  002E                     	ds	1
   433  002F                     _ps2WaitCode:	
   434  002F                     	ds	1
   435  0030                     _ps2Device:	
   436  0030                     	ds	1
   437  0031                     _ps2Data:	
   438  0031                     	ds	1
   439  0032                     _ps2BitsCount:	
   440  0032                     	ds	1
   441  0033                     _ps2Bits:	
   442  0033                     	ds	1
   443  0034                     _ps2DataState:	
   444  0034                     	ds	1
   445  0035                     _kempstonMouseEmulatorKeys:	
   446  0035                     	ds	1
   447  0036                     _shift_ctrl_alt:	
   448  0036                     	ds	1
   449                           
   450                           	psect	dataBANK0
   451  0037                     __pdataBANK0:	
   452  0037                     _outPorts:	
   453  0037                     	ds	11
   454                           
   455                           	psect	clrtext
   456  01E8                     clear_ram0:	
   457                           ;	Called with FSR containing the base address, and
   458                           ;	W with the last address+1
   459                           
   460  01E8  0064               	clrwdt	;clear the watchdog before getting into this loop
   461  01E9                     clrloop0:	
   462  01E9  0180               	clrf	0	;clear RAM location pointed to by FSR
   463  01EA  0A84               	incf	4,f	;increment pointer
   464  01EB  0604               	xorwf	4,w	;XOR with final address
   465  01EC  1903               	btfsc	3,2	;have we reached the end yet?
   466  01ED  3400               	retlw	0	;all done for this memory range, return
   467  01EE  0604               	xorwf	4,w	;XOR again to restore value
   468  01EF  29E9               	goto	clrloop0	;do the next byte
   469                           
   470                           	psect	cstackCOMMON
   471  0000                     __pcstackCOMMON:	
   472  0000                     ??_myDelay:	
   473                           
   474                           	psect	cstackBANK0
   475  000C                     __pcstackBANK0:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  000C                     ?_myIsr:	
   479  000C                     ??_myIsr:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  000C                     ?_myDelay:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  000C                     ?_sendDataToAltera:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  000C                     ?_main:	
   489                           ; 1 bytes @ 0x0
   490                           
   491                           
   492                           ; 1 bytes @ 0x0
   493  000C                     	ds	6
   494  0012                     _myIsr$87:	
   495                           
   496                           ; 2 bytes @ 0x6
   497  0012                     	ds	2
   498  0014                     myIsr@i:	
   499                           
   500                           ; 1 bytes @ 0x8
   501  0014                     	ds	1
   502  0015                     ?_updatePort:	
   503  0015                     ??_sendDataToAltera:	
   504                           ; 1 bytes @ 0x9
   505                           
   506  0015                     ?_calculateBitsFromTable:	
   507                           ; 1 bytes @ 0x9
   508                           
   509  0015                     updatePort@set:	
   510                           ; 1 bytes @ 0x9
   511                           
   512  0015                     calculateBitsFromTable@table:	
   513                           ; 1 bytes @ 0x9
   514                           
   515                           
   516                           ; 1 bytes @ 0x9
   517  0015                     	ds	1
   518  0016                     ??_updatePort:	
   519  0016                     calculateBitsFromTable@count:	
   520                           ; 1 bytes @ 0xA
   521                           
   522                           
   523                           ; 1 bytes @ 0xA
   524  0016                     	ds	1
   525  0017                     calculateBitsFromTable@clearIfFound:	
   526  0017                     _sendDataToAltera$104:	
   527                           ; 1 bytes @ 0xB
   528                           
   529                           
   530                           ; 2 bytes @ 0xB
   531  0017                     	ds	1
   532  0018                     ??_calculateBitsFromTable:	
   533                           
   534                           ; 1 bytes @ 0xC
   535  0018                     	ds	1
   536  0019                     updatePort@a:	
   537  0019                     sendDataToAltera@i:	
   538                           ; 1 bytes @ 0xD
   539                           
   540                           
   541                           ; 1 bytes @ 0xD
   542  0019                     	ds	1
   543  001A                     updatePort@bit_id:	
   544  001A                     calculateBitsFromTable@bits:	
   545                           ; 1 bytes @ 0xE
   546                           
   547                           
   548                           ; 1 bytes @ 0xE
   549  001A                     	ds	1
   550  001B                     ?_updateKey:	
   551  001B                     updateKey@set:	
   552                           ; 1 bytes @ 0xF
   553                           
   554  001B                     calculateBitsFromTable@i:	
   555                           ; 1 bytes @ 0xF
   556                           
   557                           
   558                           ; 1 bytes @ 0xF
   559  001B                     	ds	1
   560  001C                     ??_updateKey:	
   561                           
   562                           ; 1 bytes @ 0x10
   563  001C                     	ds	1
   564  001D                     updateKey@localShift:	
   565                           
   566                           ; 1 bytes @ 0x11
   567  001D                     	ds	1
   568  001E                     _updateKey$97:	
   569                           
   570                           ; 1 bytes @ 0x12
   571  001E                     	ds	1
   572  001F                     updateKey@localCtrl:	
   573                           
   574                           ; 1 bytes @ 0x13
   575  001F                     	ds	1
   576  0020                     updateKey@key:	
   577                           
   578                           ; 1 bytes @ 0x14
   579  0020                     	ds	1
   580  0021                     updateKey@code:	
   581                           
   582                           ; 1 bytes @ 0x15
   583  0021                     	ds	1
   584  0022                     ??_main:	
   585                           
   586                           ; 1 bytes @ 0x16
   587  0022                     	ds	3
   588  0025                     main@i_118:	
   589                           
   590                           ; 1 bytes @ 0x19
   591  0025                     	ds	1
   592  0026                     main@i:	
   593                           
   594                           ; 1 bytes @ 0x1A
   595  0026                     	ds	1
   596                           
   597                           	psect	maintext
   598  002D                     __pmaintext:	
   599 ;;
   600 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   601 ;;
   602 ;; *************** function _main *****************
   603 ;; Defined at:
   604 ;;		line 350 in file "main.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;  i               1   25[BANK0 ] char 
   609 ;;  i               1   26[BANK0 ] char 
   610 ;; Return value:  Size  Location     Type
   611 ;;                  1    wreg      void 
   612 ;; Registers used:
   613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   614 ;; Tracked objects:
   615 ;;		On entry : B00/0
   616 ;;		On exit  : 0/0
   617 ;;		Unchanged: 0/0
   618 ;; Data sizes:     COMMON   BANK0
   619 ;;      Params:         0       0
   620 ;;      Locals:         0       2
   621 ;;      Temps:          0       3
   622 ;;      Totals:         0       5
   623 ;;Total ram usage:        5 bytes
   624 ;; Hardware stack levels required when called:    4
   625 ;; This function calls:
   626 ;;		_calculateBitsFromTable
   627 ;;		_sendDataToAltera
   628 ;;		_updateKey
   629 ;;		_updatePort
   630 ;; This function is called by:
   631 ;;		Startup code after reset
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           
   636                           ;psect for function _main
   637  002D                     _main:	
   638                           
   639                           ;main.c: 352:     TRISA1 = 0;
   640                           
   641                           ;incstack = 0
   642                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   643  002D  1683               	bsf	3,5	;RP0=1, select bank1
   644  002E  1085               	bcf	5,1	;volatile
   645                           
   646                           ;main.c: 353:     TRISA2 = 0;
   647  002F  1105               	bcf	5,2	;volatile
   648                           
   649                           ;main.c: 354:     TRISA0 = 1;
   650  0030  1405               	bsf	5,0	;volatile
   651                           
   652                           ;main.c: 355:     TRISA4 = 1;
   653  0031  1605               	bsf	5,4	;volatile
   654                           
   655                           ;main.c: 356:     TRISA3 = 1;
   656  0032  1585               	bsf	5,3	;volatile
   657                           
   658                           ;main.c: 358:     PORTA = 0;
   659  0033  1283               	bcf	3,5	;RP0=0, select bank0
   660  0034  0185               	clrf	5	;volatile
   661                           
   662                           ;main.c: 360:     TRISB = 0;
   663  0035  1683               	bsf	3,5	;RP0=1, select bank1
   664  0036  0186               	clrf	6	;volatile
   665                           
   666                           ;main.c: 361:     PORTB = 0;
   667  0037  1283               	bcf	3,5	;RP0=0, select bank0
   668  0038  0186               	clrf	6	;volatile
   669                           
   670                           ;main.c: 381:     ps2Data = 0;
   671  0039  01B1               	clrf	_ps2Data
   672                           
   673                           ;main.c: 383:     ps2WaitCode = 0;
   674  003A  01AF               	clrf	_ps2WaitCode
   675                           
   676                           ;main.c: 384:     ps2Down = 1;
   677  003B  01C2               	clrf	_ps2Down
   678  003C  0AC2               	incf	_ps2Down,f
   679                           
   680                           ;main.c: 385:     ps2NeedEncode = 0;
   681  003D  01AE               	clrf	_ps2NeedEncode
   682                           
   683                           ;main.c: 386:     ps2DataState = 0;
   684  003E  01B4               	clrf	_ps2DataState
   685                           
   686                           ;main.c: 388:     delay = 0;
   687  003F  01A9               	clrf	_delay
   688  0040  01AA               	clrf	_delay+1
   689                           
   690                           ;main.c: 389:     delayedKey = 0;
   691  0041  01AB               	clrf	_delayedKey
   692                           
   693                           ;main.c: 390:     shift_ctrl_alt = 0;
   694  0042  01B6               	clrf	_shift_ctrl_alt
   695                           
   696                           ;main.c: 391:     replaced = 0;
   697  0043  01AC               	clrf	_replaced
   698                           
   699                           ;main.c: 397:     T0CS = 1;
   700  0044  1683               	bsf	3,5	;RP0=1, select bank1
   701  0045  1681               	bsf	1,5	;volatile
   702                           
   703                           ;main.c: 398:     T0SE = 1;
   704  0046  1601               	bsf	1,4	;volatile
   705                           
   706                           ;main.c: 399:     GIE = 1;
   707  0047  178B               	bsf	11,7	;volatile
   708                           
   709                           ;main.c: 400:     T0IE = 1;
   710  0048  168B               	bsf	11,5	;volatile
   711                           
   712                           ;main.c: 401:     PSA = 1;
   713  0049  1581               	bsf	1,3	;volatile
   714                           
   715                           ;main.c: 402:     T0IF = 0;
   716  004A  110B               	bcf	11,2	;volatile
   717                           
   718                           ;main.c: 403:     TMR0 = 255;
   719  004B  30FF               	movlw	255
   720  004C  1283               	bcf	3,5	;RP0=0, select bank0
   721  004D  0081               	movwf	1	;volatile
   722  004E                     l1256:	
   723                           ;main.c: 405:     while(1)
   724                           
   725                           
   726                           ;main.c: 406:     {;main.c: 408:         if ( ps2DataState == 2 ) {
   727  004E  3002               	movlw	2
   728  004F  1283               	bcf	3,5	;RP0=0, select bank0
   729  0050  0634               	xorwf	_ps2DataState,w
   730  0051  1D03               	btfss	3,2
   731  0052  291A               	goto	l1344
   732                           
   733                           ;main.c: 410:             if ( ps2Device == 0 ) {
   734  0053  0830               	movf	_ps2Device,w
   735  0054  1D03               	btfss	3,2
   736  0055  2912               	goto	l1340
   737                           
   738                           ;main.c: 416:                 calculateBitsFromTable(&shift_ctrl_alt, importantKeys, 6, 
      +                          0);
   739  0056  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
   740  0057  00A2               	movwf	??_main
   741  0058  0822               	movf	??_main,w
   742  0059  0095               	movwf	calculateBitsFromTable@table
   743  005A  3006               	movlw	6
   744  005B  00A3               	movwf	??_main+1
   745  005C  0823               	movf	??_main+1,w
   746  005D  0096               	movwf	calculateBitsFromTable@count
   747  005E  0197               	clrf	calculateBitsFromTable@clearIfFound
   748  005F  3036               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
   749  0060  2170               	fcall	_calculateBitsFromTable
   750                           
   751                           ;main.c: 418:                 calculateBitsFromTable(&kempstonMouseEmulatorKeys, kempsto
      +                          nMouseKeys, 6, numLock);
   752  0061  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
   753  0062  1283               	bcf	3,5	;RP0=0, select bank0
   754  0063  00A2               	movwf	??_main
   755  0064  0822               	movf	??_main,w
   756  0065  0095               	movwf	calculateBitsFromTable@table
   757  0066  3006               	movlw	6
   758  0067  00A3               	movwf	??_main+1
   759  0068  0823               	movf	??_main+1,w
   760  0069  0096               	movwf	calculateBitsFromTable@count
   761  006A  082D               	movf	_numLock,w
   762  006B  00A4               	movwf	??_main+2
   763  006C  0824               	movf	??_main+2,w
   764  006D  0097               	movwf	calculateBitsFromTable@clearIfFound
   765  006E  3035               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
   766  006F  2170               	fcall	_calculateBitsFromTable
   767                           
   768                           ;main.c: 426:                 if ( ps2Data == 119 && ps2Down ) {
   769  0070  3077               	movlw	119
   770  0071  1283               	bcf	3,5	;RP0=0, select bank0
   771  0072  0631               	xorwf	_ps2Data,w
   772  0073  1D03               	btfss	3,2
   773  0074  2881               	goto	l1268
   774  0075  0842               	movf	_ps2Down,w
   775  0076  1903               	btfsc	3,2
   776  0077  2881               	goto	l1268
   777                           
   778                           ;main.c: 427:                     numLock = !numLock;
   779  0078  082D               	movf	_numLock,w
   780  0079  1D03               	btfss	3,2
   781  007A  287D               	goto	u1250
   782  007B  3001               	movlw	1
   783  007C  287E               	goto	u1260
   784  007D                     u1250:	
   785  007D  3000               	movlw	0
   786  007E                     u1260:	
   787  007E  00A2               	movwf	??_main
   788  007F  0822               	movf	??_main,w
   789  0080  00AD               	movwf	_numLock
   790  0081                     l1268:	
   791                           ;main.c: 428:                 }
   792                           
   793                           
   794                           ;main.c: 431:                 if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 
      +                          0 && ps2Data == 31 && ps2Down ) {
   795  0081  0836               	movf	_shift_ctrl_alt,w
   796  0082  390C               	andlw	12
   797  0083  1903               	btfsc	3,2
   798  0084  2895               	goto	l156
   799  0085  0836               	movf	_shift_ctrl_alt,w
   800  0086  3930               	andlw	48
   801  0087  1903               	btfsc	3,2
   802  0088  2895               	goto	l156
   803  0089  301F               	movlw	31
   804  008A  0631               	xorwf	_ps2Data,w
   805  008B  1D03               	btfss	3,2
   806  008C  2895               	goto	l156
   807  008D  0842               	movf	_ps2Down,w
   808  008E  1903               	btfsc	3,2
   809  008F  2895               	goto	l156
   810                           
   811                           ;main.c: 432:                     outPorts[8] &= 253;
   812  0090  30FD               	movlw	253
   813  0091  00A2               	movwf	??_main
   814  0092  0822               	movf	??_main,w
   815  0093  05BF               	andwf	_outPorts+8,f
   816                           
   817                           ;main.c: 433:                 } else {
   818  0094  2896               	goto	l1278
   819  0095                     l156:	
   820                           
   821                           ;main.c: 434:                     outPorts[8] |= 2;
   822  0095  14BF               	bsf	_outPorts+8,1
   823  0096                     l1278:	
   824                           ;main.c: 435:                 }
   825                           
   826                           
   827                           ;main.c: 438:                 if ( (shift_ctrl_alt & 12) > 0 && ps2Data == 126 && ps2Dow
      +                          n ) {
   828  0096  0836               	movf	_shift_ctrl_alt,w
   829  0097  390C               	andlw	12
   830  0098  1903               	btfsc	3,2
   831  0099  28A6               	goto	l158
   832  009A  307E               	movlw	126
   833  009B  0631               	xorwf	_ps2Data,w
   834  009C  1D03               	btfss	3,2
   835  009D  28A6               	goto	l158
   836  009E  0842               	movf	_ps2Down,w
   837  009F  1903               	btfsc	3,2
   838  00A0  28A6               	goto	l158
   839                           
   840                           ;main.c: 439:                     outPorts[8] &= 251;
   841  00A1  30FB               	movlw	251
   842  00A2  00A2               	movwf	??_main
   843  00A3  0822               	movf	??_main,w
   844  00A4  05BF               	andwf	_outPorts+8,f
   845                           
   846                           ;main.c: 440:                 } else {
   847  00A5  28A7               	goto	l1286
   848  00A6                     l158:	
   849                           
   850                           ;main.c: 441:                     outPorts[8] |= 4;
   851  00A6  153F               	bsf	_outPorts+8,2
   852  00A7                     l1286:	
   853                           ;main.c: 442:                 }
   854                           
   855                           
   856                           ;main.c: 449:                 for(int8_t i = 0; i < 41 ;i+=2) {
   857  00A7  01A6               	clrf	main@i
   858  00A8  0826               	movf	main@i,w
   859  00A9  3A80               	xorlw	128
   860  00AA  3E57               	addlw	-169
   861  00AB  1803               	btfsc	3,0
   862  00AC  28DF               	goto	l1316
   863  00AD                     l1292:	
   864                           
   865                           ;main.c: 450:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   866  00AD  0826               	movf	main@i,w
   867  00AE  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   868  00AF  0084               	movwf	4
   869  00B0  2200               	fcall	stringdir
   870  00B1  0631               	xorwf	_ps2Data,w
   871  00B2  1D03               	skipz
   872  00B3  28D6               	goto	l1312
   873                           
   874                           ;main.c: 451:                         if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0)
      +                           || replaced == ps2Data) {
   875  00B4  0836               	movf	_shift_ctrl_alt,w
   876  00B5  3903               	andlw	3
   877  00B6  1903               	btfsc	3,2
   878  00B7  28BB               	goto	l1298
   879  00B8  082C               	movf	_replaced,w
   880  00B9  1903               	btfsc	3,2
   881  00BA  28BF               	goto	l1300
   882  00BB                     l1298:	
   883  00BB  082C               	movf	_replaced,w
   884  00BC  0631               	xorwf	_ps2Data,w
   885  00BD  1D03               	skipz
   886  00BE  28D1               	goto	l1308
   887  00BF                     l1300:	
   888                           
   889                           ;main.c: 452:                             if ( ps2Down ) replaced = ps2Data;
   890  00BF  0842               	movf	_ps2Down,w
   891  00C0  1903               	btfsc	3,2
   892  00C1  28C7               	goto	l1304
   893  00C2  0831               	movf	_ps2Data,w
   894  00C3  00A2               	movwf	??_main
   895  00C4  0822               	movf	??_main,w
   896  00C5  00AC               	movwf	_replaced
   897  00C6  28C8               	goto	l1306
   898  00C7                     l1304:	
   899                           ;main.c: 453:                             else replaced = 0;
   900                           
   901  00C7  01AC               	clrf	_replaced
   902  00C8                     l1306:	
   903                           
   904                           ;main.c: 454:                             ps2Data = replaceOnShiftKeyDown[i+1];
   905  00C8  0826               	movf	main@i,w
   906  00C9  3E01               	addlw	1
   907  00CA  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   908  00CB  0084               	movwf	4
   909  00CC  2200               	fcall	stringdir
   910  00CD  00A2               	movwf	??_main
   911  00CE  0822               	movf	??_main,w
   912  00CF  00B1               	movwf	_ps2Data
   913                           
   914                           ;main.c: 455:                         } else {
   915  00D0  28DF               	goto	l1316
   916  00D1                     l1308:	
   917                           
   918                           ;main.c: 456:                             if ( replaced != 0 ) ps2Data = 0;
   919  00D1  082C               	movf	_replaced,w
   920  00D2  1903               	btfsc	3,2
   921  00D3  28DF               	goto	l1316
   922  00D4  01B1               	clrf	_ps2Data
   923                           
   924                           ;main.c: 458:                         break;
   925                           
   926                           ;main.c: 457:                         }
   927  00D5  28DF               	goto	l1316
   928  00D6                     l1312:	
   929                           ;main.c: 459:                     }
   930                           
   931                           
   932                           ;main.c: 460:                 }
   933  00D6  3002               	movlw	2
   934  00D7  00A2               	movwf	??_main
   935  00D8  0822               	movf	??_main,w
   936  00D9  07A6               	addwf	main@i,f
   937  00DA  0826               	movf	main@i,w
   938  00DB  3A80               	xorlw	128
   939  00DC  3E57               	addlw	-169
   940  00DD  1C03               	skipc
   941  00DE  28AD               	goto	l1292
   942  00DF                     l1316:	
   943                           
   944                           ;main.c: 464:                 for(int8_t i = 0; i < 8; i++) {
   945  00DF  01A5               	clrf	main@i_118
   946  00E0  0825               	movf	main@i_118,w
   947  00E1  3A80               	xorlw	128
   948  00E2  3E78               	addlw	-136
   949  00E3  1803               	btfsc	3,0
   950  00E4  290B               	goto	l1336
   951  00E5                     l1322:	
   952                           
   953                           ;main.c: 465:                     if ( ps2Data == replaceOnDelayKeyDown[i] && ps2Down ) 
      +                          {
   954  00E5  0825               	movf	main@i_118,w
   955  00E6  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
   956  00E7  0084               	movwf	4
   957  00E8  2200               	fcall	stringdir
   958  00E9  0631               	xorwf	_ps2Data,w
   959  00EA  1D03               	skipz
   960  00EB  2902               	goto	l1332
   961  00EC  0842               	movf	_ps2Down,w
   962  00ED  1903               	btfsc	3,2
   963  00EE  2902               	goto	l1332
   964                           
   965                           ;main.c: 466:                         if ( delay == 0 ) {
   966  00EF  0829               	movf	_delay,w
   967  00F0  042A               	iorwf	_delay+1,w
   968  00F1  1D03               	btfss	3,2
   969  00F2  2900               	goto	l1330
   970                           
   971                           ;main.c: 467:                             delayedKey = ps2Data;
   972  00F3  0831               	movf	_ps2Data,w
   973  00F4  00A2               	movwf	??_main
   974  00F5  0822               	movf	??_main,w
   975  00F6  00AB               	movwf	_delayedKey
   976                           
   977                           ;main.c: 468:                             delay = 2600;
   978  00F7  3028               	movlw	40
   979  00F8  00A9               	movwf	_delay
   980  00F9  300A               	movlw	10
   981  00FA  00AA               	movwf	_delay+1
   982                           
   983                           ;main.c: 469:                             ps2Data = 111;
   984  00FB  306F               	movlw	111
   985  00FC  00A2               	movwf	??_main
   986  00FD  0822               	movf	??_main,w
   987  00FE  00B1               	movwf	_ps2Data
   988                           
   989                           ;main.c: 470:                         } else {
   990  00FF  290B               	goto	l1336
   991  0100                     l1330:	
   992                           
   993                           ;main.c: 471:                             ps2Data = 0;
   994  0100  01B1               	clrf	_ps2Data
   995                           
   996                           ;main.c: 473:                         break;
   997                           
   998                           ;main.c: 472:                         }
   999  0101  290B               	goto	l1336
  1000  0102                     l1332:	
  1001                           ;main.c: 474:                     }
  1002                           
  1003                           
  1004                           ;main.c: 475:                 }
  1005  0102  3001               	movlw	1
  1006  0103  00A2               	movwf	??_main
  1007  0104  0822               	movf	??_main,w
  1008  0105  07A5               	addwf	main@i_118,f
  1009  0106  0825               	movf	main@i_118,w
  1010  0107  3A80               	xorlw	128
  1011  0108  3E78               	addlw	-136
  1012  0109  1C03               	skipc
  1013  010A  28E5               	goto	l1322
  1014  010B                     l1336:	
  1015                           
  1016                           ;main.c: 481:                 updateKey(ps2Data, ps2Down );
  1017  010B  0842               	movf	_ps2Down,w
  1018  010C  00A2               	movwf	??_main
  1019  010D  0822               	movf	??_main,w
  1020  010E  009B               	movwf	updateKey@set
  1021  010F  0831               	movf	_ps2Data,w
  1022  0110  236C               	fcall	_updateKey
  1023                           
  1024                           ;main.c: 484:                 sendDataToAltera();
  1025  0111  23C0               	fcall	_sendDataToAltera
  1026  0112                     l1340:	
  1027                           ;main.c: 490:             }
  1028                           
  1029                           ;main.c: 486:             } else if ( ps2Device == 1 ) {
  1030                           
  1031                           
  1032                           ;main.c: 493:             ps2Data = 0;
  1033  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1034  0113  01B1               	clrf	_ps2Data
  1035                           
  1036                           ;main.c: 495:             ps2WaitCode = 0;
  1037  0114  01AF               	clrf	_ps2WaitCode
  1038                           
  1039                           ;main.c: 496:             ps2Down = 1;
  1040  0115  01C2               	clrf	_ps2Down
  1041  0116  0AC2               	incf	_ps2Down,f
  1042                           
  1043                           ;main.c: 497:             ps2NeedEncode = 0;
  1044  0117  01AE               	clrf	_ps2NeedEncode
  1045                           
  1046                           ;main.c: 498:             ps2DataState = 0;
  1047  0118  01B4               	clrf	_ps2DataState
  1048                           
  1049                           ;main.c: 502:         } else if ( delay != 0 ) {
  1050  0119  296E               	goto	l179
  1051  011A                     l1344:	
  1052  011A  0829               	movf	_delay,w
  1053  011B  042A               	iorwf	_delay+1,w
  1054  011C  1903               	btfsc	3,2
  1055  011D  293D               	goto	l1360
  1056                           
  1057                           ;main.c: 504:             delay--;
  1058  011E  3001               	movlw	1
  1059  011F  02A9               	subwf	_delay,f
  1060  0120  3000               	movlw	0
  1061  0121  1C03               	skipc
  1062  0122  03AA               	decf	_delay+1,f
  1063  0123  02AA               	subwf	_delay+1,f
  1064                           
  1065                           ;main.c: 505:             if ( delay == 0 ) {
  1066  0124  0829               	movf	_delay,w
  1067  0125  042A               	iorwf	_delay+1,w
  1068  0126  1D03               	btfss	3,2
  1069  0127  292D               	goto	l1352
  1070                           
  1071                           ;main.c: 507:                 updatePort(0x00, 0);
  1072  0128  0195               	clrf	updatePort@set
  1073  0129  3000               	movlw	0
  1074  012A  21AD               	fcall	_updatePort
  1075                           
  1076                           ;main.c: 509:                 sendDataToAltera();
  1077  012B  23C0               	fcall	_sendDataToAltera
  1078                           
  1079                           ;main.c: 511:             } else if ( delay == 1300 ) {
  1080  012C  296E               	goto	l179
  1081  012D                     l1352:	
  1082  012D  3014               	movlw	20
  1083  012E  1283               	bcf	3,5	;RP0=0, select bank0
  1084  012F  0629               	xorwf	_delay,w
  1085  0130  3005               	movlw	5
  1086  0131  1903               	skipnz
  1087  0132  062A               	xorwf	_delay+1,w
  1088  0133  1D03               	btfss	3,2
  1089  0134  296E               	goto	l179
  1090                           
  1091                           ;main.c: 513:                 updateKey(delayedKey, 1 );
  1092  0135  019B               	clrf	updateKey@set
  1093  0136  0A9B               	incf	updateKey@set,f
  1094  0137  082B               	movf	_delayedKey,w
  1095  0138  236C               	fcall	_updateKey
  1096                           
  1097                           ;main.c: 514:                 delayedKey = 0;
  1098  0139  1283               	bcf	3,5	;RP0=0, select bank0
  1099  013A  01AB               	clrf	_delayedKey
  1100                           
  1101                           ;main.c: 515:                 sendDataToAltera();
  1102  013B  23C0               	fcall	_sendDataToAltera
  1103                           
  1104                           ;main.c: 518:         } else {
  1105                           
  1106                           ;main.c: 516:             }
  1107  013C  296E               	goto	l179
  1108  013D                     l1360:	
  1109                           
  1110                           ;main.c: 521:             kempstonMouseEmulatorDelay++;
  1111  013D  3001               	movlw	1
  1112  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1113  013F  07A7               	addwf	_kempstonMouseEmulatorDelay,f
  1114  0140  1803               	skipnc
  1115  0141  0AA8               	incf	_kempstonMouseEmulatorDelay+1,f
  1116  0142  3000               	movlw	0
  1117  0143  07A8               	addwf	_kempstonMouseEmulatorDelay+1,f
  1118                           
  1119                           ;main.c: 522:             if ( kempstonMouseEmulatorDelay > 2000 ) {
  1120  0144  3007               	movlw	7
  1121  0145  0228               	subwf	_kempstonMouseEmulatorDelay+1,w
  1122  0146  30D1               	movlw	209
  1123  0147  1903               	skipnz
  1124  0148  0227               	subwf	_kempstonMouseEmulatorDelay,w
  1125  0149  1C03               	skipc
  1126  014A  296E               	goto	l179
  1127                           
  1128                           ;main.c: 523:                 if ( numLock ) {
  1129  014B  082D               	movf	_numLock,w
  1130  014C  1903               	btfsc	3,2
  1131  014D  296A               	goto	l1384
  1132                           
  1133                           ;main.c: 524:                     if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]
      +                          -=2;
  1134  014E  1C35               	btfss	_kempstonMouseEmulatorKeys,0
  1135  014F  2952               	goto	l1368
  1136  0150  3002               	movlw	2
  1137  0151  02C0               	subwf	_outPorts+9,f
  1138  0152                     l1368:	
  1139                           
  1140                           ;main.c: 525:                     if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]
      +                          +=2;
  1141  0152  1CB5               	btfss	_kempstonMouseEmulatorKeys,1
  1142  0153  2958               	goto	l1372
  1143  0154  3002               	movlw	2
  1144  0155  00A2               	movwf	??_main
  1145  0156  0822               	movf	??_main,w
  1146  0157  07C0               	addwf	_outPorts+9,f
  1147  0158                     l1372:	
  1148                           
  1149                           ;main.c: 526:                     if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10
      +                          ]+=2;
  1150  0158  1D35               	btfss	_kempstonMouseEmulatorKeys,2
  1151  0159  295E               	goto	l1376
  1152  015A  3002               	movlw	2
  1153  015B  00A2               	movwf	??_main
  1154  015C  0822               	movf	??_main,w
  1155  015D  07C1               	addwf	_outPorts+10,f
  1156  015E                     l1376:	
  1157                           
  1158                           ;main.c: 527:                     if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10
      +                          ]-=2;
  1159  015E  1DB5               	btfss	_kempstonMouseEmulatorKeys,3
  1160  015F  2962               	goto	l1380
  1161  0160  3002               	movlw	2
  1162  0161  02C1               	subwf	_outPorts+10,f
  1163  0162                     l1380:	
  1164                           
  1165                           ;main.c: 528:                     if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8
      +                          ] &= 254;
  1166  0162  1E35               	btfss	_kempstonMouseEmulatorKeys,4
  1167  0163  2969               	goto	l191
  1168  0164  30FE               	movlw	254
  1169  0165  00A2               	movwf	??_main
  1170  0166  0822               	movf	??_main,w
  1171  0167  05BF               	andwf	_outPorts+8,f
  1172  0168  296A               	goto	l1384
  1173  0169                     l191:	
  1174                           ;main.c: 529:                     else outPorts[8] |= 1;
  1175                           
  1176  0169  143F               	bsf	_outPorts+8,0
  1177  016A                     l1384:	
  1178                           ;main.c: 530:                 }
  1179                           
  1180                           
  1181                           ;main.c: 532:                 sendDataToAltera();
  1182  016A  23C0               	fcall	_sendDataToAltera
  1183                           
  1184                           ;main.c: 534:                 kempstonMouseEmulatorDelay = 0;
  1185  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1186  016C  01A7               	clrf	_kempstonMouseEmulatorDelay
  1187  016D  01A8               	clrf	_kempstonMouseEmulatorDelay+1
  1188  016E                     l179:	
  1189                           ;main.c: 537:         }
  1190                           
  1191                           ;main.c: 535:             }
  1192                           
  1193  016E  0064               	clrwdt	;# 
  1194                           
  1195                           ;main.c: 540:     }
  1196  016F  284E               	goto	l1256
  1197  0170                     __end_of_main:	
  1198                           
  1199                           	psect	text1
  1200  036C                     __ptext1:	
  1201 ;; *************** function _updateKey *****************
  1202 ;; Defined at:
  1203 ;;		line 178 in file "main.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;  key             1    wreg     unsigned char 
  1206 ;;  set             1   15[BANK0 ] unsigned char 
  1207 ;; Auto vars:     Size  Location     Type
  1208 ;;  key             1   20[BANK0 ] unsigned char 
  1209 ;;  code            1   21[BANK0 ] unsigned char 
  1210 ;;  localCtrl       1   19[BANK0 ] unsigned char 
  1211 ;;  localShift      1   17[BANK0 ] unsigned char 
  1212 ;; Return value:  Size  Location     Type
  1213 ;;                  1    wreg      void 
  1214 ;; Registers used:
  1215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1216 ;; Tracked objects:
  1217 ;;		On entry : 0/0
  1218 ;;		On exit  : 0/0
  1219 ;;		Unchanged: 0/0
  1220 ;; Data sizes:     COMMON   BANK0
  1221 ;;      Params:         0       1
  1222 ;;      Locals:         0       5
  1223 ;;      Temps:          0       1
  1224 ;;      Totals:         0       7
  1225 ;;Total ram usage:        7 bytes
  1226 ;; Hardware stack levels used:    1
  1227 ;; Hardware stack levels required when called:    3
  1228 ;; This function calls:
  1229 ;;		_updatePort
  1230 ;; This function is called by:
  1231 ;;		_main
  1232 ;; This function uses a non-reentrant model
  1233 ;;
  1234                           
  1235                           
  1236                           ;psect for function _updateKey
  1237  036C                     _updateKey:	
  1238                           
  1239                           ;incstack = 0
  1240                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1241                           ;updateKey@key stored from wreg
  1242  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1243  036D  00A0               	movwf	updateKey@key
  1244                           
  1245                           ;main.c: 178: void updateKey(uint8_t key, uint8_t set);main.c: 179: {;main.c: 180:     u
      +                          int8_t code = 0xFF;
  1246  036E  30FF               	movlw	255
  1247  036F  009C               	movwf	??_updateKey
  1248  0370  081C               	movf	??_updateKey,w
  1249  0371  00A1               	movwf	updateKey@code
  1250                           
  1251                           ;main.c: 181:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  1252  0372  019E               	clrf	_updateKey$97
  1253  0373  0836               	movf	_shift_ctrl_alt,w
  1254  0374  3903               	andlw	3
  1255  0375  1903               	btfsc	3,2
  1256  0376  2B7C               	goto	l1092
  1257  0377  082C               	movf	_replaced,w
  1258  0378  1D03               	btfss	3,2
  1259  0379  2B7C               	goto	l1092
  1260  037A  019E               	clrf	_updateKey$97
  1261  037B  0A9E               	incf	_updateKey$97,f
  1262  037C                     l1092:	
  1263  037C  081E               	movf	_updateKey$97,w
  1264  037D  009C               	movwf	??_updateKey
  1265  037E  081C               	movf	??_updateKey,w
  1266  037F  009D               	movwf	updateKey@localShift
  1267                           
  1268                           ;main.c: 182:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  1269  0380  0836               	movf	_shift_ctrl_alt,w
  1270  0381  390C               	andlw	12
  1271  0382  1903               	btfsc	3,2
  1272  0383  2B86               	goto	u840
  1273  0384  3001               	movlw	1
  1274  0385  2B87               	goto	u850
  1275  0386                     u840:	
  1276  0386  3000               	movlw	0
  1277  0387                     u850:	
  1278  0387  009C               	movwf	??_updateKey
  1279  0388  081C               	movf	??_updateKey,w
  1280  0389  009F               	movwf	updateKey@localCtrl
  1281                           
  1282                           ;main.c: 183:     if ( key < 128 ) code = codeToMatrix[key];
  1283  038A  3080               	movlw	128
  1284  038B  0220               	subwf	updateKey@key,w
  1285  038C  1803               	skipnc
  1286  038D  2B95               	goto	l1100
  1287  038E  0820               	movf	updateKey@key,w
  1288  038F  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  1289  0390  0084               	movwf	4
  1290  0391  2200               	fcall	stringdir
  1291  0392  009C               	movwf	??_updateKey
  1292  0393  081C               	movf	??_updateKey,w
  1293  0394  00A1               	movwf	updateKey@code
  1294  0395                     l1100:	
  1295                           
  1296                           ;main.c: 184:     if ( code != 0xFF ) {
  1297  0395  0A21               	incf	updateKey@code,w
  1298  0396  1903               	btfsc	3,2
  1299  0397  2BAF               	goto	l1108
  1300                           
  1301                           ;main.c: 185:         updatePort(code, set);
  1302  0398  081B               	movf	updateKey@set,w
  1303  0399  009C               	movwf	??_updateKey
  1304  039A  081C               	movf	??_updateKey,w
  1305  039B  0095               	movwf	updatePort@set
  1306  039C  0821               	movf	updateKey@code,w
  1307  039D  21AD               	fcall	_updatePort
  1308                           
  1309                           ;main.c: 186:         localShift |= ((code & 64) > 0);
  1310  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1311  039F  1F21               	btfss	updateKey@code,6
  1312  03A0  2BA3               	goto	u880
  1313  03A1  3001               	movlw	1
  1314  03A2  2BA4               	goto	u890
  1315  03A3                     u880:	
  1316  03A3  3000               	movlw	0
  1317  03A4                     u890:	
  1318  03A4  009C               	movwf	??_updateKey
  1319  03A5  081C               	movf	??_updateKey,w
  1320  03A6  049D               	iorwf	updateKey@localShift,f
  1321                           
  1322                           ;main.c: 187:         localCtrl |= ((code & 128) > 0);
  1323  03A7  1FA1               	btfss	updateKey@code,7
  1324  03A8  2BAB               	goto	u900
  1325  03A9  3001               	movlw	1
  1326  03AA  2BAC               	goto	u910
  1327  03AB                     u900:	
  1328  03AB  3000               	movlw	0
  1329  03AC                     u910:	
  1330  03AC  009C               	movwf	??_updateKey
  1331  03AD  081C               	movf	??_updateKey,w
  1332  03AE  049F               	iorwf	updateKey@localCtrl,f
  1333  03AF                     l1108:	
  1334                           ;main.c: 188:     }
  1335                           
  1336                           
  1337                           ;main.c: 189:     if ( set ) {
  1338  03AF  081B               	movf	updateKey@set,w
  1339  03B0  1903               	btfsc	3,2
  1340  03B1  0008               	return
  1341                           
  1342                           ;main.c: 190:         updatePort(0x00, localShift );
  1343  03B2  081D               	movf	updateKey@localShift,w
  1344  03B3  009C               	movwf	??_updateKey
  1345  03B4  081C               	movf	??_updateKey,w
  1346  03B5  0095               	movwf	updatePort@set
  1347  03B6  3000               	movlw	0
  1348  03B7  21AD               	fcall	_updatePort
  1349                           
  1350                           ;main.c: 191:         updatePort(0x0F, localCtrl );
  1351  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  1352  03B9  081F               	movf	updateKey@localCtrl,w
  1353  03BA  009C               	movwf	??_updateKey
  1354  03BB  081C               	movf	??_updateKey,w
  1355  03BC  0095               	movwf	updatePort@set
  1356  03BD  300F               	movlw	15
  1357  03BE  21AD               	fcall	_updatePort
  1358  03BF  0008               	return
  1359  03C0                     __end_of_updateKey:	
  1360                           ;main.c: 192:     }
  1361                           
  1362                           
  1363                           	psect	text2
  1364  01AD                     __ptext2:	
  1365 ;; *************** function _updatePort *****************
  1366 ;; Defined at:
  1367 ;;		line 169 in file "main.c"
  1368 ;; Parameters:    Size  Location     Type
  1369 ;;  bit_id          1    wreg     unsigned char 
  1370 ;;  set             1    9[BANK0 ] unsigned char 
  1371 ;; Auto vars:     Size  Location     Type
  1372 ;;  bit_id          1   14[BANK0 ] unsigned char 
  1373 ;;  a               1   13[BANK0 ] unsigned char 
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      void 
  1376 ;; Registers used:
  1377 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMMON   BANK0
  1383 ;;      Params:         0       1
  1384 ;;      Locals:         0       2
  1385 ;;      Temps:          0       3
  1386 ;;      Totals:         0       6
  1387 ;;Total ram usage:        6 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    2
  1390 ;; This function calls:
  1391 ;;		Nothing
  1392 ;; This function is called by:
  1393 ;;		_updateKey
  1394 ;;		_main
  1395 ;; This function uses a non-reentrant model
  1396 ;;
  1397                           
  1398                           
  1399                           ;psect for function _updatePort
  1400  01AD                     _updatePort:	
  1401                           
  1402                           ;incstack = 0
  1403                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1404                           ;updatePort@bit_id stored from wreg
  1405  01AD  1283               	bcf	3,5	;RP0=0, select bank0
  1406  01AE  009A               	movwf	updatePort@bit_id
  1407                           
  1408                           ;main.c: 169: void updatePort(uint8_t bit_id, uint8_t set);main.c: 170: {;main.c: 171:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  1409  01AF  3001               	movlw	1
  1410  01B0  0096               	movwf	??_updatePort
  1411  01B1  081A               	movf	updatePort@bit_id,w
  1412  01B2  0097               	movwf	??_updatePort+1
  1413  01B3  3003               	movlw	3
  1414  01B4                     u795:	
  1415  01B4  1003               	clrc
  1416  01B5  0C97               	rrf	??_updatePort+1,f
  1417  01B6  3EFF               	addlw	-1
  1418  01B7  1D03               	skipz
  1419  01B8  29B4               	goto	u795
  1420  01B9  0817               	movf	??_updatePort+1,w
  1421  01BA  3907               	andlw	7
  1422  01BB  3E01               	addlw	1
  1423  01BC  29BF               	goto	u804
  1424  01BD                     u805:	
  1425  01BD  1003               	clrc
  1426  01BE  0D96               	rlf	??_updatePort,f
  1427  01BF                     u804:	
  1428  01BF  3EFF               	addlw	-1
  1429  01C0  1D03               	skipz
  1430  01C1  29BD               	goto	u805
  1431  01C2  0816               	movf	??_updatePort,w
  1432  01C3  0098               	movwf	??_updatePort+2
  1433  01C4  0818               	movf	??_updatePort+2,w
  1434  01C5  0099               	movwf	updatePort@a
  1435                           
  1436                           ;main.c: 172:     if ( set ) outPorts[bit_id & 7] |= a;
  1437  01C6  0815               	movf	updatePort@set,w
  1438  01C7  1903               	btfsc	3,2
  1439  01C8  29D3               	goto	l1082
  1440  01C9  0819               	movf	updatePort@a,w
  1441  01CA  0096               	movwf	??_updatePort
  1442  01CB  081A               	movf	updatePort@bit_id,w
  1443  01CC  3907               	andlw	7
  1444  01CD  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1445  01CE  0084               	movwf	4
  1446  01CF  0816               	movf	??_updatePort,w
  1447  01D0  1383               	bcf	3,7	;select IRP bank0
  1448  01D1  0480               	iorwf	0,f
  1449  01D2  0008               	return
  1450  01D3                     l1082:	
  1451                           ;main.c: 173:     else outPorts[bit_id & 7] &= ~a;
  1452                           
  1453  01D3  0919               	comf	updatePort@a,w
  1454  01D4  0096               	movwf	??_updatePort
  1455  01D5  081A               	movf	updatePort@bit_id,w
  1456  01D6  3907               	andlw	7
  1457  01D7  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1458  01D8  0084               	movwf	4
  1459  01D9  0816               	movf	??_updatePort,w
  1460  01DA  1383               	bcf	3,7	;select IRP bank0
  1461  01DB  0580               	andwf	0,f
  1462  01DC  0008               	return
  1463  01DD                     __end_of_updatePort:	
  1464                           
  1465                           	psect	text3
  1466  03C0                     __ptext3:	
  1467 ;; *************** function _sendDataToAltera *****************
  1468 ;; Defined at:
  1469 ;;		line 229 in file "main.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;  i               1   13[BANK0 ] char 
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMMON   BANK0
  1483 ;;      Params:         0       0
  1484 ;;      Locals:         0       3
  1485 ;;      Temps:          0       2
  1486 ;;      Totals:         0       5
  1487 ;;Total ram usage:        5 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    3
  1490 ;; This function calls:
  1491 ;;		_myDelay
  1492 ;; This function is called by:
  1493 ;;		_main
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496                           
  1497                           
  1498                           ;psect for function _sendDataToAltera
  1499  03C0                     _sendDataToAltera:	
  1500                           
  1501                           ;main.c: 232:     RA2 = 1;
  1502                           
  1503                           ;incstack = 0
  1504                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1505  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  1506  03C1  1505               	bsf	5,2	;volatile
  1507                           
  1508                           ;main.c: 233:     RA1 = 1;
  1509  03C2  1485               	bsf	5,1	;volatile
  1510                           
  1511                           ;main.c: 234:     myDelay();
  1512  03C3  21F0               	fcall	_myDelay
  1513                           
  1514                           ;main.c: 235:     RA2 = 0;
  1515  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  1516  03C5  1105               	bcf	5,2	;volatile
  1517                           
  1518                           ;main.c: 236:     myDelay();
  1519  03C6  21F0               	fcall	_myDelay
  1520                           
  1521                           ;main.c: 237:     RA2 = 1;
  1522  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  1523  03C8  1505               	bsf	5,2	;volatile
  1524                           
  1525                           ;main.c: 238:     RA1 = 0;
  1526  03C9  1085               	bcf	5,1	;volatile
  1527                           
  1528                           ;main.c: 239:     myDelay();
  1529  03CA  21F0               	fcall	_myDelay
  1530                           
  1531                           ;main.c: 240:     for(int8_t i=0;i<11;i++) {
  1532  03CB  1283               	bcf	3,5	;RP0=0, select bank0
  1533  03CC  0199               	clrf	sendDataToAltera@i
  1534  03CD  0819               	movf	sendDataToAltera@i,w
  1535  03CE  3A80               	xorlw	128
  1536  03CF  3E75               	addlw	-139
  1537  03D0  1803               	btfsc	3,0
  1538  03D1  2BFC               	goto	l132
  1539  03D2                     l131:	
  1540                           
  1541                           ;main.c: 241:         RA2 = 1;
  1542  03D2  1505               	bsf	5,2	;volatile
  1543                           
  1544                           ;main.c: 242:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1545  03D3  0819               	movf	sendDataToAltera@i,w
  1546  03D4  3A80               	xorlw	128
  1547  03D5  3E78               	addlw	-136
  1548  03D6  1C03               	skipc
  1549  03D7  2BE3               	goto	l1132
  1550  03D8  0819               	movf	sendDataToAltera@i,w
  1551  03D9  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1552  03DA  0084               	movwf	4
  1553  03DB  1383               	bcf	3,7	;select IRP bank0
  1554  03DC  0800               	movf	0,w
  1555  03DD  0095               	movwf	??_sendDataToAltera
  1556  03DE  0196               	clrf	??_sendDataToAltera+1
  1557  03DF  0815               	movf	??_sendDataToAltera,w
  1558  03E0  0097               	movwf	_sendDataToAltera$104
  1559  03E1  0816               	movf	??_sendDataToAltera+1,w
  1560  03E2  2BED               	goto	L1
  1561  03E3                     l1132:	
  1562  03E3  0819               	movf	sendDataToAltera@i,w
  1563  03E4  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1564  03E5  0084               	movwf	4
  1565  03E6  1383               	bcf	3,7	;select IRP bank0
  1566  03E7  0800               	movf	0,w
  1567  03E8  0095               	movwf	??_sendDataToAltera
  1568  03E9  0196               	clrf	??_sendDataToAltera+1
  1569  03EA  0915               	comf	??_sendDataToAltera,w
  1570  03EB  0097               	movwf	_sendDataToAltera$104
  1571  03EC  0916               	comf	??_sendDataToAltera+1,w
  1572  03ED                     L1:	
  1573  03ED  0098               	movwf	_sendDataToAltera$104+1
  1574  03EE  0817               	movf	_sendDataToAltera$104,w
  1575  03EF  0086               	movwf	6	;volatile
  1576                           
  1577                           ;main.c: 243:         RA2 = 0;
  1578  03F0  1105               	bcf	5,2	;volatile
  1579                           
  1580                           ;main.c: 244:         myDelay();
  1581  03F1  21F0               	fcall	_myDelay
  1582                           
  1583                           ;main.c: 245:     }
  1584  03F2  3001               	movlw	1
  1585  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  1586  03F4  0095               	movwf	??_sendDataToAltera
  1587  03F5  0815               	movf	??_sendDataToAltera,w
  1588  03F6  0799               	addwf	sendDataToAltera@i,f
  1589  03F7  0819               	movf	sendDataToAltera@i,w
  1590  03F8  3A80               	xorlw	128
  1591  03F9  3E75               	addlw	-139
  1592  03FA  1C03               	skipc
  1593  03FB  2BD2               	goto	l131
  1594  03FC                     l132:	
  1595                           
  1596                           ;main.c: 246:     RA2 = 1;
  1597  03FC  1505               	bsf	5,2	;volatile
  1598                           
  1599                           ;main.c: 247:     PORTB = 0xFF;
  1600  03FD  30FF               	movlw	255
  1601  03FE  0086               	movwf	6	;volatile
  1602  03FF  0008               	return
  1603  0400                     __end_of_sendDataToAltera:	
  1604                           
  1605                           	psect	text4
  1606  01F0                     __ptext4:	
  1607 ;; *************** function _myDelay *****************
  1608 ;; Defined at:
  1609 ;;		line 197 in file "main.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;		None
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;		None
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		None
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0
  1623 ;;      Params:         0       0
  1624 ;;      Locals:         0       0
  1625 ;;      Temps:          0       0
  1626 ;;      Totals:         0       0
  1627 ;;Total ram usage:        0 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    2
  1630 ;; This function calls:
  1631 ;;		Nothing
  1632 ;; This function is called by:
  1633 ;;		_sendDataToAltera
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           
  1638                           ;psect for function _myDelay
  1639  01F0                     _myDelay:	
  1640                           
  1641                           ;incstack = 0
  1642                           ; Regs used in _myDelay: []
  1643  01F0  0008               	return
  1644  01F1                     __end_of_myDelay:	
  1645                           
  1646                           	psect	text5
  1647  0170                     __ptext5:	
  1648 ;; *************** function _calculateBitsFromTable *****************
  1649 ;; Defined at:
  1650 ;;		line 300 in file "main.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;  bits            1    wreg     PTR unsigned char 
  1653 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1654 ;;  table           1    9[BANK0 ] PTR unsigned char 
  1655 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  1656 ;;  count           1   10[BANK0 ] unsigned char 
  1657 ;;  clearIfFound    1   11[BANK0 ] unsigned char 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  bits            1   14[BANK0 ] PTR unsigned char 
  1660 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1661 ;;  i               1   15[BANK0 ] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  1    wreg      void 
  1664 ;; Registers used:
  1665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMMON   BANK0
  1671 ;;      Params:         0       3
  1672 ;;      Locals:         0       2
  1673 ;;      Temps:          0       2
  1674 ;;      Totals:         0       7
  1675 ;;Total ram usage:        7 bytes
  1676 ;; Hardware stack levels used:    2
  1677 ;; Hardware stack levels required when called:    2
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_main
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           
  1686                           ;psect for function _calculateBitsFromTable
  1687  0170                     _calculateBitsFromTable:	
  1688                           
  1689                           ;incstack = 0
  1690                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  1691                           ;calculateBitsFromTable@bits stored from wreg
  1692  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1693  0171  009A               	movwf	calculateBitsFromTable@bits
  1694                           
  1695                           ;main.c: 300: void calculateBitsFromTable(uint8_t* bits, uint8_t table[], uint8_t count,
      +                           uint8_t clearIfFound);main.c: 301: {;main.c: 302:     for(uint8_t i = 0; i < count;i++)
      +                           {
  1696  0172  019B               	clrf	calculateBitsFromTable@i
  1697  0173                     l1162:	
  1698  0173  0816               	movf	calculateBitsFromTable@count,w
  1699  0174  021B               	subwf	calculateBitsFromTable@i,w
  1700  0175  1803               	btfsc	3,0
  1701  0176  0008               	return
  1702                           
  1703                           ;main.c: 303:         if ( ps2Data == table[i] ) {
  1704  0177  081B               	movf	calculateBitsFromTable@i,w
  1705  0178  0715               	addwf	calculateBitsFromTable@table,w
  1706  0179  0084               	movwf	4
  1707  017A  2200               	fcall	stringdir
  1708  017B  0631               	xorwf	_ps2Data,w
  1709  017C  1D03               	skipz
  1710  017D  29A8               	goto	l1160
  1711                           
  1712                           ;main.c: 304:             if ( ps2Down ) {
  1713  017E  0842               	movf	_ps2Down,w
  1714  017F  1903               	btfsc	3,2
  1715  0180  2992               	goto	l1154
  1716                           
  1717                           ;main.c: 305:                 (*bits) |= (1 << i);
  1718  0181  3001               	movlw	1
  1719  0182  0098               	movwf	??_calculateBitsFromTable
  1720  0183  0A1B               	incf	calculateBitsFromTable@i,w
  1721  0184  2987               	goto	u984
  1722  0185                     u985:	
  1723  0185  1003               	clrc
  1724  0186  0D98               	rlf	??_calculateBitsFromTable,f
  1725  0187                     u984:	
  1726  0187  3EFF               	addlw	-1
  1727  0188  1D03               	skipz
  1728  0189  2985               	goto	u985
  1729  018A  0818               	movf	??_calculateBitsFromTable,w
  1730  018B  0099               	movwf	??_calculateBitsFromTable+1
  1731  018C  081A               	movf	calculateBitsFromTable@bits,w
  1732  018D  0084               	movwf	4
  1733  018E  0819               	movf	??_calculateBitsFromTable+1,w
  1734  018F  1383               	bcf	3,7	;select IRP bank0
  1735  0190  0480               	iorwf	0,f
  1736                           
  1737                           ;main.c: 306:             } else {
  1738  0191  29A3               	goto	l1156
  1739  0192                     l1154:	
  1740                           
  1741                           ;main.c: 307:                 (*bits) &= ~(1 << i);
  1742  0192  3001               	movlw	1
  1743  0193  0098               	movwf	??_calculateBitsFromTable
  1744  0194  0A1B               	incf	calculateBitsFromTable@i,w
  1745  0195  2998               	goto	u994
  1746  0196                     u995:	
  1747  0196  1003               	clrc
  1748  0197  0D98               	rlf	??_calculateBitsFromTable,f
  1749  0198                     u994:	
  1750  0198  3EFF               	addlw	-1
  1751  0199  1D03               	skipz
  1752  019A  2996               	goto	u995
  1753  019B  0818               	movf	??_calculateBitsFromTable,w
  1754  019C  3AFF               	xorlw	255
  1755  019D  0099               	movwf	??_calculateBitsFromTable+1
  1756  019E  081A               	movf	calculateBitsFromTable@bits,w
  1757  019F  0084               	movwf	4
  1758  01A0  0819               	movf	??_calculateBitsFromTable+1,w
  1759  01A1  1383               	bcf	3,7	;select IRP bank0
  1760  01A2  0580               	andwf	0,f
  1761  01A3                     l1156:	
  1762                           ;main.c: 308:             }
  1763                           
  1764                           
  1765                           ;main.c: 309:             if ( clearIfFound ) {
  1766  01A3  0817               	movf	calculateBitsFromTable@clearIfFound,w
  1767  01A4  1903               	btfsc	3,2
  1768  01A5  0008               	return
  1769                           
  1770                           ;main.c: 310:                 ps2Data = 0;
  1771  01A6  01B1               	clrf	_ps2Data
  1772                           
  1773                           ;main.c: 312:             break;
  1774                           
  1775                           ;main.c: 311:             }
  1776  01A7  0008               	return
  1777  01A8                     l1160:	
  1778                           ;main.c: 313:         }
  1779                           
  1780                           
  1781                           ;main.c: 314:     }
  1782  01A8  3001               	movlw	1
  1783  01A9  0098               	movwf	??_calculateBitsFromTable
  1784  01AA  0818               	movf	??_calculateBitsFromTable,w
  1785  01AB  079B               	addwf	calculateBitsFromTable@i,f
  1786  01AC  2973               	goto	l1162
  1787  01AD                     __end_of_calculateBitsFromTable:	
  1788                           
  1789                           	psect	text6
  1790  02E0                     __ptext6:	
  1791 ;; *************** function _myIsr *****************
  1792 ;; Defined at:
  1793 ;;		line 102 in file "main.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;		None
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;  i               1    8[BANK0 ] char 
  1798 ;; Return value:  Size  Location     Type
  1799 ;;                  1    wreg      void 
  1800 ;; Registers used:
  1801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMMON   BANK0
  1807 ;;      Params:         0       0
  1808 ;;      Locals:         0       3
  1809 ;;      Temps:          0       6
  1810 ;;      Totals:         0       9
  1811 ;;Total ram usage:        9 bytes
  1812 ;; Hardware stack levels used:    2
  1813 ;; This function calls:
  1814 ;;		Nothing
  1815 ;; This function is called by:
  1816 ;;		Interrupt level 1
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           
  1821                           ;psect for function _myIsr
  1822  02E0                     _myIsr:	
  1823                           
  1824                           ;main.c: 104:     if(T0IE && T0IF){
  1825  02E0  1A8B               	btfsc	11,5	;volatile
  1826  02E1  1D0B               	btfss	11,2	;volatile
  1827  02E2  2B60               	goto	i1l111
  1828                           
  1829                           ;main.c: 106:         T0IF=0;
  1830  02E3  110B               	bcf	11,2	;volatile
  1831                           
  1832                           ;main.c: 107:         TMR0 = 255;
  1833  02E4  30FF               	movlw	255
  1834  02E5  0081               	movwf	1	;volatile
  1835                           
  1836                           ;main.c: 111:         if ( ps2DataState == 0 ) {
  1837  02E6  0834               	movf	_ps2DataState,w
  1838  02E7  1D03               	btfss	3,2
  1839  02E8  2AF5               	goto	i1l1184
  1840                           
  1841                           ;main.c: 112:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  1842  02E9  1E05               	btfss	5,4	;volatile
  1843  02EA  1985               	btfsc	5,3	;volatile
  1844  02EB  2B60               	goto	i1l111
  1845                           
  1846                           ;main.c: 113:                 ps2BitsCount = 0;
  1847  02EC  01B2               	clrf	_ps2BitsCount
  1848                           
  1849                           ;main.c: 114:                 ps2Bits = 0;
  1850  02ED  01B3               	clrf	_ps2Bits
  1851                           
  1852                           ;main.c: 115:                 ps2DataState = 1;
  1853  02EE  01B4               	clrf	_ps2DataState
  1854  02EF  0AB4               	incf	_ps2DataState,f
  1855                           
  1856                           ;main.c: 116:                 ps2Device = PORTAbits.RA0;
  1857  02F0  3000               	movlw	0
  1858  02F1  1805               	btfsc	5,0	;volatile
  1859  02F2  3001               	movlw	1
  1860  02F3  00B0               	movwf	_ps2Device
  1861                           
  1862                           ;main.c: 118:         } else if ( ps2DataState == 1 ) {
  1863                           
  1864                           ;main.c: 117:             }
  1865  02F4  2B60               	goto	i1l111
  1866  02F5                     i1l1184:	
  1867  02F5  0334               	decf	_ps2DataState,w
  1868  02F6  1D03               	btfss	3,2
  1869  02F7  2B5C               	goto	i1l1232
  1870                           
  1871                           ;main.c: 119:             if ( ps2BitsCount < 8 ) {
  1872  02F8  0832               	movf	_ps2BitsCount,w
  1873  02F9  3A80               	xorlw	128
  1874  02FA  3E78               	addlw	-136
  1875  02FB  1803               	skipnc
  1876  02FC  2B0D               	goto	i1l1192
  1877                           
  1878                           ;main.c: 120:                 if ( PORTAbits.RA3 ) {
  1879  02FD  1D85               	btfss	5,3	;volatile
  1880  02FE  2B11               	goto	i1l1194
  1881                           
  1882                           ;main.c: 121:                     ps2Bits |= ( 1 << ps2BitsCount );
  1883  02FF  3001               	movlw	1
  1884  0300  008C               	movwf	??_myIsr
  1885  0301  0A32               	incf	_ps2BitsCount,w
  1886  0302  2B05               	goto	u110_24
  1887  0303                     u110_25:	
  1888  0303  1003               	clrc
  1889  0304  0D8C               	rlf	??_myIsr,f
  1890  0305                     u110_24:	
  1891  0305  3EFF               	addlw	-1
  1892  0306  1D03               	skipz
  1893  0307  2B03               	goto	u110_25
  1894  0308  080C               	movf	??_myIsr,w
  1895  0309  008D               	movwf	??_myIsr+1
  1896  030A  080D               	movf	??_myIsr+1,w
  1897  030B  04B3               	iorwf	_ps2Bits,f
  1898                           
  1899                           ;main.c: 122:                 }
  1900  030C  2B11               	goto	i1l1194
  1901  030D                     i1l1192:	
  1902                           ;main.c: 124:             } else if ( ps2BitsCount == 8 ) {
  1903                           
  1904                           ;main.c: 123:                 ps2BitsCount++;
  1905                           
  1906  030D  3008               	movlw	8
  1907  030E  0632               	xorwf	_ps2BitsCount,w
  1908  030F  1D03               	btfss	3,2
  1909  0310  2B16               	goto	i1l1196
  1910  0311                     i1l1194:	
  1911                           
  1912                           ;main.c: 125:                 ps2BitsCount++;
  1913  0311  3001               	movlw	1
  1914  0312  008C               	movwf	??_myIsr
  1915  0313  080C               	movf	??_myIsr,w
  1916  0314  07B2               	addwf	_ps2BitsCount,f
  1917                           
  1918                           ;main.c: 126:             } else if ( ps2BitsCount == 9 ) {
  1919  0315  2B60               	goto	i1l111
  1920  0316                     i1l1196:	
  1921  0316  3009               	movlw	9
  1922  0317  0632               	xorwf	_ps2BitsCount,w
  1923  0318  1D03               	btfss	3,2
  1924  0319  2B60               	goto	i1l111
  1925                           
  1926                           ;main.c: 128:                 if ( ps2NeedEncode ) {
  1927  031A  082E               	movf	_ps2NeedEncode,w
  1928  031B  1903               	btfsc	3,2
  1929  031C  2B35               	goto	i1l1214
  1930                           
  1931                           ;main.c: 129:                     for (int8_t i=0; i < 27; i+=2) {
  1932  031D  0194               	clrf	myIsr@i
  1933  031E                     L4:	
  1934  031E  0814               	movf	myIsr@i,w
  1935  031F  3A80               	xorlw	128
  1936  0320  3E65               	addlw	-155
  1937  0321  1803               	btfsc	3,0
  1938  0322  2B48               	goto	i1l1220
  1939                           
  1940                           ;main.c: 130:                         if ( ps2Bits == replaceTwoBytesCodes[i] ) {
  1941  0323  0814               	movf	myIsr@i,w
  1942  0324  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1943  0325  0084               	movwf	4
  1944  0326  2200               	fcall	stringdir
  1945  0327  0633               	xorwf	_ps2Bits,w
  1946  0328  1D03               	skipz
  1947  0329  2B30               	goto	i1l1210
  1948                           
  1949                           ;main.c: 131:                             ps2Data = replaceTwoBytesCodes[i+1];
  1950  032A  0814               	movf	myIsr@i,w
  1951  032B  3E01               	addlw	1
  1952  032C  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1953  032D  0084               	movwf	4
  1954  032E  2200               	fcall	stringdir
  1955  032F  2B45               	goto	L2
  1956  0330                     i1l1210:	
  1957                           ;main.c: 133:                         }
  1958                           
  1959                           ;main.c: 132:                             break;
  1960                           
  1961                           
  1962                           ;main.c: 134:                     }
  1963  0330  3002               	movlw	2
  1964  0331  008C               	movwf	??_myIsr
  1965  0332  080C               	movf	??_myIsr,w
  1966  0333  0794               	addwf	myIsr@i,f
  1967  0334  2B1E               	goto	L4
  1968  0335                     i1l1214:	
  1969                           ;main.c: 135:                 } else {
  1970                           
  1971                           
  1972                           ;main.c: 136:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  1973  0335  3083               	movlw	131
  1974  0336  0633               	xorwf	_ps2Bits,w
  1975  0337  1903               	btfsc	3,2
  1976  0338  2B40               	goto	i1l1218
  1977  0339  0833               	movf	_ps2Bits,w
  1978  033A  008C               	movwf	??_myIsr
  1979  033B  018D               	clrf	??_myIsr+1
  1980  033C  080C               	movf	??_myIsr,w
  1981  033D  0092               	movwf	_myIsr$87
  1982  033E  080D               	movf	??_myIsr+1,w
  1983  033F  2B43               	goto	L3
  1984  0340                     i1l1218:	
  1985  0340  303F               	movlw	63
  1986  0341  0092               	movwf	_myIsr$87
  1987  0342  3000               	movlw	0
  1988  0343                     L3:	
  1989  0343  0093               	movwf	_myIsr$87+1
  1990  0344  0812               	movf	_myIsr$87,w
  1991  0345                     L2:	
  1992  0345  008C               	movwf	??_myIsr
  1993  0346  080C               	movf	??_myIsr,w
  1994  0347  00B1               	movwf	_ps2Data
  1995  0348                     i1l1220:	
  1996                           ;main.c: 137:                 }
  1997                           
  1998                           
  1999                           ;main.c: 138:                 if ( ps2Bits == 0xF0 ) {
  2000  0348  30F0               	movlw	240
  2001  0349  0633               	xorwf	_ps2Bits,w
  2002  034A  1D03               	btfss	3,2
  2003  034B  2B4F               	goto	i1l1224
  2004                           
  2005                           ;main.c: 139:                     ps2DataState = 0;
  2006  034C  01B4               	clrf	_ps2DataState
  2007                           
  2008                           ;main.c: 140:                     ps2Down = 0;
  2009  034D  01C2               	clrf	_ps2Down
  2010                           
  2011                           ;main.c: 141:                 } else if ( ps2Bits == 0xE0 ) {
  2012  034E  2B60               	goto	i1l111
  2013  034F                     i1l1224:	
  2014  034F  30E0               	movlw	224
  2015  0350  0633               	xorwf	_ps2Bits,w
  2016  0351  1D03               	btfss	3,2
  2017  0352  2B57               	goto	i1l1230
  2018                           
  2019                           ;main.c: 142:                     ps2DataState = 0;
  2020  0353  01B4               	clrf	_ps2DataState
  2021                           
  2022                           ;main.c: 143:                     ps2NeedEncode = 1;
  2023  0354  01AE               	clrf	_ps2NeedEncode
  2024  0355  0AAE               	incf	_ps2NeedEncode,f
  2025                           
  2026                           ;main.c: 152:                 } else {
  2027  0356  2B60               	goto	i1l111
  2028  0357                     i1l1230:	
  2029                           
  2030                           ;main.c: 153:                     ps2DataState = 2;
  2031  0357  3002               	movlw	2
  2032  0358  008C               	movwf	??_myIsr
  2033  0359  080C               	movf	??_myIsr,w
  2034  035A  00B4               	movwf	_ps2DataState
  2035                           
  2036                           ;main.c: 157:         } else if ( ps2DataState == 4 ) {
  2037                           
  2038                           ;main.c: 156:             }
  2039                           
  2040                           ;main.c: 154:                 }
  2041  035B  2B60               	goto	i1l111
  2042  035C                     i1l1232:	
  2043  035C  3004               	movlw	4
  2044  035D  0634               	xorwf	_ps2DataState,w
  2045  035E  1903               	btfsc	3,2
  2046                           
  2047                           ;main.c: 159:             ps2DataState = 0;
  2048  035F  01B4               	clrf	_ps2DataState
  2049  0360                     i1l111:	
  2050                           ;main.c: 163:     }
  2051                           
  2052                           ;main.c: 161:     } else {
  2053                           
  2054                           ;main.c: 160:         }
  2055                           
  2056                           
  2057                           ;main.c: 164:     GIE = 1;
  2058  0360  178B               	bsf	11,7	;volatile
  2059  0361  0811               	movf	??_myIsr+5,w
  2060  0362  00CF               	movwf	79
  2061  0363  0810               	movf	??_myIsr+4,w
  2062  0364  008A               	movwf	10
  2063  0365  080F               	movf	??_myIsr+3,w
  2064  0366  0084               	movwf	4
  2065  0367  0E0E               	swapf	(??_myIsr+2)^0,w
  2066  0368  0083               	movwf	3
  2067  0369  0ECE               	swapf	78,f
  2068  036A  0E4E               	swapf	78,w
  2069  036B  0009               	retfie
  2070  036C                     __end_of_myIsr:	
  2071  004E                     btemp	set	78	;btemp
  2072  004E                     wtemp0	set	78
  2073                           
  2074                           	psect	intentry
  2075  0004                     __pintentry:	
  2076                           ;incstack = 0
  2077                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath]
  2078                           
  2079  0004                     interrupt_function:	
  2080  004E                     saved_w	set	btemp
  2081  0004  00CE               	movwf	btemp
  2082  0005  0E03               	swapf	3,w
  2083  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2084  0007  008E               	movwf	??_myIsr+2
  2085  0008  0804               	movf	4,w
  2086  0009  008F               	movwf	??_myIsr+3
  2087  000A  080A               	movf	10,w
  2088  000B  0090               	movwf	??_myIsr+4
  2089  000C  084F               	movf	btemp+1,w
  2090  000D  0091               	movwf	??_myIsr+5
  2091  000E  2AE0               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         16
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     27      55

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2292
                                             22 BANK0      5     5      0
             _calculateBitsFromTable
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                             15 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              9 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     136
                                              9 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _calculateBitsFromTable                               7     4      3     722
                                              9 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                9     9      0     114
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateBitsFromTable
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     1B      37       3       83.3%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      37       6        0.0%
ABS                  0      0      37       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Fri Sep 28 16:15:00 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0018                                 l131 03D2  
                               l132 03FC                                 l156 0095  
                               l158 00A6                                 l191 0169  
                               l179 016E                                 _GIE 005F  
                               _RA1 0029                                 _RA2 002A  
                               u804 01BF                                 u900 03AB  
                               u805 01BD                                 u910 03AC  
                               _PSA 040B                                 u840 0386  
                               u850 0387                                 u880 03A3  
                               u890 03A4                                 u795 01B4  
                               u984 0187                                 u985 0185  
                               u994 0198                                 u995 0196  
                               fsr0 0004                                 indf 0000  
                              l1100 0395                                l1132 03E3  
                              l1108 03AF                                l1300 00BF  
                              l1160 01A8                                l1304 00C7  
                              l1312 00D6                                l1154 0192  
                              l1162 0173                                l1082 01D3  
                              l1330 0100                                l1322 00E5  
                              l1306 00C8                                l1156 01A3  
                              l1092 037C                                l1332 0102  
                              l1308 00D1                                l1316 00DF  
                              l1340 0112                                l1352 012D  
                              l1360 013D                                l1336 010B  
                              l1344 011A                                l1256 004E  
                              l1380 0162                                l1372 0158  
                              l1292 00AD                                l1268 0081  
                              l1286 00A7                                l1278 0096  
                              l1376 015E                                l1368 0152  
                              l1384 016A                                l1298 00BB  
                              _T0IE 005D                                _T0IF 005A  
                              _T0CS 040D                                u1250 007D  
                              _T0SE 040C                                u1260 007E  
                              _TMR0 0001                                _main 002D  
                              btemp 004E                                start 000F  
                             ?_main 000C        __end_of_replaceTwoBytesCodes 02CC  
                             i1l111 0360                               _PORTA 0005  
                             _PORTB 0006                __end_of_codeToMatrix 0286  
                             _TRISB 0086                               _delay 0029  
                   __end_of_myDelay 01F1                               _myIsr 02E0  
                             main@i 0026                    updatePort@bit_id 001A  
                             pclath 000A                               status 0003  
                      updateKey@key 0020                        updateKey@set 001B  
                             wtemp0 004E                     __initialization 0010  
                      __end_of_main 0170                              ??_main 0022  
   __size_of_calculateBitsFromTable 003D                   sendDataToAltera@i 0019  
                            ?_myIsr 000C                              i1l1210 0330  
                            i1l1220 0348                              u110_24 0305  
                            u110_25 0303                              i1l1230 0357  
                            i1l1214 0335                              i1l1224 034F  
                            i1l1232 035C                              i1l1218 0340  
                            i1l1192 030D                              i1l1184 02F5  
                            i1l1194 0311                              i1l1196 0316  
                            _TRISA0 0428                              _TRISA1 0429  
                            _TRISA2 042A                              _TRISA3 042B  
                            _TRISA4 042C            __end_of_sendDataToAltera 0400  
             _replaceOnDelayKeyDown 02CC                           ??_myDelay 0000  
                            myIsr@i 0014                              saved_w 004E  
                     updateKey@code 0021             __end_of__initialization 002B  
            _calculateBitsFromTable 0170                _replaceTwoBytesCodes 02B0  
                     updatePort@set 0015                      __pcstackCOMMON 0000  
                      __pidataBANK0 01DD                       __end_of_myIsr 036C  
               updateKey@localShift 001D                             ??_myIsr 000C  
                      _ps2DataState 0034                          __pbssBANK0 0027  
                      _ps2BitsCount 0032                        _codeToMatrix 0206  
                        _delayedKey 002B                _sendDataToAltera$104 0017  
                        __pmaintext 002D                          __pintentry 0004  
        calculateBitsFromTable@bits 001A                  __size_of_updateKey 0054  
                        __stringtab 0200          _kempstonMouseEmulatorDelay 0027  
     __end_of_replaceOnShiftKeyDown 02B0                             _ps2Data 0031  
                           _ps2Bits 0033                             _ps2Down 0042  
                           __ptext1 036C                             __ptext2 01AD  
                           __ptext3 03C0                             __ptext4 01F0  
                           __ptext5 0170                             __ptext6 02E0  
                           _myDelay 01F0  calculateBitsFromTable@clearIfFound 0017  
                           _numLock 002D                             clrloop0 01E9  
              end_of_initialization 002B                       _importantKeys 02D4  
                    _shift_ctrl_alt 0036                   ?_sendDataToAltera 000C  
                 __end_of_updateKey 03C0                  ??_sendDataToAltera 0015  
                 _kempstonMouseKeys 02DA                           _PORTAbits 0005  
                        _updatePort 01AD             ?_calculateBitsFromTable 0015  
         __end_of_kempstonMouseKeys 02E0                 start_initialization 0010  
                       updatePort@a 0019      __end_of_calculateBitsFromTable 01AD  
           calculateBitsFromTable@i 001B                         __pdataBANK0 0037  
                         ___latbits 0000                       __pcstackBANK0 000C  
                       ?_updatePort 0015                  updateKey@localCtrl 001F  
                         __pnvBANK0 0042                           _ps2Device 0030  
                         __pstrings 0200                       _ps2NeedEncode 002E  
                          ?_myDelay 000C                         _ps2WaitCode 002F  
       calculateBitsFromTable@count 0016                      __size_of_myIsr 008C  
       calculateBitsFromTable@table 0015                   interrupt_function 0004  
                         clear_ram0 01E8                 __size_of_updatePort 0030  
             _replaceOnShiftKeyDown 0286                           _updateKey 036C  
                       __stringbase 0205                           main@i_118 0025  
         __size_of_sendDataToAltera 0040                          ?_updateKey 001B  
                __end_of__stringtab 0206                    __size_of_myDelay 0001  
                          _myIsr$87 0012                       __size_of_main 0143  
     __end_of_replaceOnDelayKeyDown 02D4                            _replaced 002C  
                          _outPorts 0037                        ??_updatePort 0016  
         _kempstonMouseEmulatorKeys 0035                            intlevel1 0000  
                         stringcode 0200                  __end_of_updatePort 01DD  
                       ??_updateKey 001C                    _sendDataToAltera 03C0  
                          stringdir 0200                            stringtab 0200  
             __end_of_importantKeys 02DA                        _updateKey$97 001E  
