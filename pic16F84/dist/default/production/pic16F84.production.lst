

Microchip Technology PIC LITE Macro Assembler V2.00 build -1524193055 
                                                                                               Tue Oct 30 16:29:25 2018

Microchip Technology Omniscient Code Generator v2.00 (Free mode) build 20180527130849
     1                           	processor	16F84A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	intentry,global,class=CODE,delta=2
    20                           	dabs	1,0x4E,2
    21  0000                     
    22                           ; Version 2.00
    23                           ; Generated 27/05/2018 GMT
    24                           ; 
    25                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F84A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     	;# 
    57  0001                     	;# 
    58  0002                     	;# 
    59  0003                     	;# 
    60  0004                     	;# 
    61  0005                     	;# 
    62  0006                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  0081                     	;# 
    68  0085                     	;# 
    69  0086                     	;# 
    70  0088                     	;# 
    71  0089                     	;# 
    72  0000                     	;# 
    73  0001                     	;# 
    74  0002                     	;# 
    75  0003                     	;# 
    76  0004                     	;# 
    77  0005                     	;# 
    78  0006                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0088                     	;# 
    87  0089                     	;# 
    88                           
    89                           	psect	idataBANK0
    90  01E1                     __pidataBANK0:	
    91                           
    92                           ;initializer for _outPorts
    93  01E1  3400               	retlw	0
    94  01E2  3400               	retlw	0
    95  01E3  3400               	retlw	0
    96  01E4  3400               	retlw	0
    97  01E5  3400               	retlw	0
    98  01E6  3400               	retlw	0
    99  01E7  3400               	retlw	0
   100  01E8  3400               	retlw	0
   101  01E9  3407               	retlw	7
   102  01EA  34F5               	retlw	245
   103  01EB  34DA               	retlw	218
   104                           
   105                           	psect	strings
   106  0200                     __pstrings:	
   107  0200                     stringtab:	
   108  0200                     __stringtab:	
   109  0200                     stringcode:	
   110                           ;	String table - string pointers are 1 byte each
   111                           
   112  0200                     stringdir:	
   113  0200  3002               	movlw	high stringdir
   114  0201  008A               	movwf	10
   115  0202  0804               	movf	4,w
   116  0203  0A84               	incf	4,f
   117  0204  0782               	addwf	2,f
   118  0205                     __stringbase:	
   119  0205  3400               	retlw	0
   120  0206                     __end_of__stringtab:	
   121  0206                     _codeToMatrix:	
   122  0206  34FF               	retlw	255
   123  0207  34FF               	retlw	255
   124  0208  34FF               	retlw	255
   125  0209  34FF               	retlw	255
   126  020A  34FF               	retlw	255
   127  020B  34FF               	retlw	255
   128  020C  34FF               	retlw	255
   129  020D  34FF               	retlw	255
   130  020E  34FF               	retlw	255
   131  020F  34FF               	retlw	255
   132  0210  34FF               	retlw	255
   133  0211  34FF               	retlw	255
   134  0212  34FF               	retlw	255
   135  0213  34FF               	retlw	255
   136  0214  349C               	retlw	156
   137  0215  34FF               	retlw	255
   138  0216  34FF               	retlw	255
   139  0217  34FF               	retlw	255
   140  0218  34FF               	retlw	255
   141  0219  34FF               	retlw	255
   142  021A  34FF               	retlw	255
   143  021B  3402               	retlw	2
   144  021C  3403               	retlw	3
   145  021D  34FF               	retlw	255
   146  021E  34FF               	retlw	255
   147  021F  34FF               	retlw	255
   148  0220  3408               	retlw	8
   149  0221  3409               	retlw	9
   150  0222  3401               	retlw	1
   151  0223  340A               	retlw	10
   152  0224  340B               	retlw	11
   153  0225  34D6               	retlw	214
   154  0226  34FF               	retlw	255
   155  0227  3418               	retlw	24
   156  0228  3410               	retlw	16
   157  0229  3411               	retlw	17
   158  022A  3412               	retlw	18
   159  022B  341B               	retlw	27
   160  022C  3413               	retlw	19
   161  022D  34FF               	retlw	255
   162  022E  345C               	retlw	92
   163  022F  3407               	retlw	7
   164  0230  3420               	retlw	32
   165  0231  3419               	retlw	25
   166  0232  3422               	retlw	34
   167  0233  341A               	retlw	26
   168  0234  3423               	retlw	35
   169  0235  3463               	retlw	99
   170  0236  3464               	retlw	100
   171  0237  341F               	retlw	31
   172  0238  3427               	retlw	39
   173  0239  3426               	retlw	38
   174  023A  3421               	retlw	33
   175  023B  3425               	retlw	37
   176  023C  3424               	retlw	36
   177  023D  3454               	retlw	84
   178  023E  34A0               	retlw	160
   179  023F  3406               	retlw	6
   180  0240  3417               	retlw	23
   181  0241  341E               	retlw	30
   182  0242  341D               	retlw	29
   183  0243  341C               	retlw	28
   184  0244  3414               	retlw	20
   185  0245  34FF               	retlw	255
   186  0246  34FF               	retlw	255
   187  0247  349F               	retlw	159
   188  0248  3416               	retlw	22
   189  0249  3415               	retlw	21
   190  024A  340D               	retlw	13
   191  024B  3404               	retlw	4
   192  024C  340C               	retlw	12
   193  024D  34FF               	retlw	255
   194  024E  34C1               	retlw	193
   195  024F  3497               	retlw	151
   196  0250  34A0               	retlw	160
   197  0251  340E               	retlw	14
   198  0252  348D               	retlw	141
   199  0253  3405               	retlw	5
   200  0254  349E               	retlw	158
   201  0255  3483               	retlw	131
   202  0256  348B               	retlw	139
   203  0257  3493               	retlw	147
   204  0258  349C               	retlw	156
   205  0259  349B               	retlw	155
   206  025A  34E5               	retlw	229
   207  025B  348E               	retlw	142
   208  025C  34A3               	retlw	163
   209  025D  34A6               	retlw	166
   210  025E  344B               	retlw	75
   211  025F  34FF               	retlw	255
   212  0260  3406               	retlw	6
   213  0261  34DD               	retlw	221
   214  0262  34A4               	retlw	164
   215  0263  34D1               	retlw	209
   216  0264  34A7               	retlw	167
   217  0265  3494               	retlw	148
   218  0266  348C               	retlw	140
   219  0267  3484               	retlw	132
   220  0268  3496               	retlw	150
   221  0269  34C9               	retlw	201
   222  026A  34D9               	retlw	217
   223  026B  34E1               	retlw	225
   224  026C  3444               	retlw	68
   225  026D  3488               	retlw	136
   226  026E  3485               	retlw	133
   227  026F  3403               	retlw	3
   228  0270  349A               	retlw	154
   229  0271  341B               	retlw	27
   230  0272  341C               	retlw	28
   231  0273  34A2               	retlw	162
   232  0274  3498               	retlw	152
   233  0275  34C0               	retlw	192
   234  0276  3404               	retlw	4
   235  0277  3497               	retlw	151
   236  0278  340B               	retlw	11
   237  0279  3423               	retlw	35
   238  027A  3424               	retlw	36
   239  027B  3414               	retlw	20
   240  027C  3443               	retlw	67
   241  027D  34FF               	retlw	255
   242  027E  34FF               	retlw	255
   243  027F  3496               	retlw	150
   244  0280  3413               	retlw	19
   245  0281  349E               	retlw	158
   246  0282  34A7               	retlw	167
   247  0283  340C               	retlw	12
   248  0284  34FF               	retlw	255
   249  0285  34FF               	retlw	255
   250  0286                     __end_of_codeToMatrix:	
   251  0286                     _replaceOnShiftKeyDown:	
   252  0286  3416               	retlw	22
   253  0287  344F               	retlw	79
   254  0288  341E               	retlw	30
   255  0289  3450               	retlw	80
   256  028A  3426               	retlw	38
   257  028B  3451               	retlw	81
   258  028C  3425               	retlw	37
   259  028D  3453               	retlw	83
   260  028E  342E               	retlw	46
   261  028F  3456               	retlw	86
   262  0290  3436               	retlw	54
   263  0291  3457               	retlw	87
   264  0292  343D               	retlw	61
   265  0293  345C               	retlw	92
   266  0294  343E               	retlw	62
   267  0295  345E               	retlw	94
   268  0296  3446               	retlw	70
   269  0297  345F               	retlw	95
   270  0298  3445               	retlw	69
   271  0299  3460               	retlw	96
   272  029A  344E               	retlw	78
   273  029B  3461               	retlw	97
   274  029C  3455               	retlw	85
   275  029D  3462               	retlw	98
   276  029E  345D               	retlw	93
   277  029F  3463               	retlw	99
   278  02A0  344C               	retlw	76
   279  02A1  3467               	retlw	103
   280  02A2  3452               	retlw	82
   281  02A3  3468               	retlw	104
   282  02A4  3441               	retlw	65
   283  02A5  346A               	retlw	106
   284  02A6  3449               	retlw	73
   285  02A7  346D               	retlw	109
   286  02A8  344A               	retlw	74
   287  02A9  346E               	retlw	110
   288  02AA  340E               	retlw	14
   289  02AB  3448               	retlw	72
   290  02AC  3454               	retlw	84
   291  02AD  3464               	retlw	100
   292  02AE  345B               	retlw	91
   293  02AF  3465               	retlw	101
   294  02B0                     __end_of_replaceOnShiftKeyDown:	
   295  02B0                     _replaceTwoBytesCodes:	
   296  02B0  3411               	retlw	17
   297  02B1  3408               	retlw	8
   298  02B2  3414               	retlw	20
   299  02B3  3413               	retlw	19
   300  02B4  3470               	retlw	112
   301  02B5  3417               	retlw	23
   302  02B6  346C               	retlw	108
   303  02B7  3418               	retlw	24
   304  02B8  347D               	retlw	125
   305  02B9  3419               	retlw	25
   306  02BA  3471               	retlw	113
   307  02BB  341F               	retlw	31
   308  02BC  3469               	retlw	105
   309  02BD  3420               	retlw	32
   310  02BE  347A               	retlw	122
   311  02BF  3427               	retlw	39
   312  02C0  3475               	retlw	117
   313  02C1  3428               	retlw	40
   314  02C2  346B               	retlw	107
   315  02C3  342F               	retlw	47
   316  02C4  3472               	retlw	114
   317  02C5  3430               	retlw	48
   318  02C6  3474               	retlw	116
   319  02C7  3437               	retlw	55
   320  02C8  344A               	retlw	74
   321  02C9  3438               	retlw	56
   322  02CA  345A               	retlw	90
   323  02CB  3439               	retlw	57
   324  02CC                     __end_of_replaceTwoBytesCodes:	
   325  02CC                     _replaceOnDelayKeyDown:	
   326  02CC  341F               	retlw	31
   327  02CD  3454               	retlw	84
   328  02CE  345B               	retlw	91
   329  02CF  3463               	retlw	99
   330  02D0  3464               	retlw	100
   331  02D1  3465               	retlw	101
   332  02D2  3448               	retlw	72
   333  02D3  345D               	retlw	93
   334  02D4                     __end_of_replaceOnDelayKeyDown:	
   335  02D4                     _importantKeys:	
   336  02D4  3412               	retlw	18
   337  02D5  3459               	retlw	89
   338  02D6  3414               	retlw	20
   339  02D7  3413               	retlw	19
   340  02D8  3411               	retlw	17
   341  02D9  3408               	retlw	8
   342  02DA                     __end_of_importantKeys:	
   343  02DA                     _kempstonMouseKeys:	
   344  02DA  346B               	retlw	107
   345  02DB  3474               	retlw	116
   346  02DC  3475               	retlw	117
   347  02DD  3472               	retlw	114
   348  02DE  3473               	retlw	115
   349  02DF  3404               	retlw	4
   350  02E0                     __end_of_kempstonMouseKeys:	
   351                           
   352                           	psect	nvBANK0
   353  0042                     __pnvBANK0:	
   354  0042                     _ps2Down:	
   355  0042                     	ds	1
   356  0005                     _PORTA	set	5
   357  0006                     _PORTB	set	6
   358  0005                     _PORTAbits	set	5
   359  0001                     _TMR0	set	1
   360  0029                     _RA1	set	41
   361  002A                     _RA2	set	42
   362  005F                     _GIE	set	95
   363  005A                     _T0IF	set	90
   364  005D                     _T0IE	set	93
   365  0086                     _TRISB	set	134
   366  040B                     _PSA	set	1035
   367  040C                     _T0SE	set	1036
   368  040D                     _T0CS	set	1037
   369  042B                     _TRISA3	set	1067
   370  042C                     _TRISA4	set	1068
   371  0428                     _TRISA0	set	1064
   372  042A                     _TRISA2	set	1066
   373  0429                     _TRISA1	set	1065
   374                           
   375                           	psect	cinit
   376  0010                     start_initialization:	
   377                           ; #config settings
   378                           
   379  0010                     __initialization:	
   380                           
   381                           ; Initialize objects allocated to BANK0
   382  0010  21E1               	fcall	__pidataBANK0	;fetch initializer
   383  0011  00B7               	movwf	__pdataBANK0& (0+127)
   384  0012  21E2               	fcall	__pidataBANK0+1	;fetch initializer
   385  0013  00B8               	movwf	(__pdataBANK0+1)& (0+127)
   386  0014  21E3               	fcall	__pidataBANK0+2	;fetch initializer
   387  0015  00B9               	movwf	(__pdataBANK0+2)& (0+127)
   388  0016  21E4               	fcall	__pidataBANK0+3	;fetch initializer
   389  0017  00BA               	movwf	(__pdataBANK0+3)& (0+127)
   390  0018  21E5               	fcall	__pidataBANK0+4	;fetch initializer
   391  0019  00BB               	movwf	(__pdataBANK0+4)& (0+127)
   392  001A  21E6               	fcall	__pidataBANK0+5	;fetch initializer
   393  001B  00BC               	movwf	(__pdataBANK0+5)& (0+127)
   394  001C  21E7               	fcall	__pidataBANK0+6	;fetch initializer
   395  001D  00BD               	movwf	(__pdataBANK0+6)& (0+127)
   396  001E  21E8               	fcall	__pidataBANK0+7	;fetch initializer
   397  001F  00BE               	movwf	(__pdataBANK0+7)& (0+127)
   398  0020  21E9               	fcall	__pidataBANK0+8	;fetch initializer
   399  0021  00BF               	movwf	(__pdataBANK0+8)& (0+127)
   400  0022  21EA               	fcall	__pidataBANK0+9	;fetch initializer
   401  0023  00C0               	movwf	(__pdataBANK0+9)& (0+127)
   402  0024  21EB               	fcall	__pidataBANK0+10	;fetch initializer
   403  0025  00C1               	movwf	(__pdataBANK0+10)& (0+127)
   404                           
   405                           ; Clear objects allocated to BANK0
   406  0026  1383               	bcf	3,7	;select IRP bank0
   407  0027  3027               	movlw	low __pbssBANK0
   408  0028  0084               	movwf	4
   409  0029  3037               	movlw	low (__pbssBANK0+16)
   410  002A  21F7               	fcall	clear_ram0
   411  002B                     end_of_initialization:	
   412                           ;End of C runtime variable initialization code
   413                           
   414  002B                     __end_of__initialization:	
   415  002B  0183               	clrf	3
   416  002C  282D               	ljmp	_main	;jump to C main() function
   417                           
   418                           	psect	bssBANK0
   419  0027                     __pbssBANK0:	
   420  0027                     _kempstonMouseEmulatorDelay:	
   421  0027                     	ds	2
   422  0029                     _delay:	
   423  0029                     	ds	2
   424  002B                     _delayedKey:	
   425  002B                     	ds	1
   426  002C                     _replaced:	
   427  002C                     	ds	1
   428  002D                     _numLock:	
   429  002D                     	ds	1
   430  002E                     _ps2NeedEncode:	
   431  002E                     	ds	1
   432  002F                     _ps2WaitCode:	
   433  002F                     	ds	1
   434  0030                     _ps2Device:	
   435  0030                     	ds	1
   436  0031                     _ps2Data:	
   437  0031                     	ds	1
   438  0032                     _ps2BitsCount:	
   439  0032                     	ds	1
   440  0033                     _ps2Bits:	
   441  0033                     	ds	1
   442  0034                     _ps2DataState:	
   443  0034                     	ds	1
   444  0035                     _kempstonMouseEmulatorKeys:	
   445  0035                     	ds	1
   446  0036                     _shift_ctrl_alt:	
   447  0036                     	ds	1
   448                           
   449                           	psect	dataBANK0
   450  0037                     __pdataBANK0:	
   451  0037                     _outPorts:	
   452  0037                     	ds	11
   453                           
   454                           	psect	clrtext
   455  01F7                     clear_ram0:	
   456                           ;	Called with FSR containing the base address, and
   457                           ;	W with the last address+1
   458                           
   459  01F7  0064               	clrwdt	;clear the watchdog before getting into this loop
   460  01F8                     clrloop0:	
   461  01F8  0180               	clrf	0	;clear RAM location pointed to by FSR
   462  01F9  0A84               	incf	4,f	;increment pointer
   463  01FA  0604               	xorwf	4,w	;XOR with final address
   464  01FB  1903               	btfsc	3,2	;have we reached the end yet?
   465  01FC  3400               	retlw	0	;all done for this memory range, return
   466  01FD  0604               	xorwf	4,w	;XOR again to restore value
   467  01FE  29F8               	goto	clrloop0	;do the next byte
   468                           
   469                           	psect	cstackBANK0
   470  000C                     __pcstackBANK0:	
   471  000C                     ?_myIsr:	
   472  000C                     ??_myIsr:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  000C                     ?_myDelay:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  000C                     ?_sendDataToAltera:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  000C                     ?_main:	
   482                           ; 1 bytes @ 0x0
   483                           
   484                           
   485                           ; 1 bytes @ 0x0
   486  000C                     	ds	6
   487  0012                     _myIsr$87:	
   488                           
   489                           ; 2 bytes @ 0x6
   490  0012                     	ds	2
   491  0014                     myIsr@i:	
   492                           
   493                           ; 1 bytes @ 0x8
   494  0014                     	ds	1
   495  0015                     ?_updatePort:	
   496  0015                     ??_myDelay:	
   497                           ; 1 bytes @ 0x9
   498                           
   499  0015                     ?_calculateBitsFromTable:	
   500                           ; 1 bytes @ 0x9
   501                           
   502  0015                     updatePort@set:	
   503                           ; 1 bytes @ 0x9
   504                           
   505  0015                     calculateBitsFromTable@table:	
   506                           ; 1 bytes @ 0x9
   507                           
   508                           
   509                           ; 1 bytes @ 0x9
   510  0015                     	ds	1
   511  0016                     ??_updatePort:	
   512  0016                     myDelay@j:	
   513                           ; 1 bytes @ 0xA
   514                           
   515  0016                     calculateBitsFromTable@count:	
   516                           ; 1 bytes @ 0xA
   517                           
   518                           
   519                           ; 1 bytes @ 0xA
   520  0016                     	ds	1
   521  0017                     ??_sendDataToAltera:	
   522  0017                     calculateBitsFromTable@clearIfFound:	
   523                           ; 1 bytes @ 0xB
   524                           
   525                           
   526                           ; 1 bytes @ 0xB
   527  0017                     	ds	1
   528  0018                     ??_calculateBitsFromTable:	
   529                           
   530                           ; 1 bytes @ 0xC
   531  0018                     	ds	1
   532  0019                     updatePort@a:	
   533  0019                     _sendDataToAltera$105:	
   534                           ; 1 bytes @ 0xD
   535                           
   536                           
   537                           ; 2 bytes @ 0xD
   538  0019                     	ds	1
   539  001A                     updatePort@bit_id:	
   540  001A                     calculateBitsFromTable@bits:	
   541                           ; 1 bytes @ 0xE
   542                           
   543                           
   544                           ; 1 bytes @ 0xE
   545  001A                     	ds	1
   546  001B                     ?_updateKey:	
   547  001B                     updateKey@set:	
   548                           ; 1 bytes @ 0xF
   549                           
   550  001B                     sendDataToAltera@i:	
   551                           ; 1 bytes @ 0xF
   552                           
   553  001B                     calculateBitsFromTable@i:	
   554                           ; 1 bytes @ 0xF
   555                           
   556                           
   557                           ; 1 bytes @ 0xF
   558  001B                     	ds	1
   559  001C                     ??_updateKey:	
   560                           
   561                           ; 1 bytes @ 0x10
   562  001C                     	ds	1
   563  001D                     updateKey@localShift:	
   564                           
   565                           ; 1 bytes @ 0x11
   566  001D                     	ds	1
   567  001E                     _updateKey$97:	
   568                           
   569                           ; 1 bytes @ 0x12
   570  001E                     	ds	1
   571  001F                     updateKey@localCtrl:	
   572                           
   573                           ; 1 bytes @ 0x13
   574  001F                     	ds	1
   575  0020                     updateKey@key:	
   576                           
   577                           ; 1 bytes @ 0x14
   578  0020                     	ds	1
   579  0021                     updateKey@code:	
   580                           
   581                           ; 1 bytes @ 0x15
   582  0021                     	ds	1
   583  0022                     ??_main:	
   584                           
   585                           ; 1 bytes @ 0x16
   586  0022                     	ds	3
   587  0025                     main@i_120:	
   588                           
   589                           ; 1 bytes @ 0x19
   590  0025                     	ds	1
   591  0026                     main@i:	
   592                           
   593                           ; 1 bytes @ 0x1A
   594  0026                     	ds	1
   595                           
   596                           	psect	maintext
   597  002D                     __pmaintext:	
   598 ;;
   599 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   600 ;;
   601 ;; *************** function _main *****************
   602 ;; Defined at:
   603 ;;		line 366 in file "main.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;		None
   606 ;; Auto vars:     Size  Location     Type
   607 ;;  i               1   25[BANK0 ] char 
   608 ;;  i               1   26[BANK0 ] char 
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      void 
   611 ;; Registers used:
   612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : B00/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMMON   BANK0
   618 ;;      Params:         0       0
   619 ;;      Locals:         0       2
   620 ;;      Temps:          0       3
   621 ;;      Totals:         0       5
   622 ;;Total ram usage:        5 bytes
   623 ;; Hardware stack levels required when called:    4
   624 ;; This function calls:
   625 ;;		_calculateBitsFromTable
   626 ;;		_sendDataToAltera
   627 ;;		_updateKey
   628 ;;		_updatePort
   629 ;; This function is called by:
   630 ;;		Startup code after reset
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634                           
   635                           ;psect for function _main
   636  002D                     _main:	
   637                           
   638                           ;main.c: 375:     TRISA1 = 0;
   639                           
   640                           ;incstack = 0
   641                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   642  002D  1683               	bsf	3,5	;RP0=1, select bank1
   643  002E  1085               	bcf	5,1	;volatile
   644                           
   645                           ;main.c: 376:     TRISA2 = 0;
   646  002F  1105               	bcf	5,2	;volatile
   647                           
   648                           ;main.c: 377:     TRISA0 = 1;
   649  0030  1405               	bsf	5,0	;volatile
   650                           
   651                           ;main.c: 378:     TRISA4 = 1;
   652  0031  1605               	bsf	5,4	;volatile
   653                           
   654                           ;main.c: 379:     TRISA3 = 1;
   655  0032  1585               	bsf	5,3	;volatile
   656                           
   657                           ;main.c: 381:     PORTA = 0;
   658  0033  1283               	bcf	3,5	;RP0=0, select bank0
   659  0034  0185               	clrf	5	;volatile
   660                           
   661                           ;main.c: 383:     TRISB = 0;
   662  0035  1683               	bsf	3,5	;RP0=1, select bank1
   663  0036  0186               	clrf	6	;volatile
   664                           
   665                           ;main.c: 384:     PORTB = 0;
   666  0037  1283               	bcf	3,5	;RP0=0, select bank0
   667  0038  0186               	clrf	6	;volatile
   668                           
   669                           ;main.c: 404:     ps2Data = 0;
   670  0039  01B1               	clrf	_ps2Data
   671                           
   672                           ;main.c: 406:     ps2WaitCode = 0;
   673  003A  01AF               	clrf	_ps2WaitCode
   674                           
   675                           ;main.c: 407:     ps2Down = 1;
   676  003B  01C2               	clrf	_ps2Down
   677  003C  0AC2               	incf	_ps2Down,f
   678                           
   679                           ;main.c: 408:     ps2NeedEncode = 0;
   680  003D  01AE               	clrf	_ps2NeedEncode
   681                           
   682                           ;main.c: 409:     ps2DataState = 0;
   683  003E  01B4               	clrf	_ps2DataState
   684                           
   685                           ;main.c: 411:     delay = 0;
   686  003F  01A9               	clrf	_delay
   687  0040  01AA               	clrf	_delay+1
   688                           
   689                           ;main.c: 412:     delayedKey = 0;
   690  0041  01AB               	clrf	_delayedKey
   691                           
   692                           ;main.c: 413:     shift_ctrl_alt = 0;
   693  0042  01B6               	clrf	_shift_ctrl_alt
   694                           
   695                           ;main.c: 414:     replaced = 0;
   696  0043  01AC               	clrf	_replaced
   697                           
   698                           ;main.c: 417:     T0CS = 1;
   699  0044  1683               	bsf	3,5	;RP0=1, select bank1
   700  0045  1681               	bsf	1,5	;volatile
   701                           
   702                           ;main.c: 418:     T0SE = 1;
   703  0046  1601               	bsf	1,4	;volatile
   704                           
   705                           ;main.c: 419:     GIE = 1;
   706  0047  178B               	bsf	11,7	;volatile
   707                           
   708                           ;main.c: 420:     T0IE = 1;
   709  0048  168B               	bsf	11,5	;volatile
   710                           
   711                           ;main.c: 421:     PSA = 1;
   712  0049  1581               	bsf	1,3	;volatile
   713                           
   714                           ;main.c: 422:     T0IF = 0;
   715  004A  110B               	bcf	11,2	;volatile
   716                           
   717                           ;main.c: 423:     TMR0 = 255;
   718  004B  30FF               	movlw	255
   719  004C  1283               	bcf	3,5	;RP0=0, select bank0
   720  004D  0081               	movwf	1	;volatile
   721                           
   722                           ;main.c: 425:     sendDataToAltera();
   723  004E  216E               	fcall	_sendDataToAltera
   724  004F                     l1289:	
   725                           ;main.c: 427:     while(1)
   726                           
   727                           
   728                           ;main.c: 428:     {;main.c: 430:         if ( ps2DataState == 2 ) {
   729  004F  3002               	movlw	2
   730  0050  1283               	bcf	3,5	;RP0=0, select bank0
   731  0051  0634               	xorwf	_ps2DataState,w
   732  0052  1D03               	btfss	3,2
   733  0053  2918               	goto	l1379
   734                           
   735                           ;main.c: 438:                 calculateBitsFromTable(&shift_ctrl_alt, importantKeys, 6, 
      +                          0);
   736  0054  30CF               	movlw	(low ((_importantKeys-__stringbase)| (0+32768)))& (0+255)
   737  0055  00A2               	movwf	??_main
   738  0056  0822               	movf	??_main,w
   739  0057  0095               	movwf	calculateBitsFromTable@table
   740  0058  3006               	movlw	6
   741  0059  00A3               	movwf	??_main+1
   742  005A  0823               	movf	??_main+1,w
   743  005B  0096               	movwf	calculateBitsFromTable@count
   744  005C  0197               	clrf	calculateBitsFromTable@clearIfFound
   745  005D  3036               	movlw	(low (_shift_ctrl_alt| 0))& (0+255)
   746  005E  23C0               	fcall	_calculateBitsFromTable
   747                           
   748                           ;main.c: 440:                 calculateBitsFromTable(&kempstonMouseEmulatorKeys, kempsto
      +                          nMouseKeys, 6, numLock);
   749  005F  30D5               	movlw	(low ((_kempstonMouseKeys-__stringbase)| (0+32768)))& (0+255)
   750  0060  1283               	bcf	3,5	;RP0=0, select bank0
   751  0061  00A2               	movwf	??_main
   752  0062  0822               	movf	??_main,w
   753  0063  0095               	movwf	calculateBitsFromTable@table
   754  0064  3006               	movlw	6
   755  0065  00A3               	movwf	??_main+1
   756  0066  0823               	movf	??_main+1,w
   757  0067  0096               	movwf	calculateBitsFromTable@count
   758  0068  082D               	movf	_numLock,w
   759  0069  00A4               	movwf	??_main+2
   760  006A  0824               	movf	??_main+2,w
   761  006B  0097               	movwf	calculateBitsFromTable@clearIfFound
   762  006C  3035               	movlw	(low (_kempstonMouseEmulatorKeys| 0))& (0+255)
   763  006D  23C0               	fcall	_calculateBitsFromTable
   764                           
   765                           ;main.c: 446:                 if ( ps2Data == 119 && ps2Down ) {
   766  006E  3077               	movlw	119
   767  006F  1283               	bcf	3,5	;RP0=0, select bank0
   768  0070  0631               	xorwf	_ps2Data,w
   769  0071  1D03               	btfss	3,2
   770  0072  287F               	goto	l1299
   771  0073  0842               	movf	_ps2Down,w
   772  0074  1903               	btfsc	3,2
   773  0075  287F               	goto	l1299
   774                           
   775                           ;main.c: 447:                     numLock = !numLock;
   776  0076  082D               	movf	_numLock,w
   777  0077  1D03               	btfss	3,2
   778  0078  287B               	goto	u1270
   779  0079  3001               	movlw	1
   780  007A  287C               	goto	u1280
   781  007B                     u1270:	
   782  007B  3000               	movlw	0
   783  007C                     u1280:	
   784  007C  00A2               	movwf	??_main
   785  007D  0822               	movf	??_main,w
   786  007E  00AD               	movwf	_numLock
   787  007F                     l1299:	
   788                           ;main.c: 448:                 }
   789                           
   790                           
   791                           ;main.c: 451:                 if ( (shift_ctrl_alt & 12) > 0 && (shift_ctrl_alt & 48) > 
      +                          0 && ps2Data == 31 && ps2Down ) {
   792  007F  0836               	movf	_shift_ctrl_alt,w
   793  0080  390C               	andlw	12
   794  0081  1903               	btfsc	3,2
   795  0082  2893               	goto	l157
   796  0083  0836               	movf	_shift_ctrl_alt,w
   797  0084  3930               	andlw	48
   798  0085  1903               	btfsc	3,2
   799  0086  2893               	goto	l157
   800  0087  301F               	movlw	31
   801  0088  0631               	xorwf	_ps2Data,w
   802  0089  1D03               	btfss	3,2
   803  008A  2893               	goto	l157
   804  008B  0842               	movf	_ps2Down,w
   805  008C  1903               	btfsc	3,2
   806  008D  2893               	goto	l157
   807                           
   808                           ;main.c: 452:                     outPorts[8] &= 253;
   809  008E  30FD               	movlw	253
   810  008F  00A2               	movwf	??_main
   811  0090  0822               	movf	??_main,w
   812  0091  05BF               	andwf	_outPorts+8,f
   813                           
   814                           ;main.c: 453:                 } else {
   815  0092  2894               	goto	l1309
   816  0093                     l157:	
   817                           
   818                           ;main.c: 454:                     outPorts[8] |= 2;
   819  0093  14BF               	bsf	_outPorts+8,1
   820  0094                     l1309:	
   821                           ;main.c: 455:                 }
   822                           
   823                           
   824                           ;main.c: 458:                 if ( (shift_ctrl_alt & 12) > 0 && ps2Data == 126 && ps2Dow
      +                          n ) {
   825  0094  0836               	movf	_shift_ctrl_alt,w
   826  0095  390C               	andlw	12
   827  0096  1903               	btfsc	3,2
   828  0097  28A4               	goto	l159
   829  0098  307E               	movlw	126
   830  0099  0631               	xorwf	_ps2Data,w
   831  009A  1D03               	btfss	3,2
   832  009B  28A4               	goto	l159
   833  009C  0842               	movf	_ps2Down,w
   834  009D  1903               	btfsc	3,2
   835  009E  28A4               	goto	l159
   836                           
   837                           ;main.c: 459:                     outPorts[8] &= 251;
   838  009F  30FB               	movlw	251
   839  00A0  00A2               	movwf	??_main
   840  00A1  0822               	movf	??_main,w
   841  00A2  05BF               	andwf	_outPorts+8,f
   842                           
   843                           ;main.c: 460:                 } else {
   844  00A3  28A5               	goto	l1317
   845  00A4                     l159:	
   846                           
   847                           ;main.c: 461:                     outPorts[8] |= 4;
   848  00A4  153F               	bsf	_outPorts+8,2
   849  00A5                     l1317:	
   850                           ;main.c: 462:                 }
   851                           
   852                           
   853                           ;main.c: 469:                 for(int8_t i = 0; i < 41 ;i+=2) {
   854  00A5  01A6               	clrf	main@i
   855  00A6  0826               	movf	main@i,w
   856  00A7  3A80               	xorlw	128
   857  00A8  3E57               	addlw	-169
   858  00A9  1803               	btfsc	3,0
   859  00AA  28DD               	goto	l1347
   860  00AB                     l1323:	
   861                           
   862                           ;main.c: 470:                     if ( ps2Data == replaceOnShiftKeyDown[i] ) {
   863  00AB  0826               	movf	main@i,w
   864  00AC  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   865  00AD  0084               	movwf	4
   866  00AE  2200               	fcall	stringdir
   867  00AF  0631               	xorwf	_ps2Data,w
   868  00B0  1D03               	skipz
   869  00B1  28D4               	goto	l1343
   870                           
   871                           ;main.c: 471:                         if ( (((shift_ctrl_alt & 3) > 0) && replaced == 0)
      +                           || replaced == ps2Data) {
   872  00B2  0836               	movf	_shift_ctrl_alt,w
   873  00B3  3903               	andlw	3
   874  00B4  1903               	btfsc	3,2
   875  00B5  28B9               	goto	l1329
   876  00B6  082C               	movf	_replaced,w
   877  00B7  1903               	btfsc	3,2
   878  00B8  28BD               	goto	l1331
   879  00B9                     l1329:	
   880  00B9  082C               	movf	_replaced,w
   881  00BA  0631               	xorwf	_ps2Data,w
   882  00BB  1D03               	skipz
   883  00BC  28CF               	goto	l1339
   884  00BD                     l1331:	
   885                           
   886                           ;main.c: 472:                             if ( ps2Down ) replaced = ps2Data;
   887  00BD  0842               	movf	_ps2Down,w
   888  00BE  1903               	btfsc	3,2
   889  00BF  28C5               	goto	l1335
   890  00C0  0831               	movf	_ps2Data,w
   891  00C1  00A2               	movwf	??_main
   892  00C2  0822               	movf	??_main,w
   893  00C3  00AC               	movwf	_replaced
   894  00C4  28C6               	goto	l1337
   895  00C5                     l1335:	
   896                           ;main.c: 473:                             else replaced = 0;
   897                           
   898  00C5  01AC               	clrf	_replaced
   899  00C6                     l1337:	
   900                           
   901                           ;main.c: 474:                             ps2Data = replaceOnShiftKeyDown[i+1];
   902  00C6  0826               	movf	main@i,w
   903  00C7  3E01               	addlw	1
   904  00C8  3E81               	addlw	low ((_replaceOnShiftKeyDown-__stringbase)| (0+32768))
   905  00C9  0084               	movwf	4
   906  00CA  2200               	fcall	stringdir
   907  00CB  00A2               	movwf	??_main
   908  00CC  0822               	movf	??_main,w
   909  00CD  00B1               	movwf	_ps2Data
   910                           
   911                           ;main.c: 475:                         } else {
   912  00CE  28DD               	goto	l1347
   913  00CF                     l1339:	
   914                           
   915                           ;main.c: 476:                             if ( replaced != 0 ) ps2Data = 0;
   916  00CF  082C               	movf	_replaced,w
   917  00D0  1903               	btfsc	3,2
   918  00D1  28DD               	goto	l1347
   919  00D2  01B1               	clrf	_ps2Data
   920                           
   921                           ;main.c: 478:                         break;
   922                           
   923                           ;main.c: 477:                         }
   924  00D3  28DD               	goto	l1347
   925  00D4                     l1343:	
   926                           ;main.c: 479:                     }
   927                           
   928                           
   929                           ;main.c: 480:                 }
   930  00D4  3002               	movlw	2
   931  00D5  00A2               	movwf	??_main
   932  00D6  0822               	movf	??_main,w
   933  00D7  07A6               	addwf	main@i,f
   934  00D8  0826               	movf	main@i,w
   935  00D9  3A80               	xorlw	128
   936  00DA  3E57               	addlw	-169
   937  00DB  1C03               	skipc
   938  00DC  28AB               	goto	l1323
   939  00DD                     l1347:	
   940                           
   941                           ;main.c: 484:                 for(int8_t i = 0; i < 8; i++) {
   942  00DD  01A5               	clrf	main@i_120
   943  00DE  0825               	movf	main@i_120,w
   944  00DF  3A80               	xorlw	128
   945  00E0  3E78               	addlw	-136
   946  00E1  1803               	btfsc	3,0
   947  00E2  2909               	goto	l1367
   948  00E3                     l1353:	
   949                           
   950                           ;main.c: 485:                     if ( ps2Data == replaceOnDelayKeyDown[i] && ps2Down ) 
      +                          {
   951  00E3  0825               	movf	main@i_120,w
   952  00E4  3EC7               	addlw	low ((_replaceOnDelayKeyDown-__stringbase)| (0+32768))
   953  00E5  0084               	movwf	4
   954  00E6  2200               	fcall	stringdir
   955  00E7  0631               	xorwf	_ps2Data,w
   956  00E8  1D03               	skipz
   957  00E9  2900               	goto	l1363
   958  00EA  0842               	movf	_ps2Down,w
   959  00EB  1903               	btfsc	3,2
   960  00EC  2900               	goto	l1363
   961                           
   962                           ;main.c: 486:                         if ( delay == 0 ) {
   963  00ED  0829               	movf	_delay,w
   964  00EE  042A               	iorwf	_delay+1,w
   965  00EF  1D03               	btfss	3,2
   966  00F0  28FE               	goto	l1361
   967                           
   968                           ;main.c: 487:                             delayedKey = ps2Data;
   969  00F1  0831               	movf	_ps2Data,w
   970  00F2  00A2               	movwf	??_main
   971  00F3  0822               	movf	??_main,w
   972  00F4  00AB               	movwf	_delayedKey
   973                           
   974                           ;main.c: 488:                             delay = 2600;
   975  00F5  3028               	movlw	40
   976  00F6  00A9               	movwf	_delay
   977  00F7  300A               	movlw	10
   978  00F8  00AA               	movwf	_delay+1
   979                           
   980                           ;main.c: 489:                             ps2Data = 111;
   981  00F9  306F               	movlw	111
   982  00FA  00A2               	movwf	??_main
   983  00FB  0822               	movf	??_main,w
   984  00FC  00B1               	movwf	_ps2Data
   985                           
   986                           ;main.c: 490:                         } else {
   987  00FD  2909               	goto	l1367
   988  00FE                     l1361:	
   989                           
   990                           ;main.c: 491:                             ps2Data = 0;
   991  00FE  01B1               	clrf	_ps2Data
   992                           
   993                           ;main.c: 493:                         break;
   994                           
   995                           ;main.c: 492:                         }
   996  00FF  2909               	goto	l1367
   997  0100                     l1363:	
   998                           ;main.c: 494:                     }
   999                           
  1000                           
  1001                           ;main.c: 495:                 }
  1002  0100  3001               	movlw	1
  1003  0101  00A2               	movwf	??_main
  1004  0102  0822               	movf	??_main,w
  1005  0103  07A5               	addwf	main@i_120,f
  1006  0104  0825               	movf	main@i_120,w
  1007  0105  3A80               	xorlw	128
  1008  0106  3E78               	addlw	-136
  1009  0107  1C03               	skipc
  1010  0108  28E3               	goto	l1353
  1011  0109                     l1367:	
  1012                           
  1013                           ;main.c: 501:                 updateKey(ps2Data, ps2Down );
  1014  0109  0842               	movf	_ps2Down,w
  1015  010A  00A2               	movwf	??_main
  1016  010B  0822               	movf	??_main,w
  1017  010C  009B               	movwf	updateKey@set
  1018  010D  0831               	movf	_ps2Data,w
  1019  010E  236C               	fcall	_updateKey
  1020                           
  1021                           ;main.c: 504:                 sendDataToAltera();
  1022  010F  216E               	fcall	_sendDataToAltera
  1023                           
  1024                           ;main.c: 513:             ps2Data = 0;
  1025  0110  1283               	bcf	3,5	;RP0=0, select bank0
  1026  0111  01B1               	clrf	_ps2Data
  1027                           
  1028                           ;main.c: 515:             ps2WaitCode = 0;
  1029  0112  01AF               	clrf	_ps2WaitCode
  1030                           
  1031                           ;main.c: 516:             ps2Down = 1;
  1032  0113  01C2               	clrf	_ps2Down
  1033  0114  0AC2               	incf	_ps2Down,f
  1034                           
  1035                           ;main.c: 517:             ps2NeedEncode = 0;
  1036  0115  01AE               	clrf	_ps2NeedEncode
  1037                           
  1038                           ;main.c: 518:             ps2DataState = 0;
  1039  0116  01B4               	clrf	_ps2DataState
  1040                           
  1041                           ;main.c: 522:         } else if ( delay != 0 ) {
  1042  0117  296C               	goto	l178
  1043  0118                     l1379:	
  1044  0118  0829               	movf	_delay,w
  1045  0119  042A               	iorwf	_delay+1,w
  1046  011A  1903               	btfsc	3,2
  1047  011B  293B               	goto	l1395
  1048                           
  1049                           ;main.c: 524:             delay--;
  1050  011C  3001               	movlw	1
  1051  011D  02A9               	subwf	_delay,f
  1052  011E  3000               	movlw	0
  1053  011F  1C03               	skipc
  1054  0120  03AA               	decf	_delay+1,f
  1055  0121  02AA               	subwf	_delay+1,f
  1056                           
  1057                           ;main.c: 525:             if ( delay == 0 ) {
  1058  0122  0829               	movf	_delay,w
  1059  0123  042A               	iorwf	_delay+1,w
  1060  0124  1D03               	btfss	3,2
  1061  0125  292B               	goto	l1387
  1062                           
  1063                           ;main.c: 527:                 updatePort(0x00, 0);
  1064  0126  0195               	clrf	updatePort@set
  1065  0127  3000               	movlw	0
  1066  0128  21B1               	fcall	_updatePort
  1067                           
  1068                           ;main.c: 529:                 sendDataToAltera();
  1069  0129  216E               	fcall	_sendDataToAltera
  1070                           
  1071                           ;main.c: 531:             } else if ( delay == 1300 ) {
  1072  012A  296C               	goto	l178
  1073  012B                     l1387:	
  1074  012B  3014               	movlw	20
  1075  012C  1283               	bcf	3,5	;RP0=0, select bank0
  1076  012D  0629               	xorwf	_delay,w
  1077  012E  3005               	movlw	5
  1078  012F  1903               	skipnz
  1079  0130  062A               	xorwf	_delay+1,w
  1080  0131  1D03               	btfss	3,2
  1081  0132  296C               	goto	l178
  1082                           
  1083                           ;main.c: 533:                 updateKey(delayedKey, 1 );
  1084  0133  019B               	clrf	updateKey@set
  1085  0134  0A9B               	incf	updateKey@set,f
  1086  0135  082B               	movf	_delayedKey,w
  1087  0136  236C               	fcall	_updateKey
  1088                           
  1089                           ;main.c: 534:                 delayedKey = 0;
  1090  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1091  0138  01AB               	clrf	_delayedKey
  1092                           
  1093                           ;main.c: 535:                 sendDataToAltera();
  1094  0139  216E               	fcall	_sendDataToAltera
  1095                           
  1096                           ;main.c: 538:         } else {
  1097                           
  1098                           ;main.c: 536:             }
  1099  013A  296C               	goto	l178
  1100  013B                     l1395:	
  1101                           
  1102                           ;main.c: 541:             kempstonMouseEmulatorDelay++;
  1103  013B  3001               	movlw	1
  1104  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1105  013D  07A7               	addwf	_kempstonMouseEmulatorDelay,f
  1106  013E  1803               	skipnc
  1107  013F  0AA8               	incf	_kempstonMouseEmulatorDelay+1,f
  1108  0140  3000               	movlw	0
  1109  0141  07A8               	addwf	_kempstonMouseEmulatorDelay+1,f
  1110                           
  1111                           ;main.c: 542:             if ( kempstonMouseEmulatorDelay > 2000 ) {
  1112  0142  3007               	movlw	7
  1113  0143  0228               	subwf	_kempstonMouseEmulatorDelay+1,w
  1114  0144  30D1               	movlw	209
  1115  0145  1903               	skipnz
  1116  0146  0227               	subwf	_kempstonMouseEmulatorDelay,w
  1117  0147  1C03               	skipc
  1118  0148  296C               	goto	l178
  1119                           
  1120                           ;main.c: 543:                 if ( numLock ) {
  1121  0149  082D               	movf	_numLock,w
  1122  014A  1903               	btfsc	3,2
  1123  014B  2968               	goto	l1419
  1124                           
  1125                           ;main.c: 544:                     if ( (kempstonMouseEmulatorKeys & 1) > 0 ) outPorts[9]
      +                          -=2;
  1126  014C  1C35               	btfss	_kempstonMouseEmulatorKeys,0
  1127  014D  2950               	goto	l1403
  1128  014E  3002               	movlw	2
  1129  014F  02C0               	subwf	_outPorts+9,f
  1130  0150                     l1403:	
  1131                           
  1132                           ;main.c: 545:                     if ( (kempstonMouseEmulatorKeys & 2) > 0 ) outPorts[9]
      +                          +=2;
  1133  0150  1CB5               	btfss	_kempstonMouseEmulatorKeys,1
  1134  0151  2956               	goto	l1407
  1135  0152  3002               	movlw	2
  1136  0153  00A2               	movwf	??_main
  1137  0154  0822               	movf	??_main,w
  1138  0155  07C0               	addwf	_outPorts+9,f
  1139  0156                     l1407:	
  1140                           
  1141                           ;main.c: 546:                     if ( (kempstonMouseEmulatorKeys & 4) > 0 ) outPorts[10
      +                          ]+=2;
  1142  0156  1D35               	btfss	_kempstonMouseEmulatorKeys,2
  1143  0157  295C               	goto	l1411
  1144  0158  3002               	movlw	2
  1145  0159  00A2               	movwf	??_main
  1146  015A  0822               	movf	??_main,w
  1147  015B  07C1               	addwf	_outPorts+10,f
  1148  015C                     l1411:	
  1149                           
  1150                           ;main.c: 547:                     if ( (kempstonMouseEmulatorKeys & 8) > 0 ) outPorts[10
      +                          ]-=2;
  1151  015C  1DB5               	btfss	_kempstonMouseEmulatorKeys,3
  1152  015D  2960               	goto	l1415
  1153  015E  3002               	movlw	2
  1154  015F  02C1               	subwf	_outPorts+10,f
  1155  0160                     l1415:	
  1156                           
  1157                           ;main.c: 548:                     if ( (kempstonMouseEmulatorKeys & 16) > 0 ) outPorts[8
      +                          ] &= 254;
  1158  0160  1E35               	btfss	_kempstonMouseEmulatorKeys,4
  1159  0161  2967               	goto	l190
  1160  0162  30FE               	movlw	254
  1161  0163  00A2               	movwf	??_main
  1162  0164  0822               	movf	??_main,w
  1163  0165  05BF               	andwf	_outPorts+8,f
  1164  0166  2968               	goto	l1419
  1165  0167                     l190:	
  1166                           ;main.c: 549:                     else outPorts[8] |= 1;
  1167                           
  1168  0167  143F               	bsf	_outPorts+8,0
  1169  0168                     l1419:	
  1170                           ;main.c: 550:                 }
  1171                           
  1172                           
  1173                           ;main.c: 552:                 sendDataToAltera();
  1174  0168  216E               	fcall	_sendDataToAltera
  1175                           
  1176                           ;main.c: 554:                 kempstonMouseEmulatorDelay = 0;
  1177  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1178  016A  01A7               	clrf	_kempstonMouseEmulatorDelay
  1179  016B  01A8               	clrf	_kempstonMouseEmulatorDelay+1
  1180  016C                     l178:	
  1181                           ;main.c: 557:         }
  1182                           
  1183                           ;main.c: 555:             }
  1184                           
  1185  016C  0064               	clrwdt	;# 
  1186                           
  1187                           ;main.c: 560:     }
  1188  016D  284F               	goto	l1289
  1189  016E                     __end_of_main:	
  1190                           
  1191                           	psect	text1
  1192  036C                     __ptext1:	
  1193 ;; *************** function _updateKey *****************
  1194 ;; Defined at:
  1195 ;;		line 191 in file "main.c"
  1196 ;; Parameters:    Size  Location     Type
  1197 ;;  key             1    wreg     unsigned char 
  1198 ;;  set             1   15[BANK0 ] unsigned char 
  1199 ;; Auto vars:     Size  Location     Type
  1200 ;;  key             1   20[BANK0 ] unsigned char 
  1201 ;;  code            1   21[BANK0 ] unsigned char 
  1202 ;;  localCtrl       1   19[BANK0 ] unsigned char 
  1203 ;;  localShift      1   17[BANK0 ] unsigned char 
  1204 ;; Return value:  Size  Location     Type
  1205 ;;                  1    wreg      void 
  1206 ;; Registers used:
  1207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1208 ;; Tracked objects:
  1209 ;;		On entry : 0/0
  1210 ;;		On exit  : 0/0
  1211 ;;		Unchanged: 0/0
  1212 ;; Data sizes:     COMMON   BANK0
  1213 ;;      Params:         0       1
  1214 ;;      Locals:         0       5
  1215 ;;      Temps:          0       1
  1216 ;;      Totals:         0       7
  1217 ;;Total ram usage:        7 bytes
  1218 ;; Hardware stack levels used:    1
  1219 ;; Hardware stack levels required when called:    3
  1220 ;; This function calls:
  1221 ;;		_updatePort
  1222 ;; This function is called by:
  1223 ;;		_main
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           
  1228                           ;psect for function _updateKey
  1229  036C                     _updateKey:	
  1230                           
  1231                           ;incstack = 0
  1232                           ; Regs used in _updateKey: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1233                           ;updateKey@key stored from wreg
  1234  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1235  036D  00A0               	movwf	updateKey@key
  1236                           
  1237                           ;main.c: 191: void updateKey(uint8_t key, uint8_t set);main.c: 192: {;main.c: 193:     u
      +                          int8_t code = 0xFF;
  1238  036E  30FF               	movlw	255
  1239  036F  009C               	movwf	??_updateKey
  1240  0370  081C               	movf	??_updateKey,w
  1241  0371  00A1               	movwf	updateKey@code
  1242                           
  1243                           ;main.c: 194:     uint8_t localShift = (((shift_ctrl_alt & 3) > 0) && replaced == 0);
  1244  0372  019E               	clrf	_updateKey$97
  1245  0373  0836               	movf	_shift_ctrl_alt,w
  1246  0374  3903               	andlw	3
  1247  0375  1903               	btfsc	3,2
  1248  0376  2B7C               	goto	l1119
  1249  0377  082C               	movf	_replaced,w
  1250  0378  1D03               	btfss	3,2
  1251  0379  2B7C               	goto	l1119
  1252  037A  019E               	clrf	_updateKey$97
  1253  037B  0A9E               	incf	_updateKey$97,f
  1254  037C                     l1119:	
  1255  037C  081E               	movf	_updateKey$97,w
  1256  037D  009C               	movwf	??_updateKey
  1257  037E  081C               	movf	??_updateKey,w
  1258  037F  009D               	movwf	updateKey@localShift
  1259                           
  1260                           ;main.c: 195:     uint8_t localCtrl = (shift_ctrl_alt & 12) > 0;
  1261  0380  0836               	movf	_shift_ctrl_alt,w
  1262  0381  390C               	andlw	12
  1263  0382  1903               	btfsc	3,2
  1264  0383  2B86               	goto	u870
  1265  0384  3001               	movlw	1
  1266  0385  2B87               	goto	u880
  1267  0386                     u870:	
  1268  0386  3000               	movlw	0
  1269  0387                     u880:	
  1270  0387  009C               	movwf	??_updateKey
  1271  0388  081C               	movf	??_updateKey,w
  1272  0389  009F               	movwf	updateKey@localCtrl
  1273                           
  1274                           ;main.c: 196:     if ( key < 128 ) code = codeToMatrix[key];
  1275  038A  3080               	movlw	128
  1276  038B  0220               	subwf	updateKey@key,w
  1277  038C  1803               	skipnc
  1278  038D  2B95               	goto	l1127
  1279  038E  0820               	movf	updateKey@key,w
  1280  038F  3E01               	addlw	low ((_codeToMatrix-__stringbase)| (0+32768))
  1281  0390  0084               	movwf	4
  1282  0391  2200               	fcall	stringdir
  1283  0392  009C               	movwf	??_updateKey
  1284  0393  081C               	movf	??_updateKey,w
  1285  0394  00A1               	movwf	updateKey@code
  1286  0395                     l1127:	
  1287                           
  1288                           ;main.c: 197:     if ( code != 0xFF ) {
  1289  0395  0A21               	incf	updateKey@code,w
  1290  0396  1903               	btfsc	3,2
  1291  0397  2BAF               	goto	l1135
  1292                           
  1293                           ;main.c: 198:         updatePort(code, set);
  1294  0398  081B               	movf	updateKey@set,w
  1295  0399  009C               	movwf	??_updateKey
  1296  039A  081C               	movf	??_updateKey,w
  1297  039B  0095               	movwf	updatePort@set
  1298  039C  0821               	movf	updateKey@code,w
  1299  039D  21B1               	fcall	_updatePort
  1300                           
  1301                           ;main.c: 199:         localShift |= ((code & 64) > 0);
  1302  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1303  039F  1F21               	btfss	updateKey@code,6
  1304  03A0  2BA3               	goto	u910
  1305  03A1  3001               	movlw	1
  1306  03A2  2BA4               	goto	u920
  1307  03A3                     u910:	
  1308  03A3  3000               	movlw	0
  1309  03A4                     u920:	
  1310  03A4  009C               	movwf	??_updateKey
  1311  03A5  081C               	movf	??_updateKey,w
  1312  03A6  049D               	iorwf	updateKey@localShift,f
  1313                           
  1314                           ;main.c: 200:         localCtrl |= ((code & 128) > 0);
  1315  03A7  1FA1               	btfss	updateKey@code,7
  1316  03A8  2BAB               	goto	u930
  1317  03A9  3001               	movlw	1
  1318  03AA  2BAC               	goto	u940
  1319  03AB                     u930:	
  1320  03AB  3000               	movlw	0
  1321  03AC                     u940:	
  1322  03AC  009C               	movwf	??_updateKey
  1323  03AD  081C               	movf	??_updateKey,w
  1324  03AE  049F               	iorwf	updateKey@localCtrl,f
  1325  03AF                     l1135:	
  1326                           ;main.c: 201:     }
  1327                           
  1328                           
  1329                           ;main.c: 202:     if ( set ) {
  1330  03AF  081B               	movf	updateKey@set,w
  1331  03B0  1903               	btfsc	3,2
  1332  03B1  0008               	return
  1333                           
  1334                           ;main.c: 203:         updatePort(0x00, localShift );
  1335  03B2  081D               	movf	updateKey@localShift,w
  1336  03B3  009C               	movwf	??_updateKey
  1337  03B4  081C               	movf	??_updateKey,w
  1338  03B5  0095               	movwf	updatePort@set
  1339  03B6  3000               	movlw	0
  1340  03B7  21B1               	fcall	_updatePort
  1341                           
  1342                           ;main.c: 204:         updatePort(0x0F, localCtrl );
  1343  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  1344  03B9  081F               	movf	updateKey@localCtrl,w
  1345  03BA  009C               	movwf	??_updateKey
  1346  03BB  081C               	movf	??_updateKey,w
  1347  03BC  0095               	movwf	updatePort@set
  1348  03BD  300F               	movlw	15
  1349  03BE  21B1               	fcall	_updatePort
  1350  03BF  0008               	return
  1351  03C0                     __end_of_updateKey:	
  1352                           ;main.c: 205:     }
  1353                           
  1354                           
  1355                           	psect	text2
  1356  01B1                     __ptext2:	
  1357 ;; *************** function _updatePort *****************
  1358 ;; Defined at:
  1359 ;;		line 182 in file "main.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  bit_id          1    wreg     unsigned char 
  1362 ;;  set             1    9[BANK0 ] unsigned char 
  1363 ;; Auto vars:     Size  Location     Type
  1364 ;;  bit_id          1   14[BANK0 ] unsigned char 
  1365 ;;  a               1   13[BANK0 ] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMMON   BANK0
  1375 ;;      Params:         0       1
  1376 ;;      Locals:         0       2
  1377 ;;      Temps:          0       3
  1378 ;;      Totals:         0       6
  1379 ;;Total ram usage:        6 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    2
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_updateKey
  1386 ;;		_main
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           
  1391                           ;psect for function _updatePort
  1392  01B1                     _updatePort:	
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _updatePort: [wreg-fsr0h+status,2+status,0]
  1396                           ;updatePort@bit_id stored from wreg
  1397  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1398  01B2  009A               	movwf	updatePort@bit_id
  1399                           
  1400                           ;main.c: 182: void updatePort(uint8_t bit_id, uint8_t set);main.c: 183: {;main.c: 184:  
      +                             uint8_t a = (1 << ((bit_id >> 3) & 7));
  1401  01B3  3001               	movlw	1
  1402  01B4  0096               	movwf	??_updatePort
  1403  01B5  081A               	movf	updatePort@bit_id,w
  1404  01B6  0097               	movwf	??_updatePort+1
  1405  01B7  3003               	movlw	3
  1406  01B8                     u805:	
  1407  01B8  1003               	clrc
  1408  01B9  0C97               	rrf	??_updatePort+1,f
  1409  01BA  3EFF               	addlw	-1
  1410  01BB  1D03               	skipz
  1411  01BC  29B8               	goto	u805
  1412  01BD  0817               	movf	??_updatePort+1,w
  1413  01BE  3907               	andlw	7
  1414  01BF  3E01               	addlw	1
  1415  01C0  29C3               	goto	u814
  1416  01C1                     u815:	
  1417  01C1  1003               	clrc
  1418  01C2  0D96               	rlf	??_updatePort,f
  1419  01C3                     u814:	
  1420  01C3  3EFF               	addlw	-1
  1421  01C4  1D03               	skipz
  1422  01C5  29C1               	goto	u815
  1423  01C6  0816               	movf	??_updatePort,w
  1424  01C7  0098               	movwf	??_updatePort+2
  1425  01C8  0818               	movf	??_updatePort+2,w
  1426  01C9  0099               	movwf	updatePort@a
  1427                           
  1428                           ;main.c: 185:     if ( set ) outPorts[bit_id & 7] |= a;
  1429  01CA  0815               	movf	updatePort@set,w
  1430  01CB  1903               	btfsc	3,2
  1431  01CC  29D7               	goto	l1099
  1432  01CD  0819               	movf	updatePort@a,w
  1433  01CE  0096               	movwf	??_updatePort
  1434  01CF  081A               	movf	updatePort@bit_id,w
  1435  01D0  3907               	andlw	7
  1436  01D1  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1437  01D2  0084               	movwf	4
  1438  01D3  0816               	movf	??_updatePort,w
  1439  01D4  1383               	bcf	3,7	;select IRP bank0
  1440  01D5  0480               	iorwf	0,f
  1441  01D6  0008               	return
  1442  01D7                     l1099:	
  1443                           ;main.c: 186:     else outPorts[bit_id & 7] &= ~a;
  1444                           
  1445  01D7  0919               	comf	updatePort@a,w
  1446  01D8  0096               	movwf	??_updatePort
  1447  01D9  081A               	movf	updatePort@bit_id,w
  1448  01DA  3907               	andlw	7
  1449  01DB  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1450  01DC  0084               	movwf	4
  1451  01DD  0816               	movf	??_updatePort,w
  1452  01DE  1383               	bcf	3,7	;select IRP bank0
  1453  01DF  0580               	andwf	0,f
  1454  01E0  0008               	return
  1455  01E1                     __end_of_updatePort:	
  1456                           
  1457                           	psect	text3
  1458  016E                     __ptext3:	
  1459 ;; *************** function _sendDataToAltera *****************
  1460 ;; Defined at:
  1461 ;;		line 245 in file "main.c"
  1462 ;; Parameters:    Size  Location     Type
  1463 ;;		None
  1464 ;; Auto vars:     Size  Location     Type
  1465 ;;  i               1   15[BANK0 ] char 
  1466 ;; Return value:  Size  Location     Type
  1467 ;;                  1    wreg      void 
  1468 ;; Registers used:
  1469 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1470 ;; Tracked objects:
  1471 ;;		On entry : 0/0
  1472 ;;		On exit  : 0/0
  1473 ;;		Unchanged: 0/0
  1474 ;; Data sizes:     COMMON   BANK0
  1475 ;;      Params:         0       0
  1476 ;;      Locals:         0       3
  1477 ;;      Temps:          0       2
  1478 ;;      Totals:         0       5
  1479 ;;Total ram usage:        5 bytes
  1480 ;; Hardware stack levels used:    1
  1481 ;; Hardware stack levels required when called:    3
  1482 ;; This function calls:
  1483 ;;		_myDelay
  1484 ;; This function is called by:
  1485 ;;		_main
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           
  1490                           ;psect for function _sendDataToAltera
  1491  016E                     _sendDataToAltera:	
  1492                           
  1493                           ;main.c: 247:     RA2 = 1;
  1494                           
  1495                           ;incstack = 0
  1496                           ; Regs used in _sendDataToAltera: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1497  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1498  016F  1505               	bsf	5,2	;volatile
  1499                           
  1500                           ;main.c: 248:     RA1 = 0;
  1501  0170  1085               	bcf	5,1	;volatile
  1502                           
  1503                           ;main.c: 249:     myDelay();
  1504  0171  21EC               	fcall	_myDelay
  1505                           
  1506                           ;main.c: 250:     RA1 = 1;
  1507  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1508  0173  1485               	bsf	5,1	;volatile
  1509                           
  1510                           ;main.c: 251:     myDelay();
  1511  0174  21EC               	fcall	_myDelay
  1512                           
  1513                           ;main.c: 252:     RA1 = 0;
  1514  0175  1283               	bcf	3,5	;RP0=0, select bank0
  1515  0176  1085               	bcf	5,1	;volatile
  1516                           
  1517                           ;main.c: 253:     myDelay();
  1518  0177  21EC               	fcall	_myDelay
  1519                           
  1520                           ;main.c: 254:     for(int8_t i=0;i<11;i++) {
  1521  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1522  0179  019B               	clrf	sendDataToAltera@i
  1523  017A  081B               	movf	sendDataToAltera@i,w
  1524  017B  3A80               	xorlw	128
  1525  017C  3E75               	addlw	-139
  1526  017D  1803               	btfsc	3,0
  1527  017E  29AE               	goto	l1175
  1528  017F                     l133:	
  1529                           
  1530                           ;main.c: 255:         RA2 = 1;
  1531  017F  1505               	bsf	5,2	;volatile
  1532                           
  1533                           ;main.c: 256:         PORTB = i < 8 ? ~outPorts[i] : outPorts[i];
  1534  0180  081B               	movf	sendDataToAltera@i,w
  1535  0181  3A80               	xorlw	128
  1536  0182  3E78               	addlw	-136
  1537  0183  1C03               	skipc
  1538  0184  2990               	goto	l1157
  1539  0185  081B               	movf	sendDataToAltera@i,w
  1540  0186  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1541  0187  0084               	movwf	4
  1542  0188  1383               	bcf	3,7	;select IRP bank0
  1543  0189  0800               	movf	0,w
  1544  018A  0097               	movwf	??_sendDataToAltera
  1545  018B  0198               	clrf	??_sendDataToAltera+1
  1546  018C  0817               	movf	??_sendDataToAltera,w
  1547  018D  0099               	movwf	_sendDataToAltera$105
  1548  018E  0818               	movf	??_sendDataToAltera+1,w
  1549  018F  299A               	goto	L1
  1550  0190                     l1157:	
  1551  0190  081B               	movf	sendDataToAltera@i,w
  1552  0191  3E37               	addlw	(low (_outPorts| 0))& (0+255)
  1553  0192  0084               	movwf	4
  1554  0193  1383               	bcf	3,7	;select IRP bank0
  1555  0194  0800               	movf	0,w
  1556  0195  0097               	movwf	??_sendDataToAltera
  1557  0196  0198               	clrf	??_sendDataToAltera+1
  1558  0197  0917               	comf	??_sendDataToAltera,w
  1559  0198  0099               	movwf	_sendDataToAltera$105
  1560  0199  0918               	comf	??_sendDataToAltera+1,w
  1561  019A                     L1:	
  1562  019A  009A               	movwf	_sendDataToAltera$105+1
  1563  019B  0819               	movf	_sendDataToAltera$105,w
  1564  019C  0086               	movwf	6	;volatile
  1565                           
  1566                           ;main.c: 257:         myDelay();
  1567  019D  21EC               	fcall	_myDelay
  1568                           
  1569                           ;main.c: 258:         RA2 = 0;
  1570  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1571  019F  1105               	bcf	5,2	;volatile
  1572                           
  1573                           ;main.c: 259:         myDelay();
  1574  01A0  21EC               	fcall	_myDelay
  1575                           
  1576                           ;main.c: 260:         RA2 = 1;
  1577  01A1  1283               	bcf	3,5	;RP0=0, select bank0
  1578  01A2  1505               	bsf	5,2	;volatile
  1579                           
  1580                           ;main.c: 261:         myDelay();
  1581  01A3  21EC               	fcall	_myDelay
  1582                           
  1583                           ;main.c: 262:     }
  1584  01A4  3001               	movlw	1
  1585  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1586  01A6  0097               	movwf	??_sendDataToAltera
  1587  01A7  0817               	movf	??_sendDataToAltera,w
  1588  01A8  079B               	addwf	sendDataToAltera@i,f
  1589  01A9  081B               	movf	sendDataToAltera@i,w
  1590  01AA  3A80               	xorlw	128
  1591  01AB  3E75               	addlw	-139
  1592  01AC  1C03               	skipc
  1593  01AD  297F               	goto	l133
  1594  01AE                     l1175:	
  1595                           
  1596                           ;main.c: 263:     PORTB = 0xFF;
  1597  01AE  30FF               	movlw	255
  1598  01AF  0086               	movwf	6	;volatile
  1599  01B0  0008               	return
  1600  01B1                     __end_of_sendDataToAltera:	
  1601                           
  1602                           	psect	text4
  1603  01EC                     __ptext4:	
  1604 ;; *************** function _myDelay *****************
  1605 ;; Defined at:
  1606 ;;		line 210 in file "main.c"
  1607 ;; Parameters:    Size  Location     Type
  1608 ;;		None
  1609 ;; Auto vars:     Size  Location     Type
  1610 ;;  j               1   10[BANK0 ] unsigned char 
  1611 ;; Return value:  Size  Location     Type
  1612 ;;                  1    wreg      void 
  1613 ;; Registers used:
  1614 ;;		wreg, status,2, status,0
  1615 ;; Tracked objects:
  1616 ;;		On entry : 0/0
  1617 ;;		On exit  : 0/0
  1618 ;;		Unchanged: 0/0
  1619 ;; Data sizes:     COMMON   BANK0
  1620 ;;      Params:         0       0
  1621 ;;      Locals:         0       1
  1622 ;;      Temps:          0       1
  1623 ;;      Totals:         0       2
  1624 ;;Total ram usage:        2 bytes
  1625 ;; Hardware stack levels used:    1
  1626 ;; Hardware stack levels required when called:    2
  1627 ;; This function calls:
  1628 ;;		Nothing
  1629 ;; This function is called by:
  1630 ;;		_sendDataToAltera
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           
  1635                           ;psect for function _myDelay
  1636  01EC                     _myDelay:	
  1637                           
  1638                           ;main.c: 212:     for(uint8_t j = 0; j < 5; j++) { };
  1639                           
  1640                           ;incstack = 0
  1641                           ; Regs used in _myDelay: [wreg+status,2+status,0]
  1642  01EC  1283               	bcf	3,5	;RP0=0, select bank0
  1643  01ED  0196               	clrf	myDelay@j
  1644  01EE                     L2:	
  1645  01EE  3005               	movlw	5
  1646  01EF  0216               	subwf	myDelay@j,w
  1647  01F0  1803               	btfsc	3,0
  1648  01F1  0008               	return
  1649  01F2  3001               	movlw	1
  1650  01F3  0095               	movwf	??_myDelay
  1651  01F4  0815               	movf	??_myDelay,w
  1652  01F5  0796               	addwf	myDelay@j,f
  1653  01F6  29EE               	goto	L2
  1654  01F7                     __end_of_myDelay:	
  1655                           
  1656                           	psect	text5
  1657  03C0                     __ptext5:	
  1658 ;; *************** function _calculateBitsFromTable *****************
  1659 ;; Defined at:
  1660 ;;		line 316 in file "main.c"
  1661 ;; Parameters:    Size  Location     Type
  1662 ;;  bits            1    wreg     PTR unsigned char 
  1663 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1664 ;;  table           1    9[BANK0 ] PTR unsigned char 
  1665 ;;		 -> kempstonMouseKeys(6), importantKeys(6), 
  1666 ;;  count           1   10[BANK0 ] unsigned char 
  1667 ;;  clearIfFound    1   11[BANK0 ] unsigned char 
  1668 ;; Auto vars:     Size  Location     Type
  1669 ;;  bits            1   14[BANK0 ] PTR unsigned char 
  1670 ;;		 -> kempstonMouseEmulatorKeys(1), shift_ctrl_alt(1), 
  1671 ;;  i               1   15[BANK0 ] unsigned char 
  1672 ;; Return value:  Size  Location     Type
  1673 ;;                  1    wreg      void 
  1674 ;; Registers used:
  1675 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1676 ;; Tracked objects:
  1677 ;;		On entry : 0/0
  1678 ;;		On exit  : 0/0
  1679 ;;		Unchanged: 0/0
  1680 ;; Data sizes:     COMMON   BANK0
  1681 ;;      Params:         0       3
  1682 ;;      Locals:         0       2
  1683 ;;      Temps:          0       2
  1684 ;;      Totals:         0       7
  1685 ;;Total ram usage:        7 bytes
  1686 ;; Hardware stack levels used:    2
  1687 ;; Hardware stack levels required when called:    2
  1688 ;; This function calls:
  1689 ;;		Nothing
  1690 ;; This function is called by:
  1691 ;;		_main
  1692 ;; This function uses a non-reentrant model
  1693 ;;
  1694                           
  1695                           
  1696                           ;psect for function _calculateBitsFromTable
  1697  03C0                     _calculateBitsFromTable:	
  1698                           
  1699                           ;incstack = 0
  1700                           ; Regs used in _calculateBitsFromTable: [wreg-fsr0h+status,2+status,0+pclath]
  1701                           ;calculateBitsFromTable@bits stored from wreg
  1702  03C0  1283               	bcf	3,5	;RP0=0, select bank0
  1703  03C1  009A               	movwf	calculateBitsFromTable@bits
  1704                           
  1705                           ;main.c: 316: void calculateBitsFromTable(uint8_t* bits, uint8_t table[], uint8_t count,
      +                           uint8_t clearIfFound);main.c: 317: {;main.c: 318:     for(uint8_t i = 0; i < count;i++)
      +                           {
  1706  03C2  019B               	clrf	calculateBitsFromTable@i
  1707  03C3                     l1193:	
  1708  03C3  0816               	movf	calculateBitsFromTable@count,w
  1709  03C4  021B               	subwf	calculateBitsFromTable@i,w
  1710  03C5  1803               	btfsc	3,0
  1711  03C6  0008               	return
  1712                           
  1713                           ;main.c: 319:         if ( ps2Data == table[i] ) {
  1714  03C7  081B               	movf	calculateBitsFromTable@i,w
  1715  03C8  0715               	addwf	calculateBitsFromTable@table,w
  1716  03C9  0084               	movwf	4
  1717  03CA  2200               	fcall	stringdir
  1718  03CB  0631               	xorwf	_ps2Data,w
  1719  03CC  1D03               	skipz
  1720  03CD  2BF8               	goto	l1191
  1721                           
  1722                           ;main.c: 320:             if ( ps2Down ) {
  1723  03CE  0842               	movf	_ps2Down,w
  1724  03CF  1903               	btfsc	3,2
  1725  03D0  2BE2               	goto	l1185
  1726                           
  1727                           ;main.c: 321:                 (*bits) |= (1 << i);
  1728  03D1  3001               	movlw	1
  1729  03D2  0098               	movwf	??_calculateBitsFromTable
  1730  03D3  0A1B               	incf	calculateBitsFromTable@i,w
  1731  03D4  2BD7               	goto	u1014
  1732  03D5                     u1015:	
  1733  03D5  1003               	clrc
  1734  03D6  0D98               	rlf	??_calculateBitsFromTable,f
  1735  03D7                     u1014:	
  1736  03D7  3EFF               	addlw	-1
  1737  03D8  1D03               	skipz
  1738  03D9  2BD5               	goto	u1015
  1739  03DA  0818               	movf	??_calculateBitsFromTable,w
  1740  03DB  0099               	movwf	??_calculateBitsFromTable+1
  1741  03DC  081A               	movf	calculateBitsFromTable@bits,w
  1742  03DD  0084               	movwf	4
  1743  03DE  0819               	movf	??_calculateBitsFromTable+1,w
  1744  03DF  1383               	bcf	3,7	;select IRP bank0
  1745  03E0  0480               	iorwf	0,f
  1746                           
  1747                           ;main.c: 322:             } else {
  1748  03E1  2BF3               	goto	l1187
  1749  03E2                     l1185:	
  1750                           
  1751                           ;main.c: 323:                 (*bits) &= ~(1 << i);
  1752  03E2  3001               	movlw	1
  1753  03E3  0098               	movwf	??_calculateBitsFromTable
  1754  03E4  0A1B               	incf	calculateBitsFromTable@i,w
  1755  03E5  2BE8               	goto	u1024
  1756  03E6                     u1025:	
  1757  03E6  1003               	clrc
  1758  03E7  0D98               	rlf	??_calculateBitsFromTable,f
  1759  03E8                     u1024:	
  1760  03E8  3EFF               	addlw	-1
  1761  03E9  1D03               	skipz
  1762  03EA  2BE6               	goto	u1025
  1763  03EB  0818               	movf	??_calculateBitsFromTable,w
  1764  03EC  3AFF               	xorlw	255
  1765  03ED  0099               	movwf	??_calculateBitsFromTable+1
  1766  03EE  081A               	movf	calculateBitsFromTable@bits,w
  1767  03EF  0084               	movwf	4
  1768  03F0  0819               	movf	??_calculateBitsFromTable+1,w
  1769  03F1  1383               	bcf	3,7	;select IRP bank0
  1770  03F2  0580               	andwf	0,f
  1771  03F3                     l1187:	
  1772                           ;main.c: 324:             }
  1773                           
  1774                           
  1775                           ;main.c: 325:             if ( clearIfFound ) {
  1776  03F3  0817               	movf	calculateBitsFromTable@clearIfFound,w
  1777  03F4  1903               	btfsc	3,2
  1778  03F5  0008               	return
  1779                           
  1780                           ;main.c: 326:                 ps2Data = 0;
  1781  03F6  01B1               	clrf	_ps2Data
  1782                           
  1783                           ;main.c: 328:             break;
  1784                           
  1785                           ;main.c: 327:             }
  1786  03F7  0008               	return
  1787  03F8                     l1191:	
  1788                           ;main.c: 329:         }
  1789                           
  1790                           
  1791                           ;main.c: 330:     }
  1792  03F8  3001               	movlw	1
  1793  03F9  0098               	movwf	??_calculateBitsFromTable
  1794  03FA  0818               	movf	??_calculateBitsFromTable,w
  1795  03FB  079B               	addwf	calculateBitsFromTable@i,f
  1796  03FC  2BC3               	goto	l1193
  1797  03FD                     __end_of_calculateBitsFromTable:	
  1798                           
  1799                           	psect	text6
  1800  02E0                     __ptext6:	
  1801 ;; *************** function _myIsr *****************
  1802 ;; Defined at:
  1803 ;;		line 115 in file "main.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;		None
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  i               1    8[BANK0 ] char 
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMMON   BANK0
  1817 ;;      Params:         0       0
  1818 ;;      Locals:         0       3
  1819 ;;      Temps:          0       6
  1820 ;;      Totals:         0       9
  1821 ;;Total ram usage:        9 bytes
  1822 ;; Hardware stack levels used:    2
  1823 ;; This function calls:
  1824 ;;		Nothing
  1825 ;; This function is called by:
  1826 ;;		Interrupt level 1
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           
  1831                           ;psect for function _myIsr
  1832  02E0                     _myIsr:	
  1833                           
  1834                           ;main.c: 117:     if(T0IE && T0IF){
  1835  02E0  1A8B               	btfsc	11,5	;volatile
  1836  02E1  1D0B               	btfss	11,2	;volatile
  1837  02E2  2B60               	goto	i1l111
  1838                           
  1839                           ;main.c: 119:         T0IF=0;
  1840  02E3  110B               	bcf	11,2	;volatile
  1841                           
  1842                           ;main.c: 120:         TMR0 = 255;
  1843  02E4  30FF               	movlw	255
  1844  02E5  0081               	movwf	1	;volatile
  1845                           
  1846                           ;main.c: 124:         if ( ps2DataState == 0 ) {
  1847  02E6  0834               	movf	_ps2DataState,w
  1848  02E7  1D03               	btfss	3,2
  1849  02E8  2AF5               	goto	i1l1215
  1850                           
  1851                           ;main.c: 125:             if ( !PORTAbits.RA4 && !PORTAbits.RA3 ) {
  1852  02E9  1E05               	btfss	5,4	;volatile
  1853  02EA  1985               	btfsc	5,3	;volatile
  1854  02EB  2B60               	goto	i1l111
  1855                           
  1856                           ;main.c: 126:                 ps2BitsCount = 0;
  1857  02EC  01B2               	clrf	_ps2BitsCount
  1858                           
  1859                           ;main.c: 127:                 ps2Bits = 0;
  1860  02ED  01B3               	clrf	_ps2Bits
  1861                           
  1862                           ;main.c: 128:                 ps2DataState = 1;
  1863  02EE  01B4               	clrf	_ps2DataState
  1864  02EF  0AB4               	incf	_ps2DataState,f
  1865                           
  1866                           ;main.c: 129:                 ps2Device = PORTAbits.RA0;
  1867  02F0  3000               	movlw	0
  1868  02F1  1805               	btfsc	5,0	;volatile
  1869  02F2  3001               	movlw	1
  1870  02F3  00B0               	movwf	_ps2Device
  1871                           
  1872                           ;main.c: 131:         } else if ( ps2DataState == 1 ) {
  1873                           
  1874                           ;main.c: 130:             }
  1875  02F4  2B60               	goto	i1l111
  1876  02F5                     i1l1215:	
  1877  02F5  0334               	decf	_ps2DataState,w
  1878  02F6  1D03               	btfss	3,2
  1879  02F7  2B5C               	goto	i1l1263
  1880                           
  1881                           ;main.c: 132:             if ( ps2BitsCount < 8 ) {
  1882  02F8  0832               	movf	_ps2BitsCount,w
  1883  02F9  3A80               	xorlw	128
  1884  02FA  3E78               	addlw	-136
  1885  02FB  1803               	skipnc
  1886  02FC  2B0D               	goto	i1l1223
  1887                           
  1888                           ;main.c: 133:                 if ( PORTAbits.RA3 ) {
  1889  02FD  1D85               	btfss	5,3	;volatile
  1890  02FE  2B11               	goto	i1l1225
  1891                           
  1892                           ;main.c: 134:                     ps2Bits |= ( 1 << ps2BitsCount );
  1893  02FF  3001               	movlw	1
  1894  0300  008C               	movwf	??_myIsr
  1895  0301  0A32               	incf	_ps2BitsCount,w
  1896  0302  2B05               	goto	u113_24
  1897  0303                     u113_25:	
  1898  0303  1003               	clrc
  1899  0304  0D8C               	rlf	??_myIsr,f
  1900  0305                     u113_24:	
  1901  0305  3EFF               	addlw	-1
  1902  0306  1D03               	skipz
  1903  0307  2B03               	goto	u113_25
  1904  0308  080C               	movf	??_myIsr,w
  1905  0309  008D               	movwf	??_myIsr+1
  1906  030A  080D               	movf	??_myIsr+1,w
  1907  030B  04B3               	iorwf	_ps2Bits,f
  1908                           
  1909                           ;main.c: 135:                 }
  1910  030C  2B11               	goto	i1l1225
  1911  030D                     i1l1223:	
  1912                           ;main.c: 137:             } else if ( ps2BitsCount == 8 ) {
  1913                           
  1914                           ;main.c: 136:                 ps2BitsCount++;
  1915                           
  1916  030D  3008               	movlw	8
  1917  030E  0632               	xorwf	_ps2BitsCount,w
  1918  030F  1D03               	btfss	3,2
  1919  0310  2B16               	goto	i1l1227
  1920  0311                     i1l1225:	
  1921                           
  1922                           ;main.c: 138:                 ps2BitsCount++;
  1923  0311  3001               	movlw	1
  1924  0312  008C               	movwf	??_myIsr
  1925  0313  080C               	movf	??_myIsr,w
  1926  0314  07B2               	addwf	_ps2BitsCount,f
  1927                           
  1928                           ;main.c: 139:             } else if ( ps2BitsCount == 9 ) {
  1929  0315  2B60               	goto	i1l111
  1930  0316                     i1l1227:	
  1931  0316  3009               	movlw	9
  1932  0317  0632               	xorwf	_ps2BitsCount,w
  1933  0318  1D03               	btfss	3,2
  1934  0319  2B60               	goto	i1l111
  1935                           
  1936                           ;main.c: 141:                 if ( ps2NeedEncode ) {
  1937  031A  082E               	movf	_ps2NeedEncode,w
  1938  031B  1903               	btfsc	3,2
  1939  031C  2B35               	goto	i1l1245
  1940                           
  1941                           ;main.c: 142:                     for (int8_t i=0; i < 27; i+=2) {
  1942  031D  0194               	clrf	myIsr@i
  1943  031E                     L5:	
  1944  031E  0814               	movf	myIsr@i,w
  1945  031F  3A80               	xorlw	128
  1946  0320  3E65               	addlw	-155
  1947  0321  1803               	btfsc	3,0
  1948  0322  2B48               	goto	i1l1251
  1949                           
  1950                           ;main.c: 143:                         if ( ps2Bits == replaceTwoBytesCodes[i] ) {
  1951  0323  0814               	movf	myIsr@i,w
  1952  0324  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1953  0325  0084               	movwf	4
  1954  0326  2200               	fcall	stringdir
  1955  0327  0633               	xorwf	_ps2Bits,w
  1956  0328  1D03               	skipz
  1957  0329  2B30               	goto	i1l1241
  1958                           
  1959                           ;main.c: 144:                             ps2Data = replaceTwoBytesCodes[i+1];
  1960  032A  0814               	movf	myIsr@i,w
  1961  032B  3E01               	addlw	1
  1962  032C  3EAB               	addlw	low ((_replaceTwoBytesCodes-__stringbase)| (0+32768))
  1963  032D  0084               	movwf	4
  1964  032E  2200               	fcall	stringdir
  1965  032F  2B45               	goto	L3
  1966  0330                     i1l1241:	
  1967                           ;main.c: 146:                         }
  1968                           
  1969                           ;main.c: 145:                             break;
  1970                           
  1971                           
  1972                           ;main.c: 147:                     }
  1973  0330  3002               	movlw	2
  1974  0331  008C               	movwf	??_myIsr
  1975  0332  080C               	movf	??_myIsr,w
  1976  0333  0794               	addwf	myIsr@i,f
  1977  0334  2B1E               	goto	L5
  1978  0335                     i1l1245:	
  1979                           ;main.c: 148:                 } else {
  1980                           
  1981                           
  1982                           ;main.c: 149:                     ps2Data = ( ps2Bits == 131 ) ? 63 : ps2Bits;
  1983  0335  3083               	movlw	131
  1984  0336  0633               	xorwf	_ps2Bits,w
  1985  0337  1903               	btfsc	3,2
  1986  0338  2B40               	goto	i1l1249
  1987  0339  0833               	movf	_ps2Bits,w
  1988  033A  008C               	movwf	??_myIsr
  1989  033B  018D               	clrf	??_myIsr+1
  1990  033C  080C               	movf	??_myIsr,w
  1991  033D  0092               	movwf	_myIsr$87
  1992  033E  080D               	movf	??_myIsr+1,w
  1993  033F  2B43               	goto	L4
  1994  0340                     i1l1249:	
  1995  0340  303F               	movlw	63
  1996  0341  0092               	movwf	_myIsr$87
  1997  0342  3000               	movlw	0
  1998  0343                     L4:	
  1999  0343  0093               	movwf	_myIsr$87+1
  2000  0344  0812               	movf	_myIsr$87,w
  2001  0345                     L3:	
  2002  0345  008C               	movwf	??_myIsr
  2003  0346  080C               	movf	??_myIsr,w
  2004  0347  00B1               	movwf	_ps2Data
  2005  0348                     i1l1251:	
  2006                           ;main.c: 150:                 }
  2007                           
  2008                           
  2009                           ;main.c: 151:                 if ( ps2Bits == 0xF0 ) {
  2010  0348  30F0               	movlw	240
  2011  0349  0633               	xorwf	_ps2Bits,w
  2012  034A  1D03               	btfss	3,2
  2013  034B  2B4F               	goto	i1l1255
  2014                           
  2015                           ;main.c: 152:                     ps2DataState = 0;
  2016  034C  01B4               	clrf	_ps2DataState
  2017                           
  2018                           ;main.c: 153:                     ps2Down = 0;
  2019  034D  01C2               	clrf	_ps2Down
  2020                           
  2021                           ;main.c: 154:                 } else if ( ps2Bits == 0xE0 ) {
  2022  034E  2B60               	goto	i1l111
  2023  034F                     i1l1255:	
  2024  034F  30E0               	movlw	224
  2025  0350  0633               	xorwf	_ps2Bits,w
  2026  0351  1D03               	btfss	3,2
  2027  0352  2B57               	goto	i1l1261
  2028                           
  2029                           ;main.c: 155:                     ps2DataState = 0;
  2030  0353  01B4               	clrf	_ps2DataState
  2031                           
  2032                           ;main.c: 156:                     ps2NeedEncode = 1;
  2033  0354  01AE               	clrf	_ps2NeedEncode
  2034  0355  0AAE               	incf	_ps2NeedEncode,f
  2035                           
  2036                           ;main.c: 165:                 } else {
  2037  0356  2B60               	goto	i1l111
  2038  0357                     i1l1261:	
  2039                           
  2040                           ;main.c: 166:                     ps2DataState = 2;
  2041  0357  3002               	movlw	2
  2042  0358  008C               	movwf	??_myIsr
  2043  0359  080C               	movf	??_myIsr,w
  2044  035A  00B4               	movwf	_ps2DataState
  2045                           
  2046                           ;main.c: 170:         } else if ( ps2DataState == 4 ) {
  2047                           
  2048                           ;main.c: 169:             }
  2049                           
  2050                           ;main.c: 167:                 }
  2051  035B  2B60               	goto	i1l111
  2052  035C                     i1l1263:	
  2053  035C  3004               	movlw	4
  2054  035D  0634               	xorwf	_ps2DataState,w
  2055  035E  1903               	btfsc	3,2
  2056                           
  2057                           ;main.c: 172:             ps2DataState = 0;
  2058  035F  01B4               	clrf	_ps2DataState
  2059  0360                     i1l111:	
  2060                           ;main.c: 176:     }
  2061                           
  2062                           ;main.c: 174:     } else {
  2063                           
  2064                           ;main.c: 173:         }
  2065                           
  2066                           
  2067                           ;main.c: 177:     GIE = 1;
  2068  0360  178B               	bsf	11,7	;volatile
  2069  0361  0811               	movf	??_myIsr+5,w
  2070  0362  00CF               	movwf	79
  2071  0363  0810               	movf	??_myIsr+4,w
  2072  0364  008A               	movwf	10
  2073  0365  080F               	movf	??_myIsr+3,w
  2074  0366  0084               	movwf	4
  2075  0367  0E0E               	swapf	(??_myIsr+2)^0,w
  2076  0368  0083               	movwf	3
  2077  0369  0ECE               	swapf	78,f
  2078  036A  0E4E               	swapf	78,w
  2079  036B  0009               	retfie
  2080  036C                     __end_of_myIsr:	
  2081  004E                     btemp	set	78	;btemp
  2082  004E                     wtemp0	set	78
  2083                           
  2084                           	psect	intentry
  2085  0004                     __pintentry:	
  2086                           ;incstack = 0
  2087                           ; Regs used in _myIsr: [wreg-fsr0h+status,2+status,0+pclath]
  2088                           
  2089  0004                     interrupt_function:	
  2090  004E                     saved_w	set	btemp
  2091  0004  00CE               	movwf	btemp
  2092  0005  0E03               	swapf	3,w
  2093  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2094  0007  008E               	movwf	??_myIsr+2
  2095  0008  0804               	movf	4,w
  2096  0009  008F               	movwf	??_myIsr+3
  2097  000A  080A               	movf	10,w
  2098  000B  0090               	movwf	??_myIsr+4
  2099  000C  084F               	movf	btemp+1,w
  2100  000D  0091               	movwf	??_myIsr+5
  2101  000E  2AE0               	ljmp	_myIsr


Data Sizes:
    Strings     0
    Constant    218
    Data        11
    BSS         16
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            66     27      55

Pointer List with Targets:

    calculateBitsFromTable@bits	PTR unsigned char  size(1) Largest target is 1
		 -> kempstonMouseEmulatorKeys(BANK0[1]), shift_ctrl_alt(BANK0[1]), 

    calculateBitsFromTable@table	PTR unsigned char  size(1) Largest target is 6
		 -> kempstonMouseKeys(CODE[6]), importantKeys(CODE[6]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_updateKey
    _updateKey->_updatePort
    _sendDataToAltera->_myDelay

Critical Paths under _myIsr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0    2338
                                             22 BANK0      5     5      0
             _calculateBitsFromTable
                   _sendDataToAltera
                          _updateKey
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updateKey                                            7     6      1     839
                                             15 BANK0      7     6      1
                         _updatePort
 ---------------------------------------------------------------------------------
 (1) _updatePort                                           6     5      1     437
                                              9 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (1) _sendDataToAltera                                     5     5      0     182
                                             11 BANK0      5     5      0
                            _myDelay
 ---------------------------------------------------------------------------------
 (2) _myDelay                                              2     2      0      46
                                              9 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _calculateBitsFromTable                               7     4      3     722
                                              9 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _myIsr                                                9     9      0     114
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _calculateBitsFromTable
   _sendDataToAltera
     _myDelay
   _updateKey
     _updatePort
   _updatePort

 _myIsr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               42     1B      37       3       83.3%
BITBANK0            42      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      37       6        0.0%
ABS                  0      0      37       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              40      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Tue Oct 30 16:29:25 2018

                                 pc 0002                                  fsr 0004  
          ??_calculateBitsFromTable 0018                                 l133 017F  
                               l157 0093                                 l190 0167  
                               l159 00A4                                 l178 016C  
                               _GIE 005F                                 _RA1 0029  
                               _RA2 002A                                 u805 01B8  
                               u814 01C3                                 u910 03A3  
                               u815 01C1                                 _PSA 040B  
                               u920 03A4                                 u930 03AB  
                               u940 03AC                                 u870 0386  
                               u880 0387                                 fsr0 0004  
                               indf 0000                                l1135 03AF  
                              l1127 0395                                l1119 037C  
                              l1411 015C                                l1403 0150  
                              l1331 00BD                                l1323 00AB  
                              l1157 0190                                l1317 00A5  
                              l1309 0094                                l1191 03F8  
                              l1175 01AE                                l1415 0160  
                              l1407 0156                                l1335 00C5  
                              l1343 00D4                                l1185 03E2  
                              l1193 03C3                                l1361 00FE  
                              l1353 00E3                                l1337 00C6  
                              l1329 00B9                                l1187 03F3  
                              l1099 01D7                                l1419 0168  
                              l1363 0100                                l1339 00CF  
                              l1347 00DD                                l1367 0109  
                              l1289 004F                                l1387 012B  
                              l1395 013B                                l1299 007F  
                              l1379 0118                                _T0IE 005D  
                              _T0IF 005A                                _T0CS 040D  
                              u1014 03D7                                u1015 03D5  
                              u1024 03E8                                u1025 03E6  
                              _T0SE 040C                                u1270 007B  
                              u1280 007C                                _TMR0 0001  
                              _main 002D                                btemp 004E  
                              start 000F                               ?_main 000C  
      __end_of_replaceTwoBytesCodes 02CC                               i1l111 0360  
                             _PORTA 0005                               _PORTB 0006  
              __end_of_codeToMatrix 0286                               _TRISB 0086  
                             _delay 0029                     __end_of_myDelay 01F7  
                             _myIsr 02E0                               main@i 0026  
                  updatePort@bit_id 001A                               pclath 000A  
                             status 0003                        updateKey@key 0020  
                      updateKey@set 001B                               wtemp0 004E  
                   __initialization 0010                        __end_of_main 016E  
                            ??_main 0022     __size_of_calculateBitsFromTable 003D  
                 sendDataToAltera@i 001B                              ?_myIsr 000C  
                            i1l1223 030D                              i1l1215 02F5  
                            i1l1241 0330                              i1l1225 0311  
                            i1l1251 0348                              i1l1227 0316  
                            i1l1261 0357                              i1l1245 0335  
                            i1l1255 034F                              i1l1263 035C  
                            i1l1249 0340                              u113_24 0305  
                            u113_25 0303                              _TRISA0 0428  
                            _TRISA1 0429                              _TRISA2 042A  
                            _TRISA3 042B                              _TRISA4 042C  
          __end_of_sendDataToAltera 01B1               _replaceOnDelayKeyDown 02CC  
                         ??_myDelay 0015                              myIsr@i 0014  
                            saved_w 004E                       updateKey@code 0021  
           __end_of__initialization 002B              _calculateBitsFromTable 03C0  
              _replaceTwoBytesCodes 02B0                       updatePort@set 0015  
                      __pidataBANK0 01E1                       __end_of_myIsr 036C  
               updateKey@localShift 001D                             ??_myIsr 000C  
                      _ps2DataState 0034                          __pbssBANK0 0027  
                      _ps2BitsCount 0032                        _codeToMatrix 0206  
                        _delayedKey 002B                _sendDataToAltera$105 0019  
                        __pmaintext 002D                          __pintentry 0004  
        calculateBitsFromTable@bits 001A                  __size_of_updateKey 0054  
                        __stringtab 0200          _kempstonMouseEmulatorDelay 0027  
     __end_of_replaceOnShiftKeyDown 02B0                             _ps2Data 0031  
                           _ps2Bits 0033                             _ps2Down 0042  
                           __ptext1 036C                             __ptext2 01B1  
                           __ptext3 016E                             __ptext4 01EC  
                           __ptext5 03C0                             __ptext6 02E0  
                           _myDelay 01EC  calculateBitsFromTable@clearIfFound 0017  
                           _numLock 002D                             clrloop0 01F8  
              end_of_initialization 002B                       _importantKeys 02D4  
                    _shift_ctrl_alt 0036                   ?_sendDataToAltera 000C  
                 __end_of_updateKey 03C0                  ??_sendDataToAltera 0017  
                 _kempstonMouseKeys 02DA                           _PORTAbits 0005  
                        _updatePort 01B1             ?_calculateBitsFromTable 0015  
         __end_of_kempstonMouseKeys 02E0                 start_initialization 0010  
                       updatePort@a 0019      __end_of_calculateBitsFromTable 03FD  
           calculateBitsFromTable@i 001B                         __pdataBANK0 0037  
                         ___latbits 0000                       __pcstackBANK0 000C  
                       ?_updatePort 0015                  updateKey@localCtrl 001F  
                         __pnvBANK0 0042                           _ps2Device 0030  
                         __pstrings 0200                       _ps2NeedEncode 002E  
                          ?_myDelay 000C                         _ps2WaitCode 002F  
       calculateBitsFromTable@count 0016                      __size_of_myIsr 008C  
       calculateBitsFromTable@table 0015                   interrupt_function 0004  
                         clear_ram0 01F7                 __size_of_updatePort 0030  
             _replaceOnShiftKeyDown 0286                           _updateKey 036C  
                       __stringbase 0205                           main@i_120 0025  
         __size_of_sendDataToAltera 0043                          ?_updateKey 001B  
                __end_of__stringtab 0206                    __size_of_myDelay 000B  
                          _myIsr$87 0012                       __size_of_main 0141  
     __end_of_replaceOnDelayKeyDown 02D4                            _replaced 002C  
                          _outPorts 0037                            myDelay@j 0016  
                      ??_updatePort 0016           _kempstonMouseEmulatorKeys 0035  
                          intlevel1 0000                           stringcode 0200  
                __end_of_updatePort 01E1                         ??_updateKey 001C  
                  _sendDataToAltera 016E                            stringdir 0200  
                          stringtab 0200               __end_of_importantKeys 02DA  
                      _updateKey$97 001E  
